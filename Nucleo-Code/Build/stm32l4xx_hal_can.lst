ARM GAS  /tmp/ccgJ85Jg.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32l4xx_hal_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c"
  20              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  21              		.align	1
  22              		.weak	HAL_CAN_MspInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_CAN_MspInit:
  28              	.LVL0:
  29              	.LFB290:
   1:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
   2:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
   3:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @file    stm32l4xx_hal_can.c
   4:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @author  MCD Application Team
   5:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Configuration functions
  10:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Control functions
  11:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Interrupts management
  12:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Callbacks functions
  13:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  15:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
  16:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @attention
  17:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  18:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * Copyright (c) 2017 STMicroelectronics.
  19:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * All rights reserved.
  20:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  21:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * This software is licensed under terms that can be found in the LICENSE file
  22:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * in the root directory of this software component.
  23:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  24:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  25:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
  26:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @verbatim
  27:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
  28:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         ##### How to use this driver #####
  29:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
ARM GAS  /tmp/ccgJ85Jg.s 			page 2


  30:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  31:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  32:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_MspInit():
  33:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  34:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) Configure CAN pins
  35:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  36:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function
  37:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  38:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  39:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  40:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  41:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  42:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  43:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  44:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  45:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  46:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  47:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           functions:
  48:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  49:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  50:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  51:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  52:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           messages.
  53:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  54:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  55:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           can be used:
  56:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  57:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  message.
  58:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  59:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  message.
  60:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  61:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  mailboxes.
  62:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  63:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  in a Tx mailbox.
  64:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  65:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  66:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  67:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  68:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  69:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  70:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           stored in the Rx Fifo.
  71:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  72:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  73:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  74:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  75:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  76:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  77:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Polling mode operation ***
  78:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ==============================
  79:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  80:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Reception:
  81:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  82:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  until at least one message is received.
  83:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  84:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  85:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Transmission:
  86:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
ARM GAS  /tmp/ccgJ85Jg.s 			page 3


  87:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  88:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Then request transmission of a message using
  89:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  90:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  91:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  92:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Interrupt mode operation ***
  93:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ================================
  94:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  95:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  96:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           function. Then, the process can be controlled through the
  97:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  98:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  99:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 100:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Notifications can be deactivated using
 101:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
 102:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 103:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
 104:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
 105:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
 106:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
 107:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           here.
 108:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
 109:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
 110:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 111:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 112:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 113:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  read, the notification can be activated again.
 114:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 115:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 116:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Sleep mode ***
 117:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ==================
 118:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
 119:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 120:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 121:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 122:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           be completed.
 123:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 125:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           will be entered.
 126:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 127:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 128:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 129:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 130:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 131:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 132:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 133:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 134:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The wake-up from sleep mode can be triggered by two ways:
 135:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 136:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 137:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 138:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 139:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 140:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *** Callback registration ***
 141:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   =============================================
 142:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 143:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
ARM GAS  /tmp/ccgJ85Jg.s 			page 4


 144:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 145:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Use Function HAL_CAN_RegisterCallback() to register an interrupt callback.
 146:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 147:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Function HAL_CAN_RegisterCallback() allows to register following callbacks:
 148:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 149:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 150:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 151:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 152:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 153:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 154:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 155:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 156:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 157:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 158:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 159:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 160:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 161:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 162:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 163:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 164:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   and a pointer to the user callback function.
 165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 166:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Use function HAL_CAN_UnRegisterCallback() to reset a callback to the default
 167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   weak function.
 168:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 169:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   and the Callback ID.
 170:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   This function allows to reset following callbacks:
 171:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 172:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 173:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 174:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 175:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 176:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 177:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 178:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 179:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 180:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 181:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 182:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 183:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 184:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 185:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 186:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 187:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   By default, after the HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 188:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 189:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   example HAL_CAN_ErrorCallback().
 190:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 191:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   reset to the legacy weak function in the HAL_CAN_Init()/ HAL_CAN_DeInit() only when
 192:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 193:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the HAL_CAN_Init()/ HAL_CAN_DeInit()
 194:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 195:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 196:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 197:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 198:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 199:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 200:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
ARM GAS  /tmp/ccgJ85Jg.s 			page 5


 201:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   using HAL_CAN_RegisterCallback() before calling HAL_CAN_DeInit()
 202:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   or HAL_CAN_Init() function.
 203:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 204:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 205:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 206:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   are set to the corresponding weak functions.
 207:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 208:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @endverbatim
 209:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
 210:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 211:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 212:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #include "stm32l4xx_hal.h"
 214:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 215:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @addtogroup STM32L4xx_HAL_Driver
 216:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 217:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 218:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 219:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if defined(CAN1)
 220:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 221:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN CAN
 222:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief CAN driver modules
 223:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 224:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 225:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 226:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 228:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* HAL_CAN_LEGACY_MODULE_ENABLED */
 231:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 232:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 236:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 237:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #define CAN_WAKEUP_TIMEOUT_COUNTER 1000000U
 239:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 240:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 241:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 242:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 243:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 244:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 245:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 246:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 247:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 248:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 249:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 250:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 251:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 252:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief    Initialization and Configuration functions
 253:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
 254:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 255:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 256:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 257:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
ARM GAS  /tmp/ccgJ85Jg.s 			page 6


 258:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 259:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 261:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 262:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 263:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 264:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 266:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 267:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 268:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 269:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 270:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 271:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 272:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 273:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 274:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 275:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 277:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
 278:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 279:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 280:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan == NULL)
 281:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 282:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 283:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 284:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 285:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
 286:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 287:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 288:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 289:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 290:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 291:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 292:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 293:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 294:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 295:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 296:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 297:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 298:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 299:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 300:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 301:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 302:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 303:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 304:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 305:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 306:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 307:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 308:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 309:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 310:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 311:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 312:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 313:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 314:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
ARM GAS  /tmp/ccgJ85Jg.s 			page 7


 315:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 316:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 317:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 318:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 319:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 320:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 321:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 322:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 323:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 324:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 325:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 326:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 328:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 329:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 330:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 331:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 332:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 333:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 334:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Request initialisation */
 335:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 336:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 337:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Get tick */
 338:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   tickstart = HAL_GetTick();
 339:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 340:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 342:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 344:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 345:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
 346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 347:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 348:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Change CAN state */
 349:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 350:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 351:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 352:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 353:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 355:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Exit from sleep mode */
 356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 357:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 358:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Get tick */
 359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   tickstart = HAL_GetTick();
 360:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 361:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 363:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 365:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 366:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 368:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Change CAN state */
 370:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 371:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 8


 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 373:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 374:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 375:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 376:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the time triggered communication mode */
 377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 378:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 379:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 381:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 382:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 383:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 384:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 385:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic bus-off management */
 387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 388:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 389:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 390:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 391:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 393:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 395:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 396:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 398:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 399:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 400:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 401:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 402:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 403:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 404:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 405:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 406:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic retransmission */
 407:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 408:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 409:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 410:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 411:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 412:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 413:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 414:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 415:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 417:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 418:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 419:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 420:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 421:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 422:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 423:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 424:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 425:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 426:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 427:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 428:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
ARM GAS  /tmp/ccgJ85Jg.s 			page 9


 429:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 430:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 431:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 432:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 433:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 434:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 435:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 436:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the bit timing register */
 437:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 438:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 439:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 440:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 441:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 442:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 443:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Initialize the error code */
 444:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 445:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 446:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Initialize the CAN state */
 447:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 448:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 449:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
 450:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return HAL_OK;
 451:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 452:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 453:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 454:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 455:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         reset values.
 456:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 457:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 458:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 459:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 460:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 461:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 463:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan == NULL)
 464:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 465:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 466:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 467:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 468:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
 469:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 470:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 471:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Stop the CAN module */
 472:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 473:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 474:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 475:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 476:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 477:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 478:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 479:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 480:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 481:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 482:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 483:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 484:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 485:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
ARM GAS  /tmp/ccgJ85Jg.s 			page 10


 486:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 487:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 488:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Reset the CAN peripheral */
 489:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 490:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 491:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 492:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 493:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 494:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Change CAN state */
 495:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 496:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 497:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
 498:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return HAL_OK;
 499:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 500:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 501:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 502:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 503:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 504:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 505:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 506:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 507:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 508:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
  30              		.loc 1 508 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 509:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 510:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
  35              		.loc 1 510 3 view .LVU1
 511:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 512:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 513:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 514:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
 515:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
  36              		.loc 1 515 1 is_stmt 0 view .LVU2
  37 0000 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE290:
  41              		.section	.text.HAL_CAN_Init,"ax",%progbits
  42              		.align	1
  43              		.global	HAL_CAN_Init
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  48              	HAL_CAN_Init:
  49              	.LVL1:
  50              	.LFB288:
 276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
  51              		.loc 1 276 1 is_stmt 1 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
 277:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  55              		.loc 1 277 3 view .LVU4
 280:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
ARM GAS  /tmp/ccgJ85Jg.s 			page 11


  56              		.loc 1 280 3 view .LVU5
 280:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  57              		.loc 1 280 6 is_stmt 0 view .LVU6
  58 0000 0028     		cmp	r0, #0
  59 0002 00F0A180 		beq	.L21
 276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
  60              		.loc 1 276 1 view .LVU7
  61 0006 38B5     		push	{r3, r4, r5, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 16
  64              		.cfi_offset 3, -16
  65              		.cfi_offset 4, -12
  66              		.cfi_offset 5, -8
  67              		.cfi_offset 14, -4
  68 0008 0446     		mov	r4, r0
 286:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
  69              		.loc 1 286 3 is_stmt 1 view .LVU8
 287:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
  70              		.loc 1 287 3 view .LVU9
 288:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
  71              		.loc 1 288 3 view .LVU10
 289:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
  72              		.loc 1 289 3 view .LVU11
 290:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
  73              		.loc 1 290 3 view .LVU12
 291:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
  74              		.loc 1 291 3 view .LVU13
 292:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
  75              		.loc 1 292 3 view .LVU14
 293:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  76              		.loc 1 293 3 view .LVU15
 294:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  77              		.loc 1 294 3 view .LVU16
 295:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  78              		.loc 1 295 3 view .LVU17
 296:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  79              		.loc 1 296 3 view .LVU18
 297:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  80              		.loc 1 297 3 view .LVU19
 327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  81              		.loc 1 327 3 view .LVU20
 327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  82              		.loc 1 327 11 is_stmt 0 view .LVU21
  83 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  84              		.loc 1 327 6 view .LVU22
  85 000e D3B1     		cbz	r3, .L26
  86              	.LVL2:
  87              	.L4:
 335:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  88              		.loc 1 335 3 is_stmt 1 view .LVU23
  89 0010 2268     		ldr	r2, [r4]
  90 0012 1368     		ldr	r3, [r2]
  91 0014 43F00103 		orr	r3, r3, #1
  92 0018 1360     		str	r3, [r2]
 338:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  93              		.loc 1 338 3 view .LVU24
ARM GAS  /tmp/ccgJ85Jg.s 			page 12


 338:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  94              		.loc 1 338 15 is_stmt 0 view .LVU25
  95 001a FFF7FEFF 		bl	HAL_GetTick
  96              	.LVL3:
  97 001e 0546     		mov	r5, r0
  98              	.LVL4:
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  99              		.loc 1 341 3 is_stmt 1 view .LVU26
 100              	.L5:
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 101              		.loc 1 341 47 view .LVU27
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 102              		.loc 1 341 15 is_stmt 0 view .LVU28
 103 0020 2368     		ldr	r3, [r4]
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 104              		.loc 1 341 25 view .LVU29
 105 0022 5A68     		ldr	r2, [r3, #4]
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 106              		.loc 1 341 47 view .LVU30
 107 0024 12F0010F 		tst	r2, #1
 108 0028 10D1     		bne	.L27
 343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 109              		.loc 1 343 5 is_stmt 1 view .LVU31
 343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 110              		.loc 1 343 10 is_stmt 0 view .LVU32
 111 002a FFF7FEFF 		bl	HAL_GetTick
 112              	.LVL5:
 343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 113              		.loc 1 343 24 view .LVU33
 114 002e 401B     		subs	r0, r0, r5
 343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 115              		.loc 1 343 8 view .LVU34
 116 0030 0A28     		cmp	r0, #10
 117 0032 F5D9     		bls	.L5
 346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 118              		.loc 1 346 7 is_stmt 1 view .LVU35
 346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 119              		.loc 1 346 11 is_stmt 0 view .LVU36
 120 0034 636A     		ldr	r3, [r4, #36]
 346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 121              		.loc 1 346 23 view .LVU37
 122 0036 43F40033 		orr	r3, r3, #131072
 123 003a 6362     		str	r3, [r4, #36]
 349:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 124              		.loc 1 349 7 is_stmt 1 view .LVU38
 349:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 125              		.loc 1 349 19 is_stmt 0 view .LVU39
 126 003c 0523     		movs	r3, #5
 127 003e 84F82030 		strb	r3, [r4, #32]
 351:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 128              		.loc 1 351 7 is_stmt 1 view .LVU40
 351:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 129              		.loc 1 351 14 is_stmt 0 view .LVU41
 130 0042 0120     		movs	r0, #1
 131              	.L3:
 451:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 132              		.loc 1 451 1 view .LVU42
ARM GAS  /tmp/ccgJ85Jg.s 			page 13


 133 0044 38BD     		pop	{r3, r4, r5, pc}
 134              	.LVL6:
 135              	.L26:
 330:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 136              		.loc 1 330 5 is_stmt 1 view .LVU43
 137 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 138              	.LVL7:
 330:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 139              		.loc 1 330 5 is_stmt 0 view .LVU44
 140 004a E1E7     		b	.L4
 141              	.LVL8:
 142              	.L27:
 356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 143              		.loc 1 356 3 is_stmt 1 view .LVU45
 144 004c 1A68     		ldr	r2, [r3]
 145 004e 22F00202 		bic	r2, r2, #2
 146 0052 1A60     		str	r2, [r3]
 359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 147              		.loc 1 359 3 view .LVU46
 359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 148              		.loc 1 359 15 is_stmt 0 view .LVU47
 149 0054 FFF7FEFF 		bl	HAL_GetTick
 150              	.LVL9:
 151 0058 0546     		mov	r5, r0
 152              	.LVL10:
 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 153              		.loc 1 362 3 is_stmt 1 view .LVU48
 154              	.L7:
 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 155              		.loc 1 362 47 view .LVU49
 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 156              		.loc 1 362 15 is_stmt 0 view .LVU50
 157 005a 2368     		ldr	r3, [r4]
 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 158              		.loc 1 362 25 view .LVU51
 159 005c 5A68     		ldr	r2, [r3, #4]
 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 160              		.loc 1 362 47 view .LVU52
 161 005e 12F0020F 		tst	r2, #2
 162 0062 0DD0     		beq	.L28
 364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 163              		.loc 1 364 5 is_stmt 1 view .LVU53
 364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 164              		.loc 1 364 10 is_stmt 0 view .LVU54
 165 0064 FFF7FEFF 		bl	HAL_GetTick
 166              	.LVL11:
 364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 167              		.loc 1 364 24 view .LVU55
 168 0068 401B     		subs	r0, r0, r5
 364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 169              		.loc 1 364 8 view .LVU56
 170 006a 0A28     		cmp	r0, #10
 171 006c F5D9     		bls	.L7
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 172              		.loc 1 367 7 is_stmt 1 view .LVU57
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 173              		.loc 1 367 11 is_stmt 0 view .LVU58
ARM GAS  /tmp/ccgJ85Jg.s 			page 14


 174 006e 636A     		ldr	r3, [r4, #36]
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 175              		.loc 1 367 23 view .LVU59
 176 0070 43F40033 		orr	r3, r3, #131072
 177 0074 6362     		str	r3, [r4, #36]
 370:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 178              		.loc 1 370 7 is_stmt 1 view .LVU60
 370:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 179              		.loc 1 370 19 is_stmt 0 view .LVU61
 180 0076 0523     		movs	r3, #5
 181 0078 84F82030 		strb	r3, [r4, #32]
 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 182              		.loc 1 372 7 is_stmt 1 view .LVU62
 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 183              		.loc 1 372 14 is_stmt 0 view .LVU63
 184 007c 0120     		movs	r0, #1
 185 007e E1E7     		b	.L3
 186              	.L28:
 377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 187              		.loc 1 377 3 is_stmt 1 view .LVU64
 377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 188              		.loc 1 377 17 is_stmt 0 view .LVU65
 189 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 190              		.loc 1 377 6 view .LVU66
 191 0082 012A     		cmp	r2, #1
 192 0084 3DD0     		beq	.L29
 383:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 193              		.loc 1 383 5 is_stmt 1 view .LVU67
 194 0086 1A68     		ldr	r2, [r3]
 195 0088 22F08002 		bic	r2, r2, #128
 196 008c 1A60     		str	r2, [r3]
 197              	.L10:
 387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 198              		.loc 1 387 3 view .LVU68
 387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 199              		.loc 1 387 17 is_stmt 0 view .LVU69
 200 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 201              		.loc 1 387 6 view .LVU70
 202 0090 012B     		cmp	r3, #1
 203 0092 3BD0     		beq	.L30
 393:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 204              		.loc 1 393 5 is_stmt 1 view .LVU71
 205 0094 2268     		ldr	r2, [r4]
 206 0096 1368     		ldr	r3, [r2]
 207 0098 23F04003 		bic	r3, r3, #64
 208 009c 1360     		str	r3, [r2]
 209              	.L12:
 397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 210              		.loc 1 397 3 view .LVU72
 397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 211              		.loc 1 397 17 is_stmt 0 view .LVU73
 212 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 213              		.loc 1 397 6 view .LVU74
 214 00a0 012B     		cmp	r3, #1
ARM GAS  /tmp/ccgJ85Jg.s 			page 15


 215 00a2 39D0     		beq	.L31
 403:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 216              		.loc 1 403 5 is_stmt 1 view .LVU75
 217 00a4 2268     		ldr	r2, [r4]
 218 00a6 1368     		ldr	r3, [r2]
 219 00a8 23F02003 		bic	r3, r3, #32
 220 00ac 1360     		str	r3, [r2]
 221              	.L14:
 407:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 222              		.loc 1 407 3 view .LVU76
 407:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 223              		.loc 1 407 17 is_stmt 0 view .LVU77
 224 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 407:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 225              		.loc 1 407 6 view .LVU78
 226 00b0 012B     		cmp	r3, #1
 227 00b2 37D0     		beq	.L32
 413:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 228              		.loc 1 413 5 is_stmt 1 view .LVU79
 229 00b4 2268     		ldr	r2, [r4]
 230 00b6 1368     		ldr	r3, [r2]
 231 00b8 43F01003 		orr	r3, r3, #16
 232 00bc 1360     		str	r3, [r2]
 233              	.L16:
 417:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 234              		.loc 1 417 3 view .LVU80
 417:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 235              		.loc 1 417 17 is_stmt 0 view .LVU81
 236 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 417:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 237              		.loc 1 417 6 view .LVU82
 238 00c0 012B     		cmp	r3, #1
 239 00c2 35D0     		beq	.L33
 423:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 240              		.loc 1 423 5 is_stmt 1 view .LVU83
 241 00c4 2268     		ldr	r2, [r4]
 242 00c6 1368     		ldr	r3, [r2]
 243 00c8 23F00803 		bic	r3, r3, #8
 244 00cc 1360     		str	r3, [r2]
 245              	.L18:
 427:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 246              		.loc 1 427 3 view .LVU84
 427:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 247              		.loc 1 427 17 is_stmt 0 view .LVU85
 248 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 427:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 249              		.loc 1 427 6 view .LVU86
 250 00d0 012B     		cmp	r3, #1
 251 00d2 33D0     		beq	.L34
 433:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 252              		.loc 1 433 5 is_stmt 1 view .LVU87
 253 00d4 2268     		ldr	r2, [r4]
 254 00d6 1368     		ldr	r3, [r2]
 255 00d8 23F00403 		bic	r3, r3, #4
 256 00dc 1360     		str	r3, [r2]
 257              	.L20:
 437:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
ARM GAS  /tmp/ccgJ85Jg.s 			page 16


 258              		.loc 1 437 3 view .LVU88
 259 00de A368     		ldr	r3, [r4, #8]
 260 00e0 E268     		ldr	r2, [r4, #12]
 261 00e2 1343     		orrs	r3, r3, r2
 262 00e4 2269     		ldr	r2, [r4, #16]
 263 00e6 1343     		orrs	r3, r3, r2
 264 00e8 6269     		ldr	r2, [r4, #20]
 265 00ea 1343     		orrs	r3, r3, r2
 266 00ec 6268     		ldr	r2, [r4, #4]
 267 00ee 013A     		subs	r2, r2, #1
 268 00f0 2168     		ldr	r1, [r4]
 269 00f2 1343     		orrs	r3, r3, r2
 270 00f4 CB61     		str	r3, [r1, #28]
 444:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 271              		.loc 1 444 3 view .LVU89
 444:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 272              		.loc 1 444 19 is_stmt 0 view .LVU90
 273 00f6 0020     		movs	r0, #0
 274 00f8 6062     		str	r0, [r4, #36]
 447:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 275              		.loc 1 447 3 is_stmt 1 view .LVU91
 447:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 276              		.loc 1 447 15 is_stmt 0 view .LVU92
 277 00fa 0123     		movs	r3, #1
 278 00fc 84F82030 		strb	r3, [r4, #32]
 450:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 279              		.loc 1 450 3 is_stmt 1 view .LVU93
 450:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 280              		.loc 1 450 10 is_stmt 0 view .LVU94
 281 0100 A0E7     		b	.L3
 282              	.L29:
 379:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 283              		.loc 1 379 5 is_stmt 1 view .LVU95
 284 0102 1A68     		ldr	r2, [r3]
 285 0104 42F08002 		orr	r2, r2, #128
 286 0108 1A60     		str	r2, [r3]
 287 010a C0E7     		b	.L10
 288              	.L30:
 389:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 289              		.loc 1 389 5 view .LVU96
 290 010c 2268     		ldr	r2, [r4]
 291 010e 1368     		ldr	r3, [r2]
 292 0110 43F04003 		orr	r3, r3, #64
 293 0114 1360     		str	r3, [r2]
 294 0116 C2E7     		b	.L12
 295              	.L31:
 399:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 296              		.loc 1 399 5 view .LVU97
 297 0118 2268     		ldr	r2, [r4]
 298 011a 1368     		ldr	r3, [r2]
 299 011c 43F02003 		orr	r3, r3, #32
 300 0120 1360     		str	r3, [r2]
 301 0122 C4E7     		b	.L14
 302              	.L32:
 409:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 303              		.loc 1 409 5 view .LVU98
 304 0124 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccgJ85Jg.s 			page 17


 305 0126 1368     		ldr	r3, [r2]
 306 0128 23F01003 		bic	r3, r3, #16
 307 012c 1360     		str	r3, [r2]
 308 012e C6E7     		b	.L16
 309              	.L33:
 419:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 310              		.loc 1 419 5 view .LVU99
 311 0130 2268     		ldr	r2, [r4]
 312 0132 1368     		ldr	r3, [r2]
 313 0134 43F00803 		orr	r3, r3, #8
 314 0138 1360     		str	r3, [r2]
 315 013a C8E7     		b	.L18
 316              	.L34:
 429:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 317              		.loc 1 429 5 view .LVU100
 318 013c 2268     		ldr	r2, [r4]
 319 013e 1368     		ldr	r3, [r2]
 320 0140 43F00403 		orr	r3, r3, #4
 321 0144 1360     		str	r3, [r2]
 322 0146 CAE7     		b	.L20
 323              	.LVL12:
 324              	.L21:
 325              	.LCFI1:
 326              		.cfi_def_cfa_offset 0
 327              		.cfi_restore 3
 328              		.cfi_restore 4
 329              		.cfi_restore 5
 330              		.cfi_restore 14
 282:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 331              		.loc 1 282 12 is_stmt 0 view .LVU101
 332 0148 0120     		movs	r0, #1
 333              	.LVL13:
 451:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 334              		.loc 1 451 1 view .LVU102
 335 014a 7047     		bx	lr
 336              		.cfi_endproc
 337              	.LFE288:
 339              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 340              		.align	1
 341              		.weak	HAL_CAN_MspDeInit
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	HAL_CAN_MspDeInit:
 347              	.LVL14:
 348              	.LFB291:
 516:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 517:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 518:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 519:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 520:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 521:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 522:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 523:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 524:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 349              		.loc 1 524 1 is_stmt 1 view -0
 350              		.cfi_startproc
ARM GAS  /tmp/ccgJ85Jg.s 			page 18


 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 525:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 526:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 354              		.loc 1 526 3 view .LVU104
 527:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 528:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 529:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 530:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
 531:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 355              		.loc 1 531 1 is_stmt 0 view .LVU105
 356 0000 7047     		bx	lr
 357              		.cfi_endproc
 358              	.LFE291:
 360              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 361              		.align	1
 362              		.global	HAL_CAN_ConfigFilter
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 367              	HAL_CAN_ConfigFilter:
 368              	.LVL15:
 369              	.LFB292:
 532:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 533:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 534:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 535:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 536:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 537:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 538:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for CAN module
 539:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 540:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one of the following values:
 541:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 542:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 543:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 544:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 545:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 546:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 547:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 548:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 549:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 550:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 551:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 552:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 553:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 554:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 555:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 556:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 557:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 558:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 559:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 560:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                            void (* pCallback)(CAN_HandleTypeDef *_hcan))
 561:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 562:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 563:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 564:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (pCallback == NULL)
ARM GAS  /tmp/ccgJ85Jg.s 			page 19


 565:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 566:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 567:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 568:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 569:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 570:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 571:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 572:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 573:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 574:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 575:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 576:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 577:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 578:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 579:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 580:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 581:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 582:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 583:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 584:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 585:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 586:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 587:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 588:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 589:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 590:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 591:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 592:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 594:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 595:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 596:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 598:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 599:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 600:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 601:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 602:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 603:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 604:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 605:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 606:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 607:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 608:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 609:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 610:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 611:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 612:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 613:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 614:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 615:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 616:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 617:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 618:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 619:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 620:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 621:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
ARM GAS  /tmp/ccgJ85Jg.s 			page 20


 622:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 623:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 624:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 625:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 626:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 627:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 628:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 629:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 630:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 631:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 632:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 633:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 634:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 635:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 636:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 637:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 638:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 639:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 640:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 641:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 642:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 643:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 644:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 645:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 646:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 647:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 648:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 649:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 650:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 651:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 652:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 653:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 654:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 655:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 656:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 657:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 658:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 659:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 660:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 661:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 662:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 663:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 664:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 665:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 666:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 667:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 668:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 669:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 670:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 671:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return error status */
 672:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status =  HAL_ERROR;
 673:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 674:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 675:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 676:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 677:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 678:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
ARM GAS  /tmp/ccgJ85Jg.s 			page 21


 679:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 680:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         CAN callback is redirected to the weak predefined callback
 681:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 682:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for CAN module
 683:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 684:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one of the following values:
 685:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 686:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 687:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 688:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 689:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 690:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 691:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 692:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 693:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 694:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 695:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 696:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 697:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 698:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 699:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 700:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 701:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 702:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 703:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 704:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 705:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 706:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 707:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 708:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 709:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 710:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 711:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 712:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 713:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 714:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 715:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 716:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 717:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 718:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 719:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 720:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 721:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 722:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 723:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 724:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 725:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 726:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 727:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 728:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 729:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 730:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 731:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 732:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 733:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 734:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 735:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
ARM GAS  /tmp/ccgJ85Jg.s 			page 22


 736:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 737:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 738:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 739:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 740:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 741:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 742:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 743:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 744:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 745:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 746:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 747:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 748:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 749:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 750:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 751:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 752:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 753:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 754:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 755:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 756:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 757:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 758:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 759:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 760:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 761:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 762:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 763:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 764:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 765:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 766:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 767:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 768:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 769:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 770:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 771:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 772:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 773:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 774:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 775:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 776:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 777:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 778:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 779:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 780:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 781:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 782:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 783:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 784:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 785:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 786:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 787:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 788:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 789:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 790:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 791:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 792:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
ARM GAS  /tmp/ccgJ85Jg.s 			page 23


 793:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 794:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 795:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 796:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 797:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 798:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 799:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 800:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 801:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 802:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 803:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 804:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 805:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return error status */
 806:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status =  HAL_ERROR;
 807:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 808:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 809:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 810:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 811:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 812:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 813:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 814:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 815:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 816:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 817:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 818:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief    Configuration functions.
 819:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
 820:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 821:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 822:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****               ##### Configuration functions #####
 823:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 824:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 825:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 826:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 827:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 828:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 829:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 830:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 831:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 832:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 833:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 834:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 835:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 836:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 837:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         contains the filter configuration information.
 838:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 839:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 840:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterCon
 841:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 370              		.loc 1 841 1 is_stmt 1 view -0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              		@ link register save eliminated.
 842:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filternbrbitpos;
 375              		.loc 1 842 3 view .LVU107
 843:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
ARM GAS  /tmp/ccgJ85Jg.s 			page 24


 376              		.loc 1 843 3 view .LVU108
 377              		.loc 1 843 16 is_stmt 0 view .LVU109
 378 0000 0268     		ldr	r2, [r0]
 379              	.LVL16:
 844:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 380              		.loc 1 844 3 is_stmt 1 view .LVU110
 381              		.loc 1 844 24 is_stmt 0 view .LVU111
 382 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 383              	.LVL17:
 845:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 846:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 384              		.loc 1 846 3 is_stmt 1 view .LVU112
 385              		.loc 1 846 38 is_stmt 0 view .LVU113
 386 0006 013B     		subs	r3, r3, #1
 387              	.LVL18:
 388              		.loc 1 846 38 view .LVU114
 389 0008 DBB2     		uxtb	r3, r3
 390              		.loc 1 846 6 view .LVU115
 391 000a 012B     		cmp	r3, #1
 392 000c 05D9     		bls	.L50
 847:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 848:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 849:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 850:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 851:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 852:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 853:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 854:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 855:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 856:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 857:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 858:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 859:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if   defined(CAN2)
 860:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 861:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 862:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     can_ip = CAN1;
 863:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 864:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 865:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 866:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 867:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 868:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 869:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 870:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 871:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 872:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* CAN3 */
 873:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 874:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Initialisation mode for the filter */
 875:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 876:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 877:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if   defined(CAN2)
 878:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 879:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 880:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 881:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 882:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* CAN3 */
 883:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Convert filter number into bit position */
ARM GAS  /tmp/ccgJ85Jg.s 			page 25


 884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 885:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 886:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Deactivation */
 887:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 888:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 889:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Scale */
 890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 891:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 892:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 16-bit scale for the filter */
 893:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 894:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 895:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 896:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 897:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 898:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 899:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 900:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 901:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 902:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 904:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 905:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 906:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 907:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 908:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 909:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 910:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit scale for the filter */
 911:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 912:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 913:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 914:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 915:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 916:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 917:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 918:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 919:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 920:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 921:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 922:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 923:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 924:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Mode */
 925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 926:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 927:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 928:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 929:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 930:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 931:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 932:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 933:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 934:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 935:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 936:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter FIFO assignment */
 937:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 938:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 939:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 940:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
ARM GAS  /tmp/ccgJ85Jg.s 			page 26


 941:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 942:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
 943:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 944:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 945:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 946:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 947:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 948:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter activation */
 949:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 950:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 951:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 952:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 953:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 954:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 955:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 956:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 957:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
 958:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 959:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 960:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 961:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 962:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
 963:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 393              		.loc 1 963 5 is_stmt 1 view .LVU116
 394              		.loc 1 963 9 is_stmt 0 view .LVU117
 395 000e 436A     		ldr	r3, [r0, #36]
 396              		.loc 1 963 21 view .LVU118
 397 0010 43F48023 		orr	r3, r3, #262144
 398 0014 4362     		str	r3, [r0, #36]
 964:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 965:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 399              		.loc 1 965 5 is_stmt 1 view .LVU119
 400              		.loc 1 965 12 is_stmt 0 view .LVU120
 401 0016 0120     		movs	r0, #1
 402              	.LVL19:
 966:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 967:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 403              		.loc 1 967 1 view .LVU121
 404 0018 7047     		bx	lr
 405              	.LVL20:
 406              	.L50:
 841:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filternbrbitpos;
 407              		.loc 1 841 1 view .LVU122
 408 001a 30B4     		push	{r4, r5}
 409              	.LCFI2:
 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 5, -4
 850:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 413              		.loc 1 850 5 is_stmt 1 view .LVU123
 851:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 414              		.loc 1 851 5 view .LVU124
 852:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 415              		.loc 1 852 5 view .LVU125
 853:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 416              		.loc 1 853 5 view .LVU126
 854:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
ARM GAS  /tmp/ccgJ85Jg.s 			page 27


 417              		.loc 1 854 5 view .LVU127
 855:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 418              		.loc 1 855 5 view .LVU128
 856:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 419              		.loc 1 856 5 view .LVU129
 857:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 420              		.loc 1 857 5 view .LVU130
 871:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* CAN3 */
 421              		.loc 1 871 5 view .LVU131
 875:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 422              		.loc 1 875 5 view .LVU132
 423 001c D2F80032 		ldr	r3, [r2, #512]
 424 0020 43F00103 		orr	r3, r3, #1
 425 0024 C2F80032 		str	r3, [r2, #512]
 884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 426              		.loc 1 884 5 view .LVU133
 884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 427              		.loc 1 884 52 is_stmt 0 view .LVU134
 428 0028 4B69     		ldr	r3, [r1, #20]
 884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 429              		.loc 1 884 65 view .LVU135
 430 002a 03F01F03 		and	r3, r3, #31
 884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 431              		.loc 1 884 21 view .LVU136
 432 002e 0120     		movs	r0, #1
 433              	.LVL21:
 884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 434              		.loc 1 884 21 view .LVU137
 435 0030 00FA03F3 		lsl	r3, r0, r3
 436              	.LVL22:
 887:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 437              		.loc 1 887 5 is_stmt 1 view .LVU138
 438 0034 D2F81C02 		ldr	r0, [r2, #540]
 439 0038 6FEA030C 		mvn	ip, r3
 440 003c 20EA0300 		bic	r0, r0, r3
 441 0040 C2F81C02 		str	r0, [r2, #540]
 890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 442              		.loc 1 890 5 view .LVU139
 890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 443              		.loc 1 890 22 is_stmt 0 view .LVU140
 444 0044 C869     		ldr	r0, [r1, #28]
 890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 445              		.loc 1 890 8 view .LVU141
 446 0046 B0B9     		cbnz	r0, .L38
 893:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 447              		.loc 1 893 7 is_stmt 1 view .LVU142
 448 0048 D2F80C02 		ldr	r0, [r2, #524]
 449 004c 0CEA0000 		and	r0, ip, r0
 450 0050 C2F80C02 		str	r0, [r2, #524]
 897:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 451              		.loc 1 897 7 view .LVU143
 899:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 452              		.loc 1 899 22 is_stmt 0 view .LVU144
 453 0054 8C88     		ldrh	r4, [r1, #4]
 897:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 454              		.loc 1 897 44 view .LVU145
 455 0056 4869     		ldr	r0, [r1, #20]
ARM GAS  /tmp/ccgJ85Jg.s 			page 28


 898:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 456              		.loc 1 898 75 view .LVU146
 457 0058 CD68     		ldr	r5, [r1, #12]
 458 005a 44EA0544 		orr	r4, r4, r5, lsl #16
 897:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 459              		.loc 1 897 62 view .LVU147
 460 005e 4830     		adds	r0, r0, #72
 461 0060 42F83040 		str	r4, [r2, r0, lsl #3]
 903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 462              		.loc 1 903 7 is_stmt 1 view .LVU148
 905:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 463              		.loc 1 905 22 is_stmt 0 view .LVU149
 464 0064 0C88     		ldrh	r4, [r1]
 903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 465              		.loc 1 903 44 view .LVU150
 466 0066 4869     		ldr	r0, [r1, #20]
 904:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 467              		.loc 1 904 76 view .LVU151
 468 0068 8D68     		ldr	r5, [r1, #8]
 469 006a 44EA0544 		orr	r4, r4, r5, lsl #16
 903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 470              		.loc 1 903 62 view .LVU152
 471 006e 4830     		adds	r0, r0, #72
 472 0070 02EBC000 		add	r0, r2, r0, lsl #3
 473 0074 4460     		str	r4, [r0, #4]
 474              	.L38:
 908:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 475              		.loc 1 908 5 is_stmt 1 view .LVU153
 908:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 476              		.loc 1 908 22 is_stmt 0 view .LVU154
 477 0076 C869     		ldr	r0, [r1, #28]
 908:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 478              		.loc 1 908 8 view .LVU155
 479 0078 0128     		cmp	r0, #1
 480 007a 1BD0     		beq	.L51
 481              	.L39:
 925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 482              		.loc 1 925 5 is_stmt 1 view .LVU156
 925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 483              		.loc 1 925 22 is_stmt 0 view .LVU157
 484 007c 8869     		ldr	r0, [r1, #24]
 925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 485              		.loc 1 925 8 view .LVU158
 486 007e 80BB     		cbnz	r0, .L40
 928:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 487              		.loc 1 928 7 is_stmt 1 view .LVU159
 488 0080 D2F80402 		ldr	r0, [r2, #516]
 489 0084 0CEA0000 		and	r0, ip, r0
 490 0088 C2F80402 		str	r0, [r2, #516]
 491              	.L41:
 937:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 492              		.loc 1 937 5 view .LVU160
 937:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 493              		.loc 1 937 22 is_stmt 0 view .LVU161
 494 008c 0869     		ldr	r0, [r1, #16]
 937:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 495              		.loc 1 937 8 view .LVU162
ARM GAS  /tmp/ccgJ85Jg.s 			page 29


 496 008e 70BB     		cbnz	r0, .L42
 940:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 497              		.loc 1 940 7 is_stmt 1 view .LVU163
 498 0090 D2F81402 		ldr	r0, [r2, #532]
 499 0094 0CEA0000 		and	r0, ip, r0
 500 0098 C2F81402 		str	r0, [r2, #532]
 501              	.L43:
 949:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 502              		.loc 1 949 5 view .LVU164
 949:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 503              		.loc 1 949 22 is_stmt 0 view .LVU165
 504 009c 096A     		ldr	r1, [r1, #32]
 505              	.LVL23:
 949:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 506              		.loc 1 949 8 view .LVU166
 507 009e 0129     		cmp	r1, #1
 508 00a0 2BD0     		beq	.L52
 509              	.LVL24:
 510              	.L44:
 955:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 511              		.loc 1 955 5 is_stmt 1 view .LVU167
 512 00a2 D2F80032 		ldr	r3, [r2, #512]
 513 00a6 23F00103 		bic	r3, r3, #1
 514 00aa C2F80032 		str	r3, [r2, #512]
 958:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 515              		.loc 1 958 5 view .LVU168
 958:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 516              		.loc 1 958 12 is_stmt 0 view .LVU169
 517 00ae 0020     		movs	r0, #0
 518              		.loc 1 967 1 view .LVU170
 519 00b0 30BC     		pop	{r4, r5}
 520              	.LCFI3:
 521              		.cfi_remember_state
 522              		.cfi_restore 5
 523              		.cfi_restore 4
 524              		.cfi_def_cfa_offset 0
 525 00b2 7047     		bx	lr
 526              	.LVL25:
 527              	.L51:
 528              	.LCFI4:
 529              		.cfi_restore_state
 911:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 530              		.loc 1 911 7 is_stmt 1 view .LVU171
 531 00b4 D2F80C02 		ldr	r0, [r2, #524]
 532 00b8 1843     		orrs	r0, r0, r3
 533 00ba C2F80C02 		str	r0, [r2, #524]
 914:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 534              		.loc 1 914 7 view .LVU172
 916:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 535              		.loc 1 916 22 is_stmt 0 view .LVU173
 536 00be 8C88     		ldrh	r4, [r1, #4]
 914:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 537              		.loc 1 914 44 view .LVU174
 538 00c0 4869     		ldr	r0, [r1, #20]
 915:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 539              		.loc 1 915 72 view .LVU175
 540 00c2 0D68     		ldr	r5, [r1]
ARM GAS  /tmp/ccgJ85Jg.s 			page 30


 541 00c4 44EA0544 		orr	r4, r4, r5, lsl #16
 914:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 542              		.loc 1 914 62 view .LVU176
 543 00c8 4830     		adds	r0, r0, #72
 544 00ca 42F83040 		str	r4, [r2, r0, lsl #3]
 919:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 545              		.loc 1 919 7 is_stmt 1 view .LVU177
 921:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 546              		.loc 1 921 22 is_stmt 0 view .LVU178
 547 00ce 8C89     		ldrh	r4, [r1, #12]
 919:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 548              		.loc 1 919 44 view .LVU179
 549 00d0 4869     		ldr	r0, [r1, #20]
 920:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 550              		.loc 1 920 76 view .LVU180
 551 00d2 8D68     		ldr	r5, [r1, #8]
 552 00d4 44EA0544 		orr	r4, r4, r5, lsl #16
 919:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 553              		.loc 1 919 62 view .LVU181
 554 00d8 4830     		adds	r0, r0, #72
 555 00da 02EBC000 		add	r0, r2, r0, lsl #3
 556 00de 4460     		str	r4, [r0, #4]
 557 00e0 CCE7     		b	.L39
 558              	.L40:
 933:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 559              		.loc 1 933 7 is_stmt 1 view .LVU182
 560 00e2 D2F80402 		ldr	r0, [r2, #516]
 561 00e6 1843     		orrs	r0, r0, r3
 562 00e8 C2F80402 		str	r0, [r2, #516]
 563 00ec CEE7     		b	.L41
 564              	.L42:
 945:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 565              		.loc 1 945 7 view .LVU183
 566 00ee D2F81402 		ldr	r0, [r2, #532]
 567 00f2 1843     		orrs	r0, r0, r3
 568 00f4 C2F81402 		str	r0, [r2, #532]
 569 00f8 D0E7     		b	.L43
 570              	.LVL26:
 571              	.L52:
 951:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 572              		.loc 1 951 7 view .LVU184
 573 00fa D2F81C12 		ldr	r1, [r2, #540]
 574 00fe 0B43     		orrs	r3, r3, r1
 575              	.LVL27:
 951:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 576              		.loc 1 951 7 is_stmt 0 view .LVU185
 577 0100 C2F81C32 		str	r3, [r2, #540]
 578 0104 CDE7     		b	.L44
 579              		.cfi_endproc
 580              	.LFE292:
 582              		.section	.text.HAL_CAN_Start,"ax",%progbits
 583              		.align	1
 584              		.global	HAL_CAN_Start
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 589              	HAL_CAN_Start:
ARM GAS  /tmp/ccgJ85Jg.s 			page 31


 590              	.LVL28:
 591              	.LFB293:
 968:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 969:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 970:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 971:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 972:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 973:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 974:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief    Control functions
 975:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
 976:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 977:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 978:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                       ##### Control functions #####
 979:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 980:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 981:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 982:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 983:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 984:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 985:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 986:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 987:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              and activate the corresponding
 988:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              transmission request
 989:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 990:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 991:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 992:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 993:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 994:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 995:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 996:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 997:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 998:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 999:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1000:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1001:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Start the CAN module.
1002:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1003:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1004:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1005:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1006:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1007:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 592              		.loc 1 1007 1 is_stmt 1 view -0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		.loc 1 1007 1 is_stmt 0 view .LVU187
 597 0000 70B5     		push	{r4, r5, r6, lr}
 598              	.LCFI5:
 599              		.cfi_def_cfa_offset 16
 600              		.cfi_offset 4, -16
 601              		.cfi_offset 5, -12
 602              		.cfi_offset 6, -8
 603              		.cfi_offset 14, -4
 604 0002 0446     		mov	r4, r0
1008:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
 605              		.loc 1 1008 3 is_stmt 1 view .LVU188
ARM GAS  /tmp/ccgJ85Jg.s 			page 32


1009:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1010:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 606              		.loc 1 1010 3 view .LVU189
 607              		.loc 1 1010 11 is_stmt 0 view .LVU190
 608 0004 90F82050 		ldrb	r5, [r0, #32]	@ zero_extendqisi2
 609 0008 EDB2     		uxtb	r5, r5
 610              		.loc 1 1010 6 view .LVU191
 611 000a 012D     		cmp	r5, #1
 612 000c 06D0     		beq	.L59
1011:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1012:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Change CAN peripheral state */
1013:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
1014:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1015:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request leave initialisation */
1016:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1017:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1018:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get tick */
1019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     tickstart = HAL_GetTick();
1020:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1021:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait the acknowledge */
1022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
1023:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1024:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check for the Timeout */
1025:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1026:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1027:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1028:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1029:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1030:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Change CAN state */
1031:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1032:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1033:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
1034:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1035:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1036:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1037:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1038:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
1039:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1040:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1041:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
1042:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1043:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1044:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1045:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1046:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 613              		.loc 1 1046 5 is_stmt 1 view .LVU192
 614              		.loc 1 1046 9 is_stmt 0 view .LVU193
 615 000e 436A     		ldr	r3, [r0, #36]
 616              		.loc 1 1046 21 view .LVU194
 617 0010 43F40023 		orr	r3, r3, #524288
 618 0014 4362     		str	r3, [r0, #36]
1047:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1048:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 619              		.loc 1 1048 5 is_stmt 1 view .LVU195
 620              		.loc 1 1048 12 is_stmt 0 view .LVU196
 621 0016 0125     		movs	r5, #1
 622              	.LVL29:
ARM GAS  /tmp/ccgJ85Jg.s 			page 33


 623              	.L56:
1049:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1050:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 624              		.loc 1 1050 1 view .LVU197
 625 0018 2846     		mov	r0, r5
 626 001a 70BD     		pop	{r4, r5, r6, pc}
 627              	.LVL30:
 628              	.L59:
1013:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 629              		.loc 1 1013 5 is_stmt 1 view .LVU198
1013:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 630              		.loc 1 1013 17 is_stmt 0 view .LVU199
 631 001c 0223     		movs	r3, #2
 632 001e 80F82030 		strb	r3, [r0, #32]
1016:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 633              		.loc 1 1016 5 is_stmt 1 view .LVU200
 634 0022 0268     		ldr	r2, [r0]
 635 0024 1368     		ldr	r3, [r2]
 636 0026 23F00103 		bic	r3, r3, #1
 637 002a 1360     		str	r3, [r2]
1019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 638              		.loc 1 1019 5 view .LVU201
1019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 639              		.loc 1 1019 17 is_stmt 0 view .LVU202
 640 002c FFF7FEFF 		bl	HAL_GetTick
 641              	.LVL31:
1019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 642              		.loc 1 1019 17 view .LVU203
 643 0030 0646     		mov	r6, r0
 644              	.LVL32:
1022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 645              		.loc 1 1022 5 is_stmt 1 view .LVU204
 646              	.L55:
1022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 647              		.loc 1 1022 49 view .LVU205
1022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 648              		.loc 1 1022 17 is_stmt 0 view .LVU206
 649 0032 2368     		ldr	r3, [r4]
1022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 650              		.loc 1 1022 27 view .LVU207
 651 0034 5B68     		ldr	r3, [r3, #4]
1022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 652              		.loc 1 1022 49 view .LVU208
 653 0036 13F0010F 		tst	r3, #1
 654 003a 0CD0     		beq	.L60
1025:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 655              		.loc 1 1025 7 is_stmt 1 view .LVU209
1025:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 656              		.loc 1 1025 12 is_stmt 0 view .LVU210
 657 003c FFF7FEFF 		bl	HAL_GetTick
 658              	.LVL33:
1025:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 659              		.loc 1 1025 26 view .LVU211
 660 0040 831B     		subs	r3, r0, r6
1025:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 661              		.loc 1 1025 10 view .LVU212
 662 0042 0A2B     		cmp	r3, #10
ARM GAS  /tmp/ccgJ85Jg.s 			page 34


 663 0044 F5D9     		bls	.L55
1028:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 664              		.loc 1 1028 9 is_stmt 1 view .LVU213
1028:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 665              		.loc 1 1028 13 is_stmt 0 view .LVU214
 666 0046 636A     		ldr	r3, [r4, #36]
1028:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 667              		.loc 1 1028 25 view .LVU215
 668 0048 43F40033 		orr	r3, r3, #131072
 669 004c 6362     		str	r3, [r4, #36]
1031:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 670              		.loc 1 1031 9 is_stmt 1 view .LVU216
1031:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 671              		.loc 1 1031 21 is_stmt 0 view .LVU217
 672 004e 0523     		movs	r3, #5
 673 0050 84F82030 		strb	r3, [r4, #32]
1033:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 674              		.loc 1 1033 9 is_stmt 1 view .LVU218
1033:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 675              		.loc 1 1033 16 is_stmt 0 view .LVU219
 676 0054 E0E7     		b	.L56
 677              	.L60:
1038:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 678              		.loc 1 1038 5 is_stmt 1 view .LVU220
1038:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 679              		.loc 1 1038 21 is_stmt 0 view .LVU221
 680 0056 0025     		movs	r5, #0
 681 0058 6562     		str	r5, [r4, #36]
1041:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 682              		.loc 1 1041 5 is_stmt 1 view .LVU222
1041:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 683              		.loc 1 1041 12 is_stmt 0 view .LVU223
 684 005a DDE7     		b	.L56
 685              		.cfi_endproc
 686              	.LFE293:
 688              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 689              		.align	1
 690              		.global	HAL_CAN_Stop
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 695              	HAL_CAN_Stop:
 696              	.LVL34:
 697              	.LFB294:
1051:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1052:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1053:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1054:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1055:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1056:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1057:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1058:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1059:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 698              		.loc 1 1059 1 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgJ85Jg.s 			page 35


 702              		.loc 1 1059 1 is_stmt 0 view .LVU225
 703 0000 38B5     		push	{r3, r4, r5, lr}
 704              	.LCFI6:
 705              		.cfi_def_cfa_offset 16
 706              		.cfi_offset 3, -16
 707              		.cfi_offset 4, -12
 708              		.cfi_offset 5, -8
 709              		.cfi_offset 14, -4
 710 0002 0446     		mov	r4, r0
1060:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
 711              		.loc 1 1060 3 is_stmt 1 view .LVU226
1061:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1062:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 712              		.loc 1 1062 3 view .LVU227
 713              		.loc 1 1062 11 is_stmt 0 view .LVU228
 714 0004 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 715 0008 DBB2     		uxtb	r3, r3
 716              		.loc 1 1062 6 view .LVU229
 717 000a 022B     		cmp	r3, #2
 718 000c 05D0     		beq	.L67
1063:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1064:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request initialisation */
1065:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1066:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1067:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get tick */
1068:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     tickstart = HAL_GetTick();
1069:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1070:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait the acknowledge */
1071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
1072:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1073:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check for the Timeout */
1074:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1075:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1076:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1077:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1078:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1079:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Change CAN state */
1080:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1081:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1082:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
1083:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1084:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1085:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1086:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Exit from sleep mode */
1087:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1088:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1089:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Change CAN peripheral state */
1090:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1091:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1092:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1093:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
1094:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1095:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1096:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1097:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1098:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 719              		.loc 1 1098 5 is_stmt 1 view .LVU230
ARM GAS  /tmp/ccgJ85Jg.s 			page 36


 720              		.loc 1 1098 9 is_stmt 0 view .LVU231
 721 000e 436A     		ldr	r3, [r0, #36]
 722              		.loc 1 1098 21 view .LVU232
 723 0010 43F48013 		orr	r3, r3, #1048576
 724 0014 4362     		str	r3, [r0, #36]
1099:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1100:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 725              		.loc 1 1100 5 is_stmt 1 view .LVU233
 726              		.loc 1 1100 12 is_stmt 0 view .LVU234
 727 0016 0120     		movs	r0, #1
 728              	.LVL35:
 729              	.L64:
1101:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1102:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 730              		.loc 1 1102 1 view .LVU235
 731 0018 38BD     		pop	{r3, r4, r5, pc}
 732              	.LVL36:
 733              	.L67:
1065:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 734              		.loc 1 1065 5 is_stmt 1 view .LVU236
 735 001a 0268     		ldr	r2, [r0]
 736 001c 1368     		ldr	r3, [r2]
 737 001e 43F00103 		orr	r3, r3, #1
 738 0022 1360     		str	r3, [r2]
1068:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 739              		.loc 1 1068 5 view .LVU237
1068:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 740              		.loc 1 1068 17 is_stmt 0 view .LVU238
 741 0024 FFF7FEFF 		bl	HAL_GetTick
 742              	.LVL37:
1068:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 743              		.loc 1 1068 17 view .LVU239
 744 0028 0546     		mov	r5, r0
 745              	.LVL38:
1071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 746              		.loc 1 1071 5 is_stmt 1 view .LVU240
 747              	.L63:
1071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 748              		.loc 1 1071 49 view .LVU241
1071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 749              		.loc 1 1071 17 is_stmt 0 view .LVU242
 750 002a 2368     		ldr	r3, [r4]
1071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 751              		.loc 1 1071 27 view .LVU243
 752 002c 5A68     		ldr	r2, [r3, #4]
1071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 753              		.loc 1 1071 49 view .LVU244
 754 002e 12F0010F 		tst	r2, #1
 755 0032 0DD1     		bne	.L68
1074:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 756              		.loc 1 1074 7 is_stmt 1 view .LVU245
1074:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 757              		.loc 1 1074 12 is_stmt 0 view .LVU246
 758 0034 FFF7FEFF 		bl	HAL_GetTick
 759              	.LVL39:
1074:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 760              		.loc 1 1074 26 view .LVU247
ARM GAS  /tmp/ccgJ85Jg.s 			page 37


 761 0038 431B     		subs	r3, r0, r5
1074:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 762              		.loc 1 1074 10 view .LVU248
 763 003a 0A2B     		cmp	r3, #10
 764 003c F5D9     		bls	.L63
1077:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 765              		.loc 1 1077 9 is_stmt 1 view .LVU249
1077:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 766              		.loc 1 1077 13 is_stmt 0 view .LVU250
 767 003e 636A     		ldr	r3, [r4, #36]
1077:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 768              		.loc 1 1077 25 view .LVU251
 769 0040 43F40033 		orr	r3, r3, #131072
 770 0044 6362     		str	r3, [r4, #36]
1080:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 771              		.loc 1 1080 9 is_stmt 1 view .LVU252
1080:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 772              		.loc 1 1080 21 is_stmt 0 view .LVU253
 773 0046 0523     		movs	r3, #5
 774 0048 84F82030 		strb	r3, [r4, #32]
1082:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 775              		.loc 1 1082 9 is_stmt 1 view .LVU254
1082:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 776              		.loc 1 1082 16 is_stmt 0 view .LVU255
 777 004c 0120     		movs	r0, #1
 778 004e E3E7     		b	.L64
 779              	.L68:
1087:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 780              		.loc 1 1087 5 is_stmt 1 view .LVU256
 781 0050 1A68     		ldr	r2, [r3]
 782 0052 22F00202 		bic	r2, r2, #2
 783 0056 1A60     		str	r2, [r3]
1090:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 784              		.loc 1 1090 5 view .LVU257
1090:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 785              		.loc 1 1090 17 is_stmt 0 view .LVU258
 786 0058 0123     		movs	r3, #1
 787 005a 84F82030 		strb	r3, [r4, #32]
1093:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 788              		.loc 1 1093 5 is_stmt 1 view .LVU259
1093:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 789              		.loc 1 1093 12 is_stmt 0 view .LVU260
 790 005e 0020     		movs	r0, #0
 791 0060 DAE7     		b	.L64
 792              		.cfi_endproc
 793              	.LFE294:
 795              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 796              		.align	1
 797              		.global	HAL_CAN_DeInit
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 802              	HAL_CAN_DeInit:
 803              	.LVL40:
 804              	.LFB289:
 461:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 805              		.loc 1 461 1 is_stmt 1 view -0
ARM GAS  /tmp/ccgJ85Jg.s 			page 38


 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 463:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 809              		.loc 1 463 3 view .LVU262
 463:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 810              		.loc 1 463 6 is_stmt 0 view .LVU263
 811 0000 80B1     		cbz	r0, .L71
 461:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 812              		.loc 1 461 1 view .LVU264
 813 0002 10B5     		push	{r4, lr}
 814              	.LCFI7:
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 4, -8
 817              		.cfi_offset 14, -4
 818 0004 0446     		mov	r4, r0
 469:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 819              		.loc 1 469 3 is_stmt 1 view .LVU265
 472:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 820              		.loc 1 472 3 view .LVU266
 472:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 821              		.loc 1 472 9 is_stmt 0 view .LVU267
 822 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 823              	.LVL41:
 485:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 824              		.loc 1 485 3 is_stmt 1 view .LVU268
 825 000a 2046     		mov	r0, r4
 826 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 827              	.LVL42:
 489:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 828              		.loc 1 489 3 view .LVU269
 829 0010 2268     		ldr	r2, [r4]
 830 0012 1368     		ldr	r3, [r2]
 831 0014 43F40043 		orr	r3, r3, #32768
 832 0018 1360     		str	r3, [r2]
 492:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 833              		.loc 1 492 3 view .LVU270
 492:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 834              		.loc 1 492 19 is_stmt 0 view .LVU271
 835 001a 0020     		movs	r0, #0
 836 001c 6062     		str	r0, [r4, #36]
 495:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 837              		.loc 1 495 3 is_stmt 1 view .LVU272
 495:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 838              		.loc 1 495 15 is_stmt 0 view .LVU273
 839 001e 84F82000 		strb	r0, [r4, #32]
 498:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 840              		.loc 1 498 3 is_stmt 1 view .LVU274
 499:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 841              		.loc 1 499 1 is_stmt 0 view .LVU275
 842 0022 10BD     		pop	{r4, pc}
 843              	.LVL43:
 844              	.L71:
 845              	.LCFI8:
 846              		.cfi_def_cfa_offset 0
 847              		.cfi_restore 4
 848              		.cfi_restore 14
ARM GAS  /tmp/ccgJ85Jg.s 			page 39


 465:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 849              		.loc 1 465 12 view .LVU276
 850 0024 0120     		movs	r0, #1
 851              	.LVL44:
 499:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 852              		.loc 1 499 1 view .LVU277
 853 0026 7047     		bx	lr
 854              		.cfi_endproc
 855              	.LFE289:
 857              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 858              		.align	1
 859              		.global	HAL_CAN_RequestSleep
 860              		.syntax unified
 861              		.thumb
 862              		.thumb_func
 864              	HAL_CAN_RequestSleep:
 865              	.LVL45:
 866              	.LFB295:
1103:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1104:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1105:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1106:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1107:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1108:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         of a CAN frame) has been completed.
1109:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1110:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1111:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status.
1112:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1113:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1114:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 867              		.loc 1 1114 1 is_stmt 1 view -0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
1115:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 872              		.loc 1 1115 3 view .LVU279
 873              		.loc 1 1115 24 is_stmt 0 view .LVU280
 874 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 875              	.LVL46:
1116:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1117:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 876              		.loc 1 1117 3 is_stmt 1 view .LVU281
 877              		.loc 1 1117 38 is_stmt 0 view .LVU282
 878 0004 013B     		subs	r3, r3, #1
 879              	.LVL47:
 880              		.loc 1 1117 38 view .LVU283
 881 0006 DBB2     		uxtb	r3, r3
 882              		.loc 1 1117 6 view .LVU284
 883 0008 012B     		cmp	r3, #1
 884 000a 05D9     		bls	.L79
1118:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1119:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1120:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request Sleep mode */
1121:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1122:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1123:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
ARM GAS  /tmp/ccgJ85Jg.s 			page 40


1124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
1125:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1126:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1127:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1128:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1129:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 885              		.loc 1 1129 5 is_stmt 1 view .LVU285
 886              		.loc 1 1129 9 is_stmt 0 view .LVU286
 887 000c 436A     		ldr	r3, [r0, #36]
 888              		.loc 1 1129 21 view .LVU287
 889 000e 43F48023 		orr	r3, r3, #262144
 890 0012 4362     		str	r3, [r0, #36]
1130:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1131:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1132:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 891              		.loc 1 1132 5 is_stmt 1 view .LVU288
 892              		.loc 1 1132 12 is_stmt 0 view .LVU289
 893 0014 0120     		movs	r0, #1
 894              	.LVL48:
1133:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1134:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 895              		.loc 1 1134 1 view .LVU290
 896 0016 7047     		bx	lr
 897              	.LVL49:
 898              	.L79:
1121:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 899              		.loc 1 1121 5 is_stmt 1 view .LVU291
 900 0018 0268     		ldr	r2, [r0]
 901 001a 1368     		ldr	r3, [r2]
 902 001c 43F00203 		orr	r3, r3, #2
 903 0020 1360     		str	r3, [r2]
1124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 904              		.loc 1 1124 5 view .LVU292
1124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 905              		.loc 1 1124 12 is_stmt 0 view .LVU293
 906 0022 0020     		movs	r0, #0
 907              	.LVL50:
1124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 908              		.loc 1 1124 12 view .LVU294
 909 0024 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE295:
 913              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 914              		.align	1
 915              		.global	HAL_CAN_WakeUp
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 920              	HAL_CAN_WakeUp:
 921              	.LVL51:
 922              	.LFB296:
1135:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1136:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1137:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1138:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1139:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         is exited.
1140:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/ccgJ85Jg.s 			page 41


1141:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1142:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status.
1143:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1144:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1145:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 923              		.loc 1 1145 1 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 8
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928              		.loc 1 1145 1 is_stmt 0 view .LVU296
 929 0000 82B0     		sub	sp, sp, #8
 930              	.LCFI9:
 931              		.cfi_def_cfa_offset 8
1146:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   __IO uint32_t count = 0;
 932              		.loc 1 1146 3 is_stmt 1 view .LVU297
 933              		.loc 1 1146 17 is_stmt 0 view .LVU298
 934 0002 0023     		movs	r3, #0
 935 0004 0193     		str	r3, [sp, #4]
1147:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 936              		.loc 1 1147 3 is_stmt 1 view .LVU299
 937              		.loc 1 1147 24 is_stmt 0 view .LVU300
 938 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 939              	.LVL52:
1148:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1149:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 940              		.loc 1 1149 3 is_stmt 1 view .LVU301
 941              		.loc 1 1149 38 is_stmt 0 view .LVU302
 942 000a 013B     		subs	r3, r3, #1
 943              	.LVL53:
 944              		.loc 1 1149 38 view .LVU303
 945 000c DBB2     		uxtb	r3, r3
 946              		.loc 1 1149 6 view .LVU304
 947 000e 012B     		cmp	r3, #1
 948 0010 18D8     		bhi	.L81
1150:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1151:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1152:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wake up request */
1153:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 949              		.loc 1 1153 5 is_stmt 1 view .LVU305
 950 0012 0268     		ldr	r2, [r0]
 951 0014 1368     		ldr	r3, [r2]
 952 0016 23F00203 		bic	r3, r3, #2
 953 001a 1360     		str	r3, [r2]
 954              	.L84:
1154:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1155:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait sleep mode is exited */
1156:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     do
 955              		.loc 1 1156 5 view .LVU306
1157:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1158:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Increment counter */
1159:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       count++;
 956              		.loc 1 1159 7 view .LVU307
 957              		.loc 1 1159 12 is_stmt 0 view .LVU308
 958 001c 019B     		ldr	r3, [sp, #4]
 959 001e 0133     		adds	r3, r3, #1
 960 0020 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccgJ85Jg.s 			page 42


1160:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1161:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check if timeout is reached */
1162:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (count > CAN_WAKEUP_TIMEOUT_COUNTER)
 961              		.loc 1 1162 7 is_stmt 1 view .LVU309
 962              		.loc 1 1162 17 is_stmt 0 view .LVU310
 963 0022 019A     		ldr	r2, [sp, #4]
 964              		.loc 1 1162 10 view .LVU311
 965 0024 0B4B     		ldr	r3, .L87
 966 0026 9A42     		cmp	r2, r3
 967 0028 06D8     		bhi	.L86
1163:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1164:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1166:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
1168:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1169:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     } while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 968              		.loc 1 1169 51 is_stmt 1 view .LVU312
 969              		.loc 1 1169 19 is_stmt 0 view .LVU313
 970 002a 0368     		ldr	r3, [r0]
 971              		.loc 1 1169 29 view .LVU314
 972 002c 5B68     		ldr	r3, [r3, #4]
 973              		.loc 1 1169 51 view .LVU315
 974 002e 13F0020F 		tst	r3, #2
 975 0032 F3D1     		bne	.L84
1170:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1171:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1172:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 976              		.loc 1 1172 12 view .LVU316
 977 0034 0020     		movs	r0, #0
 978              	.LVL54:
 979              		.loc 1 1172 12 view .LVU317
 980 0036 0AE0     		b	.L83
 981              	.LVL55:
 982              	.L86:
1165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 983              		.loc 1 1165 9 is_stmt 1 view .LVU318
1165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 984              		.loc 1 1165 13 is_stmt 0 view .LVU319
 985 0038 436A     		ldr	r3, [r0, #36]
1165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 986              		.loc 1 1165 25 view .LVU320
 987 003a 43F40033 		orr	r3, r3, #131072
 988 003e 4362     		str	r3, [r0, #36]
1167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 989              		.loc 1 1167 9 is_stmt 1 view .LVU321
1167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 990              		.loc 1 1167 16 is_stmt 0 view .LVU322
 991 0040 0120     		movs	r0, #1
 992              	.LVL56:
1167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 993              		.loc 1 1167 16 view .LVU323
 994 0042 04E0     		b	.L83
 995              	.LVL57:
 996              	.L81:
1173:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1174:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
ARM GAS  /tmp/ccgJ85Jg.s 			page 43


1175:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1176:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1177:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 997              		.loc 1 1177 5 is_stmt 1 view .LVU324
 998              		.loc 1 1177 9 is_stmt 0 view .LVU325
 999 0044 436A     		ldr	r3, [r0, #36]
 1000              		.loc 1 1177 21 view .LVU326
 1001 0046 43F48023 		orr	r3, r3, #262144
 1002 004a 4362     		str	r3, [r0, #36]
1178:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1179:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1003              		.loc 1 1179 5 is_stmt 1 view .LVU327
 1004              		.loc 1 1179 12 is_stmt 0 view .LVU328
 1005 004c 0120     		movs	r0, #1
 1006              	.LVL58:
 1007              	.L83:
1180:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1181:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1008              		.loc 1 1181 1 view .LVU329
 1009 004e 02B0     		add	sp, sp, #8
 1010              	.LCFI10:
 1011              		.cfi_def_cfa_offset 0
 1012              		@ sp needed
 1013 0050 7047     		bx	lr
 1014              	.L88:
 1015 0052 00BF     		.align	2
 1016              	.L87:
 1017 0054 40420F00 		.word	1000000
 1018              		.cfi_endproc
 1019              	.LFE296:
 1021              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 1022              		.align	1
 1023              		.global	HAL_CAN_IsSleepActive
 1024              		.syntax unified
 1025              		.thumb
 1026              		.thumb_func
 1028              	HAL_CAN_IsSleepActive:
 1029              	.LVL59:
 1030              	.LFB297:
1182:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1183:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1184:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1185:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1186:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1187:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Status
1188:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1189:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1190:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1191:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(const CAN_HandleTypeDef *hcan)
1192:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1031              		.loc 1 1192 1 is_stmt 1 view -0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 0
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
1193:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t status = 0U;
 1036              		.loc 1 1193 3 view .LVU331
ARM GAS  /tmp/ccgJ85Jg.s 			page 44


1194:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1037              		.loc 1 1194 3 view .LVU332
 1038              		.loc 1 1194 24 is_stmt 0 view .LVU333
 1039 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1040              	.LVL60:
1195:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1196:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1041              		.loc 1 1196 3 is_stmt 1 view .LVU334
 1042              		.loc 1 1196 38 is_stmt 0 view .LVU335
 1043 0004 013B     		subs	r3, r3, #1
 1044              	.LVL61:
 1045              		.loc 1 1196 38 view .LVU336
 1046 0006 DBB2     		uxtb	r3, r3
 1047              		.loc 1 1196 6 view .LVU337
 1048 0008 012B     		cmp	r3, #1
 1049 000a 01D9     		bls	.L93
1193:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1050              		.loc 1 1193 12 view .LVU338
 1051 000c 0020     		movs	r0, #0
 1052              	.LVL62:
1193:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1053              		.loc 1 1193 12 view .LVU339
 1054 000e 7047     		bx	lr
 1055              	.LVL63:
 1056              	.L93:
1197:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1198:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1199:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Sleep mode */
1200:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 1057              		.loc 1 1200 5 is_stmt 1 view .LVU340
 1058              		.loc 1 1200 14 is_stmt 0 view .LVU341
 1059 0010 0368     		ldr	r3, [r0]
 1060              		.loc 1 1200 24 view .LVU342
 1061 0012 5868     		ldr	r0, [r3, #4]
 1062              	.LVL64:
 1063              		.loc 1 1200 8 view .LVU343
 1064 0014 10F00200 		ands	r0, r0, #2
 1065 0018 00D1     		bne	.L92
 1066 001a 7047     		bx	lr
 1067              	.L92:
1201:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1202:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       status = 1U;
 1068              		.loc 1 1202 14 view .LVU344
 1069 001c 0120     		movs	r0, #1
 1070              	.LVL65:
1203:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1204:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1205:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1206:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
1207:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 1071              		.loc 1 1207 3 is_stmt 1 view .LVU345
1208:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1072              		.loc 1 1208 1 is_stmt 0 view .LVU346
 1073 001e 7047     		bx	lr
 1074              		.cfi_endproc
 1075              	.LFE297:
 1077              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
ARM GAS  /tmp/ccgJ85Jg.s 			page 45


 1078              		.align	1
 1079              		.global	HAL_CAN_AddTxMessage
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1084              	HAL_CAN_AddTxMessage:
 1085              	.LVL66:
 1086              	.LFB298:
1209:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1210:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1211:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1212:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         corresponding transmission request.
1213:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1216:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1217:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1218:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1219:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1220:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1221:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1222:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
1223:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                        const uint8_t aData[], uint32_t *pTxMailbox)
1224:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1087              		.loc 1 1224 1 is_stmt 1 view -0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		.loc 1 1224 1 is_stmt 0 view .LVU348
 1092 0000 30B5     		push	{r4, r5, lr}
 1093              	.LCFI11:
 1094              		.cfi_def_cfa_offset 12
 1095              		.cfi_offset 4, -12
 1096              		.cfi_offset 5, -8
 1097              		.cfi_offset 14, -4
1225:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
 1098              		.loc 1 1225 3 is_stmt 1 view .LVU349
1226:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1099              		.loc 1 1226 3 view .LVU350
 1100              		.loc 1 1226 24 is_stmt 0 view .LVU351
 1101 0002 90F820C0 		ldrb	ip, [r0, #32]	@ zero_extendqisi2
 1102              	.LVL67:
1227:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1103              		.loc 1 1227 3 is_stmt 1 view .LVU352
 1104              		.loc 1 1227 12 is_stmt 0 view .LVU353
 1105 0006 0468     		ldr	r4, [r0]
 1106 0008 A468     		ldr	r4, [r4, #8]
 1107              	.LVL68:
1228:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1229:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
1230:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 1108              		.loc 1 1230 3 is_stmt 1 view .LVU354
1231:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 1109              		.loc 1 1231 3 view .LVU355
1232:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 1110              		.loc 1 1232 3 view .LVU356
1233:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
ARM GAS  /tmp/ccgJ85Jg.s 			page 46


 1111              		.loc 1 1233 3 view .LVU357
1234:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1235:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1236:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1237:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1238:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1239:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 1112              		.loc 1 1239 5 view .LVU358
1240:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1241:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 1113              		.loc 1 1241 3 view .LVU359
1242:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1243:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1114              		.loc 1 1243 3 view .LVU360
 1115              		.loc 1 1243 38 is_stmt 0 view .LVU361
 1116 000a 0CF1FF3C 		add	ip, ip, #-1
 1117              	.LVL69:
 1118              		.loc 1 1243 38 view .LVU362
 1119 000e 5FFA8CFC 		uxtb	ip, ip
 1120              		.loc 1 1243 6 view .LVU363
 1121 0012 BCF1010F 		cmp	ip, #1
 1122 0016 62D8     		bhi	.L95
1244:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1245:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1246:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1247:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 1123              		.loc 1 1247 5 is_stmt 1 view .LVU364
 1124              		.loc 1 1247 8 is_stmt 0 view .LVU365
 1125 0018 14F0E05F 		tst	r4, #469762048
 1126 001c 59D0     		beq	.L96
1248:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1249:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1250:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1251:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Select an empty transmit mailbox */
1252:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1127              		.loc 1 1252 7 is_stmt 1 view .LVU366
 1128              		.loc 1 1252 23 is_stmt 0 view .LVU367
 1129 001e C4F3016C 		ubfx	ip, r4, #24, #2
 1130              	.LVL70:
1253:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1254:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Store the Tx mailbox */
1255:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 1131              		.loc 1 1255 7 is_stmt 1 view .LVU368
 1132              		.loc 1 1255 33 is_stmt 0 view .LVU369
 1133 0022 0124     		movs	r4, #1
 1134              	.LVL71:
 1135              		.loc 1 1255 33 view .LVU370
 1136 0024 04FA0CF4 		lsl	r4, r4, ip
 1137              		.loc 1 1255 19 view .LVU371
 1138 0028 1C60     		str	r4, [r3]
1256:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1257:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the Id */
1258:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 1139              		.loc 1 1258 7 is_stmt 1 view .LVU372
 1140              		.loc 1 1258 18 is_stmt 0 view .LVU373
 1141 002a 8B68     		ldr	r3, [r1, #8]
 1142              	.LVL72:
ARM GAS  /tmp/ccgJ85Jg.s 			page 47


 1143              		.loc 1 1258 10 view .LVU374
 1144 002c 002B     		cmp	r3, #0
 1145 002e 3DD1     		bne	.L97
1259:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1146              		.loc 1 1260 9 is_stmt 1 view .LVU375
 1147              		.loc 1 1260 68 is_stmt 0 view .LVU376
 1148 0030 0D68     		ldr	r5, [r1]
1261:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1149              		.loc 1 1261 67 view .LVU377
 1150 0032 CB68     		ldr	r3, [r1, #12]
1260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1151              		.loc 1 1260 13 view .LVU378
 1152 0034 0468     		ldr	r4, [r0]
1260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1153              		.loc 1 1260 98 view .LVU379
 1154 0036 43EA4555 		orr	r5, r3, r5, lsl #21
1260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1155              		.loc 1 1260 57 view .LVU380
 1156 003a 0CF11803 		add	r3, ip, #24
 1157 003e 1B01     		lsls	r3, r3, #4
 1158 0040 E550     		str	r5, [r4, r3]
 1159              	.L98:
1262:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1263:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1264:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1266:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
1267:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
1268:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1269:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1270:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the DLC */
1271:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1160              		.loc 1 1271 7 is_stmt 1 view .LVU381
 1161              		.loc 1 1271 11 is_stmt 0 view .LVU382
 1162 0042 0368     		ldr	r3, [r0]
 1163              		.loc 1 1271 66 view .LVU383
 1164 0044 0C69     		ldr	r4, [r1, #16]
 1165              		.loc 1 1271 56 view .LVU384
 1166 0046 0CF1180E 		add	lr, ip, #24
 1167 004a 03EB0E13 		add	r3, r3, lr, lsl #4
 1168 004e 5C60     		str	r4, [r3, #4]
1272:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1273:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1274:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1169              		.loc 1 1274 7 is_stmt 1 view .LVU385
 1170              		.loc 1 1274 18 is_stmt 0 view .LVU386
 1171 0050 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1172              		.loc 1 1274 10 view .LVU387
 1173 0052 012B     		cmp	r3, #1
 1174 0054 35D0     		beq	.L102
 1175              	.LVL73:
 1176              	.L99:
1275:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1277:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1278:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 48


1279:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the data field */
1280:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1177              		.loc 1 1280 7 is_stmt 1 view .LVU388
 1178 0056 D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1179 0058 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1180 005a 1B04     		lsls	r3, r3, #16
 1181 005c 43EA0163 		orr	r3, r3, r1, lsl #24
 1182 0060 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1183 0062 43EA0123 		orr	r3, r3, r1, lsl #8
 1184 0066 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 1185 0068 0168     		ldr	r1, [r0]
 1186 006a 2343     		orrs	r3, r3, r4
 1187 006c 01EB0C11 		add	r1, r1, ip, lsl #4
 1188 0070 C1F88C31 		str	r3, [r1, #396]
1281:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1282:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1283:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1284:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1285:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1189              		.loc 1 1285 7 view .LVU389
 1190 0074 D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 1191 0076 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1192 0078 1B04     		lsls	r3, r3, #16
 1193 007a 43EA0163 		orr	r3, r3, r1, lsl #24
 1194 007e 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1195 0080 43EA0123 		orr	r3, r3, r1, lsl #8
 1196 0084 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1197 0086 0268     		ldr	r2, [r0]
 1198              	.LVL74:
 1199              		.loc 1 1285 7 is_stmt 0 view .LVU390
 1200 0088 0B43     		orrs	r3, r3, r1
 1201 008a 02EB0C12 		add	r2, r2, ip, lsl #4
 1202 008e C2F88831 		str	r3, [r2, #392]
1286:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1287:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1288:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1289:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1290:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1291:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Request transmission */
1292:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1203              		.loc 1 1292 7 is_stmt 1 view .LVU391
 1204 0092 0268     		ldr	r2, [r0]
 1205 0094 0CF1180C 		add	ip, ip, #24
 1206              	.LVL75:
 1207              		.loc 1 1292 7 is_stmt 0 view .LVU392
 1208 0098 4FEA0C1C 		lsl	ip, ip, #4
 1209 009c 52F80C30 		ldr	r3, [r2, ip]
 1210 00a0 43F00103 		orr	r3, r3, #1
 1211 00a4 42F80C30 		str	r3, [r2, ip]
1293:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1294:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Return function status */
1295:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_OK;
 1212              		.loc 1 1295 7 is_stmt 1 view .LVU393
 1213              		.loc 1 1295 14 is_stmt 0 view .LVU394
 1214 00a8 0020     		movs	r0, #0
 1215              	.LVL76:
 1216              		.loc 1 1295 14 view .LVU395
ARM GAS  /tmp/ccgJ85Jg.s 			page 49


 1217 00aa 1DE0     		b	.L100
 1218              	.LVL77:
 1219              	.L97:
1265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1220              		.loc 1 1265 9 is_stmt 1 view .LVU396
1265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1221              		.loc 1 1265 68 is_stmt 0 view .LVU397
 1222 00ac 4C68     		ldr	r4, [r1, #4]
1265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1223              		.loc 1 1265 98 view .LVU398
 1224 00ae 43EAC403 		orr	r3, r3, r4, lsl #3
1267:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 1225              		.loc 1 1267 67 view .LVU399
 1226 00b2 CC68     		ldr	r4, [r1, #12]
1266:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 1227              		.loc 1 1266 73 view .LVU400
 1228 00b4 2343     		orrs	r3, r3, r4
1265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 1229              		.loc 1 1265 57 view .LVU401
 1230 00b6 0CF11804 		add	r4, ip, #24
 1231 00ba 2401     		lsls	r4, r4, #4
 1232 00bc 0568     		ldr	r5, [r0]
 1233 00be 2B51     		str	r3, [r5, r4]
 1234 00c0 BFE7     		b	.L98
 1235              	.L102:
1276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 1236              		.loc 1 1276 9 is_stmt 1 view .LVU402
 1237 00c2 0368     		ldr	r3, [r0]
 1238 00c4 03EB0E13 		add	r3, r3, lr, lsl #4
 1239 00c8 5968     		ldr	r1, [r3, #4]
 1240              	.LVL78:
1276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 1241              		.loc 1 1276 9 is_stmt 0 view .LVU403
 1242 00ca 41F48071 		orr	r1, r1, #256
 1243 00ce 5960     		str	r1, [r3, #4]
 1244 00d0 C1E7     		b	.L99
 1245              	.LVL79:
 1246              	.L96:
1296:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1297:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
1298:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1299:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
1300:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1247              		.loc 1 1300 7 is_stmt 1 view .LVU404
 1248              		.loc 1 1300 11 is_stmt 0 view .LVU405
 1249 00d2 436A     		ldr	r3, [r0, #36]
 1250              	.LVL80:
 1251              		.loc 1 1300 23 view .LVU406
 1252 00d4 43F40013 		orr	r3, r3, #2097152
 1253 00d8 4362     		str	r3, [r0, #36]
1301:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1302:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 1254              		.loc 1 1302 7 is_stmt 1 view .LVU407
 1255              		.loc 1 1302 14 is_stmt 0 view .LVU408
 1256 00da 0120     		movs	r0, #1
 1257              	.LVL81:
 1258              		.loc 1 1302 14 view .LVU409
ARM GAS  /tmp/ccgJ85Jg.s 			page 50


 1259 00dc 04E0     		b	.L100
 1260              	.LVL82:
 1261              	.L95:
1303:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1304:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1305:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1306:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1307:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1308:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1262              		.loc 1 1308 5 is_stmt 1 view .LVU410
 1263              		.loc 1 1308 9 is_stmt 0 view .LVU411
 1264 00de 436A     		ldr	r3, [r0, #36]
 1265              	.LVL83:
 1266              		.loc 1 1308 21 view .LVU412
 1267 00e0 43F48023 		orr	r3, r3, #262144
 1268 00e4 4362     		str	r3, [r0, #36]
1309:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1310:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1269              		.loc 1 1310 5 is_stmt 1 view .LVU413
 1270              		.loc 1 1310 12 is_stmt 0 view .LVU414
 1271 00e6 0120     		movs	r0, #1
 1272              	.LVL84:
 1273              	.L100:
1311:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1312:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1274              		.loc 1 1312 1 view .LVU415
 1275 00e8 30BD     		pop	{r4, r5, pc}
 1276              		.cfi_endproc
 1277              	.LFE298:
 1279              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1280              		.align	1
 1281              		.global	HAL_CAN_AbortTxRequest
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1286              	HAL_CAN_AbortTxRequest:
 1287              	.LVL85:
 1288              	.LFB299:
1313:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1314:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1315:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Abort transmission requests
1316:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1317:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1318:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1319:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1320:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1321:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1322:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1323:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1289              		.loc 1 1323 1 is_stmt 1 view -0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293              		@ link register save eliminated.
1324:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1294              		.loc 1 1324 3 view .LVU417
 1295              		.loc 1 1324 24 is_stmt 0 view .LVU418
ARM GAS  /tmp/ccgJ85Jg.s 			page 51


 1296 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1297              	.LVL86:
1325:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1326:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1298              		.loc 1 1327 3 is_stmt 1 view .LVU419
1328:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1329:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1299              		.loc 1 1329 3 view .LVU420
 1300              		.loc 1 1329 38 is_stmt 0 view .LVU421
 1301 0004 013B     		subs	r3, r3, #1
 1302              	.LVL87:
 1303              		.loc 1 1329 38 view .LVU422
 1304 0006 DBB2     		uxtb	r3, r3
 1305              		.loc 1 1329 6 view .LVU423
 1306 0008 012B     		cmp	r3, #1
 1307 000a 05D9     		bls	.L109
1330:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1331:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1332:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1333:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
1334:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1335:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1336:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
1337:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1338:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1339:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1340:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
1341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1342:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
1344:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1345:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1347:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
1348:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1349:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1350:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
1351:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1352:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1353:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
1355:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1357:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1358:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1308              		.loc 1 1359 5 is_stmt 1 view .LVU424
 1309              		.loc 1 1359 9 is_stmt 0 view .LVU425
 1310 000c 436A     		ldr	r3, [r0, #36]
 1311              		.loc 1 1359 21 view .LVU426
 1312 000e 43F48023 		orr	r3, r3, #262144
 1313 0012 4362     		str	r3, [r0, #36]
1360:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1361:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1314              		.loc 1 1361 5 is_stmt 1 view .LVU427
 1315              		.loc 1 1361 12 is_stmt 0 view .LVU428
ARM GAS  /tmp/ccgJ85Jg.s 			page 52


 1316 0014 0120     		movs	r0, #1
 1317              	.LVL88:
1362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1363:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1318              		.loc 1 1363 1 view .LVU429
 1319 0016 7047     		bx	lr
 1320              	.LVL89:
 1321              	.L109:
1333:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1322              		.loc 1 1333 5 is_stmt 1 view .LVU430
1333:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1323              		.loc 1 1333 8 is_stmt 0 view .LVU431
 1324 0018 11F0010F 		tst	r1, #1
 1325 001c 04D0     		beq	.L105
1336:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1326              		.loc 1 1336 7 is_stmt 1 view .LVU432
 1327 001e 0268     		ldr	r2, [r0]
 1328 0020 9368     		ldr	r3, [r2, #8]
 1329 0022 43F08003 		orr	r3, r3, #128
 1330 0026 9360     		str	r3, [r2, #8]
 1331              	.L105:
1340:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1332              		.loc 1 1340 5 view .LVU433
1340:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1333              		.loc 1 1340 8 is_stmt 0 view .LVU434
 1334 0028 11F0020F 		tst	r1, #2
 1335 002c 04D0     		beq	.L106
1343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1336              		.loc 1 1343 7 is_stmt 1 view .LVU435
 1337 002e 0268     		ldr	r2, [r0]
 1338 0030 9368     		ldr	r3, [r2, #8]
 1339 0032 43F40043 		orr	r3, r3, #32768
 1340 0036 9360     		str	r3, [r2, #8]
 1341              	.L106:
1347:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1342              		.loc 1 1347 5 view .LVU436
1347:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1343              		.loc 1 1347 8 is_stmt 0 view .LVU437
 1344 0038 11F0040F 		tst	r1, #4
 1345 003c 04D0     		beq	.L107
1350:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1346              		.loc 1 1350 7 is_stmt 1 view .LVU438
 1347 003e 0268     		ldr	r2, [r0]
 1348 0040 9368     		ldr	r3, [r2, #8]
 1349 0042 43F40003 		orr	r3, r3, #8388608
 1350 0046 9360     		str	r3, [r2, #8]
 1351              	.L107:
1354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1352              		.loc 1 1354 5 view .LVU439
1354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1353              		.loc 1 1354 12 is_stmt 0 view .LVU440
 1354 0048 0020     		movs	r0, #0
 1355              	.LVL90:
1354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1356              		.loc 1 1354 12 view .LVU441
 1357 004a 7047     		bx	lr
 1358              		.cfi_endproc
ARM GAS  /tmp/ccgJ85Jg.s 			page 53


 1359              	.LFE299:
 1361              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1362              		.align	1
 1363              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1368              	HAL_CAN_GetTxMailboxesFreeLevel:
 1369              	.LVL91:
 1370              	.LFB300:
1364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1365:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1366:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1368:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1370:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1371:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
1372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1371              		.loc 1 1372 1 is_stmt 1 view -0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
1373:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t freelevel = 0U;
 1376              		.loc 1 1373 3 view .LVU443
1374:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1377              		.loc 1 1374 3 view .LVU444
 1378              		.loc 1 1374 24 is_stmt 0 view .LVU445
 1379 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1380              	.LVL92:
1375:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1376:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1381              		.loc 1 1376 3 is_stmt 1 view .LVU446
 1382              		.loc 1 1376 38 is_stmt 0 view .LVU447
 1383 0004 013B     		subs	r3, r3, #1
 1384              	.LVL93:
 1385              		.loc 1 1376 38 view .LVU448
 1386 0006 DBB2     		uxtb	r3, r3
 1387              		.loc 1 1376 6 view .LVU449
 1388 0008 012B     		cmp	r3, #1
 1389 000a 01D9     		bls	.L116
1373:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1390              		.loc 1 1373 12 view .LVU450
 1391 000c 0020     		movs	r0, #0
 1392              	.LVL94:
1377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1378:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1379:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
1381:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1382:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
1383:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1384:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1385:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
1387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
ARM GAS  /tmp/ccgJ85Jg.s 			page 54


1388:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
1389:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1390:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1391:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
1393:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
1395:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1396:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1398:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1399:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return freelevel;
 1393              		.loc 1 1399 3 is_stmt 1 view .LVU451
 1394              	.L110:
1400:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1395              		.loc 1 1400 1 is_stmt 0 view .LVU452
 1396 000e 7047     		bx	lr
 1397              	.LVL95:
 1398              	.L116:
1380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1399              		.loc 1 1380 5 is_stmt 1 view .LVU453
1380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1400              		.loc 1 1380 14 is_stmt 0 view .LVU454
 1401 0010 0368     		ldr	r3, [r0]
1380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1402              		.loc 1 1380 24 view .LVU455
 1403 0012 9868     		ldr	r0, [r3, #8]
 1404              	.LVL96:
1380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1405              		.loc 1 1380 8 view .LVU456
 1406 0014 10F08060 		ands	r0, r0, #67108864
 1407 0018 00D0     		beq	.L112
1382:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1408              		.loc 1 1382 16 view .LVU457
 1409 001a 0120     		movs	r0, #1
 1410              	.L112:
 1411              	.LVL97:
1386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1412              		.loc 1 1386 5 is_stmt 1 view .LVU458
1386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1413              		.loc 1 1386 24 is_stmt 0 view .LVU459
 1414 001c 9A68     		ldr	r2, [r3, #8]
1386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1415              		.loc 1 1386 8 view .LVU460
 1416 001e 12F0006F 		tst	r2, #134217728
 1417 0022 00D0     		beq	.L113
1388:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1418              		.loc 1 1388 7 is_stmt 1 view .LVU461
1388:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1419              		.loc 1 1388 16 is_stmt 0 view .LVU462
 1420 0024 0130     		adds	r0, r0, #1
 1421              	.LVL98:
 1422              	.L113:
1392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1423              		.loc 1 1392 5 is_stmt 1 view .LVU463
1392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1424              		.loc 1 1392 24 is_stmt 0 view .LVU464
ARM GAS  /tmp/ccgJ85Jg.s 			page 55


 1425 0026 9B68     		ldr	r3, [r3, #8]
1392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1426              		.loc 1 1392 8 view .LVU465
 1427 0028 13F0805F 		tst	r3, #268435456
 1428 002c EFD0     		beq	.L110
1394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1429              		.loc 1 1394 7 is_stmt 1 view .LVU466
1394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1430              		.loc 1 1394 16 is_stmt 0 view .LVU467
 1431 002e 0130     		adds	r0, r0, #1
 1432              	.LVL99:
1394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1433              		.loc 1 1394 16 view .LVU468
 1434 0030 7047     		bx	lr
 1435              		.cfi_endproc
 1436              	.LFE300:
 1438              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1439              		.align	1
 1440              		.global	HAL_CAN_IsTxMessagePending
 1441              		.syntax unified
 1442              		.thumb
 1443              		.thumb_func
 1445              	HAL_CAN_IsTxMessagePending:
 1446              	.LVL100:
 1447              	.LFB301:
1401:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1402:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1403:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1404:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         Mailboxes.
1405:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1406:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1407:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1408:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1409:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Status
1410:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1411:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1412:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *                Tx Mailbox.
1413:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1414:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1415:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1448              		.loc 1 1415 1 is_stmt 1 view -0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 0
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452              		@ link register save eliminated.
1416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t status = 0U;
 1453              		.loc 1 1416 3 view .LVU470
1417:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1454              		.loc 1 1417 3 view .LVU471
 1455              		.loc 1 1417 24 is_stmt 0 view .LVU472
 1456 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1457              	.LVL101:
1418:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1419:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1420:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1458              		.loc 1 1420 3 is_stmt 1 view .LVU473
1421:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 56


1422:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1459              		.loc 1 1422 3 view .LVU474
 1460              		.loc 1 1422 38 is_stmt 0 view .LVU475
 1461 0004 013B     		subs	r3, r3, #1
 1462              	.LVL102:
 1463              		.loc 1 1422 38 view .LVU476
 1464 0006 DBB2     		uxtb	r3, r3
 1465              		.loc 1 1422 6 view .LVU477
 1466 0008 012B     		cmp	r3, #1
 1467 000a 01D9     		bls	.L121
1416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1468              		.loc 1 1416 12 view .LVU478
 1469 000c 0020     		movs	r0, #0
 1470              	.LVL103:
1416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1471              		.loc 1 1416 12 view .LVU479
 1472 000e 7047     		bx	lr
 1473              	.LVL104:
 1474              	.L121:
1423:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1424:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1425:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1426:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1475              		.loc 1 1426 5 is_stmt 1 view .LVU480
 1476              		.loc 1 1426 14 is_stmt 0 view .LVU481
 1477 0010 0368     		ldr	r3, [r0]
 1478              		.loc 1 1426 24 view .LVU482
 1479 0012 9B68     		ldr	r3, [r3, #8]
 1480              		.loc 1 1426 30 view .LVU483
 1481 0014 03EA8163 		and	r3, r3, r1, lsl #26
 1482              		.loc 1 1426 8 view .LVU484
 1483 0018 B3EB816F 		cmp	r3, r1, lsl #26
 1484 001c 01D0     		beq	.L122
1427:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1428:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       status = 1U;
 1485              		.loc 1 1428 14 view .LVU485
 1486 001e 0120     		movs	r0, #1
 1487              	.LVL105:
1429:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1430:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1431:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1432:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return status */
1433:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 1488              		.loc 1 1433 3 is_stmt 1 view .LVU486
1434:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1489              		.loc 1 1434 1 is_stmt 0 view .LVU487
 1490 0020 7047     		bx	lr
 1491              	.LVL106:
 1492              	.L122:
1416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1493              		.loc 1 1416 12 view .LVU488
 1494 0022 0020     		movs	r0, #0
 1495              	.LVL107:
1416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1496              		.loc 1 1416 12 view .LVU489
 1497 0024 7047     		bx	lr
 1498              		.cfi_endproc
ARM GAS  /tmp/ccgJ85Jg.s 			page 57


 1499              	.LFE301:
 1501              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1502              		.align	1
 1503              		.global	HAL_CAN_GetTxTimestamp
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1508              	HAL_CAN_GetTxTimestamp:
 1509              	.LVL108:
 1510              	.LFB302:
1435:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1436:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1437:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1438:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             mode is enabled.
1439:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1440:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1441:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1442:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         read.
1443:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1444:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1445:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1446:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(const CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1447:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1511              		.loc 1 1447 1 is_stmt 1 view -0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515              		@ link register save eliminated.
1448:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t timestamp = 0U;
 1516              		.loc 1 1448 3 view .LVU491
1449:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
 1517              		.loc 1 1449 3 view .LVU492
1450:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1518              		.loc 1 1450 3 view .LVU493
 1519              		.loc 1 1450 24 is_stmt 0 view .LVU494
 1520 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1521              	.LVL109:
1451:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1452:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1453:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
 1522              		.loc 1 1453 3 is_stmt 1 view .LVU495
1454:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1455:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1523              		.loc 1 1455 3 view .LVU496
 1524              		.loc 1 1455 38 is_stmt 0 view .LVU497
 1525 0004 013B     		subs	r3, r3, #1
 1526              	.LVL110:
 1527              		.loc 1 1455 38 view .LVU498
 1528 0006 DBB2     		uxtb	r3, r3
 1529              		.loc 1 1455 6 view .LVU499
 1530 0008 012B     		cmp	r3, #1
 1531 000a 01D9     		bls	.L128
1448:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
 1532              		.loc 1 1448 12 view .LVU500
 1533 000c 0020     		movs	r0, #0
 1534              	.LVL111:
1456:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
ARM GAS  /tmp/ccgJ85Jg.s 			page 58


1457:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1458:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select the Tx mailbox */
1459:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1460:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1461:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get timestamp */
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1463:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1464:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1465:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return the timestamp */
1466:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return timestamp;
 1535              		.loc 1 1466 3 is_stmt 1 view .LVU501
1467:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1536              		.loc 1 1467 1 is_stmt 0 view .LVU502
 1537 000e 7047     		bx	lr
 1538              	.LVL112:
 1539              	.L128:
1459:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 1540              		.loc 1 1459 5 is_stmt 1 view .LVU503
 1541              	.LBB6:
 1542              	.LBI6:
 1543              		.file 2 "stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h"
   1:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /*
   8:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  *
  10:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  *
  12:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  *
  16:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  *
  18:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
  24:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
  25:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
  28:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
  34:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  /tmp/ccgJ85Jg.s 			page 59


  37:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  38:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
  39:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  43:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  46:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  49:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  55:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  58:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  61:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  64:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  67:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  70:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  78:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
  86:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccgJ85Jg.s 			page 60


  94:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 102:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 110:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 113:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 116:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 119:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 120:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 122:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 124:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 125:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 130:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 131:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 133:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 135:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 141:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 146:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 61


 151:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     }
 155:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
 156:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  
 157:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     }
 161:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
 162:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  
 163:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 165:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 166:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 168:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 169:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 172:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 173:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 176:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 177:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 180:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 181:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 184:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 185:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   @{
 189:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 190:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 191:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 192:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 196:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 198:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 200:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 201:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 202:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 203:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 207:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
ARM GAS  /tmp/ccgJ85Jg.s 			page 62


 208:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 209:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 211:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 212:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 213:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 214:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 218:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 220:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 222:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 225:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 226:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 227:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 229:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 233:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 235:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 237:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 240:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 241:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 242:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 243:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 244:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 248:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 250:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 252:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 253:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 254:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 256:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 260:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 262:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 264:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccgJ85Jg.s 			page 63


 265:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 266:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 267:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 268:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 272:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 274:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 276:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 279:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 280:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 281:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 282:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 286:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 288:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 290:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 293:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 294:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 295:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 296:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 300:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 302:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 304:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 307:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 308:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 309:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 310:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 314:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 316:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 318:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 321:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 64


 322:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 323:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 325:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 329:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 331:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 333:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 336:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 337:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 338:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 339:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 340:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 344:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 346:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 348:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 349:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 350:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 352:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 356:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 358:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 360:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 361:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 362:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 363:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 364:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 368:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 370:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 372:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 375:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 376:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 377:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccgJ85Jg.s 			page 65


 379:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 383:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 385:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 387:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 390:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 391:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 392:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 393:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 394:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 398:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 400:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 402:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 403:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 404:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 406:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 410:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 412:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 414:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 415:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 416:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 417:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 419:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 423:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 425:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 427:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 430:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 431:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 432:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 433:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
ARM GAS  /tmp/ccgJ85Jg.s 			page 66


 436:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 437:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 439:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 441:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 442:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 443:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 444:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 445:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 449:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 451:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 453:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 456:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 457:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 458:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 460:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 464:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 466:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 468:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 471:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 472:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 473:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 474:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 475:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 479:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 481:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 483:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 484:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 485:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 487:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 491:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccgJ85Jg.s 			page 67


 493:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 495:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 496:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 497:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 498:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 502:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 506:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 508:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 510:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 511:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 512:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 513:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 517:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 519:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 521:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 522:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 523:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 524:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 528:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 530:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 532:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 535:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 536:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 537:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 539:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 543:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 545:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 547:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccgJ85Jg.s 			page 68


 550:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 551:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 552:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 553:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 554:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 558:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 560:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 562:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 563:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 564:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 566:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 570:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 572:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 574:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 575:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 576:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 577:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 578:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 583:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 585:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 587:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 588:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 589:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 590:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 594:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 596:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 598:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 601:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 602:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 603:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 605:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
ARM GAS  /tmp/ccgJ85Jg.s 			page 69


 607:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 609:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 611:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 613:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 616:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 617:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 618:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 619:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 620:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 624:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 626:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 628:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 629:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 630:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 632:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 636:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 638:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 640:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 641:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 642:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 646:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 647:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 650:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 651:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 656:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 659:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 661:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/ccgJ85Jg.s 			page 70


 664:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 666:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 670:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 671:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 672:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 674:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 678:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 681:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 683:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 687:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 691:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 692:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 693:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 694:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 695:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 696:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   
 701:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 704:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 706:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 711:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 713:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 714:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 715:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 716:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 718:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
ARM GAS  /tmp/ccgJ85Jg.s 			page 71


 721:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 722:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 725:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 727:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 731:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 733:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 734:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 735:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 736:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 737:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 738:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 743:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 746:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 748:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 753:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 757:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 758:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 759:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 760:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 762:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 766:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 769:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 771:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 775:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccgJ85Jg.s 			page 72


 778:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 779:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 780:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 781:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 782:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 783:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 784:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 789:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 792:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 794:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 799:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 801:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 802:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 803:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 804:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 806:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 810:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 813:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 815:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 819:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 821:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 822:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 823:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 824:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 827:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 828:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 829:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 833:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccgJ85Jg.s 			page 73


 835:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 843:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 845:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 848:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 849:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 851:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 852:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 853:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 854:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 855:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 859:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 861:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 869:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 871:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 872:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 874:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 875:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 876:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 877:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 879:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 880:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   @{
 884:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** */
 885:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 886:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  /tmp/ccgJ85Jg.s 			page 74


 892:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 894:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 898:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 899:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 900:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 903:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 905:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 906:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 909:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 911:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 912:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 913:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 917:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 919:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 920:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 921:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 924:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 926:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 927:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 928:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 933:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 935:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 937:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 938:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 939:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 940:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 944:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 946:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 948:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 75


 949:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 950:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 951:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 955:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 957:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 959:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 960:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 961:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 962:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 967:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 969:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
 972:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 974:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
 977:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 978:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 979:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 980:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 981:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
 986:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
 988:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 990:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
 993:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 994:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
 995:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
 996:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
1001:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
1003:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccgJ85Jg.s 			page 76


1006:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1008:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
1011:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
1012:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1013:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1014:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
1015:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
1021:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
1023:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   {
1026:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
1028:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
1030:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1031:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1032:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
1033:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
1039:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1041:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1042:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
1043:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
1048:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 1544              		.loc 2 1048 31 view .LVU504
 1545              	.LBB7:
1049:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
1050:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1546              		.loc 2 1050 3 view .LVU505
1051:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1052:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1547              		.loc 2 1055 4 view .LVU506
 1548              		.syntax unified
 1549              	@ 1055 "stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h" 1
 1550 0010 91FAA1F1 		rbit r1, r1
ARM GAS  /tmp/ccgJ85Jg.s 			page 77


 1551              	@ 0 "" 2
 1552              	.LVL113:
1056:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #else
1057:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1059:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   {
1062:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
1066:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** #endif
1068:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return result;
 1553              		.loc 2 1068 3 view .LVU507
 1554              		.loc 2 1068 3 is_stmt 0 view .LVU508
 1555              		.thumb
 1556              		.syntax unified
 1557              	.LBE7:
 1558              	.LBE6:
 1559              	.LBB8:
 1560              	.LBI8:
1069:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** }
1070:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1071:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** 
1072:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** /**
1073:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****  */
1078:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 1561              		.loc 2 1078 30 is_stmt 1 view .LVU509
 1562              	.LBB9:
1079:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h **** {
1080:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****    */
1089:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 1563              		.loc 2 1089 3 view .LVU510
 1564              		.loc 2 1089 6 is_stmt 0 view .LVU511
 1565 0014 41B1     		cbz	r1, .L127
1090:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   {
1091:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
1093:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 1566              		.loc 2 1093 3 is_stmt 1 view .LVU512
 1567              		.loc 2 1093 10 is_stmt 0 view .LVU513
 1568 0016 B1FA81F1 		clz	r1, r1
 1569              	.LVL114:
ARM GAS  /tmp/ccgJ85Jg.s 			page 78


 1570              	.L125:
 1571              		.loc 2 1093 10 view .LVU514
 1572              	.LBE9:
 1573              	.LBE8:
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1574              		.loc 1 1462 5 is_stmt 1 view .LVU515
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1575              		.loc 1 1462 22 is_stmt 0 view .LVU516
 1576 001a 0368     		ldr	r3, [r0]
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1577              		.loc 1 1462 61 view .LVU517
 1578 001c 1831     		adds	r1, r1, #24
 1579              	.LVL115:
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1580              		.loc 1 1462 61 view .LVU518
 1581 001e 03EB0113 		add	r3, r3, r1, lsl #4
 1582 0022 5868     		ldr	r0, [r3, #4]
 1583              	.LVL116:
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1584              		.loc 1 1462 85 view .LVU519
 1585 0024 000C     		lsrs	r0, r0, #16
 1586              	.LVL117:
1462:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1587              		.loc 1 1462 85 view .LVU520
 1588 0026 7047     		bx	lr
 1589              	.LVL118:
 1590              	.L127:
 1591              	.LBB11:
 1592              	.LBB10:
1091:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
 1593              		.loc 2 1091 12 view .LVU521
 1594 0028 2021     		movs	r1, #32
 1595              	.LVL119:
1091:stm/stm32l4xx/CMSIS/Include/cmsis_gcc.h ****   }
 1596              		.loc 2 1091 12 view .LVU522
 1597 002a F6E7     		b	.L125
 1598              	.LBE10:
 1599              	.LBE11:
 1600              		.cfi_endproc
 1601              	.LFE302:
 1603              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1604              		.align	1
 1605              		.global	HAL_CAN_GetRxMessage
 1606              		.syntax unified
 1607              		.thumb
 1608              		.thumb_func
 1610              	HAL_CAN_GetRxMessage:
 1611              	.LVL120:
 1612              	.LFB303:
1468:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1469:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1470:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1471:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1472:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1473:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1474:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1475:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
ARM GAS  /tmp/ccgJ85Jg.s 			page 79


1476:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         of the Rx frame will be stored.
1477:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1478:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1479:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1480:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
1481:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                        CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
1482:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1613              		.loc 1 1482 1 is_stmt 1 view -0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617              		@ link register save eliminated.
1483:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1618              		.loc 1 1483 3 view .LVU524
 1619              		.loc 1 1483 24 is_stmt 0 view .LVU525
 1620 0000 90F820C0 		ldrb	ip, [r0, #32]	@ zero_extendqisi2
 1621              	.LVL121:
1484:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1485:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1622              		.loc 1 1485 3 is_stmt 1 view .LVU526
1486:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1487:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1623              		.loc 1 1487 3 view .LVU527
 1624              		.loc 1 1487 38 is_stmt 0 view .LVU528
 1625 0004 0CF1FF3C 		add	ip, ip, #-1
 1626              	.LVL122:
 1627              		.loc 1 1487 38 view .LVU529
 1628 0008 5FFA8CFC 		uxtb	ip, ip
 1629              		.loc 1 1487 6 view .LVU530
 1630 000c BCF1010F 		cmp	ip, #1
 1631 0010 00F2A580 		bhi	.L130
1482:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1632              		.loc 1 1482 1 view .LVU531
 1633 0014 30B4     		push	{r4, r5}
 1634              	.LCFI12:
 1635              		.cfi_def_cfa_offset 8
 1636              		.cfi_offset 4, -8
 1637              		.cfi_offset 5, -4
1488:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1489:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1490:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the Rx FIFO */
1491:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1638              		.loc 1 1491 5 is_stmt 1 view .LVU532
 1639              		.loc 1 1491 8 is_stmt 0 view .LVU533
 1640 0016 51B9     		cbnz	r1, .L131
1492:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1493:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1494:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1641              		.loc 1 1494 7 is_stmt 1 view .LVU534
 1642              		.loc 1 1494 16 is_stmt 0 view .LVU535
 1643 0018 0468     		ldr	r4, [r0]
 1644              		.loc 1 1494 26 view .LVU536
 1645 001a E468     		ldr	r4, [r4, #12]
 1646              		.loc 1 1494 10 view .LVU537
 1647 001c 14F0030F 		tst	r4, #3
 1648 0020 10D1     		bne	.L132
1495:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
ARM GAS  /tmp/ccgJ85Jg.s 			page 80


1496:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1497:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1649              		.loc 1 1497 9 is_stmt 1 view .LVU538
 1650              		.loc 1 1497 13 is_stmt 0 view .LVU539
 1651 0022 436A     		ldr	r3, [r0, #36]
 1652              	.LVL123:
 1653              		.loc 1 1497 25 view .LVU540
 1654 0024 43F40013 		orr	r3, r3, #2097152
 1655 0028 4362     		str	r3, [r0, #36]
1498:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1499:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 1656              		.loc 1 1499 9 is_stmt 1 view .LVU541
 1657              		.loc 1 1499 16 is_stmt 0 view .LVU542
 1658 002a 0120     		movs	r0, #1
 1659              	.LVL124:
 1660              		.loc 1 1499 16 view .LVU543
 1661 002c 7EE0     		b	.L133
 1662              	.LVL125:
 1663              	.L131:
1500:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1501:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1502:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1503:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1504:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1505:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1664              		.loc 1 1505 7 is_stmt 1 view .LVU544
 1665              		.loc 1 1505 16 is_stmt 0 view .LVU545
 1666 002e 0468     		ldr	r4, [r0]
 1667              		.loc 1 1505 26 view .LVU546
 1668 0030 2469     		ldr	r4, [r4, #16]
 1669              		.loc 1 1505 10 view .LVU547
 1670 0032 14F0030F 		tst	r4, #3
 1671 0036 05D1     		bne	.L132
1506:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1507:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1508:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1672              		.loc 1 1508 9 is_stmt 1 view .LVU548
 1673              		.loc 1 1508 13 is_stmt 0 view .LVU549
 1674 0038 436A     		ldr	r3, [r0, #36]
 1675              	.LVL126:
 1676              		.loc 1 1508 25 view .LVU550
 1677 003a 43F40013 		orr	r3, r3, #2097152
 1678 003e 4362     		str	r3, [r0, #36]
1509:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1510:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 1679              		.loc 1 1510 9 is_stmt 1 view .LVU551
 1680              		.loc 1 1510 16 is_stmt 0 view .LVU552
 1681 0040 0120     		movs	r0, #1
 1682              	.LVL127:
 1683              		.loc 1 1510 16 view .LVU553
 1684 0042 73E0     		b	.L133
 1685              	.LVL128:
 1686              	.L132:
1511:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1512:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1513:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1514:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get the header */
ARM GAS  /tmp/ccgJ85Jg.s 			page 81


1515:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1687              		.loc 1 1515 5 is_stmt 1 view .LVU554
 1688              		.loc 1 1515 39 is_stmt 0 view .LVU555
 1689 0044 0568     		ldr	r5, [r0]
 1690              		.loc 1 1515 71 view .LVU556
 1691 0046 01F11B04 		add	r4, r1, #27
 1692 004a 2401     		lsls	r4, r4, #4
 1693 004c 2C59     		ldr	r4, [r5, r4]
 1694              		.loc 1 1515 33 view .LVU557
 1695 004e 04F00404 		and	r4, r4, #4
 1696              		.loc 1 1515 18 view .LVU558
 1697 0052 9460     		str	r4, [r2, #8]
1516:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1698              		.loc 1 1516 5 is_stmt 1 view .LVU559
 1699              		.loc 1 1516 8 is_stmt 0 view .LVU560
 1700 0054 002C     		cmp	r4, #0
 1701 0056 6BD1     		bne	.L134
1517:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1518:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1702              		.loc 1 1518 7 is_stmt 1 view .LVU561
 1703              		.loc 1 1518 45 is_stmt 0 view .LVU562
 1704 0058 0568     		ldr	r5, [r0]
 1705              		.loc 1 1518 77 view .LVU563
 1706 005a 01F11B04 		add	r4, r1, #27
 1707 005e 2401     		lsls	r4, r4, #4
 1708 0060 2C59     		ldr	r4, [r5, r4]
 1709              		.loc 1 1518 83 view .LVU564
 1710 0062 640D     		lsrs	r4, r4, #21
 1711              		.loc 1 1518 22 view .LVU565
 1712 0064 1460     		str	r4, [r2]
 1713              	.L135:
1519:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1520:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
1521:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1522:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
1523:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
1524:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1525:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 1714              		.loc 1 1525 5 is_stmt 1 view .LVU566
 1715              		.loc 1 1525 40 is_stmt 0 view .LVU567
 1716 0066 0468     		ldr	r4, [r0]
 1717              		.loc 1 1525 72 view .LVU568
 1718 0068 01F11B0C 		add	ip, r1, #27
 1719 006c 4FEA0C1C 		lsl	ip, ip, #4
 1720 0070 54F80C40 		ldr	r4, [r4, ip]
 1721              		.loc 1 1525 34 view .LVU569
 1722 0074 04F00204 		and	r4, r4, #2
 1723              		.loc 1 1525 18 view .LVU570
 1724 0078 D460     		str	r4, [r2, #12]
1526:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 1725              		.loc 1 1526 5 is_stmt 1 view .LVU571
 1726              		.loc 1 1526 31 is_stmt 0 view .LVU572
 1727 007a 0468     		ldr	r4, [r0]
 1728              		.loc 1 1526 63 view .LVU573
 1729 007c A444     		add	ip, ip, r4
 1730 007e DCF80450 		ldr	r5, [ip, #4]
 1731              		.loc 1 1526 8 view .LVU574
ARM GAS  /tmp/ccgJ85Jg.s 			page 82


 1732 0082 15F0080F 		tst	r5, #8
 1733 0086 5BD0     		beq	.L136
1527:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1528:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Truncate DLC to 8 if received field is over range */
1529:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->DLC = 8U;
 1734              		.loc 1 1529 7 is_stmt 1 view .LVU575
 1735              		.loc 1 1529 20 is_stmt 0 view .LVU576
 1736 0088 0824     		movs	r4, #8
 1737 008a 1461     		str	r4, [r2, #16]
 1738              	.L137:
1530:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1531:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
1532:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1533:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_P
1534:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1535:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1739              		.loc 1 1535 5 is_stmt 1 view .LVU577
 1740              		.loc 1 1535 54 is_stmt 0 view .LVU578
 1741 008c 0468     		ldr	r4, [r0]
 1742              		.loc 1 1535 86 view .LVU579
 1743 008e 01F11B0C 		add	ip, r1, #27
 1744 0092 04EB0C14 		add	r4, r4, ip, lsl #4
 1745 0096 6468     		ldr	r4, [r4, #4]
 1746              		.loc 1 1535 93 view .LVU580
 1747 0098 C4F30724 		ubfx	r4, r4, #8, #8
 1748              		.loc 1 1535 31 view .LVU581
 1749 009c 9461     		str	r4, [r2, #24]
1536:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1750              		.loc 1 1536 5 is_stmt 1 view .LVU582
 1751              		.loc 1 1536 48 is_stmt 0 view .LVU583
 1752 009e 0468     		ldr	r4, [r0]
 1753              		.loc 1 1536 80 view .LVU584
 1754 00a0 04EB0C14 		add	r4, r4, ip, lsl #4
 1755 00a4 6468     		ldr	r4, [r4, #4]
 1756              		.loc 1 1536 87 view .LVU585
 1757 00a6 240C     		lsrs	r4, r4, #16
 1758              		.loc 1 1536 24 view .LVU586
 1759 00a8 5461     		str	r4, [r2, #20]
1537:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1538:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get the data */
1539:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1760              		.loc 1 1539 5 is_stmt 1 view .LVU587
 1761              		.loc 1 1539 49 is_stmt 0 view .LVU588
 1762 00aa 0268     		ldr	r2, [r0]
 1763              	.LVL129:
 1764              		.loc 1 1539 81 view .LVU589
 1765 00ac 02EB0112 		add	r2, r2, r1, lsl #4
 1766 00b0 D2F8B821 		ldr	r2, [r2, #440]
 1767              		.loc 1 1539 14 view .LVU590
 1768 00b4 1A70     		strb	r2, [r3]
1540:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1769              		.loc 1 1540 5 is_stmt 1 view .LVU591
 1770              		.loc 1 1540 49 is_stmt 0 view .LVU592
 1771 00b6 0268     		ldr	r2, [r0]
 1772              		.loc 1 1540 81 view .LVU593
 1773 00b8 02EB0112 		add	r2, r2, r1, lsl #4
 1774 00bc D2F8B821 		ldr	r2, [r2, #440]
ARM GAS  /tmp/ccgJ85Jg.s 			page 83


 1775              		.loc 1 1540 16 view .LVU594
 1776 00c0 C2F30722 		ubfx	r2, r2, #8, #8
 1777              		.loc 1 1540 14 view .LVU595
 1778 00c4 5A70     		strb	r2, [r3, #1]
1541:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1779              		.loc 1 1541 5 is_stmt 1 view .LVU596
 1780              		.loc 1 1541 49 is_stmt 0 view .LVU597
 1781 00c6 0268     		ldr	r2, [r0]
 1782              		.loc 1 1541 81 view .LVU598
 1783 00c8 02EB0112 		add	r2, r2, r1, lsl #4
 1784 00cc D2F8B821 		ldr	r2, [r2, #440]
 1785              		.loc 1 1541 16 view .LVU599
 1786 00d0 C2F30742 		ubfx	r2, r2, #16, #8
 1787              		.loc 1 1541 14 view .LVU600
 1788 00d4 9A70     		strb	r2, [r3, #2]
1542:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1789              		.loc 1 1542 5 is_stmt 1 view .LVU601
 1790              		.loc 1 1542 49 is_stmt 0 view .LVU602
 1791 00d6 0268     		ldr	r2, [r0]
 1792              		.loc 1 1542 81 view .LVU603
 1793 00d8 02EB0112 		add	r2, r2, r1, lsl #4
 1794 00dc D2F8B821 		ldr	r2, [r2, #440]
 1795              		.loc 1 1542 16 view .LVU604
 1796 00e0 120E     		lsrs	r2, r2, #24
 1797              		.loc 1 1542 14 view .LVU605
 1798 00e2 DA70     		strb	r2, [r3, #3]
1543:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1799              		.loc 1 1543 5 is_stmt 1 view .LVU606
 1800              		.loc 1 1543 49 is_stmt 0 view .LVU607
 1801 00e4 0268     		ldr	r2, [r0]
 1802              		.loc 1 1543 81 view .LVU608
 1803 00e6 02EB0112 		add	r2, r2, r1, lsl #4
 1804 00ea D2F8BC21 		ldr	r2, [r2, #444]
 1805              		.loc 1 1543 14 view .LVU609
 1806 00ee 1A71     		strb	r2, [r3, #4]
1544:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1807              		.loc 1 1544 5 is_stmt 1 view .LVU610
 1808              		.loc 1 1544 49 is_stmt 0 view .LVU611
 1809 00f0 0268     		ldr	r2, [r0]
 1810              		.loc 1 1544 81 view .LVU612
 1811 00f2 02EB0112 		add	r2, r2, r1, lsl #4
 1812 00f6 D2F8BC21 		ldr	r2, [r2, #444]
 1813              		.loc 1 1544 16 view .LVU613
 1814 00fa C2F30722 		ubfx	r2, r2, #8, #8
 1815              		.loc 1 1544 14 view .LVU614
 1816 00fe 5A71     		strb	r2, [r3, #5]
1545:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1817              		.loc 1 1545 5 is_stmt 1 view .LVU615
 1818              		.loc 1 1545 49 is_stmt 0 view .LVU616
 1819 0100 0268     		ldr	r2, [r0]
 1820              		.loc 1 1545 81 view .LVU617
 1821 0102 02EB0112 		add	r2, r2, r1, lsl #4
 1822 0106 D2F8BC21 		ldr	r2, [r2, #444]
 1823              		.loc 1 1545 16 view .LVU618
 1824 010a C2F30742 		ubfx	r2, r2, #16, #8
 1825              		.loc 1 1545 14 view .LVU619
 1826 010e 9A71     		strb	r2, [r3, #6]
ARM GAS  /tmp/ccgJ85Jg.s 			page 84


1546:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1827              		.loc 1 1546 5 is_stmt 1 view .LVU620
 1828              		.loc 1 1546 49 is_stmt 0 view .LVU621
 1829 0110 0268     		ldr	r2, [r0]
 1830              		.loc 1 1546 81 view .LVU622
 1831 0112 02EB0112 		add	r2, r2, r1, lsl #4
 1832 0116 D2F8BC21 		ldr	r2, [r2, #444]
 1833              		.loc 1 1546 16 view .LVU623
 1834 011a 120E     		lsrs	r2, r2, #24
 1835              		.loc 1 1546 14 view .LVU624
 1836 011c DA71     		strb	r2, [r3, #7]
1547:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1548:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Release the FIFO */
1549:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1837              		.loc 1 1549 5 is_stmt 1 view .LVU625
 1838              		.loc 1 1549 8 is_stmt 0 view .LVU626
 1839 011e C1B9     		cbnz	r1, .L138
1550:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1551:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Release RX FIFO 0 */
1552:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1840              		.loc 1 1552 7 is_stmt 1 view .LVU627
 1841 0120 0268     		ldr	r2, [r0]
 1842 0122 D368     		ldr	r3, [r2, #12]
 1843              	.LVL130:
 1844              		.loc 1 1552 7 is_stmt 0 view .LVU628
 1845 0124 43F02003 		orr	r3, r3, #32
 1846 0128 D360     		str	r3, [r2, #12]
 1847              	.L139:
1553:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1554:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1555:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1556:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Release RX FIFO 1 */
1557:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1558:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1559:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1560:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1561:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1848              		.loc 1 1561 5 is_stmt 1 view .LVU629
 1849              		.loc 1 1561 12 is_stmt 0 view .LVU630
 1850 012a 0020     		movs	r0, #0
 1851              	.LVL131:
 1852              	.L133:
1562:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1563:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1564:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1565:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1566:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
1567:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1568:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
1569:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1570:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1853              		.loc 1 1570 1 view .LVU631
 1854 012c 30BC     		pop	{r4, r5}
 1855              	.LCFI13:
 1856              		.cfi_remember_state
 1857              		.cfi_restore 5
 1858              		.cfi_restore 4
ARM GAS  /tmp/ccgJ85Jg.s 			page 85


 1859              		.cfi_def_cfa_offset 0
 1860 012e 7047     		bx	lr
 1861              	.LVL132:
 1862              	.L134:
 1863              	.LCFI14:
 1864              		.cfi_restore_state
1522:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 1865              		.loc 1 1522 7 is_stmt 1 view .LVU632
1523:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1866              		.loc 1 1523 29 is_stmt 0 view .LVU633
 1867 0130 0568     		ldr	r5, [r0]
1523:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1868              		.loc 1 1523 61 view .LVU634
 1869 0132 01F11B04 		add	r4, r1, #27
 1870 0136 2401     		lsls	r4, r4, #4
 1871 0138 2C59     		ldr	r4, [r5, r4]
1523:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1872              		.loc 1 1523 67 view .LVU635
 1873 013a E408     		lsrs	r4, r4, #3
1522:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 1874              		.loc 1 1522 22 view .LVU636
 1875 013c 5460     		str	r4, [r2, #4]
 1876 013e 92E7     		b	.L135
 1877              	.L136:
1533:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1878              		.loc 1 1533 7 is_stmt 1 view .LVU637
1533:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1879              		.loc 1 1533 75 is_stmt 0 view .LVU638
 1880 0140 01F11B05 		add	r5, r1, #27
 1881 0144 04EB0514 		add	r4, r4, r5, lsl #4
 1882 0148 6468     		ldr	r4, [r4, #4]
1533:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1883              		.loc 1 1533 82 view .LVU639
 1884 014a 04F00F04 		and	r4, r4, #15
1533:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1885              		.loc 1 1533 20 view .LVU640
 1886 014e 1461     		str	r4, [r2, #16]
 1887 0150 9CE7     		b	.L137
 1888              	.LVL133:
 1889              	.L138:
1557:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1890              		.loc 1 1557 7 is_stmt 1 view .LVU641
 1891 0152 0268     		ldr	r2, [r0]
 1892 0154 1369     		ldr	r3, [r2, #16]
 1893              	.LVL134:
1557:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1894              		.loc 1 1557 7 is_stmt 0 view .LVU642
 1895 0156 43F02003 		orr	r3, r3, #32
 1896 015a 1361     		str	r3, [r2, #16]
 1897 015c E5E7     		b	.L139
 1898              	.LVL135:
 1899              	.L130:
 1900              	.LCFI15:
 1901              		.cfi_def_cfa_offset 0
 1902              		.cfi_restore 4
 1903              		.cfi_restore 5
1566:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 86


 1904              		.loc 1 1566 5 is_stmt 1 view .LVU643
1566:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 1905              		.loc 1 1566 9 is_stmt 0 view .LVU644
 1906 015e 436A     		ldr	r3, [r0, #36]
 1907              	.LVL136:
1566:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 1908              		.loc 1 1566 21 view .LVU645
 1909 0160 43F48023 		orr	r3, r3, #262144
 1910 0164 4362     		str	r3, [r0, #36]
1568:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1911              		.loc 1 1568 5 is_stmt 1 view .LVU646
1568:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1912              		.loc 1 1568 12 is_stmt 0 view .LVU647
 1913 0166 0120     		movs	r0, #1
 1914              	.LVL137:
 1915              		.loc 1 1570 1 view .LVU648
 1916 0168 7047     		bx	lr
 1917              		.cfi_endproc
 1918              	.LFE303:
 1920              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1921              		.align	1
 1922              		.global	HAL_CAN_GetRxFifoFillLevel
 1923              		.syntax unified
 1924              		.thumb
 1925              		.thumb_func
 1927              	HAL_CAN_GetRxFifoFillLevel:
 1928              	.LVL138:
 1929              	.LFB304:
1571:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1572:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1573:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1574:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1575:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1576:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1577:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1578:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1579:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1580:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1581:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1930              		.loc 1 1581 1 is_stmt 1 view -0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 0
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
1582:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filllevel = 0U;
 1935              		.loc 1 1582 3 view .LVU650
1583:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1936              		.loc 1 1583 3 view .LVU651
 1937              		.loc 1 1583 24 is_stmt 0 view .LVU652
 1938 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1939              	.LVL139:
1584:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1585:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1586:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1940              		.loc 1 1586 3 is_stmt 1 view .LVU653
1587:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1588:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccgJ85Jg.s 			page 87


 1941              		.loc 1 1588 3 view .LVU654
 1942              		.loc 1 1588 38 is_stmt 0 view .LVU655
 1943 0004 013B     		subs	r3, r3, #1
 1944              	.LVL140:
 1945              		.loc 1 1588 38 view .LVU656
 1946 0006 DBB2     		uxtb	r3, r3
 1947              		.loc 1 1588 6 view .LVU657
 1948 0008 012B     		cmp	r3, #1
 1949 000a 01D9     		bls	.L148
1582:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1950              		.loc 1 1582 12 view .LVU658
 1951 000c 0020     		movs	r0, #0
 1952              	.LVL141:
1589:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1590:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1591:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1592:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1594:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1595:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1596:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1598:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1599:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1600:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1601:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1602:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return filllevel;
 1953              		.loc 1 1602 3 is_stmt 1 view .LVU659
1603:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1954              		.loc 1 1603 1 is_stmt 0 view .LVU660
 1955 000e 7047     		bx	lr
 1956              	.LVL142:
 1957              	.L148:
1591:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1958              		.loc 1 1591 5 is_stmt 1 view .LVU661
1591:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1959              		.loc 1 1591 8 is_stmt 0 view .LVU662
 1960 0010 21B9     		cbnz	r1, .L146
1593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1961              		.loc 1 1593 7 is_stmt 1 view .LVU663
1593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1962              		.loc 1 1593 23 is_stmt 0 view .LVU664
 1963 0012 0368     		ldr	r3, [r0]
1593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1964              		.loc 1 1593 33 view .LVU665
 1965 0014 D868     		ldr	r0, [r3, #12]
 1966              	.LVL143:
1593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1967              		.loc 1 1593 17 view .LVU666
 1968 0016 00F00300 		and	r0, r0, #3
 1969              	.LVL144:
1593:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1970              		.loc 1 1593 17 view .LVU667
 1971 001a 7047     		bx	lr
 1972              	.LVL145:
 1973              	.L146:
1597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
ARM GAS  /tmp/ccgJ85Jg.s 			page 88


 1974              		.loc 1 1597 7 is_stmt 1 view .LVU668
1597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1975              		.loc 1 1597 23 is_stmt 0 view .LVU669
 1976 001c 0368     		ldr	r3, [r0]
1597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1977              		.loc 1 1597 33 view .LVU670
 1978 001e 1869     		ldr	r0, [r3, #16]
 1979              	.LVL146:
1597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1980              		.loc 1 1597 17 view .LVU671
 1981 0020 00F00300 		and	r0, r0, #3
 1982              	.LVL147:
1597:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1983              		.loc 1 1597 17 view .LVU672
 1984 0024 7047     		bx	lr
 1985              		.cfi_endproc
 1986              	.LFE304:
 1988              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1989              		.align	1
 1990              		.global	HAL_CAN_ActivateNotification
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1995              	HAL_CAN_ActivateNotification:
 1996              	.LVL148:
 1997              	.LFB305:
1604:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1605:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1606:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
1607:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1608:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1609:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1610:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief    Interrupts management
1611:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
1612:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
1613:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
1614:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                        ##### Interrupts management #####
1615:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
1616:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1617:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1618:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1619:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1620:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1621:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
1622:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
1623:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1624:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1625:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1626:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Enable interrupts.
1627:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1628:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1629:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1630:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1631:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1632:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1633:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1634:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
ARM GAS  /tmp/ccgJ85Jg.s 			page 89


 1998              		.loc 1 1634 1 is_stmt 1 view -0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 0, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
1635:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2003              		.loc 1 1635 3 view .LVU674
 2004              		.loc 1 1635 24 is_stmt 0 view .LVU675
 2005 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2006              	.LVL149:
1636:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1637:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1638:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
 2007              		.loc 1 1638 3 is_stmt 1 view .LVU676
1639:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1640:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2008              		.loc 1 1640 3 view .LVU677
 2009              		.loc 1 1640 38 is_stmt 0 view .LVU678
 2010 0004 013B     		subs	r3, r3, #1
 2011              	.LVL150:
 2012              		.loc 1 1640 38 view .LVU679
 2013 0006 DBB2     		uxtb	r3, r3
 2014              		.loc 1 1640 6 view .LVU680
 2015 0008 012B     		cmp	r3, #1
 2016 000a 05D9     		bls	.L152
1641:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1642:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1643:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Enable the selected interrupts */
1644:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1645:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1646:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1647:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
1648:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1649:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1650:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1651:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1652:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2017              		.loc 1 1652 5 is_stmt 1 view .LVU681
 2018              		.loc 1 1652 9 is_stmt 0 view .LVU682
 2019 000c 436A     		ldr	r3, [r0, #36]
 2020              		.loc 1 1652 21 view .LVU683
 2021 000e 43F48023 		orr	r3, r3, #262144
 2022 0012 4362     		str	r3, [r0, #36]
1653:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1654:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 2023              		.loc 1 1654 5 is_stmt 1 view .LVU684
 2024              		.loc 1 1654 12 is_stmt 0 view .LVU685
 2025 0014 0120     		movs	r0, #1
 2026              	.LVL151:
1655:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1656:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2027              		.loc 1 1656 1 view .LVU686
 2028 0016 7047     		bx	lr
 2029              	.LVL152:
 2030              	.L152:
1644:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2031              		.loc 1 1644 5 is_stmt 1 view .LVU687
ARM GAS  /tmp/ccgJ85Jg.s 			page 90


 2032 0018 0268     		ldr	r2, [r0]
 2033 001a 5369     		ldr	r3, [r2, #20]
 2034 001c 0B43     		orrs	r3, r3, r1
 2035 001e 5361     		str	r3, [r2, #20]
1647:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2036              		.loc 1 1647 5 view .LVU688
1647:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2037              		.loc 1 1647 12 is_stmt 0 view .LVU689
 2038 0020 0020     		movs	r0, #0
 2039              	.LVL153:
1647:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2040              		.loc 1 1647 12 view .LVU690
 2041 0022 7047     		bx	lr
 2042              		.cfi_endproc
 2043              	.LFE305:
 2045              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2046              		.align	1
 2047              		.global	HAL_CAN_DeactivateNotification
 2048              		.syntax unified
 2049              		.thumb
 2050              		.thumb_func
 2052              	HAL_CAN_DeactivateNotification:
 2053              	.LVL154:
 2054              	.LFB306:
1657:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1658:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1659:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Disable interrupts.
1660:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1661:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1662:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1663:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1664:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1665:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1666:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1667:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2055              		.loc 1 1667 1 is_stmt 1 view -0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 0, uses_anonymous_args = 0
 2059              		@ link register save eliminated.
1668:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2060              		.loc 1 1668 3 view .LVU692
 2061              		.loc 1 1668 24 is_stmt 0 view .LVU693
 2062 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2063              	.LVL155:
1669:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1670:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1671:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
 2064              		.loc 1 1671 3 is_stmt 1 view .LVU694
1672:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1673:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2065              		.loc 1 1673 3 view .LVU695
 2066              		.loc 1 1673 38 is_stmt 0 view .LVU696
 2067 0004 013B     		subs	r3, r3, #1
 2068              	.LVL156:
 2069              		.loc 1 1673 38 view .LVU697
 2070 0006 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccgJ85Jg.s 			page 91


 2071              		.loc 1 1673 6 view .LVU698
 2072 0008 012B     		cmp	r3, #1
 2073 000a 05D9     		bls	.L156
1674:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1675:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1676:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Disable the selected interrupts */
1677:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1678:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1679:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1680:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
1681:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1682:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1683:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1684:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1685:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2074              		.loc 1 1685 5 is_stmt 1 view .LVU699
 2075              		.loc 1 1685 9 is_stmt 0 view .LVU700
 2076 000c 436A     		ldr	r3, [r0, #36]
 2077              		.loc 1 1685 21 view .LVU701
 2078 000e 43F48023 		orr	r3, r3, #262144
 2079 0012 4362     		str	r3, [r0, #36]
1686:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1687:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 2080              		.loc 1 1687 5 is_stmt 1 view .LVU702
 2081              		.loc 1 1687 12 is_stmt 0 view .LVU703
 2082 0014 0120     		movs	r0, #1
 2083              	.LVL157:
1688:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1689:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2084              		.loc 1 1689 1 view .LVU704
 2085 0016 7047     		bx	lr
 2086              	.LVL158:
 2087              	.L156:
1677:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2088              		.loc 1 1677 5 is_stmt 1 view .LVU705
 2089 0018 0268     		ldr	r2, [r0]
 2090 001a 5369     		ldr	r3, [r2, #20]
 2091 001c 23EA0103 		bic	r3, r3, r1
 2092 0020 5361     		str	r3, [r2, #20]
1680:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2093              		.loc 1 1680 5 view .LVU706
1680:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2094              		.loc 1 1680 12 is_stmt 0 view .LVU707
 2095 0022 0020     		movs	r0, #0
 2096              	.LVL159:
1680:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2097              		.loc 1 1680 12 view .LVU708
 2098 0024 7047     		bx	lr
 2099              		.cfi_endproc
 2100              	.LFE306:
 2102              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 2103              		.align	1
 2104              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2109              	HAL_CAN_TxMailbox0CompleteCallback:
ARM GAS  /tmp/ccgJ85Jg.s 			page 92


 2110              	.LVL160:
 2111              	.LFB308:
1690:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1691:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1692:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1693:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1694:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1695:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
1696:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1697:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1698:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
1699:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1700:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1701:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1702:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1703:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1704:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1705:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1706:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1707:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1708:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1709:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1710:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1711:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1712:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1713:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1714:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1715:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1716:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1717:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1718:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1719:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1720:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1721:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1722:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1723:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1724:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1725:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1726:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1727:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1728:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1729:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1730:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1731:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1732:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1733:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1734:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1735:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1736:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1737:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1738:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1739:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1740:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1741:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1742:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1743:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1744:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
ARM GAS  /tmp/ccgJ85Jg.s 			page 93


1745:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1746:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1747:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1748:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1749:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1750:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1751:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1752:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1753:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1754:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1755:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1756:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1757:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1758:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1759:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1760:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1761:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1762:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1763:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1764:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1765:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1766:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1767:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1768:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1769:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1770:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1771:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1772:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1773:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1774:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1775:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1776:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1777:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1778:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1779:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1780:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1781:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1782:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1783:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1784:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1785:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1786:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1787:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1788:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1789:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1790:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1791:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1792:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1793:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1794:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1795:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1796:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1797:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1798:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1799:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1800:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1801:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/ccgJ85Jg.s 			page 94


1802:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1803:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1804:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1805:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1806:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1807:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1808:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1809:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1810:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1811:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1812:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1813:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1814:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1815:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1816:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1817:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1818:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1819:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1820:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1821:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1822:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1823:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1824:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1825:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1826:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1827:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1828:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1829:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1830:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1831:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1832:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1833:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1834:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1835:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1836:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1837:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1838:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1839:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1840:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1841:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1842:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1843:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1844:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1845:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1846:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1847:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1848:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1849:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1850:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1851:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1852:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1853:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1854:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1855:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1856:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1857:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1858:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
ARM GAS  /tmp/ccgJ85Jg.s 			page 95


1859:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1860:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1861:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1862:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1863:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1864:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1865:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1866:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1867:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1868:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1869:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1870:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1871:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1872:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1873:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1874:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1875:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check if message is still pending */
1876:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1877:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1878:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 0 message pending Callback */
1879:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1880:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1881:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1882:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1883:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1885:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1886:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1887:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1888:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1889:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1891:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1892:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1893:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1894:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1895:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1896:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1897:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1898:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1899:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1900:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1901:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1902:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1904:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1905:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1906:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1907:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1908:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1909:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1910:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1911:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1912:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1913:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1914:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1915:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
ARM GAS  /tmp/ccgJ85Jg.s 			page 96


1916:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1917:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1918:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1919:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1920:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1921:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1922:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1923:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1924:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check if message is still pending */
1925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1926:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1927:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 1 message pending Callback */
1928:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1929:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1930:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1931:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1932:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1933:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1934:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1935:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1936:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1937:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1938:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1939:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1940:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1941:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1942:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1943:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1944:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1945:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1946:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep Callback */
1947:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1948:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1949:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->SleepCallback(hcan);
1950:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1951:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1952:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1953:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1954:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1955:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1956:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1957:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1958:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1959:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1960:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1961:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1962:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear WakeUp Flag */
1963:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1964:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1965:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* WakeUp Callback */
1966:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1967:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1968:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1969:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1970:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1971:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1972:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccgJ85Jg.s 			page 97


1973:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1974:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1975:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1976:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1977:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1978:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1979:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1980:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1981:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Error Warning Flag */
1982:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1983:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1984:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1985:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1986:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1987:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1988:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1989:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1990:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1991:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Error Passive Flag */
1992:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1993:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1994:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1995:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1996:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1997:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1998:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1999:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2000:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2001:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Bus-off Flag */
2002:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
2003:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2004:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
2005:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2006:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2007:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2008:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2009:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2010:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2011:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Last Error Code Flag */
2012:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2013:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2014:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
2015:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2016:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
2017:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2018:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2020:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2021:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2022:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Form error */
2023:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2024:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2025:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2026:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2027:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2028:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2029:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
ARM GAS  /tmp/ccgJ85Jg.s 			page 98


2030:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2031:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2032:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2033:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2034:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2035:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2036:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2037:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2038:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to CRC error */
2039:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2040:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2041:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           default:
2042:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2043:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
2044:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2045:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Clear Last error code Flag */
2046:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2047:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2048:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2049:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2050:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Clear ERRI Flag */
2051:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2052:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2053:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2054:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2055:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2056:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2057:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code in handle */
2058:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2059:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2060:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call Error callback function */
2061:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2062:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call registered callback*/
2063:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2064:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
2065:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call weak (surcharged) callback */
2066:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2067:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2068:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2069:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2070:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2071:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2072:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
2073:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2074:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2075:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2076:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief   CAN Callback functions
2077:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
2078:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
2079:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2080:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                           ##### Callback functions #####
2081:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2082:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
2083:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     This subsection provides the following callback functions:
2084:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2085:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2086:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
ARM GAS  /tmp/ccgJ85Jg.s 			page 99


2087:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2088:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2089:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2090:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2091:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2092:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2093:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2094:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2095:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2096:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2097:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2098:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
2099:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
2100:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2101:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2102:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2103:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2104:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2105:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2106:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2107:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2108:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2109:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2112              		.loc 1 2109 1 is_stmt 1 view -0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		@ link register save eliminated.
2110:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2111:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2117              		.loc 1 2111 3 view .LVU710
2112:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2113:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2114:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2115:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2116:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2117:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2118              		.loc 1 2117 1 is_stmt 0 view .LVU711
 2119 0000 7047     		bx	lr
 2120              		.cfi_endproc
 2121              	.LFE308:
 2123              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 2124              		.align	1
 2125              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 2126              		.syntax unified
 2127              		.thumb
 2128              		.thumb_func
 2130              	HAL_CAN_TxMailbox1CompleteCallback:
 2131              	.LVL161:
 2132              	.LFB309:
2118:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2119:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2120:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2121:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2122:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2123:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
ARM GAS  /tmp/ccgJ85Jg.s 			page 100


2125:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2126:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2133              		.loc 1 2126 1 is_stmt 1 view -0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 0
 2136              		@ frame_needed = 0, uses_anonymous_args = 0
 2137              		@ link register save eliminated.
2127:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2128:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2138              		.loc 1 2128 3 view .LVU713
2129:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2130:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2131:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2132:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2133:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2134:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2139              		.loc 1 2134 1 is_stmt 0 view .LVU714
 2140 0000 7047     		bx	lr
 2141              		.cfi_endproc
 2142              	.LFE309:
 2144              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 2145              		.align	1
 2146              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2151              	HAL_CAN_TxMailbox2CompleteCallback:
 2152              	.LVL162:
 2153              	.LFB310:
2135:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2136:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2137:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2138:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2139:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2140:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2141:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2142:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2143:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2154              		.loc 1 2143 1 is_stmt 1 view -0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              		@ link register save eliminated.
2144:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2145:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2159              		.loc 1 2145 3 view .LVU716
2146:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2147:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2148:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2149:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2150:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2151:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2160              		.loc 1 2151 1 is_stmt 0 view .LVU717
 2161 0000 7047     		bx	lr
 2162              		.cfi_endproc
 2163              	.LFE310:
 2165              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
ARM GAS  /tmp/ccgJ85Jg.s 			page 101


 2166              		.align	1
 2167              		.weak	HAL_CAN_TxMailbox0AbortCallback
 2168              		.syntax unified
 2169              		.thumb
 2170              		.thumb_func
 2172              	HAL_CAN_TxMailbox0AbortCallback:
 2173              	.LVL163:
 2174              	.LFB311:
2152:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2153:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2154:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2155:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2156:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2157:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2158:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2159:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2160:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2175              		.loc 1 2160 1 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
2161:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2162:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2180              		.loc 1 2162 3 view .LVU719
2163:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2164:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2166:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2168:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2181              		.loc 1 2168 1 is_stmt 0 view .LVU720
 2182 0000 7047     		bx	lr
 2183              		.cfi_endproc
 2184              	.LFE311:
 2186              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 2187              		.align	1
 2188              		.weak	HAL_CAN_TxMailbox1AbortCallback
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2193              	HAL_CAN_TxMailbox1AbortCallback:
 2194              	.LVL164:
 2195              	.LFB312:
2169:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2170:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2171:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2172:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2173:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2174:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2175:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2176:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2177:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2196              		.loc 1 2177 1 is_stmt 1 view -0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgJ85Jg.s 			page 102


 2200              		@ link register save eliminated.
2178:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2179:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2201              		.loc 1 2179 3 view .LVU722
2180:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2181:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2182:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2183:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2184:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2185:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2202              		.loc 1 2185 1 is_stmt 0 view .LVU723
 2203 0000 7047     		bx	lr
 2204              		.cfi_endproc
 2205              	.LFE312:
 2207              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 2208              		.align	1
 2209              		.weak	HAL_CAN_TxMailbox2AbortCallback
 2210              		.syntax unified
 2211              		.thumb
 2212              		.thumb_func
 2214              	HAL_CAN_TxMailbox2AbortCallback:
 2215              	.LVL165:
 2216              	.LFB313:
2186:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2187:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2188:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2189:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2190:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2191:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2192:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2193:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2194:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2217              		.loc 1 2194 1 is_stmt 1 view -0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
 2221              		@ link register save eliminated.
2195:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2196:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2222              		.loc 1 2196 3 view .LVU725
2197:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2198:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2199:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2200:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2201:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2202:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2223              		.loc 1 2202 1 is_stmt 0 view .LVU726
 2224 0000 7047     		bx	lr
 2225              		.cfi_endproc
 2226              	.LFE313:
 2228              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 2229              		.align	1
 2230              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 2231              		.syntax unified
 2232              		.thumb
 2233              		.thumb_func
 2235              	HAL_CAN_RxFifo0MsgPendingCallback:
ARM GAS  /tmp/ccgJ85Jg.s 			page 103


 2236              	.LVL166:
 2237              	.LFB314:
2203:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2204:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2205:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2206:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2207:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2208:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2209:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2210:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2211:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2238              		.loc 1 2211 1 is_stmt 1 view -0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 0
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 2242              		@ link register save eliminated.
2212:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2213:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2243              		.loc 1 2213 3 view .LVU728
2214:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2215:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2216:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2217:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2218:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2219:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2244              		.loc 1 2219 1 is_stmt 0 view .LVU729
 2245 0000 7047     		bx	lr
 2246              		.cfi_endproc
 2247              	.LFE314:
 2249              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 2250              		.align	1
 2251              		.weak	HAL_CAN_RxFifo0FullCallback
 2252              		.syntax unified
 2253              		.thumb
 2254              		.thumb_func
 2256              	HAL_CAN_RxFifo0FullCallback:
 2257              	.LVL167:
 2258              	.LFB315:
2220:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2221:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2222:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2223:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2224:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2225:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2226:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2227:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2228:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2259              		.loc 1 2228 1 is_stmt 1 view -0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 0
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
 2263              		@ link register save eliminated.
2229:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2230:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2264              		.loc 1 2230 3 view .LVU731
2231:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2232:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  /tmp/ccgJ85Jg.s 			page 104


2233:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2234:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             file
2235:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2236:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2265              		.loc 1 2236 1 is_stmt 0 view .LVU732
 2266 0000 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE315:
 2270              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 2271              		.align	1
 2272              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 2273              		.syntax unified
 2274              		.thumb
 2275              		.thumb_func
 2277              	HAL_CAN_RxFifo1MsgPendingCallback:
 2278              	.LVL168:
 2279              	.LFB316:
2237:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2238:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2239:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2240:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2241:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2242:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2243:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2244:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2245:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2280              		.loc 1 2245 1 is_stmt 1 view -0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
2246:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2247:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2285              		.loc 1 2247 3 view .LVU734
2248:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2249:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2250:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2251:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2252:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2253:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2286              		.loc 1 2253 1 is_stmt 0 view .LVU735
 2287 0000 7047     		bx	lr
 2288              		.cfi_endproc
 2289              	.LFE316:
 2291              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 2292              		.align	1
 2293              		.weak	HAL_CAN_RxFifo1FullCallback
 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2298              	HAL_CAN_RxFifo1FullCallback:
 2299              	.LVL169:
 2300              	.LFB317:
2254:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2255:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2256:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2257:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/ccgJ85Jg.s 			page 105


2258:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2259:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2261:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2262:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2301              		.loc 1 2262 1 is_stmt 1 view -0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
2263:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2264:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2306              		.loc 1 2264 3 view .LVU737
2265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2266:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2267:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2268:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             file
2269:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2270:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2307              		.loc 1 2270 1 is_stmt 0 view .LVU738
 2308 0000 7047     		bx	lr
 2309              		.cfi_endproc
 2310              	.LFE317:
 2312              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 2313              		.align	1
 2314              		.weak	HAL_CAN_SleepCallback
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2319              	HAL_CAN_SleepCallback:
 2320              	.LVL170:
 2321              	.LFB318:
2271:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2272:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2273:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Sleep callback.
2274:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2275:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2277:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2278:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2279:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2322              		.loc 1 2279 1 is_stmt 1 view -0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
2280:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2281:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2327              		.loc 1 2281 3 view .LVU740
2282:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2283:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2284:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2285:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2286:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2328              		.loc 1 2286 1 is_stmt 0 view .LVU741
 2329 0000 7047     		bx	lr
 2330              		.cfi_endproc
ARM GAS  /tmp/ccgJ85Jg.s 			page 106


 2331              	.LFE318:
 2333              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 2334              		.align	1
 2335              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2340              	HAL_CAN_WakeUpFromRxMsgCallback:
 2341              	.LVL171:
 2342              	.LFB319:
2287:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2288:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2289:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2290:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2291:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2292:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2293:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2294:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2295:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2343              		.loc 1 2295 1 is_stmt 1 view -0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              		@ link register save eliminated.
2296:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2297:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2348              		.loc 1 2297 3 view .LVU743
2298:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2299:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2300:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2301:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2302:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2303:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2349              		.loc 1 2303 1 is_stmt 0 view .LVU744
 2350 0000 7047     		bx	lr
 2351              		.cfi_endproc
 2352              	.LFE319:
 2354              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 2355              		.align	1
 2356              		.weak	HAL_CAN_ErrorCallback
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2361              	HAL_CAN_ErrorCallback:
 2362              	.LVL172:
 2363              	.LFB320:
2304:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2305:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2306:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Error CAN callback.
2307:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2308:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2309:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2310:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2311:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2312:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2364              		.loc 1 2312 1 is_stmt 1 view -0
 2365              		.cfi_startproc
ARM GAS  /tmp/ccgJ85Jg.s 			page 107


 2366              		@ args = 0, pretend = 0, frame = 0
 2367              		@ frame_needed = 0, uses_anonymous_args = 0
 2368              		@ link register save eliminated.
2313:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2314:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 2369              		.loc 1 2314 3 view .LVU746
2315:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2316:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2317:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2318:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2319:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2370              		.loc 1 2319 1 is_stmt 0 view .LVU747
 2371 0000 7047     		bx	lr
 2372              		.cfi_endproc
 2373              	.LFE320:
 2375              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2376              		.align	1
 2377              		.global	HAL_CAN_IRQHandler
 2378              		.syntax unified
 2379              		.thumb
 2380              		.thumb_func
 2382              	HAL_CAN_IRQHandler:
 2383              	.LVL173:
 2384              	.LFB307:
1698:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2385              		.loc 1 1698 1 is_stmt 1 view -0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 0
 2388              		@ frame_needed = 0, uses_anonymous_args = 0
1698:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2389              		.loc 1 1698 1 is_stmt 0 view .LVU749
 2390 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2391              	.LCFI16:
 2392              		.cfi_def_cfa_offset 40
 2393              		.cfi_offset 3, -40
 2394              		.cfi_offset 4, -36
 2395              		.cfi_offset 5, -32
 2396              		.cfi_offset 6, -28
 2397              		.cfi_offset 7, -24
 2398              		.cfi_offset 8, -20
 2399              		.cfi_offset 9, -16
 2400              		.cfi_offset 10, -12
 2401              		.cfi_offset 11, -8
 2402              		.cfi_offset 14, -4
 2403 0004 0546     		mov	r5, r0
1699:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2404              		.loc 1 1699 3 is_stmt 1 view .LVU750
 2405              	.LVL174:
1700:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2406              		.loc 1 1700 3 view .LVU751
1700:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2407              		.loc 1 1700 25 is_stmt 0 view .LVU752
 2408 0006 0368     		ldr	r3, [r0]
1700:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2409              		.loc 1 1700 12 view .LVU753
 2410 0008 5C69     		ldr	r4, [r3, #20]
 2411              	.LVL175:
ARM GAS  /tmp/ccgJ85Jg.s 			page 108


1701:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2412              		.loc 1 1701 3 is_stmt 1 view .LVU754
1701:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2413              		.loc 1 1701 12 is_stmt 0 view .LVU755
 2414 000a D3F80480 		ldr	r8, [r3, #4]
 2415              	.LVL176:
1702:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2416              		.loc 1 1702 3 is_stmt 1 view .LVU756
1702:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2417              		.loc 1 1702 12 is_stmt 0 view .LVU757
 2418 000e 9F68     		ldr	r7, [r3, #8]
 2419              	.LVL177:
1703:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2420              		.loc 1 1703 3 is_stmt 1 view .LVU758
1703:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2421              		.loc 1 1703 12 is_stmt 0 view .LVU759
 2422 0010 D3F80CB0 		ldr	fp, [r3, #12]
 2423              	.LVL178:
1704:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2424              		.loc 1 1704 3 is_stmt 1 view .LVU760
1704:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2425              		.loc 1 1704 12 is_stmt 0 view .LVU761
 2426 0014 D3F810A0 		ldr	r10, [r3, #16]
 2427              	.LVL179:
1705:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2428              		.loc 1 1705 3 is_stmt 1 view .LVU762
1705:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2429              		.loc 1 1705 12 is_stmt 0 view .LVU763
 2430 0018 D3F81890 		ldr	r9, [r3, #24]
 2431              	.LVL180:
1708:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2432              		.loc 1 1708 3 is_stmt 1 view .LVU764
1708:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2433              		.loc 1 1708 6 is_stmt 0 view .LVU765
 2434 001c 14F00106 		ands	r6, r4, #1
 2435 0020 3BD0     		beq	.L171
1711:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2436              		.loc 1 1711 5 is_stmt 1 view .LVU766
1711:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2437              		.loc 1 1711 8 is_stmt 0 view .LVU767
 2438 0022 17F00106 		ands	r6, r7, #1
 2439 0026 16D0     		beq	.L172
1714:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2440              		.loc 1 1714 7 is_stmt 1 view .LVU768
 2441 0028 0122     		movs	r2, #1
 2442 002a 9A60     		str	r2, [r3, #8]
1716:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2443              		.loc 1 1716 7 view .LVU769
1716:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2444              		.loc 1 1716 10 is_stmt 0 view .LVU770
 2445 002c 17F0020F 		tst	r7, #2
 2446 0030 08D1     		bne	.L206
1729:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2447              		.loc 1 1729 9 is_stmt 1 view .LVU771
1729:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2448              		.loc 1 1729 12 is_stmt 0 view .LVU772
 2449 0032 17F0040F 		tst	r7, #4
ARM GAS  /tmp/ccgJ85Jg.s 			page 109


 2450 0036 0CD1     		bne	.L203
1734:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2451              		.loc 1 1734 14 is_stmt 1 view .LVU773
1734:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2452              		.loc 1 1734 17 is_stmt 0 view .LVU774
 2453 0038 17F00806 		ands	r6, r7, #8
 2454 003c 06D0     		beq	.L207
1737:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2455              		.loc 1 1737 21 view .LVU775
 2456 003e 4FF48056 		mov	r6, #4096
 2457 0042 08E0     		b	.L172
 2458              	.L206:
1724:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2459              		.loc 1 1724 9 is_stmt 1 view .LVU776
 2460 0044 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2461              	.LVL181:
1699:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2462              		.loc 1 1699 12 is_stmt 0 view .LVU777
 2463 0048 0026     		movs	r6, #0
 2464 004a 04E0     		b	.L172
 2465              	.LVL182:
 2466              	.L207:
1747:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2467              		.loc 1 1747 11 is_stmt 1 view .LVU778
 2468 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2469              	.LVL183:
1747:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2470              		.loc 1 1747 11 is_stmt 0 view .LVU779
 2471 0050 01E0     		b	.L172
 2472              	.LVL184:
 2473              	.L203:
1732:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2474              		.loc 1 1732 21 view .LVU780
 2475 0052 4FF40066 		mov	r6, #2048
 2476              	.LVL185:
 2477              	.L172:
1754:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2478              		.loc 1 1754 5 is_stmt 1 view .LVU781
1754:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2479              		.loc 1 1754 8 is_stmt 0 view .LVU782
 2480 0056 17F4807F 		tst	r7, #256
 2481 005a 0DD0     		beq	.L174
1757:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2482              		.loc 1 1757 7 is_stmt 1 view .LVU783
 2483 005c 2B68     		ldr	r3, [r5]
 2484 005e 4FF48072 		mov	r2, #256
 2485 0062 9A60     		str	r2, [r3, #8]
1759:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2486              		.loc 1 1759 7 view .LVU784
1759:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2487              		.loc 1 1759 10 is_stmt 0 view .LVU785
 2488 0064 17F4007F 		tst	r7, #512
 2489 0068 40F08680 		bne	.L208
1772:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2490              		.loc 1 1772 9 is_stmt 1 view .LVU786
1772:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2491              		.loc 1 1772 12 is_stmt 0 view .LVU787
ARM GAS  /tmp/ccgJ85Jg.s 			page 110


 2492 006c 17F4806F 		tst	r7, #1024
 2493 0070 00F08680 		beq	.L176
1775:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2494              		.loc 1 1775 11 is_stmt 1 view .LVU788
1775:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2495              		.loc 1 1775 21 is_stmt 0 view .LVU789
 2496 0074 46F40056 		orr	r6, r6, #8192
 2497              	.LVL186:
 2498              	.L174:
1797:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2499              		.loc 1 1797 5 is_stmt 1 view .LVU790
1797:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2500              		.loc 1 1797 8 is_stmt 0 view .LVU791
 2501 0078 17F4803F 		tst	r7, #65536
 2502 007c 0DD0     		beq	.L171
1800:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2503              		.loc 1 1800 7 is_stmt 1 view .LVU792
 2504 007e 2B68     		ldr	r3, [r5]
 2505 0080 4FF48032 		mov	r2, #65536
 2506 0084 9A60     		str	r2, [r3, #8]
1802:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2507              		.loc 1 1802 7 view .LVU793
1802:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2508              		.loc 1 1802 10 is_stmt 0 view .LVU794
 2509 0086 17F4003F 		tst	r7, #131072
 2510 008a 40F08380 		bne	.L209
1815:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2511              		.loc 1 1815 9 is_stmt 1 view .LVU795
1815:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2512              		.loc 1 1815 12 is_stmt 0 view .LVU796
 2513 008e 17F4802F 		tst	r7, #262144
 2514 0092 00F08380 		beq	.L179
1818:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2515              		.loc 1 1818 11 is_stmt 1 view .LVU797
1818:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2516              		.loc 1 1818 21 is_stmt 0 view .LVU798
 2517 0096 46F40046 		orr	r6, r6, #32768
 2518              	.LVL187:
 2519              	.L171:
1841:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2520              		.loc 1 1841 3 is_stmt 1 view .LVU799
1841:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2521              		.loc 1 1841 6 is_stmt 0 view .LVU800
 2522 009a 14F0080F 		tst	r4, #8
 2523 009e 07D0     		beq	.L181
1843:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2524              		.loc 1 1843 5 is_stmt 1 view .LVU801
1843:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2525              		.loc 1 1843 8 is_stmt 0 view .LVU802
 2526 00a0 1BF0100F 		tst	fp, #16
 2527 00a4 04D0     		beq	.L181
1846:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2528              		.loc 1 1846 7 is_stmt 1 view .LVU803
1846:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2529              		.loc 1 1846 17 is_stmt 0 view .LVU804
 2530 00a6 46F40076 		orr	r6, r6, #512
 2531              	.LVL188:
ARM GAS  /tmp/ccgJ85Jg.s 			page 111


1849:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2532              		.loc 1 1849 7 is_stmt 1 view .LVU805
 2533 00aa 2B68     		ldr	r3, [r5]
 2534 00ac 1022     		movs	r2, #16
 2535 00ae DA60     		str	r2, [r3, #12]
 2536              	.L181:
1854:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2537              		.loc 1 1854 3 view .LVU806
1854:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2538              		.loc 1 1854 6 is_stmt 0 view .LVU807
 2539 00b0 14F0040F 		tst	r4, #4
 2540 00b4 02D0     		beq	.L182
1856:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2541              		.loc 1 1856 5 is_stmt 1 view .LVU808
1856:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2542              		.loc 1 1856 8 is_stmt 0 view .LVU809
 2543 00b6 1BF0080F 		tst	fp, #8
 2544 00ba 79D1     		bne	.L210
 2545              	.L182:
1873:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2546              		.loc 1 1873 3 is_stmt 1 view .LVU810
1873:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2547              		.loc 1 1873 6 is_stmt 0 view .LVU811
 2548 00bc 14F0020F 		tst	r4, #2
 2549 00c0 04D0     		beq	.L183
1876:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2550              		.loc 1 1876 5 is_stmt 1 view .LVU812
1876:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2551              		.loc 1 1876 14 is_stmt 0 view .LVU813
 2552 00c2 2B68     		ldr	r3, [r5]
1876:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2553              		.loc 1 1876 24 view .LVU814
 2554 00c4 DB68     		ldr	r3, [r3, #12]
1876:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2555              		.loc 1 1876 8 view .LVU815
 2556 00c6 13F0030F 		tst	r3, #3
 2557 00ca 78D1     		bne	.L211
 2558              	.L183:
1890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2559              		.loc 1 1890 3 is_stmt 1 view .LVU816
1890:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2560              		.loc 1 1890 6 is_stmt 0 view .LVU817
 2561 00cc 14F0400F 		tst	r4, #64
 2562 00d0 07D0     		beq	.L184
1892:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2563              		.loc 1 1892 5 is_stmt 1 view .LVU818
1892:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2564              		.loc 1 1892 8 is_stmt 0 view .LVU819
 2565 00d2 1AF0100F 		tst	r10, #16
 2566 00d6 04D0     		beq	.L184
1895:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2567              		.loc 1 1895 7 is_stmt 1 view .LVU820
1895:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2568              		.loc 1 1895 17 is_stmt 0 view .LVU821
 2569 00d8 46F48066 		orr	r6, r6, #1024
 2570              	.LVL189:
1898:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
ARM GAS  /tmp/ccgJ85Jg.s 			page 112


 2571              		.loc 1 1898 7 is_stmt 1 view .LVU822
 2572 00dc 2B68     		ldr	r3, [r5]
 2573 00de 1022     		movs	r2, #16
 2574 00e0 1A61     		str	r2, [r3, #16]
 2575              	.L184:
1903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2576              		.loc 1 1903 3 view .LVU823
1903:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2577              		.loc 1 1903 6 is_stmt 0 view .LVU824
 2578 00e2 14F0200F 		tst	r4, #32
 2579 00e6 02D0     		beq	.L185
1905:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2580              		.loc 1 1905 5 is_stmt 1 view .LVU825
1905:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2581              		.loc 1 1905 8 is_stmt 0 view .LVU826
 2582 00e8 1AF0080F 		tst	r10, #8
 2583 00ec 6BD1     		bne	.L212
 2584              	.L185:
1922:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2585              		.loc 1 1922 3 is_stmt 1 view .LVU827
1922:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2586              		.loc 1 1922 6 is_stmt 0 view .LVU828
 2587 00ee 14F0100F 		tst	r4, #16
 2588 00f2 04D0     		beq	.L186
1925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2589              		.loc 1 1925 5 is_stmt 1 view .LVU829
1925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2590              		.loc 1 1925 14 is_stmt 0 view .LVU830
 2591 00f4 2B68     		ldr	r3, [r5]
1925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2592              		.loc 1 1925 24 view .LVU831
 2593 00f6 1B69     		ldr	r3, [r3, #16]
1925:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2594              		.loc 1 1925 8 view .LVU832
 2595 00f8 13F0030F 		tst	r3, #3
 2596 00fc 6AD1     		bne	.L213
 2597              	.L186:
1939:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2598              		.loc 1 1939 3 is_stmt 1 view .LVU833
1939:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2599              		.loc 1 1939 6 is_stmt 0 view .LVU834
 2600 00fe 14F4003F 		tst	r4, #131072
 2601 0102 02D0     		beq	.L187
1941:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2602              		.loc 1 1941 5 is_stmt 1 view .LVU835
1941:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2603              		.loc 1 1941 8 is_stmt 0 view .LVU836
 2604 0104 18F0100F 		tst	r8, #16
 2605 0108 68D1     		bne	.L214
 2606              	.L187:
1958:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2607              		.loc 1 1958 3 is_stmt 1 view .LVU837
1958:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2608              		.loc 1 1958 6 is_stmt 0 view .LVU838
 2609 010a 14F4803F 		tst	r4, #65536
 2610 010e 02D0     		beq	.L188
1960:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
ARM GAS  /tmp/ccgJ85Jg.s 			page 113


 2611              		.loc 1 1960 5 is_stmt 1 view .LVU839
1960:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2612              		.loc 1 1960 8 is_stmt 0 view .LVU840
 2613 0110 18F0080F 		tst	r8, #8
 2614 0114 69D1     		bne	.L215
 2615              	.L188:
1977:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2616              		.loc 1 1977 3 is_stmt 1 view .LVU841
1977:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2617              		.loc 1 1977 6 is_stmt 0 view .LVU842
 2618 0116 14F4004F 		tst	r4, #32768
 2619 011a 7AD0     		beq	.L189
1979:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2620              		.loc 1 1979 5 is_stmt 1 view .LVU843
1979:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2621              		.loc 1 1979 8 is_stmt 0 view .LVU844
 2622 011c 18F0040F 		tst	r8, #4
 2623 0120 74D0     		beq	.L190
1982:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2624              		.loc 1 1982 7 is_stmt 1 view .LVU845
1982:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2625              		.loc 1 1982 10 is_stmt 0 view .LVU846
 2626 0122 14F4807F 		tst	r4, #256
 2627 0126 04D0     		beq	.L191
1982:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2628              		.loc 1 1982 55 discriminator 1 view .LVU847
 2629 0128 19F0010F 		tst	r9, #1
 2630 012c 01D0     		beq	.L191
1986:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2631              		.loc 1 1986 9 is_stmt 1 view .LVU848
1986:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2632              		.loc 1 1986 19 is_stmt 0 view .LVU849
 2633 012e 46F00106 		orr	r6, r6, #1
 2634              	.LVL190:
 2635              	.L191:
1992:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2636              		.loc 1 1992 7 is_stmt 1 view .LVU850
1992:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2637              		.loc 1 1992 10 is_stmt 0 view .LVU851
 2638 0132 14F4007F 		tst	r4, #512
 2639 0136 04D0     		beq	.L192
1992:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2640              		.loc 1 1992 55 discriminator 1 view .LVU852
 2641 0138 19F0020F 		tst	r9, #2
 2642 013c 01D0     		beq	.L192
1996:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2643              		.loc 1 1996 9 is_stmt 1 view .LVU853
1996:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2644              		.loc 1 1996 19 is_stmt 0 view .LVU854
 2645 013e 46F00206 		orr	r6, r6, #2
 2646              	.LVL191:
 2647              	.L192:
2002:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2648              		.loc 1 2002 7 is_stmt 1 view .LVU855
2002:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2649              		.loc 1 2002 10 is_stmt 0 view .LVU856
 2650 0142 14F4806F 		tst	r4, #1024
ARM GAS  /tmp/ccgJ85Jg.s 			page 114


 2651 0146 04D0     		beq	.L193
2002:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2652              		.loc 1 2002 48 discriminator 1 view .LVU857
 2653 0148 19F0040F 		tst	r9, #4
 2654 014c 01D0     		beq	.L193
2006:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2655              		.loc 1 2006 9 is_stmt 1 view .LVU858
2006:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2656              		.loc 1 2006 19 is_stmt 0 view .LVU859
 2657 014e 46F00406 		orr	r6, r6, #4
 2658              	.LVL192:
 2659              	.L193:
2012:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2660              		.loc 1 2012 7 is_stmt 1 view .LVU860
2012:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2661              		.loc 1 2012 10 is_stmt 0 view .LVU861
 2662 0152 14F4006F 		tst	r4, #2048
 2663 0156 59D0     		beq	.L190
2012:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2664              		.loc 1 2012 57 discriminator 1 view .LVU862
 2665 0158 19F07009 		ands	r9, r9, #112
 2666              	.LVL193:
2012:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2667              		.loc 1 2012 57 discriminator 1 view .LVU863
 2668 015c 56D0     		beq	.L190
2015:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2669              		.loc 1 2015 9 is_stmt 1 view .LVU864
 2670 015e B9F1400F 		cmp	r9, #64
 2671 0162 65D0     		beq	.L194
 2672 0164 58D8     		bhi	.L195
 2673 0166 B9F1200F 		cmp	r9, #32
 2674 016a 5ED0     		beq	.L196
 2675 016c B9F1300F 		cmp	r9, #48
 2676 0170 42D1     		bne	.L216
2027:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2677              		.loc 1 2027 13 view .LVU865
2027:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2678              		.loc 1 2027 23 is_stmt 0 view .LVU866
 2679 0172 46F02006 		orr	r6, r6, #32
 2680              	.LVL194:
2028:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2681              		.loc 1 2028 13 is_stmt 1 view .LVU867
 2682 0176 44E0     		b	.L199
 2683              	.LVL195:
 2684              	.L208:
1767:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2685              		.loc 1 1767 9 view .LVU868
 2686 0178 2846     		mov	r0, r5
 2687 017a FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2688              	.LVL196:
 2689 017e 7BE7     		b	.L174
 2690              	.L176:
1777:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2691              		.loc 1 1777 14 view .LVU869
1777:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2692              		.loc 1 1777 17 is_stmt 0 view .LVU870
 2693 0180 17F4006F 		tst	r7, #2048
ARM GAS  /tmp/ccgJ85Jg.s 			page 115


 2694 0184 02D0     		beq	.L177
1780:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2695              		.loc 1 1780 11 is_stmt 1 view .LVU871
1780:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2696              		.loc 1 1780 21 is_stmt 0 view .LVU872
 2697 0186 46F48046 		orr	r6, r6, #16384
 2698              	.LVL197:
1780:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2699              		.loc 1 1780 21 view .LVU873
 2700 018a 75E7     		b	.L174
 2701              	.L177:
1790:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2702              		.loc 1 1790 11 is_stmt 1 view .LVU874
 2703 018c 2846     		mov	r0, r5
 2704 018e FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2705              	.LVL198:
 2706 0192 71E7     		b	.L174
 2707              	.L209:
1810:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2708              		.loc 1 1810 9 view .LVU875
 2709 0194 2846     		mov	r0, r5
 2710 0196 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2711              	.LVL199:
 2712 019a 7EE7     		b	.L171
 2713              	.L179:
1820:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2714              		.loc 1 1820 14 view .LVU876
1820:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2715              		.loc 1 1820 17 is_stmt 0 view .LVU877
 2716 019c 17F4002F 		tst	r7, #524288
 2717 01a0 02D0     		beq	.L180
1823:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2718              		.loc 1 1823 11 is_stmt 1 view .LVU878
1823:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2719              		.loc 1 1823 21 is_stmt 0 view .LVU879
 2720 01a2 46F48036 		orr	r6, r6, #65536
 2721              	.LVL200:
1823:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2722              		.loc 1 1823 21 view .LVU880
 2723 01a6 78E7     		b	.L171
 2724              	.L180:
1833:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2725              		.loc 1 1833 11 is_stmt 1 view .LVU881
 2726 01a8 2846     		mov	r0, r5
 2727 01aa FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2728              	.LVL201:
 2729 01ae 74E7     		b	.L171
 2730              	.L210:
1859:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2731              		.loc 1 1859 7 view .LVU882
 2732 01b0 2B68     		ldr	r3, [r5]
 2733 01b2 0822     		movs	r2, #8
 2734 01b4 DA60     		str	r2, [r3, #12]
1867:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2735              		.loc 1 1867 7 view .LVU883
 2736 01b6 2846     		mov	r0, r5
 2737 01b8 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/ccgJ85Jg.s 			page 116


 2738              	.LVL202:
 2739 01bc 7EE7     		b	.L182
 2740              	.L211:
1884:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2741              		.loc 1 1884 7 view .LVU884
 2742 01be 2846     		mov	r0, r5
 2743 01c0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2744              	.LVL203:
 2745 01c4 82E7     		b	.L183
 2746              	.L212:
1908:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2747              		.loc 1 1908 7 view .LVU885
 2748 01c6 2B68     		ldr	r3, [r5]
 2749 01c8 0822     		movs	r2, #8
 2750 01ca 1A61     		str	r2, [r3, #16]
1916:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2751              		.loc 1 1916 7 view .LVU886
 2752 01cc 2846     		mov	r0, r5
 2753 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2754              	.LVL204:
 2755 01d2 8CE7     		b	.L185
 2756              	.L213:
1933:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2757              		.loc 1 1933 7 view .LVU887
 2758 01d4 2846     		mov	r0, r5
 2759 01d6 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2760              	.LVL205:
 2761 01da 90E7     		b	.L186
 2762              	.L214:
1944:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2763              		.loc 1 1944 7 view .LVU888
 2764 01dc 2B68     		ldr	r3, [r5]
 2765 01de 1022     		movs	r2, #16
 2766 01e0 5A60     		str	r2, [r3, #4]
1952:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2767              		.loc 1 1952 7 view .LVU889
 2768 01e2 2846     		mov	r0, r5
 2769 01e4 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2770              	.LVL206:
 2771 01e8 8FE7     		b	.L187
 2772              	.L215:
1963:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2773              		.loc 1 1963 7 view .LVU890
 2774 01ea 2B68     		ldr	r3, [r5]
 2775 01ec 0822     		movs	r2, #8
 2776 01ee 5A60     		str	r2, [r3, #4]
1971:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2777              		.loc 1 1971 7 view .LVU891
 2778 01f0 2846     		mov	r0, r5
 2779 01f2 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2780              	.LVL207:
 2781 01f6 8EE7     		b	.L188
 2782              	.LVL208:
 2783              	.L216:
2015:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2784              		.loc 1 2015 9 is_stmt 0 view .LVU892
 2785 01f8 B9F1100F 		cmp	r9, #16
ARM GAS  /tmp/ccgJ85Jg.s 			page 117


 2786 01fc 01D1     		bne	.L199
2019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2787              		.loc 1 2019 13 is_stmt 1 view .LVU893
2019:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2788              		.loc 1 2019 23 is_stmt 0 view .LVU894
 2789 01fe 46F00806 		orr	r6, r6, #8
 2790              	.LVL209:
2020:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2791              		.loc 1 2020 13 is_stmt 1 view .LVU895
 2792              	.L199:
2046:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 2793              		.loc 1 2046 9 view .LVU896
 2794 0202 2A68     		ldr	r2, [r5]
 2795 0204 9369     		ldr	r3, [r2, #24]
 2796 0206 23F07003 		bic	r3, r3, #112
 2797 020a 9361     		str	r3, [r2, #24]
 2798              	.L190:
2051:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2799              		.loc 1 2051 5 view .LVU897
 2800 020c 2B68     		ldr	r3, [r5]
 2801 020e 0422     		movs	r2, #4
 2802 0210 5A60     		str	r2, [r3, #4]
 2803              	.L189:
2055:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2804              		.loc 1 2055 3 view .LVU898
2055:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2805              		.loc 1 2055 6 is_stmt 0 view .LVU899
 2806 0212 9EB9     		cbnz	r6, .L217
 2807              	.L170:
2069:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2808              		.loc 1 2069 1 view .LVU900
 2809 0214 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2810              	.LVL210:
 2811              	.L195:
2015:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2812              		.loc 1 2015 9 view .LVU901
 2813 0218 B9F1500F 		cmp	r9, #80
 2814 021c 0BD0     		beq	.L200
 2815 021e B9F1600F 		cmp	r9, #96
 2816 0222 EED1     		bne	.L199
2039:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2817              		.loc 1 2039 13 is_stmt 1 view .LVU902
2039:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2818              		.loc 1 2039 23 is_stmt 0 view .LVU903
 2819 0224 46F48076 		orr	r6, r6, #256
 2820              	.LVL211:
2040:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           default:
 2821              		.loc 1 2040 13 is_stmt 1 view .LVU904
 2822 0228 EBE7     		b	.L199
 2823              	.L196:
2023:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2824              		.loc 1 2023 13 view .LVU905
2023:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2825              		.loc 1 2023 23 is_stmt 0 view .LVU906
 2826 022a 46F01006 		orr	r6, r6, #16
 2827              	.LVL212:
2024:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
ARM GAS  /tmp/ccgJ85Jg.s 			page 118


 2828              		.loc 1 2024 13 is_stmt 1 view .LVU907
 2829 022e E8E7     		b	.L199
 2830              	.L194:
2031:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2831              		.loc 1 2031 13 view .LVU908
2031:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2832              		.loc 1 2031 23 is_stmt 0 view .LVU909
 2833 0230 46F04006 		orr	r6, r6, #64
 2834              	.LVL213:
2032:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2835              		.loc 1 2032 13 is_stmt 1 view .LVU910
 2836 0234 E5E7     		b	.L199
 2837              	.L200:
2035:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2838              		.loc 1 2035 13 view .LVU911
2035:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2839              		.loc 1 2035 23 is_stmt 0 view .LVU912
 2840 0236 46F08006 		orr	r6, r6, #128
 2841              	.LVL214:
2036:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2842              		.loc 1 2036 13 is_stmt 1 view .LVU913
 2843 023a E2E7     		b	.L199
 2844              	.L217:
2058:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2845              		.loc 1 2058 5 view .LVU914
2058:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2846              		.loc 1 2058 9 is_stmt 0 view .LVU915
 2847 023c 6B6A     		ldr	r3, [r5, #36]
2058:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2848              		.loc 1 2058 21 view .LVU916
 2849 023e 3343     		orrs	r3, r3, r6
 2850 0240 6B62     		str	r3, [r5, #36]
2066:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2851              		.loc 1 2066 5 is_stmt 1 view .LVU917
 2852 0242 2846     		mov	r0, r5
 2853 0244 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2854              	.LVL215:
2069:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2855              		.loc 1 2069 1 is_stmt 0 view .LVU918
 2856 0248 E4E7     		b	.L170
 2857              		.cfi_endproc
 2858              	.LFE307:
 2860              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2861              		.align	1
 2862              		.global	HAL_CAN_GetState
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2867              	HAL_CAN_GetState:
 2868              	.LVL216:
 2869              	.LFB321:
2320:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2321:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2322:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
2323:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2324:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2325:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
ARM GAS  /tmp/ccgJ85Jg.s 			page 119


2326:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief   CAN Peripheral State functions
2327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
2328:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
2329:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2330:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2331:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2332:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
2333:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     This subsection provides functions allowing to :
2334:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2335:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2336:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2337:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2338:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
2339:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
2340:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2342:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return the CAN state.
2344:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2345:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL state
2347:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2348:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
2349:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2870              		.loc 1 2349 1 is_stmt 1 view -0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 2874              		@ link register save eliminated.
 2875              		.loc 1 2349 1 is_stmt 0 view .LVU920
 2876 0000 0246     		mov	r2, r0
2350:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2877              		.loc 1 2350 3 is_stmt 1 view .LVU921
 2878              		.loc 1 2350 24 is_stmt 0 view .LVU922
 2879 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2880 0006 D8B2     		uxtb	r0, r3
 2881              	.LVL217:
2351:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2352:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2882              		.loc 1 2352 3 is_stmt 1 view .LVU923
 2883              		.loc 1 2352 38 is_stmt 0 view .LVU924
 2884 0008 013B     		subs	r3, r3, #1
 2885 000a DBB2     		uxtb	r3, r3
 2886              		.loc 1 2352 6 view .LVU925
 2887 000c 012B     		cmp	r3, #1
 2888 000e 00D9     		bls	.L222
 2889              	.LVL218:
 2890              	.L219:
2353:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2355:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
2357:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2358:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep mode is active */
2359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2360:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2361:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check sleep mode request flag */
ARM GAS  /tmp/ccgJ85Jg.s 			page 120


2362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
2363:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep mode request is pending */
2365:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
2366:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
2368:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2370:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2891              		.loc 1 2370 5 is_stmt 1 view .LVU926
2371:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2373:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return CAN state */
2374:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return state;
 2892              		.loc 1 2374 3 view .LVU927
2375:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2893              		.loc 1 2375 1 is_stmt 0 view .LVU928
 2894 0010 7047     		bx	lr
 2895              	.LVL219:
 2896              	.L222:
2356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2897              		.loc 1 2356 5 is_stmt 1 view .LVU929
2356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2898              		.loc 1 2356 14 is_stmt 0 view .LVU930
 2899 0012 1368     		ldr	r3, [r2]
2356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2900              		.loc 1 2356 24 view .LVU931
 2901 0014 5A68     		ldr	r2, [r3, #4]
 2902              	.LVL220:
2356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2903              		.loc 1 2356 8 view .LVU932
 2904 0016 12F0020F 		tst	r2, #2
 2905 001a 05D1     		bne	.L220
2362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2906              		.loc 1 2362 10 is_stmt 1 view .LVU933
2362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2907              		.loc 1 2362 29 is_stmt 0 view .LVU934
 2908 001c 1B68     		ldr	r3, [r3]
2362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2909              		.loc 1 2362 13 view .LVU935
 2910 001e 13F0020F 		tst	r3, #2
 2911 0022 F5D0     		beq	.L219
2365:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2912              		.loc 1 2365 13 view .LVU936
 2913 0024 0320     		movs	r0, #3
 2914              	.LVL221:
2365:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2915              		.loc 1 2365 13 view .LVU937
 2916 0026 F3E7     		b	.L219
 2917              	.LVL222:
 2918              	.L220:
2359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2919              		.loc 1 2359 13 view .LVU938
 2920 0028 0420     		movs	r0, #4
 2921              	.LVL223:
2359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2922              		.loc 1 2359 13 view .LVU939
ARM GAS  /tmp/ccgJ85Jg.s 			page 121


 2923 002a 7047     		bx	lr
 2924              		.cfi_endproc
 2925              	.LFE321:
 2927              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2928              		.align	1
 2929              		.global	HAL_CAN_GetError
 2930              		.syntax unified
 2931              		.thumb
 2932              		.thumb_func
 2934              	HAL_CAN_GetError:
 2935              	.LVL224:
 2936              	.LFB322:
2376:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2378:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return the CAN error code.
2379:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2381:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval CAN Error Code
2382:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2383:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
2384:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2937              		.loc 1 2384 1 is_stmt 1 view -0
 2938              		.cfi_startproc
 2939              		@ args = 0, pretend = 0, frame = 0
 2940              		@ frame_needed = 0, uses_anonymous_args = 0
 2941              		@ link register save eliminated.
2385:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return CAN error code */
2386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return hcan->ErrorCode;
 2942              		.loc 1 2386 3 view .LVU941
 2943              		.loc 1 2386 14 is_stmt 0 view .LVU942
 2944 0000 406A     		ldr	r0, [r0, #36]
 2945              	.LVL225:
2387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2946              		.loc 1 2387 1 view .LVU943
 2947 0002 7047     		bx	lr
 2948              		.cfi_endproc
 2949              	.LFE322:
 2951              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2952              		.align	1
 2953              		.global	HAL_CAN_ResetError
 2954              		.syntax unified
 2955              		.thumb
 2956              		.thumb_func
 2958              	HAL_CAN_ResetError:
 2959              	.LVL226:
 2960              	.LFB323:
2388:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2389:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2390:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Reset the CAN error code.
2391:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2393:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
2394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2395:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2396:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2961              		.loc 1 2396 1 is_stmt 1 view -0
 2962              		.cfi_startproc
ARM GAS  /tmp/ccgJ85Jg.s 			page 122


 2963              		@ args = 0, pretend = 0, frame = 0
 2964              		@ frame_needed = 0, uses_anonymous_args = 0
 2965              		@ link register save eliminated.
2397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 2966              		.loc 1 2397 3 view .LVU945
2398:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2967              		.loc 1 2398 3 view .LVU946
 2968              		.loc 1 2398 24 is_stmt 0 view .LVU947
 2969 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2970              	.LVL227:
2399:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2400:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2971              		.loc 1 2400 3 is_stmt 1 view .LVU948
 2972              		.loc 1 2400 38 is_stmt 0 view .LVU949
 2973 0004 013B     		subs	r3, r3, #1
 2974              	.LVL228:
 2975              		.loc 1 2400 38 view .LVU950
 2976 0006 DBB2     		uxtb	r3, r3
 2977              		.loc 1 2400 6 view .LVU951
 2978 0008 012B     		cmp	r3, #1
 2979 000a 05D9     		bls	.L227
2401:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2402:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2403:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset CAN error code */
2404:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode = 0U;
2405:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2406:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
2407:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2408:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
2409:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2980              		.loc 1 2409 5 is_stmt 1 view .LVU952
 2981              		.loc 1 2409 9 is_stmt 0 view .LVU953
 2982 000c 436A     		ldr	r3, [r0, #36]
 2983              		.loc 1 2409 21 view .LVU954
 2984 000e 43F48023 		orr	r3, r3, #262144
 2985 0012 4362     		str	r3, [r0, #36]
2410:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2411:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status = HAL_ERROR;
 2986              		.loc 1 2411 5 is_stmt 1 view .LVU955
 2987              	.LVL229:
 2988              		.loc 1 2411 12 is_stmt 0 view .LVU956
 2989 0014 0120     		movs	r0, #1
 2990              	.LVL230:
2412:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2413:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2414:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return the status */
2415:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 2991              		.loc 1 2415 3 is_stmt 1 view .LVU957
2416:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2992              		.loc 1 2416 1 is_stmt 0 view .LVU958
 2993 0016 7047     		bx	lr
 2994              	.LVL231:
 2995              	.L227:
2404:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2996              		.loc 1 2404 5 is_stmt 1 view .LVU959
2404:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2997              		.loc 1 2404 21 is_stmt 0 view .LVU960
ARM GAS  /tmp/ccgJ85Jg.s 			page 123


 2998 0018 0023     		movs	r3, #0
 2999 001a 4362     		str	r3, [r0, #36]
2397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3000              		.loc 1 2397 21 view .LVU961
 3001 001c 1846     		mov	r0, r3
 3002              	.LVL232:
2397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3003              		.loc 1 2397 21 view .LVU962
 3004 001e 7047     		bx	lr
 3005              		.cfi_endproc
 3006              	.LFE323:
 3008              		.text
 3009              	.Letext0:
 3010              		.file 3 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 3011              		.file 4 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 3012              		.file 5 "stm/stm32l4xx/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 3013              		.file 6 "stm/stm32l4xx/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 3014              		.file 7 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 3015              		.file 8 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 3016              		.file 9 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
ARM GAS  /tmp/ccgJ85Jg.s 			page 124


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_can.c
     /tmp/ccgJ85Jg.s:21     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccgJ85Jg.s:27     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccgJ85Jg.s:42     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccgJ85Jg.s:48     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccgJ85Jg.s:340    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccgJ85Jg.s:346    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccgJ85Jg.s:361    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccgJ85Jg.s:367    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccgJ85Jg.s:583    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccgJ85Jg.s:589    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccgJ85Jg.s:689    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccgJ85Jg.s:695    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccgJ85Jg.s:796    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccgJ85Jg.s:802    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccgJ85Jg.s:858    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccgJ85Jg.s:864    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccgJ85Jg.s:914    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccgJ85Jg.s:920    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccgJ85Jg.s:1017   .text.HAL_CAN_WakeUp:0000000000000054 $d
     /tmp/ccgJ85Jg.s:1022   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1028   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccgJ85Jg.s:1078   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1084   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccgJ85Jg.s:1280   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1286   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccgJ85Jg.s:1362   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1368   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccgJ85Jg.s:1439   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1445   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccgJ85Jg.s:1502   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1508   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccgJ85Jg.s:1604   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1610   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccgJ85Jg.s:1921   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1927   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccgJ85Jg.s:1989   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccgJ85Jg.s:1995   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccgJ85Jg.s:2046   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2052   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccgJ85Jg.s:2103   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2109   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccgJ85Jg.s:2124   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2130   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccgJ85Jg.s:2145   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2151   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccgJ85Jg.s:2166   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2172   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccgJ85Jg.s:2187   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2193   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccgJ85Jg.s:2208   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2214   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccgJ85Jg.s:2229   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2235   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccgJ85Jg.s:2250   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2256   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/ccgJ85Jg.s 			page 125


     /tmp/ccgJ85Jg.s:2271   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2277   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccgJ85Jg.s:2292   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2298   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccgJ85Jg.s:2313   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2319   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccgJ85Jg.s:2334   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2340   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccgJ85Jg.s:2355   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2361   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccgJ85Jg.s:2376   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2382   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccgJ85Jg.s:2861   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2867   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccgJ85Jg.s:2928   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2934   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccgJ85Jg.s:2952   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccgJ85Jg.s:2958   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError

UNDEFINED SYMBOLS
HAL_GetTick
