ARM GAS  /tmp/ccPBmeX9.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32l4xx_hal_wwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c"
  20              		.section	.text.HAL_WWDG_MspInit,"ax",%progbits
  21              		.align	1
  22              		.weak	HAL_WWDG_MspInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_WWDG_MspInit:
  28              	.LVL0:
  29              	.LFB289:
   1:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
   2:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ******************************************************************************
   3:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @file    stm32l4xx_hal_wwdg.c
   4:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @author  MCD Application Team
   5:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief   WWDG HAL module driver.
   6:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *          This file provides firmware functions to manage the following
   7:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *          functionalities of the Window Watchdog (WWDG) peripheral:
   8:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *           + Initialization and Configuration functions
   9:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *           + IO operation functions
  10:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ******************************************************************************
  11:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @attention
  12:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *
  13:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * Copyright (c) 2017 STMicroelectronics.
  14:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * All rights reserved.
  15:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *
  16:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * This software is licensed under terms that can be found in the LICENSE file
  17:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * in the root directory of this software component.
  18:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  19:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *
  20:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ******************************************************************************
  21:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   @verbatim
  22:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
  23:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****                       ##### WWDG Specific features #####
  24:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
  25:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   [..]
  26:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     Once enabled the WWDG generates a system reset on expiry of a programmed
  27:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     time period, unless the program refreshes the counter (T[6;0] downcounter)
  28:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     before reaching 0x3F value (i.e. a reset is generated when the counter
  29:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     value rolls down from 0x40 to 0x3F).
ARM GAS  /tmp/ccPBmeX9.s 			page 2


  30:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  31:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) An MCU reset is also generated if the counter value is refreshed
  32:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         before the counter has reached the refresh window value. This
  33:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  34:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Once enabled the WWDG cannot be disabled except by a system reset.
  35:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) If required by application, an Early Wakeup Interrupt can be triggered
  36:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         in order to be warned before WWDG expiration. The Early Wakeup Interrupt
  37:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (EWI) can be used if specific safety operations or data logging must
  38:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         be performed before the actual reset is generated. When the downcounter
  39:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         reaches 0x40, interrupt occurs. This mechanism requires WWDG interrupt
  40:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         line to be enabled in NVIC. Once enabled, EWI interrupt cannot be
  41:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         disabled except by a system reset.
  42:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) WWDGRST flag in RCC CSR register can be used to inform when a WWDG
  43:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         reset occurs.
  44:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) The WWDG counter input clock is derived from the APB clock divided
  45:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         by a programmable prescaler.
  46:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) WWDG clock (Hz) = PCLK1 / (4096 * Prescaler)
  47:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) WWDG timeout (mS) = 1000 * (T[5;0] + 1) / WWDG clock (Hz)
  48:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         where T[5;0] are the lowest 6 bits of Counter.
  49:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) WWDG Counter refresh is allowed between the following limits :
  50:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) min time (mS) = 1000 * (Counter - Window) / WWDG clock
  51:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) max time (mS) = 1000 * (Counter - 0x40) / WWDG clock
  52:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Typical values:
  53:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) Counter min (T[5;0] = 0x00) at 56MHz (PCLK1) with zero prescaler:
  54:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****              max timeout before reset: approximately 73.14us
  55:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) Counter max (T[5;0] = 0x3F) at 56MHz (PCLK1) with prescaler
  56:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****              dividing by 8:
  57:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****              max timeout before reset: approximately 599.18ms
  58:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  59:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****                      ##### How to use this driver #####
  60:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
  61:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  62:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     *** Common driver usage ***
  63:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     ===========================
  64:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  65:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   [..]
  66:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Enable WWDG APB1 clock using __HAL_RCC_WWDG_CLK_ENABLE().
  67:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Configure the WWDG prescaler, refresh window value, counter value and early
  68:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         interrupt status using HAL_WWDG_Init() function. This will automatically
  69:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         enable WWDG and start its downcounter. Time reference can be taken from
  70:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         function exit. Care must be taken to provide a counter value
  71:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         greater than 0x40 to prevent generation of immediate reset.
  72:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) If the Early Wakeup Interrupt (EWI) feature is enabled, an interrupt is
  73:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         generated when the counter reaches 0x40. When HAL_WWDG_IRQHandler is
  74:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         triggered by the interrupt service routine, flag will be automatically
  75:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         cleared and HAL_WWDG_WakeupCallback user callback will be executed. User
  76:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         can add his own code by customization of callback HAL_WWDG_WakeupCallback.
  77:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Then the application program must refresh the WWDG counter at regular
  78:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         intervals during normal operation to prevent an MCU reset, using
  79:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         HAL_WWDG_Refresh() function. This operation must occur only when
  80:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         the counter is lower than the refresh window value already programmed.
  81:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  82:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     *** Callback registration ***
  83:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     =============================
  84:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  85:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   [..]
  86:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     The compilation define USE_HAL_WWDG_REGISTER_CALLBACKS when set to 1 allows
ARM GAS  /tmp/ccPBmeX9.s 			page 3


  87:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     the user to configure dynamically the driver callbacks. Use Functions
  88:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     HAL_WWDG_RegisterCallback() to register a user callback.
  89:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  90:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Function HAL_WWDG_RegisterCallback() allows to register following
  91:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         callbacks:
  92:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) EwiCallback : callback for Early WakeUp Interrupt.
  93:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) MspInitCallback : WWDG MspInit.
  94:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  95:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     and a pointer to the user callback function.
  96:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  97:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Use function HAL_WWDG_UnRegisterCallback() to reset a callback to
  98:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     the default weak (surcharged) function. HAL_WWDG_UnRegisterCallback()
  99:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     takes as parameters the HAL peripheral handle and the Callback ID.
 100:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     This function allows to reset following callbacks:
 101:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) EwiCallback : callback for  Early WakeUp Interrupt.
 102:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         (++) MspInitCallback : WWDG MspInit.
 103:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 104:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     [..]
 105:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     When calling HAL_WWDG_Init function, callbacks are reset to the
 106:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     corresponding legacy weak (surcharged) functions:
 107:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     HAL_WWDG_EarlyWakeupCallback() and HAL_WWDG_MspInit() only if they have
 108:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     not been registered before.
 109:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 110:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     [..]
 111:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     When compilation define USE_HAL_WWDG_REGISTER_CALLBACKS is set to 0 or
 112:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     not defined, the callback registering feature is not available
 113:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     and weak (surcharged) callbacks are used.
 114:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 115:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     *** WWDG HAL driver macros list ***
 116:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     ===================================
 117:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     [..]
 118:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       Below the list of available macros in WWDG HAL driver.
 119:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       (+) __HAL_WWDG_ENABLE: Enable the WWDG peripheral
 120:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       (+) __HAL_WWDG_GET_FLAG: Get the selected WWDG's flag status
 121:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       (+) __HAL_WWDG_CLEAR_FLAG: Clear the WWDG's pending flags
 122:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       (+) __HAL_WWDG_ENABLE_IT: Enable the WWDG early wakeup interrupt
 123:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 124:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   @endverbatim
 125:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ******************************************************************************
 126:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 127:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 128:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Includes ------------------------------------------------------------------*/
 129:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #include "stm32l4xx_hal.h"
 130:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 131:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /** @addtogroup STM32L4xx_HAL_Driver
 132:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @{
 133:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 134:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 135:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #ifdef HAL_WWDG_MODULE_ENABLED
 136:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /** @defgroup WWDG WWDG
 137:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief WWDG HAL module driver.
 138:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @{
 139:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 140:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 141:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
 142:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Private define ------------------------------------------------------------*/
 143:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/ccPBmeX9.s 			page 4


 144:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 145:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 146:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /* Exported functions --------------------------------------------------------*/
 147:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 148:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions WWDG Exported Functions
 149:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @{
 150:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 151:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 152:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group1 Initialization and Configuration functions
 153:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *  @brief    Initialization and Configuration functions.
 154:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *
 155:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** @verbatim
 156:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
 157:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****           ##### Initialization and Configuration functions #####
 158:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
 159:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   [..]
 160:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     This section provides functions allowing to:
 161:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       (+) Initialize and start the WWDG according to the specified parameters
 162:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****           in the WWDG_InitTypeDef of associated handle.
 163:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       (+) Initialize the WWDG MSP.
 164:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 165:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** @endverbatim
 166:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @{
 167:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 168:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 169:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 170:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  Initialize the WWDG according to the specified.
 171:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         parameters in the WWDG_InitTypeDef of  associated handle.
 172:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 173:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 174:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval HAL status
 175:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 176:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
 177:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
 178:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
 179:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   if (hwwdg == NULL)
 180:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 181:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     return HAL_ERROR;
 182:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 183:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 184:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check the parameters */
 185:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 186:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 187:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 188:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 189:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 190:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 191:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
 192:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Reset Callback pointers */
 193:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   if (hwwdg->EwiCallback == NULL)
 194:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 195:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 196:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 197:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 198:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   if (hwwdg->MspInitCallback == NULL)
 199:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 200:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     hwwdg->MspInitCallback = HAL_WWDG_MspInit;
ARM GAS  /tmp/ccPBmeX9.s 			page 5


 201:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 202:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 203:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Init the low level hardware */
 204:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   hwwdg->MspInitCallback(hwwdg);
 205:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #else
 206:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Init the low level hardware */
 207:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   HAL_WWDG_MspInit(hwwdg);
 208:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 209:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 210:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Set WWDG Counter */
 211:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 212:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 213:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Set WWDG Prescaler and Window */
 214:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window
 215:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 216:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Return function status */
 217:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   return HAL_OK;
 218:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
 219:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 220:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 221:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 222:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  Initialize the WWDG MSP.
 223:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 224:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 225:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @note   When rewriting this function in user file, mechanism may be added
 226:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         to avoid multiple initialize when HAL_WWDG_Init function is called
 227:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         again to change parameters.
 228:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval None
 229:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 230:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** __weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
 231:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
  30              		.loc 1 231 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 232:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Prevent unused argument(s) compilation warning */
 233:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   UNUSED(hwwdg);
  35              		.loc 1 233 3 view .LVU1
 234:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 235:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 236:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****            the HAL_WWDG_MspInit could be implemented in the user file
 237:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****    */
 238:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
  36              		.loc 1 238 1 is_stmt 0 view .LVU2
  37 0000 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE289:
  41              		.section	.text.HAL_WWDG_Init,"ax",%progbits
  42              		.align	1
  43              		.global	HAL_WWDG_Init
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  48              	HAL_WWDG_Init:
  49              	.LVL1:
  50              	.LFB288:
ARM GAS  /tmp/ccPBmeX9.s 			page 6


 177:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  51              		.loc 1 177 1 is_stmt 1 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
 179:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
  55              		.loc 1 179 3 view .LVU4
 179:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
  56              		.loc 1 179 6 is_stmt 0 view .LVU5
  57 0000 88B1     		cbz	r0, .L4
 177:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  58              		.loc 1 177 1 view .LVU6
  59 0002 10B5     		push	{r4, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 4, -8
  63              		.cfi_offset 14, -4
  64 0004 0446     		mov	r4, r0
 185:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
  65              		.loc 1 185 3 is_stmt 1 view .LVU7
 186:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  66              		.loc 1 186 3 view .LVU8
 187:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  67              		.loc 1 187 3 view .LVU9
 188:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
  68              		.loc 1 188 3 view .LVU10
 189:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  69              		.loc 1 189 3 view .LVU11
 207:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
  70              		.loc 1 207 3 view .LVU12
  71 0006 FFF7FEFF 		bl	HAL_WWDG_MspInit
  72              	.LVL2:
 211:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  73              		.loc 1 211 3 view .LVU13
  74 000a E368     		ldr	r3, [r4, #12]
  75 000c 2268     		ldr	r2, [r4]
  76 000e 43F08003 		orr	r3, r3, #128
  77 0012 1360     		str	r3, [r2]
 214:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  78              		.loc 1 214 3 view .LVU14
  79 0014 2369     		ldr	r3, [r4, #16]
  80 0016 6268     		ldr	r2, [r4, #4]
  81 0018 1343     		orrs	r3, r3, r2
  82 001a A168     		ldr	r1, [r4, #8]
  83 001c 2268     		ldr	r2, [r4]
  84 001e 0B43     		orrs	r3, r3, r1
  85 0020 5360     		str	r3, [r2, #4]
 217:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
  86              		.loc 1 217 3 view .LVU15
 217:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
  87              		.loc 1 217 10 is_stmt 0 view .LVU16
  88 0022 0020     		movs	r0, #0
 218:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
  89              		.loc 1 218 1 view .LVU17
  90 0024 10BD     		pop	{r4, pc}
  91              	.LVL3:
  92              	.L4:
ARM GAS  /tmp/ccPBmeX9.s 			page 7


  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 0
  95              		.cfi_restore 4
  96              		.cfi_restore 14
 181:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
  97              		.loc 1 181 12 view .LVU18
  98 0026 0120     		movs	r0, #1
  99              	.LVL4:
 218:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 100              		.loc 1 218 1 view .LVU19
 101 0028 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE288:
 105              		.section	.text.HAL_WWDG_Refresh,"ax",%progbits
 106              		.align	1
 107              		.global	HAL_WWDG_Refresh
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 112              	HAL_WWDG_Refresh:
 113              	.LVL5:
 114              	.LFB290:
 239:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 240:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 241:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
 242:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 243:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  Register a User WWDG Callback
 244:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         To be used instead of the weak (surcharged) predefined callback
 245:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg WWDG handle
 246:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  CallbackID ID of the callback to be registered
 247:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         This parameter can be one of the following values:
 248:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_EWI_CB_ID Early WakeUp Interrupt Callback ID
 249:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_MSPINIT_CB_ID MspInit callback ID
 250:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  pCallback pointer to the Callback function
 251:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval status
 252:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 253:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_RegisterCallback(WWDG_HandleTypeDef *hwwdg, HAL_WWDG_CallbackIDTypeDef C
 254:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****                                             pWWDG_CallbackTypeDef pCallback)
 255:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
 256:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   HAL_StatusTypeDef status = HAL_OK;
 257:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 258:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   if (pCallback == NULL)
 259:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 260:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     status = HAL_ERROR;
 261:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 262:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   else
 263:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 264:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     switch (CallbackID)
 265:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     {
 266:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       case HAL_WWDG_EWI_CB_ID:
 267:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         hwwdg->EwiCallback = pCallback;
 268:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         break;
 269:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 270:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       case HAL_WWDG_MSPINIT_CB_ID:
 271:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         hwwdg->MspInitCallback = pCallback;
 272:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         break;
 273:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
ARM GAS  /tmp/ccPBmeX9.s 			page 8


 274:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       default:
 275:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         status = HAL_ERROR;
 276:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****         break;
 277:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     }
 278:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 279:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 280:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   return status;
 281:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
 282:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 283:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 284:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 285:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  Unregister a WWDG Callback
 286:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         WWDG Callback is redirected to the weak (surcharged) predefined callback
 287:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg WWDG handle
 288:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  CallbackID ID of the callback to be registered
 289:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         This parameter can be one of the following values:
 290:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_EWI_CB_ID Early WakeUp Interrupt Callback ID
 291:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_MSPINIT_CB_ID MspInit callback ID
 292:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval status
 293:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 294:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_UnRegisterCallback(WWDG_HandleTypeDef *hwwdg, HAL_WWDG_CallbackIDTypeDef
 295:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
 296:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   HAL_StatusTypeDef status = HAL_OK;
 297:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 298:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   switch (CallbackID)
 299:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 300:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     case HAL_WWDG_EWI_CB_ID:
 301:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 302:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       break;
 303:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 304:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     case HAL_WWDG_MSPINIT_CB_ID:
 305:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 306:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       break;
 307:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 308:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     default:
 309:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       status = HAL_ERROR;
 310:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       break;
 311:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 312:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 313:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   return status;
 314:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
 315:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 316:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 317:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 318:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @}
 319:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 320:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 321:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group2 IO operation functions
 322:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *  @brief    IO operation functions
 323:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *
 324:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** @verbatim
 325:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
 326:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****                       ##### IO operation functions #####
 327:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   ==============================================================================
 328:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   [..]
 329:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     This section provides functions allowing to:
 330:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Refresh the WWDG.
ARM GAS  /tmp/ccPBmeX9.s 			page 9


 331:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     (+) Handle WWDG interrupt request and associated function callback.
 332:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 333:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** @endverbatim
 334:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @{
 335:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 336:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 337:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 338:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  Refresh the WWDG.
 339:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 340:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 341:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval HAL status
 342:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 343:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
 344:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
 115              		.loc 1 344 1 is_stmt 1 view -0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 345:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Write to WWDG CR the WWDG Counter value to refresh with */
 346:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 120              		.loc 1 346 3 view .LVU21
 121 0000 0368     		ldr	r3, [r0]
 122 0002 C268     		ldr	r2, [r0, #12]
 123 0004 1A60     		str	r2, [r3]
 347:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 348:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Return function status */
 349:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   return HAL_OK;
 124              		.loc 1 349 3 view .LVU22
 350:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
 125              		.loc 1 350 1 is_stmt 0 view .LVU23
 126 0006 0020     		movs	r0, #0
 127              	.LVL6:
 128              		.loc 1 350 1 view .LVU24
 129 0008 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE290:
 133              		.section	.text.HAL_WWDG_EarlyWakeupCallback,"ax",%progbits
 134              		.align	1
 135              		.weak	HAL_WWDG_EarlyWakeupCallback
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	HAL_WWDG_EarlyWakeupCallback:
 141              	.LVL7:
 142              	.LFB292:
 351:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 352:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 353:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  Handle WWDG interrupt request.
 354:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @note   The Early Wakeup Interrupt (EWI) can be used if specific safety operations
 355:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         or data logging must be performed before the actual reset is generated.
 356:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         The EWI interrupt is enabled by calling HAL_WWDG_Init function with
 357:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         EWIMode set to WWDG_EWI_ENABLE.
 358:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         When the downcounter reaches the value 0x40, and EWI interrupt is
 359:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         generated and the corresponding Interrupt Service Routine (ISR) can
 360:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         be used to trigger specific actions (such as communications or data
 361:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *         logging), before resetting the device.
ARM GAS  /tmp/ccPBmeX9.s 			page 10


 362:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 363:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 364:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval None
 365:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 366:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
 368:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 370:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 371:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     /* Check if WWDG Early Wakeup Interrupt occurred */
 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 373:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     {
 374:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       /* Clear the WWDG Early Wakeup flag */
 375:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 376:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 377:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
 378:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       /* Early Wakeup registered callback */
 379:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       hwwdg->EwiCallback(hwwdg);
 380:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #else
 381:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       /* Early Wakeup callback */
 382:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****       HAL_WWDG_EarlyWakeupCallback(hwwdg);
 383:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 384:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     }
 385:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   }
 386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
 387:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 388:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 389:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** /**
 390:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @brief  WWDG Early Wakeup callback.
 391:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 392:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 393:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   * @retval None
 394:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   */
 395:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** __weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
 396:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** {
 143              		.loc 1 396 1 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 397:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Prevent unused argument(s) compilation warning */
 398:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   UNUSED(hwwdg);
 148              		.loc 1 398 3 view .LVU26
 399:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 400:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 401:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****            the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
 402:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****    */
 403:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** }
 149              		.loc 1 403 1 is_stmt 0 view .LVU27
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE292:
 154              		.section	.text.HAL_WWDG_IRQHandler,"ax",%progbits
 155              		.align	1
 156              		.global	HAL_WWDG_IRQHandler
 157              		.syntax unified
 158              		.thumb
ARM GAS  /tmp/ccPBmeX9.s 			page 11


 159              		.thumb_func
 161              	HAL_WWDG_IRQHandler:
 162              	.LVL8:
 163              	.LFB291:
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 164              		.loc 1 367 1 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 367:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 168              		.loc 1 367 1 is_stmt 0 view .LVU29
 169 0000 08B5     		push	{r3, lr}
 170              	.LCFI2:
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 3, -8
 173              		.cfi_offset 14, -4
 369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 174              		.loc 1 369 3 is_stmt 1 view .LVU30
 369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 175              		.loc 1 369 7 is_stmt 0 view .LVU31
 176 0002 0368     		ldr	r3, [r0]
 177 0004 5A68     		ldr	r2, [r3, #4]
 369:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****   {
 178              		.loc 1 369 6 view .LVU32
 179 0006 12F4007F 		tst	r2, #512
 180 000a 03D0     		beq	.L11
 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     {
 181              		.loc 1 372 5 is_stmt 1 view .LVU33
 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     {
 182              		.loc 1 372 9 is_stmt 0 view .LVU34
 183 000c 9A68     		ldr	r2, [r3, #8]
 372:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c ****     {
 184              		.loc 1 372 8 view .LVU35
 185 000e 12F0010F 		tst	r2, #1
 186 0012 00D1     		bne	.L14
 187              	.LVL9:
 188              	.L11:
 386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 189              		.loc 1 386 1 view .LVU36
 190 0014 08BD     		pop	{r3, pc}
 191              	.LVL10:
 192              	.L14:
 375:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 193              		.loc 1 375 7 is_stmt 1 view .LVU37
 194 0016 6FF00102 		mvn	r2, #1
 195 001a 9A60     		str	r2, [r3, #8]
 382:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 196              		.loc 1 382 7 view .LVU38
 197 001c FFF7FEFF 		bl	HAL_WWDG_EarlyWakeupCallback
 198              	.LVL11:
 386:stm/stm32l4xx/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_wwdg.c **** 
 199              		.loc 1 386 1 is_stmt 0 view .LVU39
 200 0020 F8E7     		b	.L11
 201              		.cfi_endproc
 202              	.LFE291:
 204              		.text
 205              	.Letext0:
ARM GAS  /tmp/ccPBmeX9.s 			page 12


 206              		.file 2 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 207              		.file 3 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 208              		.file 4 "stm/stm32l4xx/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 209              		.file 5 "stm/stm32l4xx/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 210              		.file 6 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 211              		.file 7 "stm/stm32l4xx/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_wwdg.h"
ARM GAS  /tmp/ccPBmeX9.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_wwdg.c
     /tmp/ccPBmeX9.s:21     .text.HAL_WWDG_MspInit:0000000000000000 $t
     /tmp/ccPBmeX9.s:27     .text.HAL_WWDG_MspInit:0000000000000000 HAL_WWDG_MspInit
     /tmp/ccPBmeX9.s:42     .text.HAL_WWDG_Init:0000000000000000 $t
     /tmp/ccPBmeX9.s:48     .text.HAL_WWDG_Init:0000000000000000 HAL_WWDG_Init
     /tmp/ccPBmeX9.s:106    .text.HAL_WWDG_Refresh:0000000000000000 $t
     /tmp/ccPBmeX9.s:112    .text.HAL_WWDG_Refresh:0000000000000000 HAL_WWDG_Refresh
     /tmp/ccPBmeX9.s:134    .text.HAL_WWDG_EarlyWakeupCallback:0000000000000000 $t
     /tmp/ccPBmeX9.s:140    .text.HAL_WWDG_EarlyWakeupCallback:0000000000000000 HAL_WWDG_EarlyWakeupCallback
     /tmp/ccPBmeX9.s:155    .text.HAL_WWDG_IRQHandler:0000000000000000 $t
     /tmp/ccPBmeX9.s:161    .text.HAL_WWDG_IRQHandler:0000000000000000 HAL_WWDG_IRQHandler

NO UNDEFINED SYMBOLS
