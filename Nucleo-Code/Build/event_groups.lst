ARM GAS  /tmp/ccMPlAtg.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"event_groups.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "FreeRTOS-Kernel/event_groups.c"
  20              		.section	.text.prvTestWaitCondition,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	prvTestWaitCondition:
  27              	.LVL0:
  28              	.LFB15:
   1:FreeRTOS-Kernel/event_groups.c **** /*
   2:FreeRTOS-Kernel/event_groups.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/event_groups.c ****  *
   5:FreeRTOS-Kernel/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/event_groups.c ****  *
   7:FreeRTOS-Kernel/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/event_groups.c ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/event_groups.c ****  *
  14:FreeRTOS-Kernel/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/event_groups.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/event_groups.c ****  *
  17:FreeRTOS-Kernel/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/event_groups.c ****  *
  24:FreeRTOS-Kernel/event_groups.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/event_groups.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/event_groups.c ****  *
  27:FreeRTOS-Kernel/event_groups.c ****  */
  28:FreeRTOS-Kernel/event_groups.c **** 
  29:FreeRTOS-Kernel/event_groups.c **** /* Standard includes. */
  30:FreeRTOS-Kernel/event_groups.c **** #include <stdlib.h>
ARM GAS  /tmp/ccMPlAtg.s 			page 2


  31:FreeRTOS-Kernel/event_groups.c **** 
  32:FreeRTOS-Kernel/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS-Kernel/event_groups.c ****  * all the API functions to use the MPU wrappers. That should only be done when
  34:FreeRTOS-Kernel/event_groups.c ****  * task.h is included from an application file. */
  35:FreeRTOS-Kernel/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS-Kernel/event_groups.c **** 
  37:FreeRTOS-Kernel/event_groups.c **** /* FreeRTOS includes. */
  38:FreeRTOS-Kernel/event_groups.c **** #include "FreeRTOS.h"
  39:FreeRTOS-Kernel/event_groups.c **** #include "task.h"
  40:FreeRTOS-Kernel/event_groups.c **** #include "timers.h"
  41:FreeRTOS-Kernel/event_groups.c **** #include "event_groups.h"
  42:FreeRTOS-Kernel/event_groups.c **** 
  43:FreeRTOS-Kernel/event_groups.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:FreeRTOS-Kernel/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  45:FreeRTOS-Kernel/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:FreeRTOS-Kernel/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  47:FreeRTOS-Kernel/event_groups.c **** 
  48:FreeRTOS-Kernel/event_groups.c **** /* This entire source file will be skipped if the application is not configured
  49:FreeRTOS-Kernel/event_groups.c ****  * to include event groups functionality. This #if is closed at the very bottom
  50:FreeRTOS-Kernel/event_groups.c ****  * of this file. If you want to include event groups then ensure
  51:FreeRTOS-Kernel/event_groups.c ****  * configUSE_EVENT_GROUPS is set to 1 in FreeRTOSConfig.h. */
  52:FreeRTOS-Kernel/event_groups.c **** #if ( configUSE_EVENT_GROUPS == 1 )
  53:FreeRTOS-Kernel/event_groups.c **** 
  54:FreeRTOS-Kernel/event_groups.c ****     typedef struct EventGroupDef_t
  55:FreeRTOS-Kernel/event_groups.c ****     {
  56:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxEventBits;
  57:FreeRTOS-Kernel/event_groups.c ****         List_t xTasksWaitingForBits; /**< List of tasks waiting for a bit to be set. */
  58:FreeRTOS-Kernel/event_groups.c **** 
  59:FreeRTOS-Kernel/event_groups.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  60:FreeRTOS-Kernel/event_groups.c ****             UBaseType_t uxEventGroupNumber;
  61:FreeRTOS-Kernel/event_groups.c ****         #endif
  62:FreeRTOS-Kernel/event_groups.c **** 
  63:FreeRTOS-Kernel/event_groups.c ****         #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  64:FreeRTOS-Kernel/event_groups.c ****             uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the event group is statically allo
  65:FreeRTOS-Kernel/event_groups.c ****         #endif
  66:FreeRTOS-Kernel/event_groups.c ****     } EventGroup_t;
  67:FreeRTOS-Kernel/event_groups.c **** 
  68:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
  69:FreeRTOS-Kernel/event_groups.c **** 
  70:FreeRTOS-Kernel/event_groups.c **** /*
  71:FreeRTOS-Kernel/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  72:FreeRTOS-Kernel/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  73:FreeRTOS-Kernel/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  74:FreeRTOS-Kernel/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  75:FreeRTOS-Kernel/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  76:FreeRTOS-Kernel/event_groups.c ****  * in uxCurrentEventBits.
  77:FreeRTOS-Kernel/event_groups.c ****  */
  78:FreeRTOS-Kernel/event_groups.c ****     static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  79:FreeRTOS-Kernel/event_groups.c ****                                             const EventBits_t uxBitsToWaitFor,
  80:FreeRTOS-Kernel/event_groups.c ****                                             const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  81:FreeRTOS-Kernel/event_groups.c **** 
  82:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
  83:FreeRTOS-Kernel/event_groups.c **** 
  84:FreeRTOS-Kernel/event_groups.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  85:FreeRTOS-Kernel/event_groups.c **** 
  86:FreeRTOS-Kernel/event_groups.c ****         EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  87:FreeRTOS-Kernel/event_groups.c ****         {
ARM GAS  /tmp/ccMPlAtg.s 			page 3


  88:FreeRTOS-Kernel/event_groups.c ****             EventGroup_t * pxEventBits;
  89:FreeRTOS-Kernel/event_groups.c **** 
  90:FreeRTOS-Kernel/event_groups.c ****             traceENTER_xEventGroupCreateStatic( pxEventGroupBuffer );
  91:FreeRTOS-Kernel/event_groups.c **** 
  92:FreeRTOS-Kernel/event_groups.c ****             /* A StaticEventGroup_t object must be provided. */
  93:FreeRTOS-Kernel/event_groups.c ****             configASSERT( pxEventGroupBuffer );
  94:FreeRTOS-Kernel/event_groups.c **** 
  95:FreeRTOS-Kernel/event_groups.c ****             #if ( configASSERT_DEFINED == 1 )
  96:FreeRTOS-Kernel/event_groups.c ****             {
  97:FreeRTOS-Kernel/event_groups.c ****                 /* Sanity check that the size of the structure used to declare a
  98:FreeRTOS-Kernel/event_groups.c ****                  * variable of type StaticEventGroup_t equals the size of the real
  99:FreeRTOS-Kernel/event_groups.c ****                  * event group structure. */
 100:FreeRTOS-Kernel/event_groups.c ****                 volatile size_t xSize = sizeof( StaticEventGroup_t );
 101:FreeRTOS-Kernel/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 102:FreeRTOS-Kernel/event_groups.c ****             }
 103:FreeRTOS-Kernel/event_groups.c ****             #endif /* configASSERT_DEFINED */
 104:FreeRTOS-Kernel/event_groups.c **** 
 105:FreeRTOS-Kernel/event_groups.c ****             /* The user has provided a statically allocated event group - use it. */
 106:FreeRTOS-Kernel/event_groups.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
 107:FreeRTOS-Kernel/event_groups.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 108:FreeRTOS-Kernel/event_groups.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
 109:FreeRTOS-Kernel/event_groups.c ****             pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer;
 110:FreeRTOS-Kernel/event_groups.c **** 
 111:FreeRTOS-Kernel/event_groups.c ****             if( pxEventBits != NULL )
 112:FreeRTOS-Kernel/event_groups.c ****             {
 113:FreeRTOS-Kernel/event_groups.c ****                 pxEventBits->uxEventBits = 0;
 114:FreeRTOS-Kernel/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 115:FreeRTOS-Kernel/event_groups.c **** 
 116:FreeRTOS-Kernel/event_groups.c ****                 #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 117:FreeRTOS-Kernel/event_groups.c ****                 {
 118:FreeRTOS-Kernel/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note that
 119:FreeRTOS-Kernel/event_groups.c ****                      * this event group was created statically in case the event group
 120:FreeRTOS-Kernel/event_groups.c ****                      * is later deleted. */
 121:FreeRTOS-Kernel/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdTRUE;
 122:FreeRTOS-Kernel/event_groups.c ****                 }
 123:FreeRTOS-Kernel/event_groups.c ****                 #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 124:FreeRTOS-Kernel/event_groups.c **** 
 125:FreeRTOS-Kernel/event_groups.c ****                 traceEVENT_GROUP_CREATE( pxEventBits );
 126:FreeRTOS-Kernel/event_groups.c ****             }
 127:FreeRTOS-Kernel/event_groups.c ****             else
 128:FreeRTOS-Kernel/event_groups.c ****             {
 129:FreeRTOS-Kernel/event_groups.c ****                 /* xEventGroupCreateStatic should only ever be called with
 130:FreeRTOS-Kernel/event_groups.c ****                  * pxEventGroupBuffer pointing to a pre-allocated (compile time
 131:FreeRTOS-Kernel/event_groups.c ****                  * allocated) StaticEventGroup_t variable. */
 132:FreeRTOS-Kernel/event_groups.c ****                 traceEVENT_GROUP_CREATE_FAILED();
 133:FreeRTOS-Kernel/event_groups.c ****             }
 134:FreeRTOS-Kernel/event_groups.c **** 
 135:FreeRTOS-Kernel/event_groups.c ****             traceRETURN_xEventGroupCreateStatic( pxEventBits );
 136:FreeRTOS-Kernel/event_groups.c **** 
 137:FreeRTOS-Kernel/event_groups.c ****             return pxEventBits;
 138:FreeRTOS-Kernel/event_groups.c ****         }
 139:FreeRTOS-Kernel/event_groups.c **** 
 140:FreeRTOS-Kernel/event_groups.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 142:FreeRTOS-Kernel/event_groups.c **** 
 143:FreeRTOS-Kernel/event_groups.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:FreeRTOS-Kernel/event_groups.c **** 
ARM GAS  /tmp/ccMPlAtg.s 			page 4


 145:FreeRTOS-Kernel/event_groups.c ****         EventGroupHandle_t xEventGroupCreate( void )
 146:FreeRTOS-Kernel/event_groups.c ****         {
 147:FreeRTOS-Kernel/event_groups.c ****             EventGroup_t * pxEventBits;
 148:FreeRTOS-Kernel/event_groups.c **** 
 149:FreeRTOS-Kernel/event_groups.c ****             traceENTER_xEventGroupCreate();
 150:FreeRTOS-Kernel/event_groups.c **** 
 151:FreeRTOS-Kernel/event_groups.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
 152:FreeRTOS-Kernel/event_groups.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 153:FreeRTOS-Kernel/event_groups.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
 154:FreeRTOS-Kernel/event_groups.c ****             pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 155:FreeRTOS-Kernel/event_groups.c **** 
 156:FreeRTOS-Kernel/event_groups.c ****             if( pxEventBits != NULL )
 157:FreeRTOS-Kernel/event_groups.c ****             {
 158:FreeRTOS-Kernel/event_groups.c ****                 pxEventBits->uxEventBits = 0;
 159:FreeRTOS-Kernel/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 160:FreeRTOS-Kernel/event_groups.c **** 
 161:FreeRTOS-Kernel/event_groups.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 162:FreeRTOS-Kernel/event_groups.c ****                 {
 163:FreeRTOS-Kernel/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note this
 164:FreeRTOS-Kernel/event_groups.c ****                      * event group was allocated statically in case the event group is
 165:FreeRTOS-Kernel/event_groups.c ****                      * later deleted. */
 166:FreeRTOS-Kernel/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdFALSE;
 167:FreeRTOS-Kernel/event_groups.c ****                 }
 168:FreeRTOS-Kernel/event_groups.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 169:FreeRTOS-Kernel/event_groups.c **** 
 170:FreeRTOS-Kernel/event_groups.c ****                 traceEVENT_GROUP_CREATE( pxEventBits );
 171:FreeRTOS-Kernel/event_groups.c ****             }
 172:FreeRTOS-Kernel/event_groups.c ****             else
 173:FreeRTOS-Kernel/event_groups.c ****             {
 174:FreeRTOS-Kernel/event_groups.c ****                 traceEVENT_GROUP_CREATE_FAILED();
 175:FreeRTOS-Kernel/event_groups.c ****             }
 176:FreeRTOS-Kernel/event_groups.c **** 
 177:FreeRTOS-Kernel/event_groups.c ****             traceRETURN_xEventGroupCreate( pxEventBits );
 178:FreeRTOS-Kernel/event_groups.c **** 
 179:FreeRTOS-Kernel/event_groups.c ****             return pxEventBits;
 180:FreeRTOS-Kernel/event_groups.c ****         }
 181:FreeRTOS-Kernel/event_groups.c **** 
 182:FreeRTOS-Kernel/event_groups.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 183:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 184:FreeRTOS-Kernel/event_groups.c **** 
 185:FreeRTOS-Kernel/event_groups.c ****     EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 186:FreeRTOS-Kernel/event_groups.c ****                                  const EventBits_t uxBitsToSet,
 187:FreeRTOS-Kernel/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 188:FreeRTOS-Kernel/event_groups.c ****                                  TickType_t xTicksToWait )
 189:FreeRTOS-Kernel/event_groups.c ****     {
 190:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxOriginalBitValue, uxReturn;
 191:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 192:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xAlreadyYielded;
 193:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 194:FreeRTOS-Kernel/event_groups.c **** 
 195:FreeRTOS-Kernel/event_groups.c ****         traceENTER_xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 196:FreeRTOS-Kernel/event_groups.c **** 
 197:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 198:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 199:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 200:FreeRTOS-Kernel/event_groups.c ****         {
 201:FreeRTOS-Kernel/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
ARM GAS  /tmp/ccMPlAtg.s 			page 5


 202:FreeRTOS-Kernel/event_groups.c ****         }
 203:FreeRTOS-Kernel/event_groups.c ****         #endif
 204:FreeRTOS-Kernel/event_groups.c **** 
 205:FreeRTOS-Kernel/event_groups.c ****         vTaskSuspendAll();
 206:FreeRTOS-Kernel/event_groups.c ****         {
 207:FreeRTOS-Kernel/event_groups.c ****             uxOriginalBitValue = pxEventBits->uxEventBits;
 208:FreeRTOS-Kernel/event_groups.c **** 
 209:FreeRTOS-Kernel/event_groups.c ****             ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 210:FreeRTOS-Kernel/event_groups.c **** 
 211:FreeRTOS-Kernel/event_groups.c ****             if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 212:FreeRTOS-Kernel/event_groups.c ****             {
 213:FreeRTOS-Kernel/event_groups.c ****                 /* All the rendezvous bits are now set - no need to block. */
 214:FreeRTOS-Kernel/event_groups.c ****                 uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 215:FreeRTOS-Kernel/event_groups.c **** 
 216:FreeRTOS-Kernel/event_groups.c ****                 /* Rendezvous always clear the bits.  They will have been cleared
 217:FreeRTOS-Kernel/event_groups.c ****                  * already unless this is the only task in the rendezvous. */
 218:FreeRTOS-Kernel/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 219:FreeRTOS-Kernel/event_groups.c **** 
 220:FreeRTOS-Kernel/event_groups.c ****                 xTicksToWait = 0;
 221:FreeRTOS-Kernel/event_groups.c ****             }
 222:FreeRTOS-Kernel/event_groups.c ****             else
 223:FreeRTOS-Kernel/event_groups.c ****             {
 224:FreeRTOS-Kernel/event_groups.c ****                 if( xTicksToWait != ( TickType_t ) 0 )
 225:FreeRTOS-Kernel/event_groups.c ****                 {
 226:FreeRTOS-Kernel/event_groups.c ****                     traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 227:FreeRTOS-Kernel/event_groups.c **** 
 228:FreeRTOS-Kernel/event_groups.c ****                     /* Store the bits that the calling task is waiting for in the
 229:FreeRTOS-Kernel/event_groups.c ****                      * task's event list item so the kernel knows when a match is
 230:FreeRTOS-Kernel/event_groups.c ****                      * found.  Then enter the blocked state. */
 231:FreeRTOS-Kernel/event_groups.c ****                     vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBit
 232:FreeRTOS-Kernel/event_groups.c **** 
 233:FreeRTOS-Kernel/event_groups.c ****                     /* This assignment is obsolete as uxReturn will get set after
 234:FreeRTOS-Kernel/event_groups.c ****                      * the task unblocks, but some compilers mistakenly generate a
 235:FreeRTOS-Kernel/event_groups.c ****                      * warning about uxReturn being returned without being set if the
 236:FreeRTOS-Kernel/event_groups.c ****                      * assignment is omitted. */
 237:FreeRTOS-Kernel/event_groups.c ****                     uxReturn = 0;
 238:FreeRTOS-Kernel/event_groups.c ****                 }
 239:FreeRTOS-Kernel/event_groups.c ****                 else
 240:FreeRTOS-Kernel/event_groups.c ****                 {
 241:FreeRTOS-Kernel/event_groups.c ****                     /* The rendezvous bits were not set, but no block time was
 242:FreeRTOS-Kernel/event_groups.c ****                      * specified - just return the current event bit value. */
 243:FreeRTOS-Kernel/event_groups.c ****                     uxReturn = pxEventBits->uxEventBits;
 244:FreeRTOS-Kernel/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 245:FreeRTOS-Kernel/event_groups.c ****                 }
 246:FreeRTOS-Kernel/event_groups.c ****             }
 247:FreeRTOS-Kernel/event_groups.c ****         }
 248:FreeRTOS-Kernel/event_groups.c ****         xAlreadyYielded = xTaskResumeAll();
 249:FreeRTOS-Kernel/event_groups.c **** 
 250:FreeRTOS-Kernel/event_groups.c ****         if( xTicksToWait != ( TickType_t ) 0 )
 251:FreeRTOS-Kernel/event_groups.c ****         {
 252:FreeRTOS-Kernel/event_groups.c ****             if( xAlreadyYielded == pdFALSE )
 253:FreeRTOS-Kernel/event_groups.c ****             {
 254:FreeRTOS-Kernel/event_groups.c ****                 taskYIELD_WITHIN_API();
 255:FreeRTOS-Kernel/event_groups.c ****             }
 256:FreeRTOS-Kernel/event_groups.c ****             else
 257:FreeRTOS-Kernel/event_groups.c ****             {
 258:FreeRTOS-Kernel/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccMPlAtg.s 			page 6


 259:FreeRTOS-Kernel/event_groups.c ****             }
 260:FreeRTOS-Kernel/event_groups.c **** 
 261:FreeRTOS-Kernel/event_groups.c ****             /* The task blocked to wait for its required bits to be set - at this
 262:FreeRTOS-Kernel/event_groups.c ****              * point either the required bits were set or the block time expired.  If
 263:FreeRTOS-Kernel/event_groups.c ****              * the required bits were set they will have been stored in the task's
 264:FreeRTOS-Kernel/event_groups.c ****              * event list item, and they should now be retrieved then cleared. */
 265:FreeRTOS-Kernel/event_groups.c ****             uxReturn = uxTaskResetEventItemValue();
 266:FreeRTOS-Kernel/event_groups.c **** 
 267:FreeRTOS-Kernel/event_groups.c ****             if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 268:FreeRTOS-Kernel/event_groups.c ****             {
 269:FreeRTOS-Kernel/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 270:FreeRTOS-Kernel/event_groups.c ****                 taskENTER_CRITICAL();
 271:FreeRTOS-Kernel/event_groups.c ****                 {
 272:FreeRTOS-Kernel/event_groups.c ****                     uxReturn = pxEventBits->uxEventBits;
 273:FreeRTOS-Kernel/event_groups.c **** 
 274:FreeRTOS-Kernel/event_groups.c ****                     /* Although the task got here because it timed out before the
 275:FreeRTOS-Kernel/event_groups.c ****                      * bits it was waiting for were set, it is possible that since it
 276:FreeRTOS-Kernel/event_groups.c ****                      * unblocked another task has set the bits.  If this is the case
 277:FreeRTOS-Kernel/event_groups.c ****                      * then it needs to clear the bits before exiting. */
 278:FreeRTOS-Kernel/event_groups.c ****                     if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 279:FreeRTOS-Kernel/event_groups.c ****                     {
 280:FreeRTOS-Kernel/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 281:FreeRTOS-Kernel/event_groups.c ****                     }
 282:FreeRTOS-Kernel/event_groups.c ****                     else
 283:FreeRTOS-Kernel/event_groups.c ****                     {
 284:FreeRTOS-Kernel/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 285:FreeRTOS-Kernel/event_groups.c ****                     }
 286:FreeRTOS-Kernel/event_groups.c ****                 }
 287:FreeRTOS-Kernel/event_groups.c ****                 taskEXIT_CRITICAL();
 288:FreeRTOS-Kernel/event_groups.c **** 
 289:FreeRTOS-Kernel/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 290:FreeRTOS-Kernel/event_groups.c ****             }
 291:FreeRTOS-Kernel/event_groups.c ****             else
 292:FreeRTOS-Kernel/event_groups.c ****             {
 293:FreeRTOS-Kernel/event_groups.c ****                 /* The task unblocked because the bits were set. */
 294:FreeRTOS-Kernel/event_groups.c ****             }
 295:FreeRTOS-Kernel/event_groups.c **** 
 296:FreeRTOS-Kernel/event_groups.c ****             /* Control bits might be set as the task had blocked should not be
 297:FreeRTOS-Kernel/event_groups.c ****              * returned. */
 298:FreeRTOS-Kernel/event_groups.c ****             uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 299:FreeRTOS-Kernel/event_groups.c ****         }
 300:FreeRTOS-Kernel/event_groups.c **** 
 301:FreeRTOS-Kernel/event_groups.c ****         traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 302:FreeRTOS-Kernel/event_groups.c **** 
 303:FreeRTOS-Kernel/event_groups.c ****         /* Prevent compiler warnings when trace macros are not used. */
 304:FreeRTOS-Kernel/event_groups.c ****         ( void ) xTimeoutOccurred;
 305:FreeRTOS-Kernel/event_groups.c **** 
 306:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_xEventGroupSync( uxReturn );
 307:FreeRTOS-Kernel/event_groups.c **** 
 308:FreeRTOS-Kernel/event_groups.c ****         return uxReturn;
 309:FreeRTOS-Kernel/event_groups.c ****     }
 310:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 311:FreeRTOS-Kernel/event_groups.c **** 
 312:FreeRTOS-Kernel/event_groups.c ****     EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
 313:FreeRTOS-Kernel/event_groups.c ****                                      const EventBits_t uxBitsToWaitFor,
 314:FreeRTOS-Kernel/event_groups.c ****                                      const BaseType_t xClearOnExit,
 315:FreeRTOS-Kernel/event_groups.c ****                                      const BaseType_t xWaitForAllBits,
ARM GAS  /tmp/ccMPlAtg.s 			page 7


 316:FreeRTOS-Kernel/event_groups.c ****                                      TickType_t xTicksToWait )
 317:FreeRTOS-Kernel/event_groups.c ****     {
 318:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 319:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxReturn, uxControlBits = 0;
 320:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xWaitConditionMet, xAlreadyYielded;
 321:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 322:FreeRTOS-Kernel/event_groups.c **** 
 323:FreeRTOS-Kernel/event_groups.c ****         traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits
 324:FreeRTOS-Kernel/event_groups.c **** 
 325:FreeRTOS-Kernel/event_groups.c ****         /* Check the user is not attempting to wait on the bits used by the kernel
 326:FreeRTOS-Kernel/event_groups.c ****          * itself, and that at least one bit is being requested. */
 327:FreeRTOS-Kernel/event_groups.c ****         configASSERT( xEventGroup );
 328:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 329:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 330:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 331:FreeRTOS-Kernel/event_groups.c ****         {
 332:FreeRTOS-Kernel/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 333:FreeRTOS-Kernel/event_groups.c ****         }
 334:FreeRTOS-Kernel/event_groups.c ****         #endif
 335:FreeRTOS-Kernel/event_groups.c **** 
 336:FreeRTOS-Kernel/event_groups.c ****         vTaskSuspendAll();
 337:FreeRTOS-Kernel/event_groups.c ****         {
 338:FreeRTOS-Kernel/event_groups.c ****             const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 339:FreeRTOS-Kernel/event_groups.c **** 
 340:FreeRTOS-Kernel/event_groups.c ****             /* Check to see if the wait condition is already met or not. */
 341:FreeRTOS-Kernel/event_groups.c ****             xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitFor
 342:FreeRTOS-Kernel/event_groups.c **** 
 343:FreeRTOS-Kernel/event_groups.c ****             if( xWaitConditionMet != pdFALSE )
 344:FreeRTOS-Kernel/event_groups.c ****             {
 345:FreeRTOS-Kernel/event_groups.c ****                 /* The wait condition has already been met so there is no need to
 346:FreeRTOS-Kernel/event_groups.c ****                  * block. */
 347:FreeRTOS-Kernel/event_groups.c ****                 uxReturn = uxCurrentEventBits;
 348:FreeRTOS-Kernel/event_groups.c ****                 xTicksToWait = ( TickType_t ) 0;
 349:FreeRTOS-Kernel/event_groups.c **** 
 350:FreeRTOS-Kernel/event_groups.c ****                 /* Clear the wait bits if requested to do so. */
 351:FreeRTOS-Kernel/event_groups.c ****                 if( xClearOnExit != pdFALSE )
 352:FreeRTOS-Kernel/event_groups.c ****                 {
 353:FreeRTOS-Kernel/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 354:FreeRTOS-Kernel/event_groups.c ****                 }
 355:FreeRTOS-Kernel/event_groups.c ****                 else
 356:FreeRTOS-Kernel/event_groups.c ****                 {
 357:FreeRTOS-Kernel/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 358:FreeRTOS-Kernel/event_groups.c ****                 }
 359:FreeRTOS-Kernel/event_groups.c ****             }
 360:FreeRTOS-Kernel/event_groups.c ****             else if( xTicksToWait == ( TickType_t ) 0 )
 361:FreeRTOS-Kernel/event_groups.c ****             {
 362:FreeRTOS-Kernel/event_groups.c ****                 /* The wait condition has not been met, but no block time was
 363:FreeRTOS-Kernel/event_groups.c ****                  * specified, so just return the current value. */
 364:FreeRTOS-Kernel/event_groups.c ****                 uxReturn = uxCurrentEventBits;
 365:FreeRTOS-Kernel/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 366:FreeRTOS-Kernel/event_groups.c ****             }
 367:FreeRTOS-Kernel/event_groups.c ****             else
 368:FreeRTOS-Kernel/event_groups.c ****             {
 369:FreeRTOS-Kernel/event_groups.c ****                 /* The task is going to block to wait for its required bits to be
 370:FreeRTOS-Kernel/event_groups.c ****                  * set.  uxControlBits are used to remember the specified behaviour of
 371:FreeRTOS-Kernel/event_groups.c ****                  * this call to xEventGroupWaitBits() - for use when the event bits
 372:FreeRTOS-Kernel/event_groups.c ****                  * unblock the task. */
ARM GAS  /tmp/ccMPlAtg.s 			page 8


 373:FreeRTOS-Kernel/event_groups.c ****                 if( xClearOnExit != pdFALSE )
 374:FreeRTOS-Kernel/event_groups.c ****                 {
 375:FreeRTOS-Kernel/event_groups.c ****                     uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 376:FreeRTOS-Kernel/event_groups.c ****                 }
 377:FreeRTOS-Kernel/event_groups.c ****                 else
 378:FreeRTOS-Kernel/event_groups.c ****                 {
 379:FreeRTOS-Kernel/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 380:FreeRTOS-Kernel/event_groups.c ****                 }
 381:FreeRTOS-Kernel/event_groups.c **** 
 382:FreeRTOS-Kernel/event_groups.c ****                 if( xWaitForAllBits != pdFALSE )
 383:FreeRTOS-Kernel/event_groups.c ****                 {
 384:FreeRTOS-Kernel/event_groups.c ****                     uxControlBits |= eventWAIT_FOR_ALL_BITS;
 385:FreeRTOS-Kernel/event_groups.c ****                 }
 386:FreeRTOS-Kernel/event_groups.c ****                 else
 387:FreeRTOS-Kernel/event_groups.c ****                 {
 388:FreeRTOS-Kernel/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 389:FreeRTOS-Kernel/event_groups.c ****                 }
 390:FreeRTOS-Kernel/event_groups.c **** 
 391:FreeRTOS-Kernel/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 392:FreeRTOS-Kernel/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 393:FreeRTOS-Kernel/event_groups.c ****                  * found.  Then enter the blocked state. */
 394:FreeRTOS-Kernel/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 395:FreeRTOS-Kernel/event_groups.c **** 
 396:FreeRTOS-Kernel/event_groups.c ****                 /* This is obsolete as it will get set after the task unblocks, but
 397:FreeRTOS-Kernel/event_groups.c ****                  * some compilers mistakenly generate a warning about the variable
 398:FreeRTOS-Kernel/event_groups.c ****                  * being returned without being set if it is not done. */
 399:FreeRTOS-Kernel/event_groups.c ****                 uxReturn = 0;
 400:FreeRTOS-Kernel/event_groups.c **** 
 401:FreeRTOS-Kernel/event_groups.c ****                 traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 402:FreeRTOS-Kernel/event_groups.c ****             }
 403:FreeRTOS-Kernel/event_groups.c ****         }
 404:FreeRTOS-Kernel/event_groups.c ****         xAlreadyYielded = xTaskResumeAll();
 405:FreeRTOS-Kernel/event_groups.c **** 
 406:FreeRTOS-Kernel/event_groups.c ****         if( xTicksToWait != ( TickType_t ) 0 )
 407:FreeRTOS-Kernel/event_groups.c ****         {
 408:FreeRTOS-Kernel/event_groups.c ****             if( xAlreadyYielded == pdFALSE )
 409:FreeRTOS-Kernel/event_groups.c ****             {
 410:FreeRTOS-Kernel/event_groups.c ****                 taskYIELD_WITHIN_API();
 411:FreeRTOS-Kernel/event_groups.c ****             }
 412:FreeRTOS-Kernel/event_groups.c ****             else
 413:FreeRTOS-Kernel/event_groups.c ****             {
 414:FreeRTOS-Kernel/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 415:FreeRTOS-Kernel/event_groups.c ****             }
 416:FreeRTOS-Kernel/event_groups.c **** 
 417:FreeRTOS-Kernel/event_groups.c ****             /* The task blocked to wait for its required bits to be set - at this
 418:FreeRTOS-Kernel/event_groups.c ****              * point either the required bits were set or the block time expired.  If
 419:FreeRTOS-Kernel/event_groups.c ****              * the required bits were set they will have been stored in the task's
 420:FreeRTOS-Kernel/event_groups.c ****              * event list item, and they should now be retrieved then cleared. */
 421:FreeRTOS-Kernel/event_groups.c ****             uxReturn = uxTaskResetEventItemValue();
 422:FreeRTOS-Kernel/event_groups.c **** 
 423:FreeRTOS-Kernel/event_groups.c ****             if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 424:FreeRTOS-Kernel/event_groups.c ****             {
 425:FreeRTOS-Kernel/event_groups.c ****                 taskENTER_CRITICAL();
 426:FreeRTOS-Kernel/event_groups.c ****                 {
 427:FreeRTOS-Kernel/event_groups.c ****                     /* The task timed out, just return the current event bit value. */
 428:FreeRTOS-Kernel/event_groups.c ****                     uxReturn = pxEventBits->uxEventBits;
 429:FreeRTOS-Kernel/event_groups.c **** 
ARM GAS  /tmp/ccMPlAtg.s 			page 9


 430:FreeRTOS-Kernel/event_groups.c ****                     /* It is possible that the event bits were updated between this
 431:FreeRTOS-Kernel/event_groups.c ****                      * task leaving the Blocked state and running again. */
 432:FreeRTOS-Kernel/event_groups.c ****                     if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFAL
 433:FreeRTOS-Kernel/event_groups.c ****                     {
 434:FreeRTOS-Kernel/event_groups.c ****                         if( xClearOnExit != pdFALSE )
 435:FreeRTOS-Kernel/event_groups.c ****                         {
 436:FreeRTOS-Kernel/event_groups.c ****                             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 437:FreeRTOS-Kernel/event_groups.c ****                         }
 438:FreeRTOS-Kernel/event_groups.c ****                         else
 439:FreeRTOS-Kernel/event_groups.c ****                         {
 440:FreeRTOS-Kernel/event_groups.c ****                             mtCOVERAGE_TEST_MARKER();
 441:FreeRTOS-Kernel/event_groups.c ****                         }
 442:FreeRTOS-Kernel/event_groups.c ****                     }
 443:FreeRTOS-Kernel/event_groups.c ****                     else
 444:FreeRTOS-Kernel/event_groups.c ****                     {
 445:FreeRTOS-Kernel/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 446:FreeRTOS-Kernel/event_groups.c ****                     }
 447:FreeRTOS-Kernel/event_groups.c **** 
 448:FreeRTOS-Kernel/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 449:FreeRTOS-Kernel/event_groups.c ****                 }
 450:FreeRTOS-Kernel/event_groups.c ****                 taskEXIT_CRITICAL();
 451:FreeRTOS-Kernel/event_groups.c ****             }
 452:FreeRTOS-Kernel/event_groups.c ****             else
 453:FreeRTOS-Kernel/event_groups.c ****             {
 454:FreeRTOS-Kernel/event_groups.c ****                 /* The task unblocked because the bits were set. */
 455:FreeRTOS-Kernel/event_groups.c ****             }
 456:FreeRTOS-Kernel/event_groups.c **** 
 457:FreeRTOS-Kernel/event_groups.c ****             /* The task blocked so control bits may have been set. */
 458:FreeRTOS-Kernel/event_groups.c ****             uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 459:FreeRTOS-Kernel/event_groups.c ****         }
 460:FreeRTOS-Kernel/event_groups.c **** 
 461:FreeRTOS-Kernel/event_groups.c ****         traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 462:FreeRTOS-Kernel/event_groups.c **** 
 463:FreeRTOS-Kernel/event_groups.c ****         /* Prevent compiler warnings when trace macros are not used. */
 464:FreeRTOS-Kernel/event_groups.c ****         ( void ) xTimeoutOccurred;
 465:FreeRTOS-Kernel/event_groups.c **** 
 466:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_xEventGroupWaitBits( uxReturn );
 467:FreeRTOS-Kernel/event_groups.c **** 
 468:FreeRTOS-Kernel/event_groups.c ****         return uxReturn;
 469:FreeRTOS-Kernel/event_groups.c ****     }
 470:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 471:FreeRTOS-Kernel/event_groups.c **** 
 472:FreeRTOS-Kernel/event_groups.c ****     EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 473:FreeRTOS-Kernel/event_groups.c ****                                       const EventBits_t uxBitsToClear )
 474:FreeRTOS-Kernel/event_groups.c ****     {
 475:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 476:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxReturn;
 477:FreeRTOS-Kernel/event_groups.c **** 
 478:FreeRTOS-Kernel/event_groups.c ****         traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );
 479:FreeRTOS-Kernel/event_groups.c **** 
 480:FreeRTOS-Kernel/event_groups.c ****         /* Check the user is not attempting to clear the bits used by the kernel
 481:FreeRTOS-Kernel/event_groups.c ****          * itself. */
 482:FreeRTOS-Kernel/event_groups.c ****         configASSERT( xEventGroup );
 483:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 484:FreeRTOS-Kernel/event_groups.c **** 
 485:FreeRTOS-Kernel/event_groups.c ****         taskENTER_CRITICAL();
 486:FreeRTOS-Kernel/event_groups.c ****         {
ARM GAS  /tmp/ccMPlAtg.s 			page 10


 487:FreeRTOS-Kernel/event_groups.c ****             traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 488:FreeRTOS-Kernel/event_groups.c **** 
 489:FreeRTOS-Kernel/event_groups.c ****             /* The value returned is the event group value prior to the bits being
 490:FreeRTOS-Kernel/event_groups.c ****              * cleared. */
 491:FreeRTOS-Kernel/event_groups.c ****             uxReturn = pxEventBits->uxEventBits;
 492:FreeRTOS-Kernel/event_groups.c **** 
 493:FreeRTOS-Kernel/event_groups.c ****             /* Clear the bits. */
 494:FreeRTOS-Kernel/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToClear;
 495:FreeRTOS-Kernel/event_groups.c ****         }
 496:FreeRTOS-Kernel/event_groups.c ****         taskEXIT_CRITICAL();
 497:FreeRTOS-Kernel/event_groups.c **** 
 498:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_xEventGroupClearBits( uxReturn );
 499:FreeRTOS-Kernel/event_groups.c **** 
 500:FreeRTOS-Kernel/event_groups.c ****         return uxReturn;
 501:FreeRTOS-Kernel/event_groups.c ****     }
 502:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 503:FreeRTOS-Kernel/event_groups.c **** 
 504:FreeRTOS-Kernel/event_groups.c ****     #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configU
 505:FreeRTOS-Kernel/event_groups.c **** 
 506:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 507:FreeRTOS-Kernel/event_groups.c ****                                                 const EventBits_t uxBitsToClear )
 508:FreeRTOS-Kernel/event_groups.c ****         {
 509:FreeRTOS-Kernel/event_groups.c ****             BaseType_t xReturn;
 510:FreeRTOS-Kernel/event_groups.c **** 
 511:FreeRTOS-Kernel/event_groups.c ****             traceENTER_xEventGroupClearBitsFromISR( xEventGroup, uxBitsToClear );
 512:FreeRTOS-Kernel/event_groups.c **** 
 513:FreeRTOS-Kernel/event_groups.c ****             traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 514:FreeRTOS-Kernel/event_groups.c ****             xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEven
 515:FreeRTOS-Kernel/event_groups.c **** 
 516:FreeRTOS-Kernel/event_groups.c ****             traceRETURN_xEventGroupClearBitsFromISR( xReturn );
 517:FreeRTOS-Kernel/event_groups.c **** 
 518:FreeRTOS-Kernel/event_groups.c ****             return xReturn;
 519:FreeRTOS-Kernel/event_groups.c ****         }
 520:FreeRTOS-Kernel/event_groups.c **** 
 521:FreeRTOS-Kernel/event_groups.c ****     #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && 
 522:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 523:FreeRTOS-Kernel/event_groups.c **** 
 524:FreeRTOS-Kernel/event_groups.c ****     EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 525:FreeRTOS-Kernel/event_groups.c ****     {
 526:FreeRTOS-Kernel/event_groups.c ****         UBaseType_t uxSavedInterruptStatus;
 527:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t const * const pxEventBits = xEventGroup;
 528:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxReturn;
 529:FreeRTOS-Kernel/event_groups.c **** 
 530:FreeRTOS-Kernel/event_groups.c ****         traceENTER_xEventGroupGetBitsFromISR( xEventGroup );
 531:FreeRTOS-Kernel/event_groups.c **** 
 532:FreeRTOS-Kernel/event_groups.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
 533:FreeRTOS-Kernel/event_groups.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
 534:FreeRTOS-Kernel/event_groups.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
 535:FreeRTOS-Kernel/event_groups.c ****         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 536:FreeRTOS-Kernel/event_groups.c ****         {
 537:FreeRTOS-Kernel/event_groups.c ****             uxReturn = pxEventBits->uxEventBits;
 538:FreeRTOS-Kernel/event_groups.c ****         }
 539:FreeRTOS-Kernel/event_groups.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 540:FreeRTOS-Kernel/event_groups.c **** 
 541:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_xEventGroupGetBitsFromISR( uxReturn );
 542:FreeRTOS-Kernel/event_groups.c **** 
 543:FreeRTOS-Kernel/event_groups.c ****         return uxReturn;
ARM GAS  /tmp/ccMPlAtg.s 			page 11


 544:FreeRTOS-Kernel/event_groups.c ****     }
 545:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 546:FreeRTOS-Kernel/event_groups.c **** 
 547:FreeRTOS-Kernel/event_groups.c ****     EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 548:FreeRTOS-Kernel/event_groups.c ****                                     const EventBits_t uxBitsToSet )
 549:FreeRTOS-Kernel/event_groups.c ****     {
 550:FreeRTOS-Kernel/event_groups.c ****         ListItem_t * pxListItem;
 551:FreeRTOS-Kernel/event_groups.c ****         ListItem_t * pxNext;
 552:FreeRTOS-Kernel/event_groups.c ****         ListItem_t const * pxListEnd;
 553:FreeRTOS-Kernel/event_groups.c ****         List_t const * pxList;
 554:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 555:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 556:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xMatchFound = pdFALSE;
 557:FreeRTOS-Kernel/event_groups.c **** 
 558:FreeRTOS-Kernel/event_groups.c ****         traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );
 559:FreeRTOS-Kernel/event_groups.c **** 
 560:FreeRTOS-Kernel/event_groups.c ****         /* Check the user is not attempting to set the bits used by the kernel
 561:FreeRTOS-Kernel/event_groups.c ****          * itself. */
 562:FreeRTOS-Kernel/event_groups.c ****         configASSERT( xEventGroup );
 563:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 564:FreeRTOS-Kernel/event_groups.c **** 
 565:FreeRTOS-Kernel/event_groups.c ****         pxList = &( pxEventBits->xTasksWaitingForBits );
 566:FreeRTOS-Kernel/event_groups.c ****         pxListEnd = listGET_END_MARKER( pxList );
 567:FreeRTOS-Kernel/event_groups.c ****         vTaskSuspendAll();
 568:FreeRTOS-Kernel/event_groups.c ****         {
 569:FreeRTOS-Kernel/event_groups.c ****             traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 570:FreeRTOS-Kernel/event_groups.c **** 
 571:FreeRTOS-Kernel/event_groups.c ****             pxListItem = listGET_HEAD_ENTRY( pxList );
 572:FreeRTOS-Kernel/event_groups.c **** 
 573:FreeRTOS-Kernel/event_groups.c ****             /* Set the bits. */
 574:FreeRTOS-Kernel/event_groups.c ****             pxEventBits->uxEventBits |= uxBitsToSet;
 575:FreeRTOS-Kernel/event_groups.c **** 
 576:FreeRTOS-Kernel/event_groups.c ****             /* See if the new bit value should unblock any tasks. */
 577:FreeRTOS-Kernel/event_groups.c ****             while( pxListItem != pxListEnd )
 578:FreeRTOS-Kernel/event_groups.c ****             {
 579:FreeRTOS-Kernel/event_groups.c ****                 pxNext = listGET_NEXT( pxListItem );
 580:FreeRTOS-Kernel/event_groups.c ****                 uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 581:FreeRTOS-Kernel/event_groups.c ****                 xMatchFound = pdFALSE;
 582:FreeRTOS-Kernel/event_groups.c **** 
 583:FreeRTOS-Kernel/event_groups.c ****                 /* Split the bits waited for from the control bits. */
 584:FreeRTOS-Kernel/event_groups.c ****                 uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 585:FreeRTOS-Kernel/event_groups.c ****                 uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 586:FreeRTOS-Kernel/event_groups.c **** 
 587:FreeRTOS-Kernel/event_groups.c ****                 if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 588:FreeRTOS-Kernel/event_groups.c ****                 {
 589:FreeRTOS-Kernel/event_groups.c ****                     /* Just looking for single bit being set. */
 590:FreeRTOS-Kernel/event_groups.c ****                     if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 591:FreeRTOS-Kernel/event_groups.c ****                     {
 592:FreeRTOS-Kernel/event_groups.c ****                         xMatchFound = pdTRUE;
 593:FreeRTOS-Kernel/event_groups.c ****                     }
 594:FreeRTOS-Kernel/event_groups.c ****                     else
 595:FreeRTOS-Kernel/event_groups.c ****                     {
 596:FreeRTOS-Kernel/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 597:FreeRTOS-Kernel/event_groups.c ****                     }
 598:FreeRTOS-Kernel/event_groups.c ****                 }
 599:FreeRTOS-Kernel/event_groups.c ****                 else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 600:FreeRTOS-Kernel/event_groups.c ****                 {
ARM GAS  /tmp/ccMPlAtg.s 			page 12


 601:FreeRTOS-Kernel/event_groups.c ****                     /* All bits are set. */
 602:FreeRTOS-Kernel/event_groups.c ****                     xMatchFound = pdTRUE;
 603:FreeRTOS-Kernel/event_groups.c ****                 }
 604:FreeRTOS-Kernel/event_groups.c ****                 else
 605:FreeRTOS-Kernel/event_groups.c ****                 {
 606:FreeRTOS-Kernel/event_groups.c ****                     /* Need all bits to be set, but not all the bits were set. */
 607:FreeRTOS-Kernel/event_groups.c ****                 }
 608:FreeRTOS-Kernel/event_groups.c **** 
 609:FreeRTOS-Kernel/event_groups.c ****                 if( xMatchFound != pdFALSE )
 610:FreeRTOS-Kernel/event_groups.c ****                 {
 611:FreeRTOS-Kernel/event_groups.c ****                     /* The bits match.  Should the bits be cleared on exit? */
 612:FreeRTOS-Kernel/event_groups.c ****                     if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 613:FreeRTOS-Kernel/event_groups.c ****                     {
 614:FreeRTOS-Kernel/event_groups.c ****                         uxBitsToClear |= uxBitsWaitedFor;
 615:FreeRTOS-Kernel/event_groups.c ****                     }
 616:FreeRTOS-Kernel/event_groups.c ****                     else
 617:FreeRTOS-Kernel/event_groups.c ****                     {
 618:FreeRTOS-Kernel/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 619:FreeRTOS-Kernel/event_groups.c ****                     }
 620:FreeRTOS-Kernel/event_groups.c **** 
 621:FreeRTOS-Kernel/event_groups.c ****                     /* Store the actual event flag value in the task's event list
 622:FreeRTOS-Kernel/event_groups.c ****                      * item before removing the task from the event list.  The
 623:FreeRTOS-Kernel/event_groups.c ****                      * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 624:FreeRTOS-Kernel/event_groups.c ****                      * that is was unblocked due to its required bits matching, rather
 625:FreeRTOS-Kernel/event_groups.c ****                      * than because it timed out. */
 626:FreeRTOS-Kernel/event_groups.c ****                     vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | event
 627:FreeRTOS-Kernel/event_groups.c ****                 }
 628:FreeRTOS-Kernel/event_groups.c **** 
 629:FreeRTOS-Kernel/event_groups.c ****                 /* Move onto the next list item.  Note pxListItem->pxNext is not
 630:FreeRTOS-Kernel/event_groups.c ****                  * used here as the list item may have been removed from the event list
 631:FreeRTOS-Kernel/event_groups.c ****                  * and inserted into the ready/pending reading list. */
 632:FreeRTOS-Kernel/event_groups.c ****                 pxListItem = pxNext;
 633:FreeRTOS-Kernel/event_groups.c ****             }
 634:FreeRTOS-Kernel/event_groups.c **** 
 635:FreeRTOS-Kernel/event_groups.c ****             /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 636:FreeRTOS-Kernel/event_groups.c ****              * bit was set in the control word. */
 637:FreeRTOS-Kernel/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToClear;
 638:FreeRTOS-Kernel/event_groups.c ****         }
 639:FreeRTOS-Kernel/event_groups.c ****         ( void ) xTaskResumeAll();
 640:FreeRTOS-Kernel/event_groups.c **** 
 641:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );
 642:FreeRTOS-Kernel/event_groups.c **** 
 643:FreeRTOS-Kernel/event_groups.c ****         return pxEventBits->uxEventBits;
 644:FreeRTOS-Kernel/event_groups.c ****     }
 645:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 646:FreeRTOS-Kernel/event_groups.c **** 
 647:FreeRTOS-Kernel/event_groups.c ****     void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 648:FreeRTOS-Kernel/event_groups.c ****     {
 649:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 650:FreeRTOS-Kernel/event_groups.c ****         const List_t * pxTasksWaitingForBits;
 651:FreeRTOS-Kernel/event_groups.c **** 
 652:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupDelete( xEventGroup );
 653:FreeRTOS-Kernel/event_groups.c **** 
 654:FreeRTOS-Kernel/event_groups.c ****         configASSERT( pxEventBits );
 655:FreeRTOS-Kernel/event_groups.c **** 
 656:FreeRTOS-Kernel/event_groups.c ****         pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 657:FreeRTOS-Kernel/event_groups.c **** 
ARM GAS  /tmp/ccMPlAtg.s 			page 13


 658:FreeRTOS-Kernel/event_groups.c ****         vTaskSuspendAll();
 659:FreeRTOS-Kernel/event_groups.c ****         {
 660:FreeRTOS-Kernel/event_groups.c ****             traceEVENT_GROUP_DELETE( xEventGroup );
 661:FreeRTOS-Kernel/event_groups.c **** 
 662:FreeRTOS-Kernel/event_groups.c ****             while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 663:FreeRTOS-Kernel/event_groups.c ****             {
 664:FreeRTOS-Kernel/event_groups.c ****                 /* Unblock the task, returning 0 as the event list is being deleted
 665:FreeRTOS-Kernel/event_groups.c ****                  * and cannot therefore have any bits set. */
 666:FreeRTOS-Kernel/event_groups.c ****                 configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( p
 667:FreeRTOS-Kernel/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 668:FreeRTOS-Kernel/event_groups.c ****             }
 669:FreeRTOS-Kernel/event_groups.c ****         }
 670:FreeRTOS-Kernel/event_groups.c ****         ( void ) xTaskResumeAll();
 671:FreeRTOS-Kernel/event_groups.c **** 
 672:FreeRTOS-Kernel/event_groups.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
 673:FreeRTOS-Kernel/event_groups.c ****         {
 674:FreeRTOS-Kernel/event_groups.c ****             /* The event group can only have been allocated dynamically - free
 675:FreeRTOS-Kernel/event_groups.c ****              * it again. */
 676:FreeRTOS-Kernel/event_groups.c ****             vPortFree( pxEventBits );
 677:FreeRTOS-Kernel/event_groups.c ****         }
 678:FreeRTOS-Kernel/event_groups.c ****         #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1
 679:FreeRTOS-Kernel/event_groups.c ****         {
 680:FreeRTOS-Kernel/event_groups.c ****             /* The event group could have been allocated statically or
 681:FreeRTOS-Kernel/event_groups.c ****              * dynamically, so check before attempting to free the memory. */
 682:FreeRTOS-Kernel/event_groups.c ****             if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 683:FreeRTOS-Kernel/event_groups.c ****             {
 684:FreeRTOS-Kernel/event_groups.c ****                 vPortFree( pxEventBits );
 685:FreeRTOS-Kernel/event_groups.c ****             }
 686:FreeRTOS-Kernel/event_groups.c ****             else
 687:FreeRTOS-Kernel/event_groups.c ****             {
 688:FreeRTOS-Kernel/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 689:FreeRTOS-Kernel/event_groups.c ****             }
 690:FreeRTOS-Kernel/event_groups.c ****         }
 691:FreeRTOS-Kernel/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 692:FreeRTOS-Kernel/event_groups.c **** 
 693:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_vEventGroupDelete();
 694:FreeRTOS-Kernel/event_groups.c ****     }
 695:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 696:FreeRTOS-Kernel/event_groups.c **** 
 697:FreeRTOS-Kernel/event_groups.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 698:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xEventGroupGetStaticBuffer( EventGroupHandle_t xEventGroup,
 699:FreeRTOS-Kernel/event_groups.c ****                                                StaticEventGroup_t ** ppxEventGroupBuffer )
 700:FreeRTOS-Kernel/event_groups.c ****         {
 701:FreeRTOS-Kernel/event_groups.c ****             BaseType_t xReturn;
 702:FreeRTOS-Kernel/event_groups.c ****             EventGroup_t * pxEventBits = xEventGroup;
 703:FreeRTOS-Kernel/event_groups.c **** 
 704:FreeRTOS-Kernel/event_groups.c ****             traceENTER_xEventGroupGetStaticBuffer( xEventGroup, ppxEventGroupBuffer );
 705:FreeRTOS-Kernel/event_groups.c **** 
 706:FreeRTOS-Kernel/event_groups.c ****             configASSERT( pxEventBits );
 707:FreeRTOS-Kernel/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 708:FreeRTOS-Kernel/event_groups.c **** 
 709:FreeRTOS-Kernel/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 710:FreeRTOS-Kernel/event_groups.c ****             {
 711:FreeRTOS-Kernel/event_groups.c ****                 /* Check if the event group was statically allocated. */
 712:FreeRTOS-Kernel/event_groups.c ****                 if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 713:FreeRTOS-Kernel/event_groups.c ****                 {
 714:FreeRTOS-Kernel/event_groups.c ****                     /* MISRA Ref 11.3.1 [Misaligned access] */
ARM GAS  /tmp/ccMPlAtg.s 			page 14


 715:FreeRTOS-Kernel/event_groups.c ****                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA
 716:FreeRTOS-Kernel/event_groups.c ****                     /* coverity[misra_c_2012_rule_11_3_violation] */
 717:FreeRTOS-Kernel/event_groups.c ****                     *ppxEventGroupBuffer = ( StaticEventGroup_t * ) pxEventBits;
 718:FreeRTOS-Kernel/event_groups.c ****                     xReturn = pdTRUE;
 719:FreeRTOS-Kernel/event_groups.c ****                 }
 720:FreeRTOS-Kernel/event_groups.c ****                 else
 721:FreeRTOS-Kernel/event_groups.c ****                 {
 722:FreeRTOS-Kernel/event_groups.c ****                     xReturn = pdFALSE;
 723:FreeRTOS-Kernel/event_groups.c ****                 }
 724:FreeRTOS-Kernel/event_groups.c ****             }
 725:FreeRTOS-Kernel/event_groups.c ****             #else /* configSUPPORT_DYNAMIC_ALLOCATION */
 726:FreeRTOS-Kernel/event_groups.c ****             {
 727:FreeRTOS-Kernel/event_groups.c ****                 /* Event group must have been statically allocated. */
 728:FreeRTOS-Kernel/event_groups.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
 729:FreeRTOS-Kernel/event_groups.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
 730:FreeRTOS-Kernel/event_groups.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
 731:FreeRTOS-Kernel/event_groups.c ****                 *ppxEventGroupBuffer = ( StaticEventGroup_t * ) pxEventBits;
 732:FreeRTOS-Kernel/event_groups.c ****                 xReturn = pdTRUE;
 733:FreeRTOS-Kernel/event_groups.c ****             }
 734:FreeRTOS-Kernel/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 735:FreeRTOS-Kernel/event_groups.c **** 
 736:FreeRTOS-Kernel/event_groups.c ****             traceRETURN_xEventGroupGetStaticBuffer( xReturn );
 737:FreeRTOS-Kernel/event_groups.c **** 
 738:FreeRTOS-Kernel/event_groups.c ****             return xReturn;
 739:FreeRTOS-Kernel/event_groups.c ****         }
 740:FreeRTOS-Kernel/event_groups.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 741:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 742:FreeRTOS-Kernel/event_groups.c **** 
 743:FreeRTOS-Kernel/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 744:FreeRTOS-Kernel/event_groups.c ****  * an interrupt. */
 745:FreeRTOS-Kernel/event_groups.c ****     void vEventGroupSetBitsCallback( void * pvEventGroup,
 746:FreeRTOS-Kernel/event_groups.c ****                                      uint32_t ulBitsToSet )
 747:FreeRTOS-Kernel/event_groups.c ****     {
 748:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );
 749:FreeRTOS-Kernel/event_groups.c **** 
 750:FreeRTOS-Kernel/event_groups.c ****         /* MISRA Ref 11.5.4 [Callback function parameter] */
 751:FreeRTOS-Kernel/event_groups.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
 752:FreeRTOS-Kernel/event_groups.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
 753:FreeRTOS-Kernel/event_groups.c ****         ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 754:FreeRTOS-Kernel/event_groups.c **** 
 755:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_vEventGroupSetBitsCallback();
 756:FreeRTOS-Kernel/event_groups.c ****     }
 757:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 758:FreeRTOS-Kernel/event_groups.c **** 
 759:FreeRTOS-Kernel/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 760:FreeRTOS-Kernel/event_groups.c ****  * an interrupt. */
 761:FreeRTOS-Kernel/event_groups.c ****     void vEventGroupClearBitsCallback( void * pvEventGroup,
 762:FreeRTOS-Kernel/event_groups.c ****                                        uint32_t ulBitsToClear )
 763:FreeRTOS-Kernel/event_groups.c ****     {
 764:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );
 765:FreeRTOS-Kernel/event_groups.c **** 
 766:FreeRTOS-Kernel/event_groups.c ****         /* MISRA Ref 11.5.4 [Callback function parameter] */
 767:FreeRTOS-Kernel/event_groups.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
 768:FreeRTOS-Kernel/event_groups.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
 769:FreeRTOS-Kernel/event_groups.c ****         ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 770:FreeRTOS-Kernel/event_groups.c **** 
 771:FreeRTOS-Kernel/event_groups.c ****         traceRETURN_vEventGroupClearBitsCallback();
ARM GAS  /tmp/ccMPlAtg.s 			page 15


 772:FreeRTOS-Kernel/event_groups.c ****     }
 773:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 774:FreeRTOS-Kernel/event_groups.c **** 
 775:FreeRTOS-Kernel/event_groups.c ****     static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 776:FreeRTOS-Kernel/event_groups.c ****                                             const EventBits_t uxBitsToWaitFor,
 777:FreeRTOS-Kernel/event_groups.c ****                                             const BaseType_t xWaitForAllBits )
 778:FreeRTOS-Kernel/event_groups.c ****     {
  29              		.loc 1 778 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 779:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xWaitConditionMet = pdFALSE;
  34              		.loc 1 779 9 view .LVU1
 780:FreeRTOS-Kernel/event_groups.c **** 
 781:FreeRTOS-Kernel/event_groups.c ****         if( xWaitForAllBits == pdFALSE )
  35              		.loc 1 781 9 view .LVU2
  36              		.loc 1 781 11 is_stmt 0 view .LVU3
  37 0000 1AB9     		cbnz	r2, .L2
 782:FreeRTOS-Kernel/event_groups.c ****         {
 783:FreeRTOS-Kernel/event_groups.c ****             /* Task only has to wait for one bit within uxBitsToWaitFor to be
 784:FreeRTOS-Kernel/event_groups.c ****              * set.  Is one already set? */
 785:FreeRTOS-Kernel/event_groups.c ****             if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  38              		.loc 1 785 13 is_stmt 1 view .LVU4
  39              		.loc 1 785 15 is_stmt 0 view .LVU5
  40 0002 0842     		tst	r0, r1
  41 0004 05D1     		bne	.L4
 779:FreeRTOS-Kernel/event_groups.c **** 
  42              		.loc 1 779 20 view .LVU6
  43 0006 1046     		mov	r0, r2
  44              	.LVL1:
 779:FreeRTOS-Kernel/event_groups.c **** 
  45              		.loc 1 779 20 view .LVU7
  46 0008 7047     		bx	lr
  47              	.LVL2:
  48              	.L2:
 786:FreeRTOS-Kernel/event_groups.c ****             {
 787:FreeRTOS-Kernel/event_groups.c ****                 xWaitConditionMet = pdTRUE;
 788:FreeRTOS-Kernel/event_groups.c ****             }
 789:FreeRTOS-Kernel/event_groups.c ****             else
 790:FreeRTOS-Kernel/event_groups.c ****             {
 791:FreeRTOS-Kernel/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 792:FreeRTOS-Kernel/event_groups.c ****             }
 793:FreeRTOS-Kernel/event_groups.c ****         }
 794:FreeRTOS-Kernel/event_groups.c ****         else
 795:FreeRTOS-Kernel/event_groups.c ****         {
 796:FreeRTOS-Kernel/event_groups.c ****             /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 797:FreeRTOS-Kernel/event_groups.c ****              * Are they set already? */
 798:FreeRTOS-Kernel/event_groups.c ****             if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  49              		.loc 1 798 13 is_stmt 1 view .LVU8
  50              		.loc 1 798 15 is_stmt 0 view .LVU9
  51 000a 8143     		bics	r1, r1, r0
  52              	.LVL3:
  53              		.loc 1 798 15 view .LVU10
  54 000c 03D0     		beq	.L5
 779:FreeRTOS-Kernel/event_groups.c **** 
  55              		.loc 1 779 20 view .LVU11
ARM GAS  /tmp/ccMPlAtg.s 			page 16


  56 000e 0020     		movs	r0, #0
  57              	.LVL4:
 779:FreeRTOS-Kernel/event_groups.c **** 
  58              		.loc 1 779 20 view .LVU12
  59 0010 7047     		bx	lr
  60              	.LVL5:
  61              	.L4:
 787:FreeRTOS-Kernel/event_groups.c ****             }
  62              		.loc 1 787 35 view .LVU13
  63 0012 0120     		movs	r0, #1
  64              	.LVL6:
 787:FreeRTOS-Kernel/event_groups.c ****             }
  65              		.loc 1 787 35 view .LVU14
  66 0014 7047     		bx	lr
  67              	.LVL7:
  68              	.L5:
 799:FreeRTOS-Kernel/event_groups.c ****             {
 800:FreeRTOS-Kernel/event_groups.c ****                 xWaitConditionMet = pdTRUE;
  69              		.loc 1 800 35 view .LVU15
  70 0016 0120     		movs	r0, #1
  71              	.LVL8:
 801:FreeRTOS-Kernel/event_groups.c ****             }
 802:FreeRTOS-Kernel/event_groups.c ****             else
 803:FreeRTOS-Kernel/event_groups.c ****             {
 804:FreeRTOS-Kernel/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
  72              		.loc 1 804 41 is_stmt 1 view .LVU16
 805:FreeRTOS-Kernel/event_groups.c ****             }
 806:FreeRTOS-Kernel/event_groups.c ****         }
 807:FreeRTOS-Kernel/event_groups.c **** 
 808:FreeRTOS-Kernel/event_groups.c ****         return xWaitConditionMet;
  73              		.loc 1 808 9 view .LVU17
 809:FreeRTOS-Kernel/event_groups.c ****     }
  74              		.loc 1 809 5 is_stmt 0 view .LVU18
  75 0018 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE15:
  79              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  80              		.align	1
  81              		.global	xEventGroupCreateStatic
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  86              	xEventGroupCreateStatic:
  87              	.LVL9:
  88              	.LFB5:
  87:FreeRTOS-Kernel/event_groups.c ****             EventGroup_t * pxEventBits;
  89              		.loc 1 87 9 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 8
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  88:FreeRTOS-Kernel/event_groups.c **** 
  93              		.loc 1 88 13 view .LVU20
  90:FreeRTOS-Kernel/event_groups.c **** 
  94              		.loc 1 90 69 view .LVU21
  93:FreeRTOS-Kernel/event_groups.c **** 
  95              		.loc 1 93 13 view .LVU22
  96 0000 80B1     		cbz	r0, .L13
ARM GAS  /tmp/ccMPlAtg.s 			page 17


  87:FreeRTOS-Kernel/event_groups.c ****             EventGroup_t * pxEventBits;
  97              		.loc 1 87 9 is_stmt 0 discriminator 2 view .LVU23
  98 0002 10B5     		push	{r4, lr}
  99              	.LCFI0:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 4, -8
 102              		.cfi_offset 14, -4
 103 0004 82B0     		sub	sp, sp, #8
 104              	.LCFI1:
 105              		.cfi_def_cfa_offset 16
 106 0006 0446     		mov	r4, r0
  93:FreeRTOS-Kernel/event_groups.c **** 
 107              		.loc 1 93 47 is_stmt 1 discriminator 2 view .LVU24
 108              	.LBB42:
 100:FreeRTOS-Kernel/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 109              		.loc 1 100 17 discriminator 2 view .LVU25
 100:FreeRTOS-Kernel/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 110              		.loc 1 100 33 is_stmt 0 discriminator 2 view .LVU26
 111 0008 1823     		movs	r3, #24
 112 000a 0193     		str	r3, [sp, #4]
 101:FreeRTOS-Kernel/event_groups.c ****             }
 113              		.loc 1 101 17 is_stmt 1 discriminator 2 view .LVU27
 114 000c 019B     		ldr	r3, [sp, #4]
 115 000e 182B     		cmp	r3, #24
 116 0010 11D0     		beq	.L9
 101:FreeRTOS-Kernel/event_groups.c ****             }
 117              		.loc 1 101 17 view .LVU28
 118              	.LBB43:
 119              	.LBI43:
 120              		.file 2 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  /tmp/ccMPlAtg.s 			page 18


  28:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
ARM GAS  /tmp/ccMPlAtg.s 			page 19


  85:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccMPlAtg.s 			page 20


 142:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccMPlAtg.s 			page 21


 199:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 121              		.loc 2 213 30 view .LVU29
 122              	.LBB44:
 214:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
 123              		.loc 2 215 5 view .LVU30
 216:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 124              		.loc 2 217 5 view .LVU31
 125              		.syntax unified
 126              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 127 0012 4FF05003 		   mov r3, #80                                              
 128 0016 83F31188 	   msr basepri, r3                                         
 129 001a BFF36F8F 	   isb                                                     
 130 001e BFF34F8F 	   dsb                                                     
 131              	
 132              	@ 0 "" 2
 133              	.LVL10:
 134              		.thumb
 135              		.syntax unified
 136              	.L10:
 137              		.loc 2 217 5 is_stmt 0 view .LVU32
 138              	.LBE44:
 139              	.LBE43:
 101:FreeRTOS-Kernel/event_groups.c ****             }
 140              		.loc 1 101 17 is_stmt 1 discriminator 2 view .LVU33
 101:FreeRTOS-Kernel/event_groups.c ****             }
 141              		.loc 1 101 17 discriminator 2 view .LVU34
 142 0022 FEE7     		b	.L10
 143              	.L13:
 144              	.LCFI2:
 145              		.cfi_def_cfa_offset 0
 146              		.cfi_restore 4
 147              		.cfi_restore 14
 101:FreeRTOS-Kernel/event_groups.c ****             }
 148              		.loc 1 101 17 is_stmt 0 discriminator 2 view .LVU35
 149              	.LBE42:
  93:FreeRTOS-Kernel/event_groups.c **** 
 150              		.loc 1 93 13 is_stmt 1 view .LVU36
 151              	.LBB45:
 152              	.LBI45:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 153              		.loc 2 213 30 view .LVU37
ARM GAS  /tmp/ccMPlAtg.s 			page 22


 154              	.LBB46:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 155              		.loc 2 215 5 view .LVU38
 156              		.loc 2 217 5 view .LVU39
 157              		.syntax unified
 158              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 159 0024 4FF05003 		   mov r3, #80                                              
 160 0028 83F31188 	   msr basepri, r3                                         
 161 002c BFF36F8F 	   isb                                                     
 162 0030 BFF34F8F 	   dsb                                                     
 163              	
 164              	@ 0 "" 2
 165              	.LVL11:
 166              		.thumb
 167              		.syntax unified
 168              	.L8:
 169              		.loc 2 217 5 is_stmt 0 view .LVU40
 170              	.LBE46:
 171              	.LBE45:
  93:FreeRTOS-Kernel/event_groups.c **** 
 172              		.loc 1 93 13 is_stmt 1 discriminator 1 view .LVU41
  93:FreeRTOS-Kernel/event_groups.c **** 
 173              		.loc 1 93 13 discriminator 1 view .LVU42
 174 0034 FEE7     		b	.L8
 175              	.L9:
 176              	.LCFI3:
 177              		.cfi_def_cfa_offset 16
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 180              	.LBB47:
 101:FreeRTOS-Kernel/event_groups.c ****             }
 181              		.loc 1 101 64 view .LVU43
 182              	.LBE47:
 109:FreeRTOS-Kernel/event_groups.c **** 
 183              		.loc 1 109 13 view .LVU44
 184              	.LVL12:
 111:FreeRTOS-Kernel/event_groups.c ****             {
 185              		.loc 1 111 13 view .LVU45
 113:FreeRTOS-Kernel/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 186              		.loc 1 113 17 view .LVU46
 113:FreeRTOS-Kernel/event_groups.c ****                 vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 187              		.loc 1 113 42 is_stmt 0 view .LVU47
 188 0036 0023     		movs	r3, #0
 189 0038 40F8043B 		str	r3, [r0], #4
 190              	.LVL13:
 114:FreeRTOS-Kernel/event_groups.c **** 
 191              		.loc 1 114 17 is_stmt 1 view .LVU48
 192 003c FFF7FEFF 		bl	vListInitialise
 193              	.LVL14:
 125:FreeRTOS-Kernel/event_groups.c ****             }
 194              		.loc 1 125 55 view .LVU49
 132:FreeRTOS-Kernel/event_groups.c ****             }
 195              		.loc 1 132 49 view .LVU50
 135:FreeRTOS-Kernel/event_groups.c **** 
 196              		.loc 1 135 63 view .LVU51
 137:FreeRTOS-Kernel/event_groups.c ****         }
 197              		.loc 1 137 13 view .LVU52
ARM GAS  /tmp/ccMPlAtg.s 			page 23


 138:FreeRTOS-Kernel/event_groups.c **** 
 198              		.loc 1 138 9 is_stmt 0 view .LVU53
 199 0040 2046     		mov	r0, r4
 200 0042 02B0     		add	sp, sp, #8
 201              	.LCFI4:
 202              		.cfi_def_cfa_offset 8
 203              		@ sp needed
 204 0044 10BD     		pop	{r4, pc}
 138:FreeRTOS-Kernel/event_groups.c **** 
 205              		.loc 1 138 9 view .LVU54
 206              		.cfi_endproc
 207              	.LFE5:
 209              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 210              		.align	1
 211              		.global	xEventGroupWaitBits
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 216              	xEventGroupWaitBits:
 217              	.LVL15:
 218              	.LFB7:
 317:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 219              		.loc 1 317 5 is_stmt 1 view -0
 220              		.cfi_startproc
 221              		@ args = 4, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 318:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxReturn, uxControlBits = 0;
 223              		.loc 1 318 9 view .LVU56
 319:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xWaitConditionMet, xAlreadyYielded;
 224              		.loc 1 319 9 view .LVU57
 320:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 225              		.loc 1 320 9 view .LVU58
 321:FreeRTOS-Kernel/event_groups.c **** 
 226              		.loc 1 321 9 view .LVU59
 323:FreeRTOS-Kernel/event_groups.c **** 
 227              		.loc 1 323 116 view .LVU60
 327:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 228              		.loc 1 327 9 view .LVU61
 229 0000 88B1     		cbz	r0, .L35
 317:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 230              		.loc 1 317 5 is_stmt 0 discriminator 2 view .LVU62
 231 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 232              	.LCFI5:
 233              		.cfi_def_cfa_offset 24
 234              		.cfi_offset 4, -24
 235              		.cfi_offset 5, -20
 236              		.cfi_offset 6, -16
 237              		.cfi_offset 7, -12
 238              		.cfi_offset 8, -8
 239              		.cfi_offset 14, -4
 240 0006 0C46     		mov	r4, r1
 241 0008 1646     		mov	r6, r2
 242 000a 1D46     		mov	r5, r3
 243 000c 0746     		mov	r7, r0
 327:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 244              		.loc 1 327 36 is_stmt 1 discriminator 2 view .LVU63
 328:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
ARM GAS  /tmp/ccMPlAtg.s 			page 24


 245              		.loc 1 328 9 discriminator 2 view .LVU64
 246 000e B1F1807F 		cmp	r1, #16777216
 247 0012 11D3     		bcc	.L17
 328:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 248              		.loc 1 328 9 view .LVU65
 249              	.LBB48:
 250              	.LBI48:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 251              		.loc 2 213 30 view .LVU66
 252              	.LBB49:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 253              		.loc 2 215 5 view .LVU67
 254              		.loc 2 217 5 view .LVU68
 255              		.syntax unified
 256              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 257 0014 4FF05003 		   mov r3, #80                                              
 258 0018 83F31188 	   msr basepri, r3                                         
 259 001c BFF36F8F 	   isb                                                     
 260 0020 BFF34F8F 	   dsb                                                     
 261              	
 262              	@ 0 "" 2
 263              	.LVL16:
 264              		.thumb
 265              		.syntax unified
 266              	.L18:
 267              		.loc 2 217 5 is_stmt 0 view .LVU69
 268              	.LBE49:
 269              	.LBE48:
 328:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 270              		.loc 1 328 9 is_stmt 1 discriminator 2 view .LVU70
 328:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 271              		.loc 1 328 9 discriminator 2 view .LVU71
 272 0024 FEE7     		b	.L18
 273              	.LVL17:
 274              	.L35:
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 0
 277              		.cfi_restore 4
 278              		.cfi_restore 5
 279              		.cfi_restore 6
 280              		.cfi_restore 7
 281              		.cfi_restore 8
 282              		.cfi_restore 14
 327:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 283              		.loc 1 327 9 view .LVU72
 284              	.LBB50:
 285              	.LBI50:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 286              		.loc 2 213 30 view .LVU73
 287              	.LBB51:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 288              		.loc 2 215 5 view .LVU74
 289              		.loc 2 217 5 view .LVU75
 290              		.syntax unified
 291              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 292 0026 4FF05003 		   mov r3, #80                                              
 293 002a 83F31188 	   msr basepri, r3                                         
ARM GAS  /tmp/ccMPlAtg.s 			page 25


 294 002e BFF36F8F 	   isb                                                     
 295 0032 BFF34F8F 	   dsb                                                     
 296              	
 297              	@ 0 "" 2
 298              	.LVL18:
 299              		.thumb
 300              		.syntax unified
 301              	.L16:
 302              		.loc 2 217 5 is_stmt 0 view .LVU76
 303              	.LBE51:
 304              	.LBE50:
 327:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 305              		.loc 1 327 9 is_stmt 1 discriminator 1 view .LVU77
 327:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 306              		.loc 1 327 9 discriminator 1 view .LVU78
 307 0036 FEE7     		b	.L16
 308              	.LVL19:
 309              	.L17:
 310              	.LCFI7:
 311              		.cfi_def_cfa_offset 24
 312              		.cfi_offset 4, -24
 313              		.cfi_offset 5, -20
 314              		.cfi_offset 6, -16
 315              		.cfi_offset 7, -12
 316              		.cfi_offset 8, -8
 317              		.cfi_offset 14, -4
 328:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 318              		.loc 1 328 81 discriminator 2 view .LVU79
 329:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 319              		.loc 1 329 9 discriminator 2 view .LVU80
 320 0038 41B9     		cbnz	r1, .L19
 329:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 321              		.loc 1 329 9 view .LVU81
 322              	.LBB52:
 323              	.LBI52:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 324              		.loc 2 213 30 view .LVU82
 325              	.LBB53:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 326              		.loc 2 215 5 view .LVU83
 327              		.loc 2 217 5 view .LVU84
 328              		.syntax unified
 329              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 330 003a 4FF05003 		   mov r3, #80                                              
 331 003e 83F31188 	   msr basepri, r3                                         
 332 0042 BFF36F8F 	   isb                                                     
 333 0046 BFF34F8F 	   dsb                                                     
 334              	
 335              	@ 0 "" 2
 336              	.LVL20:
 337              		.thumb
 338              		.syntax unified
 339              	.L20:
 340              		.loc 2 217 5 is_stmt 0 view .LVU85
 341              	.LBE53:
 342              	.LBE52:
 329:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccMPlAtg.s 			page 26


 343              		.loc 1 329 9 is_stmt 1 discriminator 3 view .LVU86
 329:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 344              		.loc 1 329 9 discriminator 3 view .LVU87
 345 004a FEE7     		b	.L20
 346              	.LVL21:
 347              	.L19:
 329:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 348              		.loc 1 329 45 discriminator 2 view .LVU88
 332:FreeRTOS-Kernel/event_groups.c ****         }
 349              		.loc 1 332 13 discriminator 2 view .LVU89
 350 004c FFF7FEFF 		bl	xTaskGetSchedulerState
 351              	.LVL22:
 332:FreeRTOS-Kernel/event_groups.c ****         }
 352              		.loc 1 332 13 is_stmt 0 discriminator 2 view .LVU90
 353 0050 50B9     		cbnz	r0, .L21
 354 0052 069B     		ldr	r3, [sp, #24]
 355 0054 43B1     		cbz	r3, .L21
 332:FreeRTOS-Kernel/event_groups.c ****         }
 356              		.loc 1 332 13 is_stmt 1 view .LVU91
 357              	.LBB54:
 358              	.LBI54:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 359              		.loc 2 213 30 view .LVU92
 360              	.LBB55:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 361              		.loc 2 215 5 view .LVU93
 362              		.loc 2 217 5 view .LVU94
 363              		.syntax unified
 364              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 365 0056 4FF05003 		   mov r3, #80                                              
 366 005a 83F31188 	   msr basepri, r3                                         
 367 005e BFF36F8F 	   isb                                                     
 368 0062 BFF34F8F 	   dsb                                                     
 369              	
 370              	@ 0 "" 2
 371              	.LVL23:
 372              		.thumb
 373              		.syntax unified
 374              	.L22:
 375              		.loc 2 217 5 is_stmt 0 view .LVU95
 376              	.LBE55:
 377              	.LBE54:
 332:FreeRTOS-Kernel/event_groups.c ****         }
 378              		.loc 1 332 13 is_stmt 1 discriminator 4 view .LVU96
 332:FreeRTOS-Kernel/event_groups.c ****         }
 379              		.loc 1 332 13 discriminator 4 view .LVU97
 380 0066 FEE7     		b	.L22
 381              	.L21:
 332:FreeRTOS-Kernel/event_groups.c ****         }
 382              		.loc 1 332 114 discriminator 8 view .LVU98
 336:FreeRTOS-Kernel/event_groups.c ****         {
 383              		.loc 1 336 9 discriminator 8 view .LVU99
 384 0068 FFF7FEFF 		bl	vTaskSuspendAll
 385              	.LVL24:
 386              	.LBB56:
 338:FreeRTOS-Kernel/event_groups.c **** 
 387              		.loc 1 338 13 discriminator 8 view .LVU100
ARM GAS  /tmp/ccMPlAtg.s 			page 27


 338:FreeRTOS-Kernel/event_groups.c **** 
 388              		.loc 1 338 31 is_stmt 0 discriminator 8 view .LVU101
 389 006c D7F80080 		ldr	r8, [r7]
 390              	.LVL25:
 341:FreeRTOS-Kernel/event_groups.c **** 
 391              		.loc 1 341 13 is_stmt 1 discriminator 8 view .LVU102
 341:FreeRTOS-Kernel/event_groups.c **** 
 392              		.loc 1 341 33 is_stmt 0 discriminator 8 view .LVU103
 393 0070 2A46     		mov	r2, r5
 394 0072 2146     		mov	r1, r4
 395 0074 4046     		mov	r0, r8
 396 0076 FFF7FEFF 		bl	prvTestWaitCondition
 397              	.LVL26:
 343:FreeRTOS-Kernel/event_groups.c ****             {
 398              		.loc 1 343 13 is_stmt 1 discriminator 8 view .LVU104
 343:FreeRTOS-Kernel/event_groups.c ****             {
 399              		.loc 1 343 15 is_stmt 0 discriminator 8 view .LVU105
 400 007a F8B1     		cbz	r0, .L23
 347:FreeRTOS-Kernel/event_groups.c ****                 xTicksToWait = ( TickType_t ) 0;
 401              		.loc 1 347 17 is_stmt 1 view .LVU106
 402              	.LVL27:
 348:FreeRTOS-Kernel/event_groups.c **** 
 403              		.loc 1 348 17 view .LVU107
 351:FreeRTOS-Kernel/event_groups.c ****                 {
 404              		.loc 1 351 17 view .LVU108
 351:FreeRTOS-Kernel/event_groups.c ****                 {
 405              		.loc 1 351 19 is_stmt 0 view .LVU109
 406 007c 8EB3     		cbz	r6, .L31
 353:FreeRTOS-Kernel/event_groups.c ****                 }
 407              		.loc 1 353 21 is_stmt 1 view .LVU110
 353:FreeRTOS-Kernel/event_groups.c ****                 }
 408              		.loc 1 353 46 is_stmt 0 view .LVU111
 409 007e 28EA0403 		bic	r3, r8, r4
 410 0082 3B60     		str	r3, [r7]
 348:FreeRTOS-Kernel/event_groups.c **** 
 411              		.loc 1 348 30 view .LVU112
 412 0084 0023     		movs	r3, #0
 413 0086 0693     		str	r3, [sp, #24]
 414              	.LVL28:
 415              	.L24:
 401:FreeRTOS-Kernel/event_groups.c ****             }
 416              		.loc 1 401 81 is_stmt 1 view .LVU113
 417              	.LBE56:
 404:FreeRTOS-Kernel/event_groups.c **** 
 418              		.loc 1 404 9 view .LVU114
 404:FreeRTOS-Kernel/event_groups.c **** 
 419              		.loc 1 404 27 is_stmt 0 view .LVU115
 420 0088 FFF7FEFF 		bl	xTaskResumeAll
 421              	.LVL29:
 406:FreeRTOS-Kernel/event_groups.c ****         {
 422              		.loc 1 406 9 is_stmt 1 view .LVU116
 406:FreeRTOS-Kernel/event_groups.c ****         {
 423              		.loc 1 406 11 is_stmt 0 view .LVU117
 424 008c 069B     		ldr	r3, [sp, #24]
 425 008e 93B1     		cbz	r3, .L14
 408:FreeRTOS-Kernel/event_groups.c ****             {
 426              		.loc 1 408 13 is_stmt 1 view .LVU118
ARM GAS  /tmp/ccMPlAtg.s 			page 28


 408:FreeRTOS-Kernel/event_groups.c ****             {
 427              		.loc 1 408 15 is_stmt 0 view .LVU119
 428 0090 48B9     		cbnz	r0, .L28
 410:FreeRTOS-Kernel/event_groups.c ****             }
 429              		.loc 1 410 17 is_stmt 1 view .LVU120
 430 0092 4FF0E023 		mov	r3, #-536813568
 431 0096 4FF08052 		mov	r2, #268435456
 432 009a C3F8042D 		str	r2, [r3, #3332]
 433              	.LVL30:
 410:FreeRTOS-Kernel/event_groups.c ****             }
 434              		.loc 1 410 17 view .LVU121
 435              		.syntax unified
 436              	@ 410 "FreeRTOS-Kernel/event_groups.c" 1
 437 009e BFF34F8F 		dsb
 438              	@ 0 "" 2
 410:FreeRTOS-Kernel/event_groups.c ****             }
 439              		.loc 1 410 17 view .LVU122
 440              	@ 410 "FreeRTOS-Kernel/event_groups.c" 1
 441 00a2 BFF36F8F 		isb
 442              	@ 0 "" 2
 410:FreeRTOS-Kernel/event_groups.c ****             }
 443              		.loc 1 410 39 view .LVU123
 444              		.thumb
 445              		.syntax unified
 446              	.L28:
 414:FreeRTOS-Kernel/event_groups.c ****             }
 447              		.loc 1 414 41 view .LVU124
 421:FreeRTOS-Kernel/event_groups.c **** 
 448              		.loc 1 421 13 view .LVU125
 421:FreeRTOS-Kernel/event_groups.c **** 
 449              		.loc 1 421 24 is_stmt 0 view .LVU126
 450 00a6 FFF7FEFF 		bl	uxTaskResetEventItemValue
 451              	.LVL31:
 421:FreeRTOS-Kernel/event_groups.c **** 
 452              		.loc 1 421 24 view .LVU127
 453 00aa 8046     		mov	r8, r0
 454              	.LVL32:
 423:FreeRTOS-Kernel/event_groups.c ****             {
 455              		.loc 1 423 13 is_stmt 1 view .LVU128
 423:FreeRTOS-Kernel/event_groups.c ****             {
 456              		.loc 1 423 15 is_stmt 0 view .LVU129
 457 00ac 10F0007F 		tst	r0, #33554432
 458 00b0 1AD0     		beq	.L36
 459              	.LVL33:
 460              	.L29:
 455:FreeRTOS-Kernel/event_groups.c **** 
 461              		.loc 1 455 13 is_stmt 1 view .LVU130
 458:FreeRTOS-Kernel/event_groups.c ****         }
 462              		.loc 1 458 13 view .LVU131
 458:FreeRTOS-Kernel/event_groups.c ****         }
 463              		.loc 1 458 22 is_stmt 0 view .LVU132
 464 00b2 28F07F48 		bic	r8, r8, #-16777216
 465              	.LVL34:
 461:FreeRTOS-Kernel/event_groups.c **** 
 466              		.loc 1 461 9 is_stmt 1 view .LVU133
 464:FreeRTOS-Kernel/event_groups.c **** 
 467              		.loc 1 464 9 view .LVU134
ARM GAS  /tmp/ccMPlAtg.s 			page 29


 466:FreeRTOS-Kernel/event_groups.c **** 
 468              		.loc 1 466 52 view .LVU135
 468:FreeRTOS-Kernel/event_groups.c ****     }
 469              		.loc 1 468 9 view .LVU136
 470              	.L14:
 469:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 471              		.loc 1 469 5 is_stmt 0 view .LVU137
 472 00b6 4046     		mov	r0, r8
 473 00b8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 474              	.LVL35:
 475              	.L23:
 476              	.LBB57:
 360:FreeRTOS-Kernel/event_groups.c ****             {
 477              		.loc 1 360 18 is_stmt 1 view .LVU138
 360:FreeRTOS-Kernel/event_groups.c ****             {
 478              		.loc 1 360 20 is_stmt 0 view .LVU139
 479 00bc 069B     		ldr	r3, [sp, #24]
 480 00be 002B     		cmp	r3, #0
 481 00c0 E2D0     		beq	.L24
 373:FreeRTOS-Kernel/event_groups.c ****                 {
 482              		.loc 1 373 17 is_stmt 1 view .LVU140
 373:FreeRTOS-Kernel/event_groups.c ****                 {
 483              		.loc 1 373 19 is_stmt 0 view .LVU141
 484 00c2 5EB9     		cbnz	r6, .L32
 485              	.LBE57:
 319:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xWaitConditionMet, xAlreadyYielded;
 486              		.loc 1 319 31 view .LVU142
 487 00c4 0021     		movs	r1, #0
 488              	.L25:
 489              	.LVL36:
 490              	.LBB58:
 379:FreeRTOS-Kernel/event_groups.c ****                 }
 491              		.loc 1 379 45 is_stmt 1 view .LVU143
 382:FreeRTOS-Kernel/event_groups.c ****                 {
 492              		.loc 1 382 17 view .LVU144
 382:FreeRTOS-Kernel/event_groups.c ****                 {
 493              		.loc 1 382 19 is_stmt 0 view .LVU145
 494 00c6 0DB1     		cbz	r5, .L26
 384:FreeRTOS-Kernel/event_groups.c ****                 }
 495              		.loc 1 384 21 is_stmt 1 view .LVU146
 384:FreeRTOS-Kernel/event_groups.c ****                 }
 496              		.loc 1 384 35 is_stmt 0 view .LVU147
 497 00c8 41F08061 		orr	r1, r1, #67108864
 498              	.LVL37:
 499              	.L26:
 388:FreeRTOS-Kernel/event_groups.c ****                 }
 500              		.loc 1 388 45 is_stmt 1 view .LVU148
 394:FreeRTOS-Kernel/event_groups.c **** 
 501              		.loc 1 394 17 view .LVU149
 502 00cc 069A     		ldr	r2, [sp, #24]
 503 00ce 2143     		orrs	r1, r1, r4
 504              	.LVL38:
 394:FreeRTOS-Kernel/event_groups.c **** 
 505              		.loc 1 394 17 is_stmt 0 view .LVU150
 506 00d0 381D     		adds	r0, r7, #4
 507              	.LVL39:
 394:FreeRTOS-Kernel/event_groups.c **** 
ARM GAS  /tmp/ccMPlAtg.s 			page 30


 508              		.loc 1 394 17 view .LVU151
 509 00d2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 510              	.LVL40:
 399:FreeRTOS-Kernel/event_groups.c **** 
 511              		.loc 1 399 17 is_stmt 1 view .LVU152
 399:FreeRTOS-Kernel/event_groups.c **** 
 512              		.loc 1 399 26 is_stmt 0 view .LVU153
 513 00d6 4FF00008 		mov	r8, #0
 514              	.LVL41:
 399:FreeRTOS-Kernel/event_groups.c **** 
 515              		.loc 1 399 26 view .LVU154
 516 00da D5E7     		b	.L24
 517              	.LVL42:
 518              	.L32:
 375:FreeRTOS-Kernel/event_groups.c ****                 }
 519              		.loc 1 375 35 view .LVU155
 520 00dc 4FF08071 		mov	r1, #16777216
 521 00e0 F1E7     		b	.L25
 522              	.LVL43:
 523              	.L31:
 348:FreeRTOS-Kernel/event_groups.c **** 
 524              		.loc 1 348 30 view .LVU156
 525 00e2 0023     		movs	r3, #0
 526 00e4 0693     		str	r3, [sp, #24]
 527 00e6 CFE7     		b	.L24
 528              	.LVL44:
 529              	.L36:
 348:FreeRTOS-Kernel/event_groups.c **** 
 530              		.loc 1 348 30 view .LVU157
 531              	.LBE58:
 425:FreeRTOS-Kernel/event_groups.c ****                 {
 532              		.loc 1 425 17 is_stmt 1 view .LVU158
 533 00e8 FFF7FEFF 		bl	vPortEnterCritical
 534              	.LVL45:
 428:FreeRTOS-Kernel/event_groups.c **** 
 535              		.loc 1 428 21 view .LVU159
 428:FreeRTOS-Kernel/event_groups.c **** 
 536              		.loc 1 428 30 is_stmt 0 view .LVU160
 537 00ec D7F80080 		ldr	r8, [r7]
 538              	.LVL46:
 432:FreeRTOS-Kernel/event_groups.c ****                     {
 539              		.loc 1 432 21 is_stmt 1 view .LVU161
 432:FreeRTOS-Kernel/event_groups.c ****                     {
 540              		.loc 1 432 25 is_stmt 0 view .LVU162
 541 00f0 2A46     		mov	r2, r5
 542 00f2 2146     		mov	r1, r4
 543 00f4 4046     		mov	r0, r8
 544 00f6 FFF7FEFF 		bl	prvTestWaitCondition
 545              	.LVL47:
 432:FreeRTOS-Kernel/event_groups.c ****                     {
 546              		.loc 1 432 23 view .LVU163
 547 00fa 18B1     		cbz	r0, .L30
 434:FreeRTOS-Kernel/event_groups.c ****                         {
 548              		.loc 1 434 25 is_stmt 1 view .LVU164
 434:FreeRTOS-Kernel/event_groups.c ****                         {
 549              		.loc 1 434 27 is_stmt 0 view .LVU165
 550 00fc 16B1     		cbz	r6, .L30
ARM GAS  /tmp/ccMPlAtg.s 			page 31


 436:FreeRTOS-Kernel/event_groups.c ****                         }
 551              		.loc 1 436 29 is_stmt 1 view .LVU166
 436:FreeRTOS-Kernel/event_groups.c ****                         }
 552              		.loc 1 436 54 is_stmt 0 view .LVU167
 553 00fe 28EA0404 		bic	r4, r8, r4
 554              	.LVL48:
 436:FreeRTOS-Kernel/event_groups.c ****                         }
 555              		.loc 1 436 54 view .LVU168
 556 0102 3C60     		str	r4, [r7]
 557              	.L30:
 445:FreeRTOS-Kernel/event_groups.c ****                     }
 558              		.loc 1 445 49 is_stmt 1 view .LVU169
 448:FreeRTOS-Kernel/event_groups.c ****                 }
 559              		.loc 1 448 21 view .LVU170
 560              	.LVL49:
 450:FreeRTOS-Kernel/event_groups.c ****             }
 561              		.loc 1 450 17 view .LVU171
 562 0104 FFF7FEFF 		bl	vPortExitCritical
 563              	.LVL50:
 564 0108 D3E7     		b	.L29
 565              		.cfi_endproc
 566              	.LFE7:
 568              		.section	.text.xEventGroupClearBits,"ax",%progbits
 569              		.align	1
 570              		.global	xEventGroupClearBits
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	xEventGroupClearBits:
 576              	.LVL51:
 577              	.LFB8:
 474:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 578              		.loc 1 474 5 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 475:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxReturn;
 582              		.loc 1 475 9 view .LVU173
 476:FreeRTOS-Kernel/event_groups.c **** 
 583              		.loc 1 476 9 view .LVU174
 478:FreeRTOS-Kernel/event_groups.c **** 
 584              		.loc 1 478 70 view .LVU175
 482:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 585              		.loc 1 482 9 view .LVU176
 586 0000 70B1     		cbz	r0, .L44
 474:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 587              		.loc 1 474 5 is_stmt 0 discriminator 2 view .LVU177
 588 0002 70B5     		push	{r4, r5, r6, lr}
 589              	.LCFI8:
 590              		.cfi_def_cfa_offset 16
 591              		.cfi_offset 4, -16
 592              		.cfi_offset 5, -12
 593              		.cfi_offset 6, -8
 594              		.cfi_offset 14, -4
 595 0004 0C46     		mov	r4, r1
 596 0006 0546     		mov	r5, r0
 482:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
ARM GAS  /tmp/ccMPlAtg.s 			page 32


 597              		.loc 1 482 36 is_stmt 1 discriminator 2 view .LVU178
 483:FreeRTOS-Kernel/event_groups.c **** 
 598              		.loc 1 483 9 discriminator 2 view .LVU179
 599 0008 B1F1807F 		cmp	r1, #16777216
 600 000c 11D3     		bcc	.L40
 483:FreeRTOS-Kernel/event_groups.c **** 
 601              		.loc 1 483 9 view .LVU180
 602              	.LBB59:
 603              	.LBI59:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 604              		.loc 2 213 30 view .LVU181
 605              	.LBB60:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 606              		.loc 2 215 5 view .LVU182
 607              		.loc 2 217 5 view .LVU183
 608              		.syntax unified
 609              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 610 000e 4FF05003 		   mov r3, #80                                              
 611 0012 83F31188 	   msr basepri, r3                                         
 612 0016 BFF36F8F 	   isb                                                     
 613 001a BFF34F8F 	   dsb                                                     
 614              	
 615              	@ 0 "" 2
 616              	.LVL52:
 617              		.thumb
 618              		.syntax unified
 619              	.L41:
 620              		.loc 2 217 5 is_stmt 0 view .LVU184
 621              	.LBE60:
 622              	.LBE59:
 483:FreeRTOS-Kernel/event_groups.c **** 
 623              		.loc 1 483 9 is_stmt 1 discriminator 2 view .LVU185
 483:FreeRTOS-Kernel/event_groups.c **** 
 624              		.loc 1 483 9 discriminator 2 view .LVU186
 625 001e FEE7     		b	.L41
 626              	.L44:
 627              	.LCFI9:
 628              		.cfi_def_cfa_offset 0
 629              		.cfi_restore 4
 630              		.cfi_restore 5
 631              		.cfi_restore 6
 632              		.cfi_restore 14
 482:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 633              		.loc 1 482 9 view .LVU187
 634              	.LBB61:
 635              	.LBI61:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 636              		.loc 2 213 30 view .LVU188
 637              	.LBB62:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 638              		.loc 2 215 5 view .LVU189
 639              		.loc 2 217 5 view .LVU190
 640              		.syntax unified
 641              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 642 0020 4FF05003 		   mov r3, #80                                              
 643 0024 83F31188 	   msr basepri, r3                                         
 644 0028 BFF36F8F 	   isb                                                     
ARM GAS  /tmp/ccMPlAtg.s 			page 33


 645 002c BFF34F8F 	   dsb                                                     
 646              	
 647              	@ 0 "" 2
 648              	.LVL53:
 649              		.thumb
 650              		.syntax unified
 651              	.L39:
 652              		.loc 2 217 5 is_stmt 0 view .LVU191
 653              	.LBE62:
 654              	.LBE61:
 482:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 655              		.loc 1 482 9 is_stmt 1 discriminator 1 view .LVU192
 482:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 656              		.loc 1 482 9 discriminator 1 view .LVU193
 657 0030 FEE7     		b	.L39
 658              	.L40:
 659              	.LCFI10:
 660              		.cfi_def_cfa_offset 16
 661              		.cfi_offset 4, -16
 662              		.cfi_offset 5, -12
 663              		.cfi_offset 6, -8
 664              		.cfi_offset 14, -4
 483:FreeRTOS-Kernel/event_groups.c **** 
 665              		.loc 1 483 79 discriminator 2 view .LVU194
 485:FreeRTOS-Kernel/event_groups.c ****         {
 666              		.loc 1 485 9 discriminator 2 view .LVU195
 667 0032 FFF7FEFF 		bl	vPortEnterCritical
 668              	.LVL54:
 487:FreeRTOS-Kernel/event_groups.c **** 
 669              		.loc 1 487 70 discriminator 2 view .LVU196
 491:FreeRTOS-Kernel/event_groups.c **** 
 670              		.loc 1 491 13 discriminator 2 view .LVU197
 491:FreeRTOS-Kernel/event_groups.c **** 
 671              		.loc 1 491 22 is_stmt 0 discriminator 2 view .LVU198
 672 0036 2E68     		ldr	r6, [r5]
 673              	.LVL55:
 494:FreeRTOS-Kernel/event_groups.c ****         }
 674              		.loc 1 494 13 is_stmt 1 discriminator 2 view .LVU199
 494:FreeRTOS-Kernel/event_groups.c ****         }
 675              		.loc 1 494 38 is_stmt 0 discriminator 2 view .LVU200
 676 0038 26EA0404 		bic	r4, r6, r4
 677              	.LVL56:
 494:FreeRTOS-Kernel/event_groups.c ****         }
 678              		.loc 1 494 38 discriminator 2 view .LVU201
 679 003c 2C60     		str	r4, [r5]
 496:FreeRTOS-Kernel/event_groups.c **** 
 680              		.loc 1 496 9 is_stmt 1 discriminator 2 view .LVU202
 681 003e FFF7FEFF 		bl	vPortExitCritical
 682              	.LVL57:
 498:FreeRTOS-Kernel/event_groups.c **** 
 683              		.loc 1 498 53 discriminator 2 view .LVU203
 500:FreeRTOS-Kernel/event_groups.c ****     }
 684              		.loc 1 500 9 discriminator 2 view .LVU204
 501:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 685              		.loc 1 501 5 is_stmt 0 discriminator 2 view .LVU205
 686 0042 3046     		mov	r0, r6
 687 0044 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccMPlAtg.s 			page 34


 501:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 688              		.loc 1 501 5 discriminator 2 view .LVU206
 689              		.cfi_endproc
 690              	.LFE8:
 692              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 693              		.align	1
 694              		.global	xEventGroupGetBitsFromISR
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 699              	xEventGroupGetBitsFromISR:
 700              	.LVL58:
 701              	.LFB9:
 525:FreeRTOS-Kernel/event_groups.c ****         UBaseType_t uxSavedInterruptStatus;
 702              		.loc 1 525 5 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 526:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t const * const pxEventBits = xEventGroup;
 707              		.loc 1 526 9 view .LVU208
 527:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxReturn;
 708              		.loc 1 527 9 view .LVU209
 528:FreeRTOS-Kernel/event_groups.c **** 
 709              		.loc 1 528 9 view .LVU210
 530:FreeRTOS-Kernel/event_groups.c **** 
 710              		.loc 1 530 60 view .LVU211
 535:FreeRTOS-Kernel/event_groups.c ****         {
 711              		.loc 1 535 9 view .LVU212
 712              	.LBB63:
 713              	.LBI63:
 218:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 714              		.loc 2 229 34 view .LVU213
 715              	.LBB64:
 230:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 716              		.loc 2 231 5 view .LVU214
 232:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 717              		.loc 2 233 5 view .LVU215
 718              		.syntax unified
 719              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 720 0000 EFF31183 		   mrs r3, basepri                                         
 721 0004 4FF05002 	   mov r2, #80                                              
 722 0008 82F31188 	   msr basepri, r2                                         
 723 000c BFF36F8F 	   isb                                                     
ARM GAS  /tmp/ccMPlAtg.s 			page 35


 724 0010 BFF34F8F 	   dsb                                                     
 725              	
 726              	@ 0 "" 2
 727              	.LVL59:
 234:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 728              		.loc 2 245 5 view .LVU216
 729              		.loc 2 245 5 is_stmt 0 view .LVU217
 730              		.thumb
 731              		.syntax unified
 732              	.LBE64:
 733              	.LBE63:
 537:FreeRTOS-Kernel/event_groups.c ****         }
 734              		.loc 1 537 13 is_stmt 1 view .LVU218
 537:FreeRTOS-Kernel/event_groups.c ****         }
 735              		.loc 1 537 22 is_stmt 0 view .LVU219
 736 0014 0068     		ldr	r0, [r0]
 737              	.LVL60:
 539:FreeRTOS-Kernel/event_groups.c **** 
 738              		.loc 1 539 9 is_stmt 1 view .LVU220
 739              	.LBB65:
 740              	.LBI65:
 246:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 741              		.loc 2 249 30 view .LVU221
 742              	.LBB66:
 250:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 743              		.loc 2 251 5 view .LVU222
 744              		.syntax unified
 745              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 746 0016 83F31188 		   msr basepri, r3 
 747              	@ 0 "" 2
 748              	.LVL61:
 749              		.loc 2 251 5 is_stmt 0 view .LVU223
 750              		.thumb
 751              		.syntax unified
 752              	.LBE66:
 753              	.LBE65:
 541:FreeRTOS-Kernel/event_groups.c **** 
 754              		.loc 1 541 58 is_stmt 1 view .LVU224
 543:FreeRTOS-Kernel/event_groups.c ****     }
 755              		.loc 1 543 9 view .LVU225
 544:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 756              		.loc 1 544 5 is_stmt 0 view .LVU226
ARM GAS  /tmp/ccMPlAtg.s 			page 36


 757 001a 7047     		bx	lr
 758              		.cfi_endproc
 759              	.LFE9:
 761              		.section	.text.xEventGroupSetBits,"ax",%progbits
 762              		.align	1
 763              		.global	xEventGroupSetBits
 764              		.syntax unified
 765              		.thumb
 766              		.thumb_func
 768              	xEventGroupSetBits:
 769              	.LVL62:
 770              	.LFB10:
 549:FreeRTOS-Kernel/event_groups.c ****         ListItem_t * pxListItem;
 771              		.loc 1 549 5 is_stmt 1 view -0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 549:FreeRTOS-Kernel/event_groups.c ****         ListItem_t * pxListItem;
 775              		.loc 1 549 5 is_stmt 0 view .LVU228
 776 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 777              	.LCFI11:
 778              		.cfi_def_cfa_offset 24
 779              		.cfi_offset 3, -24
 780              		.cfi_offset 4, -20
 781              		.cfi_offset 5, -16
 782              		.cfi_offset 6, -12
 783              		.cfi_offset 7, -8
 784              		.cfi_offset 14, -4
 550:FreeRTOS-Kernel/event_groups.c ****         ListItem_t * pxNext;
 785              		.loc 1 550 9 is_stmt 1 view .LVU229
 551:FreeRTOS-Kernel/event_groups.c ****         ListItem_t const * pxListEnd;
 786              		.loc 1 551 9 view .LVU230
 552:FreeRTOS-Kernel/event_groups.c ****         List_t const * pxList;
 787              		.loc 1 552 9 view .LVU231
 553:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 788              		.loc 1 553 9 view .LVU232
 554:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 789              		.loc 1 554 9 view .LVU233
 790              	.LVL63:
 555:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xMatchFound = pdFALSE;
 791              		.loc 1 555 9 view .LVU234
 556:FreeRTOS-Kernel/event_groups.c **** 
 792              		.loc 1 556 9 view .LVU235
 558:FreeRTOS-Kernel/event_groups.c **** 
 793              		.loc 1 558 66 view .LVU236
 562:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 794              		.loc 1 562 9 view .LVU237
 795 0002 68B1     		cbz	r0, .L58
 796 0004 0D46     		mov	r5, r1
 797 0006 0446     		mov	r4, r0
 562:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 798              		.loc 1 562 36 discriminator 2 view .LVU238
 563:FreeRTOS-Kernel/event_groups.c **** 
 799              		.loc 1 563 9 discriminator 2 view .LVU239
 800 0008 B1F1807F 		cmp	r1, #16777216
 801 000c 11D3     		bcc	.L49
 563:FreeRTOS-Kernel/event_groups.c **** 
ARM GAS  /tmp/ccMPlAtg.s 			page 37


 802              		.loc 1 563 9 view .LVU240
 803              	.LBB67:
 804              	.LBI67:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 805              		.loc 2 213 30 view .LVU241
 806              	.LBB68:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 807              		.loc 2 215 5 view .LVU242
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 808              		.loc 2 217 5 view .LVU243
 809              		.syntax unified
 810              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 811 000e 4FF05003 		   mov r3, #80                                              
 812 0012 83F31188 	   msr basepri, r3                                         
 813 0016 BFF36F8F 	   isb                                                     
 814 001a BFF34F8F 	   dsb                                                     
 815              	
 816              	@ 0 "" 2
 817              	.LVL64:
 818              		.thumb
 819              		.syntax unified
 820              	.L50:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 821              		.loc 2 217 5 is_stmt 0 view .LVU244
 822              	.LBE68:
 823              	.LBE67:
 563:FreeRTOS-Kernel/event_groups.c **** 
 824              		.loc 1 563 9 is_stmt 1 discriminator 2 view .LVU245
 563:FreeRTOS-Kernel/event_groups.c **** 
 825              		.loc 1 563 9 discriminator 2 view .LVU246
 826 001e FEE7     		b	.L50
 827              	.L58:
 562:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 828              		.loc 1 562 9 view .LVU247
 829              	.LBB69:
 830              	.LBI69:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 831              		.loc 2 213 30 view .LVU248
 832              	.LBB70:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 833              		.loc 2 215 5 view .LVU249
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 834              		.loc 2 217 5 view .LVU250
 835              		.syntax unified
 836              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 837 0020 4FF05003 		   mov r3, #80                                              
 838 0024 83F31188 	   msr basepri, r3                                         
 839 0028 BFF36F8F 	   isb                                                     
 840 002c BFF34F8F 	   dsb                                                     
 841              	
 842              	@ 0 "" 2
 843              	.LVL65:
 844              		.thumb
 845              		.syntax unified
 846              	.L48:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 847              		.loc 2 217 5 is_stmt 0 view .LVU251
ARM GAS  /tmp/ccMPlAtg.s 			page 38


 848              	.LBE70:
 849              	.LBE69:
 562:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 850              		.loc 1 562 9 is_stmt 1 discriminator 1 view .LVU252
 562:FreeRTOS-Kernel/event_groups.c ****         configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 851              		.loc 1 562 9 discriminator 1 view .LVU253
 852 0030 FEE7     		b	.L48
 853              	.L49:
 563:FreeRTOS-Kernel/event_groups.c **** 
 854              		.loc 1 563 77 discriminator 2 view .LVU254
 565:FreeRTOS-Kernel/event_groups.c ****         pxListEnd = listGET_END_MARKER( pxList );
 855              		.loc 1 565 9 discriminator 2 view .LVU255
 856              	.LVL66:
 566:FreeRTOS-Kernel/event_groups.c ****         vTaskSuspendAll();
 857              		.loc 1 566 9 discriminator 2 view .LVU256
 566:FreeRTOS-Kernel/event_groups.c ****         vTaskSuspendAll();
 858              		.loc 1 566 19 is_stmt 0 discriminator 2 view .LVU257
 859 0032 00F10C06 		add	r6, r0, #12
 860              	.LVL67:
 567:FreeRTOS-Kernel/event_groups.c ****         {
 861              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU258
 862 0036 FFF7FEFF 		bl	vTaskSuspendAll
 863              	.LVL68:
 569:FreeRTOS-Kernel/event_groups.c **** 
 864              		.loc 1 569 66 discriminator 2 view .LVU259
 571:FreeRTOS-Kernel/event_groups.c **** 
 865              		.loc 1 571 13 discriminator 2 view .LVU260
 571:FreeRTOS-Kernel/event_groups.c **** 
 866              		.loc 1 571 24 is_stmt 0 discriminator 2 view .LVU261
 867 003a 2069     		ldr	r0, [r4, #16]
 868              	.LVL69:
 574:FreeRTOS-Kernel/event_groups.c **** 
 869              		.loc 1 574 13 is_stmt 1 discriminator 2 view .LVU262
 574:FreeRTOS-Kernel/event_groups.c **** 
 870              		.loc 1 574 24 is_stmt 0 discriminator 2 view .LVU263
 871 003c 2368     		ldr	r3, [r4]
 574:FreeRTOS-Kernel/event_groups.c **** 
 872              		.loc 1 574 38 discriminator 2 view .LVU264
 873 003e 2B43     		orrs	r3, r3, r5
 874 0040 2360     		str	r3, [r4]
 577:FreeRTOS-Kernel/event_groups.c ****             {
 875              		.loc 1 577 13 is_stmt 1 discriminator 2 view .LVU265
 554:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 876              		.loc 1 554 21 is_stmt 0 discriminator 2 view .LVU266
 877 0042 0027     		movs	r7, #0
 577:FreeRTOS-Kernel/event_groups.c ****             {
 878              		.loc 1 577 18 discriminator 2 view .LVU267
 879 0044 0AE0     		b	.L51
 880              	.LVL70:
 881              	.L52:
 599:FreeRTOS-Kernel/event_groups.c ****                 {
 882              		.loc 1 599 22 is_stmt 1 view .LVU268
 599:FreeRTOS-Kernel/event_groups.c ****                 {
 883              		.loc 1 599 57 is_stmt 0 view .LVU269
 884 0046 2168     		ldr	r1, [r4]
 599:FreeRTOS-Kernel/event_groups.c ****                 {
 885              		.loc 1 599 24 view .LVU270
ARM GAS  /tmp/ccMPlAtg.s 			page 39


 886 0048 32EA0101 		bics	r1, r2, r1
 887 004c 05D1     		bne	.L54
 599:FreeRTOS-Kernel/event_groups.c ****                 {
 888              		.loc 1 599 24 view .LVU271
 889 004e 11E0     		b	.L53
 890              	.LVL71:
 891              	.L55:
 618:FreeRTOS-Kernel/event_groups.c ****                     }
 892              		.loc 1 618 49 is_stmt 1 view .LVU272
 626:FreeRTOS-Kernel/event_groups.c ****                 }
 893              		.loc 1 626 21 view .LVU273
 626:FreeRTOS-Kernel/event_groups.c ****                 }
 894              		.loc 1 626 79 is_stmt 0 view .LVU274
 895 0050 2168     		ldr	r1, [r4]
 626:FreeRTOS-Kernel/event_groups.c ****                 }
 896              		.loc 1 626 21 view .LVU275
 897 0052 41F00071 		orr	r1, r1, #33554432
 898 0056 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 899              	.LVL72:
 900              	.L54:
 549:FreeRTOS-Kernel/event_groups.c ****         ListItem_t * pxListItem;
 901              		.loc 1 549 5 view .LVU276
 902 005a 2846     		mov	r0, r5
 903              	.LVL73:
 904              	.L51:
 577:FreeRTOS-Kernel/event_groups.c ****             {
 905              		.loc 1 577 31 is_stmt 1 view .LVU277
 906 005c B042     		cmp	r0, r6
 907 005e 0ED0     		beq	.L59
 579:FreeRTOS-Kernel/event_groups.c ****                 uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 908              		.loc 1 579 17 view .LVU278
 579:FreeRTOS-Kernel/event_groups.c ****                 uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 909              		.loc 1 579 24 is_stmt 0 view .LVU279
 910 0060 4568     		ldr	r5, [r0, #4]
 911              	.LVL74:
 580:FreeRTOS-Kernel/event_groups.c ****                 xMatchFound = pdFALSE;
 912              		.loc 1 580 17 is_stmt 1 view .LVU280
 580:FreeRTOS-Kernel/event_groups.c ****                 xMatchFound = pdFALSE;
 913              		.loc 1 580 33 is_stmt 0 view .LVU281
 914 0062 0368     		ldr	r3, [r0]
 915              	.LVL75:
 581:FreeRTOS-Kernel/event_groups.c **** 
 916              		.loc 1 581 17 is_stmt 1 view .LVU282
 584:FreeRTOS-Kernel/event_groups.c ****                 uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 917              		.loc 1 584 17 view .LVU283
 585:FreeRTOS-Kernel/event_groups.c **** 
 918              		.loc 1 585 17 view .LVU284
 585:FreeRTOS-Kernel/event_groups.c **** 
 919              		.loc 1 585 33 is_stmt 0 view .LVU285
 920 0064 23F07F42 		bic	r2, r3, #-16777216
 921              	.LVL76:
 587:FreeRTOS-Kernel/event_groups.c ****                 {
 922              		.loc 1 587 17 is_stmt 1 view .LVU286
 587:FreeRTOS-Kernel/event_groups.c ****                 {
 923              		.loc 1 587 19 is_stmt 0 view .LVU287
 924 0068 13F0806F 		tst	r3, #67108864
 925 006c EBD1     		bne	.L52
ARM GAS  /tmp/ccMPlAtg.s 			page 40


 590:FreeRTOS-Kernel/event_groups.c ****                     {
 926              		.loc 1 590 21 is_stmt 1 view .LVU288
 590:FreeRTOS-Kernel/event_groups.c ****                     {
 927              		.loc 1 590 56 is_stmt 0 view .LVU289
 928 006e 2168     		ldr	r1, [r4]
 590:FreeRTOS-Kernel/event_groups.c ****                     {
 929              		.loc 1 590 23 view .LVU290
 930 0070 1142     		tst	r1, r2
 931 0072 F2D0     		beq	.L54
 932              	.L53:
 933              	.LVL77:
 612:FreeRTOS-Kernel/event_groups.c ****                     {
 934              		.loc 1 612 21 is_stmt 1 view .LVU291
 612:FreeRTOS-Kernel/event_groups.c ****                     {
 935              		.loc 1 612 23 is_stmt 0 view .LVU292
 936 0074 13F0807F 		tst	r3, #16777216
 937 0078 EAD0     		beq	.L55
 614:FreeRTOS-Kernel/event_groups.c ****                     }
 938              		.loc 1 614 25 is_stmt 1 view .LVU293
 614:FreeRTOS-Kernel/event_groups.c ****                     }
 939              		.loc 1 614 39 is_stmt 0 view .LVU294
 940 007a 1743     		orrs	r7, r7, r2
 941              	.LVL78:
 614:FreeRTOS-Kernel/event_groups.c ****                     }
 942              		.loc 1 614 39 view .LVU295
 943 007c E8E7     		b	.L55
 944              	.LVL79:
 945              	.L59:
 637:FreeRTOS-Kernel/event_groups.c ****         }
 946              		.loc 1 637 13 is_stmt 1 view .LVU296
 637:FreeRTOS-Kernel/event_groups.c ****         }
 947              		.loc 1 637 24 is_stmt 0 view .LVU297
 948 007e 2368     		ldr	r3, [r4]
 637:FreeRTOS-Kernel/event_groups.c ****         }
 949              		.loc 1 637 38 view .LVU298
 950 0080 23EA0703 		bic	r3, r3, r7
 951 0084 2360     		str	r3, [r4]
 639:FreeRTOS-Kernel/event_groups.c **** 
 952              		.loc 1 639 9 is_stmt 1 view .LVU299
 639:FreeRTOS-Kernel/event_groups.c **** 
 953              		.loc 1 639 18 is_stmt 0 view .LVU300
 954 0086 FFF7FEFF 		bl	xTaskResumeAll
 955              	.LVL80:
 641:FreeRTOS-Kernel/event_groups.c **** 
 956              		.loc 1 641 67 is_stmt 1 view .LVU301
 643:FreeRTOS-Kernel/event_groups.c ****     }
 957              		.loc 1 643 9 view .LVU302
 644:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 958              		.loc 1 644 5 is_stmt 0 view .LVU303
 959 008a 2068     		ldr	r0, [r4]
 960 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 644:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 961              		.loc 1 644 5 view .LVU304
 962              		.cfi_endproc
 963              	.LFE10:
 965              		.section	.text.xEventGroupSync,"ax",%progbits
 966              		.align	1
ARM GAS  /tmp/ccMPlAtg.s 			page 41


 967              		.global	xEventGroupSync
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 972              	xEventGroupSync:
 973              	.LVL81:
 974              	.LFB6:
 189:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxOriginalBitValue, uxReturn;
 975              		.loc 1 189 5 is_stmt 1 view -0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 190:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 979              		.loc 1 190 9 view .LVU306
 191:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xAlreadyYielded;
 980              		.loc 1 191 9 view .LVU307
 192:FreeRTOS-Kernel/event_groups.c ****         BaseType_t xTimeoutOccurred = pdFALSE;
 981              		.loc 1 192 9 view .LVU308
 193:FreeRTOS-Kernel/event_groups.c **** 
 982              		.loc 1 193 9 view .LVU309
 195:FreeRTOS-Kernel/event_groups.c **** 
 983              		.loc 1 195 94 view .LVU310
 197:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 984              		.loc 1 197 9 view .LVU311
 985 0000 B2F1807F 		cmp	r2, #16777216
 986 0004 08D3     		bcc	.L61
 197:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 987              		.loc 1 197 9 view .LVU312
 988              	.LBB71:
 989              	.LBI71:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 990              		.loc 2 213 30 view .LVU313
 991              	.LBB72:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 992              		.loc 2 215 5 view .LVU314
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 993              		.loc 2 217 5 view .LVU315
 994              		.syntax unified
 995              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 996 0006 4FF05003 		   mov r3, #80                                              
 997 000a 83F31188 	   msr basepri, r3                                         
 998 000e BFF36F8F 	   isb                                                     
 999 0012 BFF34F8F 	   dsb                                                     
 1000              	
 1001              	@ 0 "" 2
 1002              	.LVL82:
 1003              		.thumb
 1004              		.syntax unified
 1005              	.L62:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1006              		.loc 2 217 5 is_stmt 0 view .LVU316
 1007              	.LBE72:
 1008              	.LBE71:
 197:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 1009              		.loc 1 197 9 is_stmt 1 discriminator 1 view .LVU317
 197:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 1010              		.loc 1 197 9 discriminator 1 view .LVU318
ARM GAS  /tmp/ccMPlAtg.s 			page 42


 1011 0016 FEE7     		b	.L62
 1012              	.LVL83:
 1013              	.L61:
 189:FreeRTOS-Kernel/event_groups.c ****         EventBits_t uxOriginalBitValue, uxReturn;
 1014              		.loc 1 189 5 is_stmt 0 discriminator 2 view .LVU319
 1015 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1016              	.LCFI12:
 1017              		.cfi_def_cfa_offset 24
 1018              		.cfi_offset 4, -24
 1019              		.cfi_offset 5, -20
 1020              		.cfi_offset 6, -16
 1021              		.cfi_offset 7, -12
 1022              		.cfi_offset 8, -8
 1023              		.cfi_offset 14, -4
 1024 001c 0746     		mov	r7, r0
 1025 001e 0D46     		mov	r5, r1
 1026 0020 1446     		mov	r4, r2
 1027 0022 1E46     		mov	r6, r3
 197:FreeRTOS-Kernel/event_groups.c ****         configASSERT( uxBitsToWaitFor != 0 );
 1028              		.loc 1 197 81 is_stmt 1 discriminator 2 view .LVU320
 198:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1029              		.loc 1 198 9 discriminator 2 view .LVU321
 1030 0024 42B9     		cbnz	r2, .L63
 198:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1031              		.loc 1 198 9 view .LVU322
 1032              	.LBB73:
 1033              	.LBI73:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1034              		.loc 2 213 30 view .LVU323
 1035              	.LBB74:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1036              		.loc 2 215 5 view .LVU324
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1037              		.loc 2 217 5 view .LVU325
 1038              		.syntax unified
 1039              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1040 0026 4FF05003 		   mov r3, #80                                              
 1041 002a 83F31188 	   msr basepri, r3                                         
 1042 002e BFF36F8F 	   isb                                                     
 1043 0032 BFF34F8F 	   dsb                                                     
 1044              	
 1045              	@ 0 "" 2
 1046              	.LVL84:
 1047              		.thumb
 1048              		.syntax unified
 1049              	.L64:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1050              		.loc 2 217 5 is_stmt 0 view .LVU326
 1051              	.LBE74:
 1052              	.LBE73:
 198:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1053              		.loc 1 198 9 is_stmt 1 discriminator 2 view .LVU327
 198:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1054              		.loc 1 198 9 discriminator 2 view .LVU328
 1055 0036 FEE7     		b	.L64
 1056              	.LVL85:
 1057              	.L63:
ARM GAS  /tmp/ccMPlAtg.s 			page 43


 198:FreeRTOS-Kernel/event_groups.c ****         #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1058              		.loc 1 198 45 discriminator 2 view .LVU329
 201:FreeRTOS-Kernel/event_groups.c ****         }
 1059              		.loc 1 201 13 discriminator 2 view .LVU330
 1060 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 1061              	.LVL86:
 201:FreeRTOS-Kernel/event_groups.c ****         }
 1062              		.loc 1 201 13 is_stmt 0 discriminator 2 view .LVU331
 1063 003c 48B9     		cbnz	r0, .L65
 1064 003e 46B1     		cbz	r6, .L65
 201:FreeRTOS-Kernel/event_groups.c ****         }
 1065              		.loc 1 201 13 is_stmt 1 view .LVU332
 1066              	.LBB75:
 1067              	.LBI75:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1068              		.loc 2 213 30 view .LVU333
 1069              	.LBB76:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1070              		.loc 2 215 5 view .LVU334
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1071              		.loc 2 217 5 view .LVU335
 1072              		.syntax unified
 1073              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1074 0040 4FF05003 		   mov r3, #80                                              
 1075 0044 83F31188 	   msr basepri, r3                                         
 1076 0048 BFF36F8F 	   isb                                                     
 1077 004c BFF34F8F 	   dsb                                                     
 1078              	
 1079              	@ 0 "" 2
 1080              	.LVL87:
 1081              		.thumb
 1082              		.syntax unified
 1083              	.L66:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1084              		.loc 2 217 5 is_stmt 0 view .LVU336
 1085              	.LBE76:
 1086              	.LBE75:
 201:FreeRTOS-Kernel/event_groups.c ****         }
 1087              		.loc 1 201 13 is_stmt 1 discriminator 3 view .LVU337
 201:FreeRTOS-Kernel/event_groups.c ****         }
 1088              		.loc 1 201 13 discriminator 3 view .LVU338
 1089 0050 FEE7     		b	.L66
 1090              	.L65:
 201:FreeRTOS-Kernel/event_groups.c ****         }
 1091              		.loc 1 201 114 discriminator 8 view .LVU339
 205:FreeRTOS-Kernel/event_groups.c ****         {
 1092              		.loc 1 205 9 discriminator 8 view .LVU340
 1093 0052 FFF7FEFF 		bl	vTaskSuspendAll
 1094              	.LVL88:
 207:FreeRTOS-Kernel/event_groups.c **** 
 1095              		.loc 1 207 13 discriminator 8 view .LVU341
 207:FreeRTOS-Kernel/event_groups.c **** 
 1096              		.loc 1 207 32 is_stmt 0 discriminator 8 view .LVU342
 1097 0056 D7F80080 		ldr	r8, [r7]
 1098              	.LVL89:
 209:FreeRTOS-Kernel/event_groups.c **** 
 1099              		.loc 1 209 13 is_stmt 1 discriminator 8 view .LVU343
ARM GAS  /tmp/ccMPlAtg.s 			page 44


 209:FreeRTOS-Kernel/event_groups.c **** 
 1100              		.loc 1 209 22 is_stmt 0 discriminator 8 view .LVU344
 1101 005a 2946     		mov	r1, r5
 1102 005c 3846     		mov	r0, r7
 1103 005e FFF7FEFF 		bl	xEventGroupSetBits
 1104              	.LVL90:
 211:FreeRTOS-Kernel/event_groups.c ****             {
 1105              		.loc 1 211 13 is_stmt 1 discriminator 8 view .LVU345
 211:FreeRTOS-Kernel/event_groups.c ****             {
 1106              		.loc 1 211 40 is_stmt 0 discriminator 8 view .LVU346
 1107 0062 48EA0505 		orr	r5, r8, r5
 1108              	.LVL91:
 211:FreeRTOS-Kernel/event_groups.c ****             {
 1109              		.loc 1 211 15 discriminator 8 view .LVU347
 1110 0066 34EA0503 		bics	r3, r4, r5
 1111 006a 1AD0     		beq	.L76
 224:FreeRTOS-Kernel/event_groups.c ****                 {
 1112              		.loc 1 224 17 is_stmt 1 view .LVU348
 224:FreeRTOS-Kernel/event_groups.c ****                 {
 1113              		.loc 1 224 19 is_stmt 0 view .LVU349
 1114 006c FEB9     		cbnz	r6, .L77
 243:FreeRTOS-Kernel/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 1115              		.loc 1 243 21 is_stmt 1 view .LVU350
 243:FreeRTOS-Kernel/event_groups.c ****                     xTimeoutOccurred = pdTRUE;
 1116              		.loc 1 243 30 is_stmt 0 view .LVU351
 1117 006e 3D68     		ldr	r5, [r7]
 1118              	.LVL92:
 244:FreeRTOS-Kernel/event_groups.c ****                 }
 1119              		.loc 1 244 21 is_stmt 1 view .LVU352
 1120              	.L68:
 248:FreeRTOS-Kernel/event_groups.c **** 
 1121              		.loc 1 248 9 view .LVU353
 248:FreeRTOS-Kernel/event_groups.c **** 
 1122              		.loc 1 248 27 is_stmt 0 view .LVU354
 1123 0070 FFF7FEFF 		bl	xTaskResumeAll
 1124              	.LVL93:
 250:FreeRTOS-Kernel/event_groups.c ****         {
 1125              		.loc 1 250 9 is_stmt 1 view .LVU355
 250:FreeRTOS-Kernel/event_groups.c ****         {
 1126              		.loc 1 250 11 is_stmt 0 view .LVU356
 1127 0074 96B1     		cbz	r6, .L60
 252:FreeRTOS-Kernel/event_groups.c ****             {
 1128              		.loc 1 252 13 is_stmt 1 view .LVU357
 252:FreeRTOS-Kernel/event_groups.c ****             {
 1129              		.loc 1 252 15 is_stmt 0 view .LVU358
 1130 0076 48B9     		cbnz	r0, .L71
 254:FreeRTOS-Kernel/event_groups.c ****             }
 1131              		.loc 1 254 17 is_stmt 1 view .LVU359
 1132 0078 4FF0E023 		mov	r3, #-536813568
 1133 007c 4FF08052 		mov	r2, #268435456
 1134 0080 C3F8042D 		str	r2, [r3, #3332]
 254:FreeRTOS-Kernel/event_groups.c ****             }
 1135              		.loc 1 254 17 view .LVU360
 1136              		.syntax unified
 1137              	@ 254 "FreeRTOS-Kernel/event_groups.c" 1
 1138 0084 BFF34F8F 		dsb
 1139              	@ 0 "" 2
ARM GAS  /tmp/ccMPlAtg.s 			page 45


 254:FreeRTOS-Kernel/event_groups.c ****             }
 1140              		.loc 1 254 17 view .LVU361
 1141              	@ 254 "FreeRTOS-Kernel/event_groups.c" 1
 1142 0088 BFF36F8F 		isb
 1143              	@ 0 "" 2
 254:FreeRTOS-Kernel/event_groups.c ****             }
 1144              		.loc 1 254 39 view .LVU362
 1145              		.thumb
 1146              		.syntax unified
 1147              	.L71:
 258:FreeRTOS-Kernel/event_groups.c ****             }
 1148              		.loc 1 258 41 view .LVU363
 265:FreeRTOS-Kernel/event_groups.c **** 
 1149              		.loc 1 265 13 view .LVU364
 265:FreeRTOS-Kernel/event_groups.c **** 
 1150              		.loc 1 265 24 is_stmt 0 view .LVU365
 1151 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 1152              	.LVL94:
 265:FreeRTOS-Kernel/event_groups.c **** 
 1153              		.loc 1 265 24 view .LVU366
 1154 0090 0546     		mov	r5, r0
 1155              	.LVL95:
 267:FreeRTOS-Kernel/event_groups.c ****             {
 1156              		.loc 1 267 13 is_stmt 1 view .LVU367
 267:FreeRTOS-Kernel/event_groups.c ****             {
 1157              		.loc 1 267 15 is_stmt 0 view .LVU368
 1158 0092 10F0007F 		tst	r0, #33554432
 1159 0096 12D0     		beq	.L78
 1160              	.LVL96:
 1161              	.L72:
 294:FreeRTOS-Kernel/event_groups.c **** 
 1162              		.loc 1 294 13 is_stmt 1 view .LVU369
 298:FreeRTOS-Kernel/event_groups.c ****         }
 1163              		.loc 1 298 13 view .LVU370
 298:FreeRTOS-Kernel/event_groups.c ****         }
 1164              		.loc 1 298 22 is_stmt 0 view .LVU371
 1165 0098 25F07F45 		bic	r5, r5, #-16777216
 1166              	.LVL97:
 301:FreeRTOS-Kernel/event_groups.c **** 
 1167              		.loc 1 301 9 is_stmt 1 view .LVU372
 304:FreeRTOS-Kernel/event_groups.c **** 
 1168              		.loc 1 304 9 view .LVU373
 306:FreeRTOS-Kernel/event_groups.c **** 
 1169              		.loc 1 306 48 view .LVU374
 308:FreeRTOS-Kernel/event_groups.c ****     }
 1170              		.loc 1 308 9 view .LVU375
 1171              	.L60:
 309:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 1172              		.loc 1 309 5 is_stmt 0 view .LVU376
 1173 009c 2846     		mov	r0, r5
 1174 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1175              	.LVL98:
 1176              	.L76:
 214:FreeRTOS-Kernel/event_groups.c **** 
 1177              		.loc 1 214 17 is_stmt 1 view .LVU377
 218:FreeRTOS-Kernel/event_groups.c **** 
 1178              		.loc 1 218 17 view .LVU378
ARM GAS  /tmp/ccMPlAtg.s 			page 46


 218:FreeRTOS-Kernel/event_groups.c **** 
 1179              		.loc 1 218 28 is_stmt 0 view .LVU379
 1180 00a2 3B68     		ldr	r3, [r7]
 218:FreeRTOS-Kernel/event_groups.c **** 
 1181              		.loc 1 218 42 view .LVU380
 1182 00a4 23EA0403 		bic	r3, r3, r4
 1183 00a8 3B60     		str	r3, [r7]
 220:FreeRTOS-Kernel/event_groups.c ****             }
 1184              		.loc 1 220 17 is_stmt 1 view .LVU381
 1185              	.LVL99:
 220:FreeRTOS-Kernel/event_groups.c ****             }
 1186              		.loc 1 220 30 is_stmt 0 view .LVU382
 1187 00aa 0026     		movs	r6, #0
 1188 00ac E0E7     		b	.L68
 1189              	.LVL100:
 1190              	.L77:
 226:FreeRTOS-Kernel/event_groups.c **** 
 1191              		.loc 1 226 93 is_stmt 1 view .LVU383
 231:FreeRTOS-Kernel/event_groups.c **** 
 1192              		.loc 1 231 21 view .LVU384
 1193 00ae 3246     		mov	r2, r6
 1194 00b0 44F0A061 		orr	r1, r4, #83886080
 1195 00b4 381D     		adds	r0, r7, #4
 1196 00b6 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 1197              	.LVL101:
 237:FreeRTOS-Kernel/event_groups.c ****                 }
 1198              		.loc 1 237 21 view .LVU385
 237:FreeRTOS-Kernel/event_groups.c ****                 }
 1199              		.loc 1 237 30 is_stmt 0 view .LVU386
 1200 00ba 0025     		movs	r5, #0
 1201 00bc D8E7     		b	.L68
 1202              	.LVL102:
 1203              	.L78:
 270:FreeRTOS-Kernel/event_groups.c ****                 {
 1204              		.loc 1 270 17 is_stmt 1 view .LVU387
 1205 00be FFF7FEFF 		bl	vPortEnterCritical
 1206              	.LVL103:
 272:FreeRTOS-Kernel/event_groups.c **** 
 1207              		.loc 1 272 21 view .LVU388
 272:FreeRTOS-Kernel/event_groups.c **** 
 1208              		.loc 1 272 30 is_stmt 0 view .LVU389
 1209 00c2 3D68     		ldr	r5, [r7]
 1210              	.LVL104:
 278:FreeRTOS-Kernel/event_groups.c ****                     {
 1211              		.loc 1 278 21 is_stmt 1 view .LVU390
 278:FreeRTOS-Kernel/event_groups.c ****                     {
 1212              		.loc 1 278 23 is_stmt 0 view .LVU391
 1213 00c4 34EA0503 		bics	r3, r4, r5
 1214 00c8 02D0     		beq	.L79
 1215              	.LVL105:
 1216              	.L73:
 284:FreeRTOS-Kernel/event_groups.c ****                     }
 1217              		.loc 1 284 49 is_stmt 1 view .LVU392
 287:FreeRTOS-Kernel/event_groups.c **** 
 1218              		.loc 1 287 17 view .LVU393
 1219 00ca FFF7FEFF 		bl	vPortExitCritical
 1220              	.LVL106:
ARM GAS  /tmp/ccMPlAtg.s 			page 47


 289:FreeRTOS-Kernel/event_groups.c ****             }
 1221              		.loc 1 289 17 view .LVU394
 289:FreeRTOS-Kernel/event_groups.c ****             }
 1222              		.loc 1 289 17 is_stmt 0 view .LVU395
 1223 00ce E3E7     		b	.L72
 1224              	.LVL107:
 1225              	.L79:
 280:FreeRTOS-Kernel/event_groups.c ****                     }
 1226              		.loc 1 280 25 is_stmt 1 view .LVU396
 280:FreeRTOS-Kernel/event_groups.c ****                     }
 1227              		.loc 1 280 50 is_stmt 0 view .LVU397
 1228 00d0 25EA0404 		bic	r4, r5, r4
 1229              	.LVL108:
 280:FreeRTOS-Kernel/event_groups.c ****                     }
 1230              		.loc 1 280 50 view .LVU398
 1231 00d4 3C60     		str	r4, [r7]
 1232 00d6 F8E7     		b	.L73
 1233              		.cfi_endproc
 1234              	.LFE6:
 1236              		.section	.text.vEventGroupDelete,"ax",%progbits
 1237              		.align	1
 1238              		.global	vEventGroupDelete
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1243              	vEventGroupDelete:
 1244              	.LVL109:
 1245              	.LFB11:
 648:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 1246              		.loc 1 648 5 is_stmt 1 view -0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 0
 1249              		@ frame_needed = 0, uses_anonymous_args = 0
 649:FreeRTOS-Kernel/event_groups.c ****         const List_t * pxTasksWaitingForBits;
 1250              		.loc 1 649 9 view .LVU400
 650:FreeRTOS-Kernel/event_groups.c **** 
 1251              		.loc 1 650 9 view .LVU401
 652:FreeRTOS-Kernel/event_groups.c **** 
 1252              		.loc 1 652 52 view .LVU402
 654:FreeRTOS-Kernel/event_groups.c **** 
 1253              		.loc 1 654 9 view .LVU403
 1254 0000 78B1     		cbz	r0, .L89
 648:FreeRTOS-Kernel/event_groups.c ****         EventGroup_t * pxEventBits = xEventGroup;
 1255              		.loc 1 648 5 is_stmt 0 discriminator 2 view .LVU404
 1256 0002 10B5     		push	{r4, lr}
 1257              	.LCFI13:
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 4, -8
 1260              		.cfi_offset 14, -4
 1261 0004 0446     		mov	r4, r0
 654:FreeRTOS-Kernel/event_groups.c **** 
 1262              		.loc 1 654 36 is_stmt 1 discriminator 2 view .LVU405
 656:FreeRTOS-Kernel/event_groups.c **** 
 1263              		.loc 1 656 9 discriminator 2 view .LVU406
 1264              	.LVL110:
 658:FreeRTOS-Kernel/event_groups.c ****         {
 1265              		.loc 1 658 9 discriminator 2 view .LVU407
ARM GAS  /tmp/ccMPlAtg.s 			page 48


 1266 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1267              	.LVL111:
 660:FreeRTOS-Kernel/event_groups.c **** 
 1268              		.loc 1 660 51 discriminator 2 view .LVU408
 662:FreeRTOS-Kernel/event_groups.c ****             {
 1269              		.loc 1 662 13 discriminator 2 view .LVU409
 1270              	.L83:
 662:FreeRTOS-Kernel/event_groups.c ****             {
 1271              		.loc 1 662 69 view .LVU410
 662:FreeRTOS-Kernel/event_groups.c ****             {
 1272              		.loc 1 662 20 is_stmt 0 view .LVU411
 1273 000a 6368     		ldr	r3, [r4, #4]
 662:FreeRTOS-Kernel/event_groups.c ****             {
 1274              		.loc 1 662 69 view .LVU412
 1275 000c DBB1     		cbz	r3, .L90
 666:FreeRTOS-Kernel/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 1276              		.loc 1 666 17 is_stmt 1 view .LVU413
 1277 000e 2069     		ldr	r0, [r4, #16]
 1278 0010 04F10C03 		add	r3, r4, #12
 1279 0014 9842     		cmp	r0, r3
 1280 0016 0DD0     		beq	.L91
 666:FreeRTOS-Kernel/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 1281              		.loc 1 666 134 discriminator 2 view .LVU414
 667:FreeRTOS-Kernel/event_groups.c ****             }
 1282              		.loc 1 667 17 discriminator 2 view .LVU415
 1283 0018 4FF00071 		mov	r1, #33554432
 1284 001c FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1285              	.LVL112:
 1286 0020 F3E7     		b	.L83
 1287              	.LVL113:
 1288              	.L89:
 1289              	.LCFI14:
 1290              		.cfi_def_cfa_offset 0
 1291              		.cfi_restore 4
 1292              		.cfi_restore 14
 654:FreeRTOS-Kernel/event_groups.c **** 
 1293              		.loc 1 654 9 view .LVU416
 1294              	.LBB77:
 1295              	.LBI77:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1296              		.loc 2 213 30 view .LVU417
 1297              	.LBB78:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1298              		.loc 2 215 5 view .LVU418
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1299              		.loc 2 217 5 view .LVU419
 1300              		.syntax unified
 1301              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1302 0022 4FF05003 		   mov r3, #80                                              
 1303 0026 83F31188 	   msr basepri, r3                                         
 1304 002a BFF36F8F 	   isb                                                     
 1305 002e BFF34F8F 	   dsb                                                     
 1306              	
 1307              	@ 0 "" 2
 1308              	.LVL114:
 1309              		.thumb
 1310              		.syntax unified
ARM GAS  /tmp/ccMPlAtg.s 			page 49


 1311              	.L82:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1312              		.loc 2 217 5 is_stmt 0 view .LVU420
 1313              	.LBE78:
 1314              	.LBE77:
 654:FreeRTOS-Kernel/event_groups.c **** 
 1315              		.loc 1 654 9 is_stmt 1 discriminator 1 view .LVU421
 654:FreeRTOS-Kernel/event_groups.c **** 
 1316              		.loc 1 654 9 discriminator 1 view .LVU422
 1317 0032 FEE7     		b	.L82
 1318              	.LVL115:
 1319              	.L91:
 1320              	.LCFI15:
 1321              		.cfi_def_cfa_offset 8
 1322              		.cfi_offset 4, -8
 1323              		.cfi_offset 14, -4
 666:FreeRTOS-Kernel/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 1324              		.loc 1 666 17 view .LVU423
 1325              	.LBB79:
 1326              	.LBI79:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1327              		.loc 2 213 30 view .LVU424
 1328              	.LBB80:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1329              		.loc 2 215 5 view .LVU425
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1330              		.loc 2 217 5 view .LVU426
 1331              		.syntax unified
 1332              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1333 0034 4FF05003 		   mov r3, #80                                              
 1334 0038 83F31188 	   msr basepri, r3                                         
 1335 003c BFF36F8F 	   isb                                                     
 1336 0040 BFF34F8F 	   dsb                                                     
 1337              	
 1338              	@ 0 "" 2
 1339              	.LVL116:
 1340              		.thumb
 1341              		.syntax unified
 1342              	.L85:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1343              		.loc 2 217 5 is_stmt 0 view .LVU427
 1344              	.LBE80:
 1345              	.LBE79:
 666:FreeRTOS-Kernel/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 1346              		.loc 1 666 17 is_stmt 1 discriminator 2 view .LVU428
 666:FreeRTOS-Kernel/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNB
 1347              		.loc 1 666 17 discriminator 2 view .LVU429
 1348 0044 FEE7     		b	.L85
 1349              	.L90:
 670:FreeRTOS-Kernel/event_groups.c **** 
 1350              		.loc 1 670 9 view .LVU430
 670:FreeRTOS-Kernel/event_groups.c **** 
 1351              		.loc 1 670 18 is_stmt 0 view .LVU431
 1352 0046 FFF7FEFF 		bl	xTaskResumeAll
 1353              	.LVL117:
 693:FreeRTOS-Kernel/event_groups.c ****     }
 1354              		.loc 1 693 40 is_stmt 1 view .LVU432
ARM GAS  /tmp/ccMPlAtg.s 			page 50


 694:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 1355              		.loc 1 694 5 is_stmt 0 view .LVU433
 1356 004a 10BD     		pop	{r4, pc}
 694:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 1357              		.loc 1 694 5 view .LVU434
 1358              		.cfi_endproc
 1359              	.LFE11:
 1361              		.section	.text.xEventGroupGetStaticBuffer,"ax",%progbits
 1362              		.align	1
 1363              		.global	xEventGroupGetStaticBuffer
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1368              	xEventGroupGetStaticBuffer:
 1369              	.LVL118:
 1370              	.LFB12:
 700:FreeRTOS-Kernel/event_groups.c ****             BaseType_t xReturn;
 1371              		.loc 1 700 9 is_stmt 1 view -0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 701:FreeRTOS-Kernel/event_groups.c ****             EventGroup_t * pxEventBits = xEventGroup;
 1376              		.loc 1 701 13 view .LVU436
 702:FreeRTOS-Kernel/event_groups.c **** 
 1377              		.loc 1 702 13 view .LVU437
 704:FreeRTOS-Kernel/event_groups.c **** 
 1378              		.loc 1 704 86 view .LVU438
 706:FreeRTOS-Kernel/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 1379              		.loc 1 706 13 view .LVU439
 1380 0000 18B1     		cbz	r0, .L97
 706:FreeRTOS-Kernel/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 1381              		.loc 1 706 40 discriminator 2 view .LVU440
 707:FreeRTOS-Kernel/event_groups.c **** 
 1382              		.loc 1 707 13 discriminator 2 view .LVU441
 1383 0002 59B1     		cbz	r1, .L98
 707:FreeRTOS-Kernel/event_groups.c **** 
 1384              		.loc 1 707 48 discriminator 2 view .LVU442
 731:FreeRTOS-Kernel/event_groups.c ****                 xReturn = pdTRUE;
 1385              		.loc 1 731 17 discriminator 2 view .LVU443
 731:FreeRTOS-Kernel/event_groups.c ****                 xReturn = pdTRUE;
 1386              		.loc 1 731 38 is_stmt 0 discriminator 2 view .LVU444
 1387 0004 0860     		str	r0, [r1]
 732:FreeRTOS-Kernel/event_groups.c ****             }
 1388              		.loc 1 732 17 is_stmt 1 discriminator 2 view .LVU445
 1389              	.LVL119:
 736:FreeRTOS-Kernel/event_groups.c **** 
 1390              		.loc 1 736 62 discriminator 2 view .LVU446
 738:FreeRTOS-Kernel/event_groups.c ****         }
 1391              		.loc 1 738 13 discriminator 2 view .LVU447
 739:FreeRTOS-Kernel/event_groups.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 1392              		.loc 1 739 9 is_stmt 0 discriminator 2 view .LVU448
 1393 0006 0120     		movs	r0, #1
 1394              	.LVL120:
 739:FreeRTOS-Kernel/event_groups.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 1395              		.loc 1 739 9 discriminator 2 view .LVU449
 1396 0008 7047     		bx	lr
ARM GAS  /tmp/ccMPlAtg.s 			page 51


 1397              	.LVL121:
 1398              	.L97:
 706:FreeRTOS-Kernel/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 1399              		.loc 1 706 13 is_stmt 1 view .LVU450
 1400              	.LBB81:
 1401              	.LBI81:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1402              		.loc 2 213 30 view .LVU451
 1403              	.LBB82:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1404              		.loc 2 215 5 view .LVU452
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1405              		.loc 2 217 5 view .LVU453
 1406              		.syntax unified
 1407              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1408 000a 4FF05003 		   mov r3, #80                                              
 1409 000e 83F31188 	   msr basepri, r3                                         
 1410 0012 BFF36F8F 	   isb                                                     
 1411 0016 BFF34F8F 	   dsb                                                     
 1412              	
 1413              	@ 0 "" 2
 1414              	.LVL122:
 1415              		.thumb
 1416              		.syntax unified
 1417              	.L94:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1418              		.loc 2 217 5 is_stmt 0 view .LVU454
 1419              	.LBE82:
 1420              	.LBE81:
 706:FreeRTOS-Kernel/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 1421              		.loc 1 706 13 is_stmt 1 discriminator 1 view .LVU455
 706:FreeRTOS-Kernel/event_groups.c ****             configASSERT( ppxEventGroupBuffer );
 1422              		.loc 1 706 13 discriminator 1 view .LVU456
 1423 001a FEE7     		b	.L94
 1424              	.L98:
 707:FreeRTOS-Kernel/event_groups.c **** 
 1425              		.loc 1 707 13 view .LVU457
 1426              	.LBB83:
 1427              	.LBI83:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1428              		.loc 2 213 30 view .LVU458
 1429              	.LBB84:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1430              		.loc 2 215 5 view .LVU459
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1431              		.loc 2 217 5 view .LVU460
 1432              		.syntax unified
 1433              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1434 001c 4FF05003 		   mov r3, #80                                              
 1435 0020 83F31188 	   msr basepri, r3                                         
 1436 0024 BFF36F8F 	   isb                                                     
 1437 0028 BFF34F8F 	   dsb                                                     
 1438              	
 1439              	@ 0 "" 2
 1440              	.LVL123:
 1441              		.thumb
 1442              		.syntax unified
ARM GAS  /tmp/ccMPlAtg.s 			page 52


 1443              	.L96:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1444              		.loc 2 217 5 is_stmt 0 view .LVU461
 1445              	.LBE84:
 1446              	.LBE83:
 707:FreeRTOS-Kernel/event_groups.c **** 
 1447              		.loc 1 707 13 is_stmt 1 discriminator 2 view .LVU462
 707:FreeRTOS-Kernel/event_groups.c **** 
 1448              		.loc 1 707 13 discriminator 2 view .LVU463
 1449 002c FEE7     		b	.L96
 1450              		.cfi_endproc
 1451              	.LFE12:
 1453              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1454              		.align	1
 1455              		.global	vEventGroupSetBitsCallback
 1456              		.syntax unified
 1457              		.thumb
 1458              		.thumb_func
 1460              	vEventGroupSetBitsCallback:
 1461              	.LVL124:
 1462              	.LFB13:
 747:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );
 1463              		.loc 1 747 5 view -0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 747:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );
 1467              		.loc 1 747 5 is_stmt 0 view .LVU465
 1468 0000 08B5     		push	{r3, lr}
 1469              	.LCFI16:
 1470              		.cfi_def_cfa_offset 8
 1471              		.cfi_offset 3, -8
 1472              		.cfi_offset 14, -4
 748:FreeRTOS-Kernel/event_groups.c **** 
 1473              		.loc 1 748 75 is_stmt 1 view .LVU466
 753:FreeRTOS-Kernel/event_groups.c **** 
 1474              		.loc 1 753 9 view .LVU467
 753:FreeRTOS-Kernel/event_groups.c **** 
 1475              		.loc 1 753 18 is_stmt 0 view .LVU468
 1476 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1477              	.LVL125:
 755:FreeRTOS-Kernel/event_groups.c ****     }
 1478              		.loc 1 755 49 is_stmt 1 view .LVU469
 756:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 1479              		.loc 1 756 5 is_stmt 0 view .LVU470
 1480 0006 08BD     		pop	{r3, pc}
 1481              		.cfi_endproc
 1482              	.LFE13:
 1484              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1485              		.align	1
 1486              		.global	vEventGroupClearBitsCallback
 1487              		.syntax unified
 1488              		.thumb
 1489              		.thumb_func
 1491              	vEventGroupClearBitsCallback:
 1492              	.LVL126:
 1493              	.LFB14:
ARM GAS  /tmp/ccMPlAtg.s 			page 53


 763:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );
 1494              		.loc 1 763 5 is_stmt 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 763:FreeRTOS-Kernel/event_groups.c ****         traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );
 1498              		.loc 1 763 5 is_stmt 0 view .LVU472
 1499 0000 08B5     		push	{r3, lr}
 1500              	.LCFI17:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 3, -8
 1503              		.cfi_offset 14, -4
 764:FreeRTOS-Kernel/event_groups.c **** 
 1504              		.loc 1 764 79 is_stmt 1 view .LVU473
 769:FreeRTOS-Kernel/event_groups.c **** 
 1505              		.loc 1 769 9 view .LVU474
 769:FreeRTOS-Kernel/event_groups.c **** 
 1506              		.loc 1 769 18 is_stmt 0 view .LVU475
 1507 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1508              	.LVL127:
 771:FreeRTOS-Kernel/event_groups.c ****     }
 1509              		.loc 1 771 51 is_stmt 1 view .LVU476
 772:FreeRTOS-Kernel/event_groups.c **** /*-----------------------------------------------------------*/
 1510              		.loc 1 772 5 is_stmt 0 view .LVU477
 1511 0006 08BD     		pop	{r3, pc}
 1512              		.cfi_endproc
 1513              	.LFE14:
 1515              		.text
 1516              	.Letext0:
 1517              		.file 3 "/usr/share/arm-gnu-toolchain/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 1518              		.file 4 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 1519              		.file 5 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 1520              		.file 6 "FreeRTOS-Kernel/include/FreeRTOS.h"
 1521              		.file 7 "FreeRTOS-Kernel/include/list.h"
 1522              		.file 8 "FreeRTOS-Kernel/include/event_groups.h"
 1523              		.file 9 "FreeRTOS-Kernel/include/task.h"
ARM GAS  /tmp/ccMPlAtg.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccMPlAtg.s:21     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccMPlAtg.s:26     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccMPlAtg.s:80     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccMPlAtg.s:86     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccMPlAtg.s:210    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccMPlAtg.s:216    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccMPlAtg.s:569    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccMPlAtg.s:575    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccMPlAtg.s:693    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccMPlAtg.s:699    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccMPlAtg.s:762    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccMPlAtg.s:768    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccMPlAtg.s:966    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccMPlAtg.s:972    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccMPlAtg.s:1237   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccMPlAtg.s:1243   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccMPlAtg.s:1362   .text.xEventGroupGetStaticBuffer:0000000000000000 $t
     /tmp/ccMPlAtg.s:1368   .text.xEventGroupGetStaticBuffer:0000000000000000 xEventGroupGetStaticBuffer
     /tmp/ccMPlAtg.s:1454   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccMPlAtg.s:1460   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccMPlAtg.s:1485   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccMPlAtg.s:1491   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vTaskPlaceOnUnorderedEventList
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
