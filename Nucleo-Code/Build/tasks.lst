ARM GAS  /tmp/ccJw1tyY.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "FreeRTOS-Kernel/tasks.c"
  20              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskIsTaskSuspended:
  27              	.LVL0:
  28              	.LFB18:
   1:FreeRTOS-Kernel/tasks.c **** /*
   2:FreeRTOS-Kernel/tasks.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/tasks.c ****  *
   5:FreeRTOS-Kernel/tasks.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/tasks.c ****  *
   7:FreeRTOS-Kernel/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/tasks.c ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/tasks.c ****  *
  14:FreeRTOS-Kernel/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/tasks.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/tasks.c ****  *
  17:FreeRTOS-Kernel/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/tasks.c ****  *
  24:FreeRTOS-Kernel/tasks.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/tasks.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/tasks.c ****  *
  27:FreeRTOS-Kernel/tasks.c ****  */
  28:FreeRTOS-Kernel/tasks.c **** 
  29:FreeRTOS-Kernel/tasks.c **** /* Standard includes. */
  30:FreeRTOS-Kernel/tasks.c **** #include <stdlib.h>
ARM GAS  /tmp/ccJw1tyY.s 			page 2


  31:FreeRTOS-Kernel/tasks.c **** #include <string.h>
  32:FreeRTOS-Kernel/tasks.c **** 
  33:FreeRTOS-Kernel/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:FreeRTOS-Kernel/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:FreeRTOS-Kernel/tasks.c ****  * task.h is included from an application file. */
  36:FreeRTOS-Kernel/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:FreeRTOS-Kernel/tasks.c **** 
  38:FreeRTOS-Kernel/tasks.c **** /* FreeRTOS includes. */
  39:FreeRTOS-Kernel/tasks.c **** #include "FreeRTOS.h"
  40:FreeRTOS-Kernel/tasks.c **** #include "task.h"
  41:FreeRTOS-Kernel/tasks.c **** #include "timers.h"
  42:FreeRTOS-Kernel/tasks.c **** #include "stack_macros.h"
  43:FreeRTOS-Kernel/tasks.c **** 
  44:FreeRTOS-Kernel/tasks.c **** /* The default definitions are only available for non-MPU ports. The
  45:FreeRTOS-Kernel/tasks.c ****  * reason is that the stack alignment requirements vary for different
  46:FreeRTOS-Kernel/tasks.c ****  * architectures.*/
  47:FreeRTOS-Kernel/tasks.c **** #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY == 1 ) && (
  48:FreeRTOS-Kernel/tasks.c ****     #error configKERNEL_PROVIDED_STATIC_MEMORY cannot be set to 1 when using an MPU port. The vAppl
  49:FreeRTOS-Kernel/tasks.c **** #endif
  50:FreeRTOS-Kernel/tasks.c **** 
  51:FreeRTOS-Kernel/tasks.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  52:FreeRTOS-Kernel/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  53:FreeRTOS-Kernel/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  54:FreeRTOS-Kernel/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  55:FreeRTOS-Kernel/tasks.c **** 
  56:FreeRTOS-Kernel/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  57:FreeRTOS-Kernel/tasks.c ****  * functions but without including stdio.h here. */
  58:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  59:FreeRTOS-Kernel/tasks.c **** 
  60:FreeRTOS-Kernel/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  61:FreeRTOS-Kernel/tasks.c ****  * to generate human readable text from the raw data generated by the
  62:FreeRTOS-Kernel/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  63:FreeRTOS-Kernel/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  64:FreeRTOS-Kernel/tasks.c ****     #include <stdio.h>
  65:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  66:FreeRTOS-Kernel/tasks.c **** 
  67:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  68:FreeRTOS-Kernel/tasks.c **** 
  69:FreeRTOS-Kernel/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  70:FreeRTOS-Kernel/tasks.c ****  * performed just because a higher priority task has been woken. */
  71:FreeRTOS-Kernel/tasks.c ****     #define taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB )
  72:FreeRTOS-Kernel/tasks.c ****     #define taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB )
  73:FreeRTOS-Kernel/tasks.c **** #else
  74:FreeRTOS-Kernel/tasks.c **** 
  75:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
  76:FreeRTOS-Kernel/tasks.c **** 
  77:FreeRTOS-Kernel/tasks.c **** /* This macro requests the running task pxTCB to yield. In single core
  78:FreeRTOS-Kernel/tasks.c ****  * scheduler, a running task always runs on core 0 and portYIELD_WITHIN_API()
  79:FreeRTOS-Kernel/tasks.c ****  * can be used to request the task running on core 0 to yield. Therefore, pxTCB
  80:FreeRTOS-Kernel/tasks.c ****  * is not used in this macro. */
  81:FreeRTOS-Kernel/tasks.c ****         #define taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB ) \
  82:FreeRTOS-Kernel/tasks.c ****     do {                                                         \
  83:FreeRTOS-Kernel/tasks.c ****         ( void ) ( pxTCB );                                      \
  84:FreeRTOS-Kernel/tasks.c ****         portYIELD_WITHIN_API();                                  \
  85:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
  86:FreeRTOS-Kernel/tasks.c **** 
  87:FreeRTOS-Kernel/tasks.c ****         #define taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB ) \
ARM GAS  /tmp/ccJw1tyY.s 			page 3


  88:FreeRTOS-Kernel/tasks.c ****     do {                                                        \
  89:FreeRTOS-Kernel/tasks.c ****         if( pxCurrentTCB->uxPriority < ( pxTCB )->uxPriority )  \
  90:FreeRTOS-Kernel/tasks.c ****         {                                                       \
  91:FreeRTOS-Kernel/tasks.c ****             portYIELD_WITHIN_API();                             \
  92:FreeRTOS-Kernel/tasks.c ****         }                                                       \
  93:FreeRTOS-Kernel/tasks.c ****         else                                                    \
  94:FreeRTOS-Kernel/tasks.c ****         {                                                       \
  95:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();                           \
  96:FreeRTOS-Kernel/tasks.c ****         }                                                       \
  97:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
  98:FreeRTOS-Kernel/tasks.c **** 
  99:FreeRTOS-Kernel/tasks.c ****     #else /* if ( configNUMBER_OF_CORES == 1 ) */
 100:FreeRTOS-Kernel/tasks.c **** 
 101:FreeRTOS-Kernel/tasks.c **** /* Yield the core on which this task is running. */
 102:FreeRTOS-Kernel/tasks.c ****         #define taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB )    prvYieldCore( ( pxTCB )->xTaskR
 103:FreeRTOS-Kernel/tasks.c **** 
 104:FreeRTOS-Kernel/tasks.c **** /* Yield for the task if a running task has priority lower than this task. */
 105:FreeRTOS-Kernel/tasks.c ****         #define taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB )     prvYieldForTask( pxTCB )
 106:FreeRTOS-Kernel/tasks.c **** 
 107:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
 108:FreeRTOS-Kernel/tasks.c **** 
 109:FreeRTOS-Kernel/tasks.c **** #endif /* if ( configUSE_PREEMPTION == 0 ) */
 110:FreeRTOS-Kernel/tasks.c **** 
 111:FreeRTOS-Kernel/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 112:FreeRTOS-Kernel/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
 113:FreeRTOS-Kernel/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
 114:FreeRTOS-Kernel/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
 115:FreeRTOS-Kernel/tasks.c **** 
 116:FreeRTOS-Kernel/tasks.c **** /*
 117:FreeRTOS-Kernel/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 118:FreeRTOS-Kernel/tasks.c ****  * is used purely for checking the high water mark for tasks.
 119:FreeRTOS-Kernel/tasks.c ****  */
 120:FreeRTOS-Kernel/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
 121:FreeRTOS-Kernel/tasks.c **** 
 122:FreeRTOS-Kernel/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
 123:FreeRTOS-Kernel/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
 124:FreeRTOS-Kernel/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
 125:FreeRTOS-Kernel/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
 126:FreeRTOS-Kernel/tasks.c **** 
 127:FreeRTOS-Kernel/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 128:FreeRTOS-Kernel/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
 129:FreeRTOS-Kernel/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
 130:FreeRTOS-Kernel/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 131:FreeRTOS-Kernel/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
 132:FreeRTOS-Kernel/tasks.c **** #else
 133:FreeRTOS-Kernel/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
 134:FreeRTOS-Kernel/tasks.c **** #endif
 135:FreeRTOS-Kernel/tasks.c **** 
 136:FreeRTOS-Kernel/tasks.c **** /*
 137:FreeRTOS-Kernel/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 138:FreeRTOS-Kernel/tasks.c ****  */
 139:FreeRTOS-Kernel/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
 140:FreeRTOS-Kernel/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 141:FreeRTOS-Kernel/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 142:FreeRTOS-Kernel/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 143:FreeRTOS-Kernel/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 144:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 4


 145:FreeRTOS-Kernel/tasks.c **** /*
 146:FreeRTOS-Kernel/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 147:FreeRTOS-Kernel/tasks.c ****  * global, rather than file scope.
 148:FreeRTOS-Kernel/tasks.c ****  */
 149:FreeRTOS-Kernel/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 150:FreeRTOS-Kernel/tasks.c ****     #define static
 151:FreeRTOS-Kernel/tasks.c **** #endif
 152:FreeRTOS-Kernel/tasks.c **** 
 153:FreeRTOS-Kernel/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 154:FreeRTOS-Kernel/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 155:FreeRTOS-Kernel/tasks.c **** #ifndef configIDLE_TASK_NAME
 156:FreeRTOS-Kernel/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 157:FreeRTOS-Kernel/tasks.c **** #endif
 158:FreeRTOS-Kernel/tasks.c **** 
 159:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 160:FreeRTOS-Kernel/tasks.c **** 
 161:FreeRTOS-Kernel/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 162:FreeRTOS-Kernel/tasks.c ****  * performed in a generic way that is not optimised to any particular
 163:FreeRTOS-Kernel/tasks.c ****  * microcontroller architecture. */
 164:FreeRTOS-Kernel/tasks.c **** 
 165:FreeRTOS-Kernel/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 166:FreeRTOS-Kernel/tasks.c ****  * state task. */
 167:FreeRTOS-Kernel/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 168:FreeRTOS-Kernel/tasks.c ****     do {                                            \
 169:FreeRTOS-Kernel/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 170:FreeRTOS-Kernel/tasks.c ****         {                                           \
 171:FreeRTOS-Kernel/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 172:FreeRTOS-Kernel/tasks.c ****         }                                           \
 173:FreeRTOS-Kernel/tasks.c ****     } while( 0 ) /* taskRECORD_READY_PRIORITY */
 174:FreeRTOS-Kernel/tasks.c **** 
 175:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 176:FreeRTOS-Kernel/tasks.c **** 
 177:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
 178:FreeRTOS-Kernel/tasks.c ****         #define taskSELECT_HIGHEST_PRIORITY_TASK()                                       \
 179:FreeRTOS-Kernel/tasks.c ****     do {                                                                                 \
 180:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                                  \
 181:FreeRTOS-Kernel/tasks.c ****                                                                                          \
 182:FreeRTOS-Kernel/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */                 \
 183:FreeRTOS-Kernel/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) != pdFALSE ) \
 184:FreeRTOS-Kernel/tasks.c ****         {                                                                                \
 185:FreeRTOS-Kernel/tasks.c ****             configASSERT( uxTopPriority );                                               \
 186:FreeRTOS-Kernel/tasks.c ****             --uxTopPriority;                                                             \
 187:FreeRTOS-Kernel/tasks.c ****         }                                                                                \
 188:FreeRTOS-Kernel/tasks.c ****                                                                                          \
 189:FreeRTOS-Kernel/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 190:FreeRTOS-Kernel/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 191:FreeRTOS-Kernel/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 192:FreeRTOS-Kernel/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 193:FreeRTOS-Kernel/tasks.c ****     } while( 0 ) /* taskSELECT_HIGHEST_PRIORITY_TASK */
 194:FreeRTOS-Kernel/tasks.c ****     #else /* if ( configNUMBER_OF_CORES == 1 ) */
 195:FreeRTOS-Kernel/tasks.c **** 
 196:FreeRTOS-Kernel/tasks.c ****         #define taskSELECT_HIGHEST_PRIORITY_TASK( xCoreID )    prvSelectHighestPriorityTask( xCoreI
 197:FreeRTOS-Kernel/tasks.c **** 
 198:FreeRTOS-Kernel/tasks.c ****     #endif /* if ( configNUMBER_OF_CORES == 1 ) */
 199:FreeRTOS-Kernel/tasks.c **** 
 200:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 201:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 5


 202:FreeRTOS-Kernel/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 203:FreeRTOS-Kernel/tasks.c ****  * they are only required when a port optimised method of task selection is
 204:FreeRTOS-Kernel/tasks.c ****  * being used. */
 205:FreeRTOS-Kernel/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 206:FreeRTOS-Kernel/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 207:FreeRTOS-Kernel/tasks.c **** 
 208:FreeRTOS-Kernel/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 209:FreeRTOS-Kernel/tasks.c **** 
 210:FreeRTOS-Kernel/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 211:FreeRTOS-Kernel/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 212:FreeRTOS-Kernel/tasks.c ****  * architecture being used. */
 213:FreeRTOS-Kernel/tasks.c **** 
 214:FreeRTOS-Kernel/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 215:FreeRTOS-Kernel/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 216:FreeRTOS-Kernel/tasks.c **** 
 217:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 218:FreeRTOS-Kernel/tasks.c **** 
 219:FreeRTOS-Kernel/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 220:FreeRTOS-Kernel/tasks.c ****     do {                                                                                        \
 221:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 222:FreeRTOS-Kernel/tasks.c ****                                                                                                 \
 223:FreeRTOS-Kernel/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 224:FreeRTOS-Kernel/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 225:FreeRTOS-Kernel/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 226:FreeRTOS-Kernel/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 227:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 228:FreeRTOS-Kernel/tasks.c **** 
 229:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 230:FreeRTOS-Kernel/tasks.c **** 
 231:FreeRTOS-Kernel/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 232:FreeRTOS-Kernel/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 233:FreeRTOS-Kernel/tasks.c ****  * or suspended list then it won't be in a ready list. */
 234:FreeRTOS-Kernel/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 235:FreeRTOS-Kernel/tasks.c ****     do {                                                                                           
 236:FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 237:FreeRTOS-Kernel/tasks.c ****         {                                                                                          
 238:FreeRTOS-Kernel/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 239:FreeRTOS-Kernel/tasks.c ****         }                                                                                          
 240:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 241:FreeRTOS-Kernel/tasks.c **** 
 242:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 243:FreeRTOS-Kernel/tasks.c **** 
 244:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 245:FreeRTOS-Kernel/tasks.c **** 
 246:FreeRTOS-Kernel/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 247:FreeRTOS-Kernel/tasks.c ****  * count overflows. */
 248:FreeRTOS-Kernel/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 249:FreeRTOS-Kernel/tasks.c ****     do {                                                                          \
 250:FreeRTOS-Kernel/tasks.c ****         List_t * pxTemp;                                                          \
 251:FreeRTOS-Kernel/tasks.c ****                                                                                   \
 252:FreeRTOS-Kernel/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 253:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 254:FreeRTOS-Kernel/tasks.c ****                                                                                   \
 255:FreeRTOS-Kernel/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 256:FreeRTOS-Kernel/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 257:FreeRTOS-Kernel/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 258:FreeRTOS-Kernel/tasks.c ****         xNumOfOverflows = ( BaseType_t ) ( xNumOfOverflows + 1 );                 \
ARM GAS  /tmp/ccJw1tyY.s 			page 6


 259:FreeRTOS-Kernel/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 260:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 261:FreeRTOS-Kernel/tasks.c **** 
 262:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 263:FreeRTOS-Kernel/tasks.c **** 
 264:FreeRTOS-Kernel/tasks.c **** /*
 265:FreeRTOS-Kernel/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 266:FreeRTOS-Kernel/tasks.c ****  * the task.  It is inserted at the end of the list.
 267:FreeRTOS-Kernel/tasks.c ****  */
 268:FreeRTOS-Kernel/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 269:FreeRTOS-Kernel/tasks.c ****     do {                                                                                           
 270:FreeRTOS-Kernel/tasks.c ****         traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                   
 271:FreeRTOS-Kernel/tasks.c ****         taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                        
 272:FreeRTOS-Kernel/tasks.c ****         listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListIt
 273:FreeRTOS-Kernel/tasks.c ****         tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB );                                              
 274:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 275:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 276:FreeRTOS-Kernel/tasks.c **** 
 277:FreeRTOS-Kernel/tasks.c **** /*
 278:FreeRTOS-Kernel/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 279:FreeRTOS-Kernel/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 280:FreeRTOS-Kernel/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 281:FreeRTOS-Kernel/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 282:FreeRTOS-Kernel/tasks.c ****  */
 283:FreeRTOS-Kernel/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 284:FreeRTOS-Kernel/tasks.c **** 
 285:FreeRTOS-Kernel/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 286:FreeRTOS-Kernel/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 287:FreeRTOS-Kernel/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 288:FreeRTOS-Kernel/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 289:FreeRTOS-Kernel/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 290:FreeRTOS-Kernel/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 291:FreeRTOS-Kernel/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 292:FreeRTOS-Kernel/tasks.c ****  * to its original value when it is released. */
 293:FreeRTOS-Kernel/tasks.c **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
 294:FreeRTOS-Kernel/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    ( ( uint16_t ) 0x8000U )
 295:FreeRTOS-Kernel/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
 296:FreeRTOS-Kernel/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    ( ( uint32_t ) 0x80000000U )
 297:FreeRTOS-Kernel/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
 298:FreeRTOS-Kernel/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    ( ( uint64_t ) 0x8000000000000000U )
 299:FreeRTOS-Kernel/tasks.c **** #endif
 300:FreeRTOS-Kernel/tasks.c **** 
 301:FreeRTOS-Kernel/tasks.c **** /* Indicates that the task is not actively running on any core. */
 302:FreeRTOS-Kernel/tasks.c **** #define taskTASK_NOT_RUNNING           ( ( BaseType_t ) ( -1 ) )
 303:FreeRTOS-Kernel/tasks.c **** 
 304:FreeRTOS-Kernel/tasks.c **** /* Indicates that the task is actively running but scheduled to yield. */
 305:FreeRTOS-Kernel/tasks.c **** #define taskTASK_SCHEDULED_TO_YIELD    ( ( BaseType_t ) ( -2 ) )
 306:FreeRTOS-Kernel/tasks.c **** 
 307:FreeRTOS-Kernel/tasks.c **** /* Returns pdTRUE if the task is actively running and not scheduled to yield. */
 308:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
 309:FreeRTOS-Kernel/tasks.c ****     #define taskTASK_IS_RUNNING( pxTCB )                          ( ( ( pxTCB ) == pxCurrentTCB ) ?
 310:FreeRTOS-Kernel/tasks.c ****     #define taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB )    ( ( ( pxTCB ) == pxCurrentTCB ) ?
 311:FreeRTOS-Kernel/tasks.c **** #else
 312:FreeRTOS-Kernel/tasks.c ****     #define taskTASK_IS_RUNNING( pxTCB )                          ( ( ( ( pxTCB )->xTaskRunState >=
 313:FreeRTOS-Kernel/tasks.c ****     #define taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB )    ( ( ( pxTCB )->xTaskRunState != t
 314:FreeRTOS-Kernel/tasks.c **** #endif
 315:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 7


 316:FreeRTOS-Kernel/tasks.c **** /* Indicates that the task is an Idle task. */
 317:FreeRTOS-Kernel/tasks.c **** #define taskATTRIBUTE_IS_IDLE    ( UBaseType_t ) ( 1U << 0U )
 318:FreeRTOS-Kernel/tasks.c **** 
 319:FreeRTOS-Kernel/tasks.c **** #if ( ( configNUMBER_OF_CORES > 1 ) && ( portCRITICAL_NESTING_IN_TCB == 1 ) )
 320:FreeRTOS-Kernel/tasks.c ****     #define portGET_CRITICAL_NESTING_COUNT()          ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 321:FreeRTOS-Kernel/tasks.c ****     #define portSET_CRITICAL_NESTING_COUNT( x )       ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 322:FreeRTOS-Kernel/tasks.c ****     #define portINCREMENT_CRITICAL_NESTING_COUNT()    ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 323:FreeRTOS-Kernel/tasks.c ****     #define portDECREMENT_CRITICAL_NESTING_COUNT()    ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxCriti
 324:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( portCRITICAL_NESTING_IN_TCB == 1 ) ) */
 325:FreeRTOS-Kernel/tasks.c **** 
 326:FreeRTOS-Kernel/tasks.c **** #define taskBITS_PER_BYTE    ( ( size_t ) 8 )
 327:FreeRTOS-Kernel/tasks.c **** 
 328:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 329:FreeRTOS-Kernel/tasks.c **** 
 330:FreeRTOS-Kernel/tasks.c **** /* Yields the given core. This must be called from a critical section and xCoreID
 331:FreeRTOS-Kernel/tasks.c ****  * must be valid. This macro is not required in single core since there is only
 332:FreeRTOS-Kernel/tasks.c ****  * one core to yield. */
 333:FreeRTOS-Kernel/tasks.c ****     #define prvYieldCore( xCoreID )                                                          \
 334:FreeRTOS-Kernel/tasks.c ****     do {                                                                                     \
 335:FreeRTOS-Kernel/tasks.c ****         if( ( xCoreID ) == ( BaseType_t ) portGET_CORE_ID() )                                \
 336:FreeRTOS-Kernel/tasks.c ****         {                                                                                    \
 337:FreeRTOS-Kernel/tasks.c ****             /* Pending a yield for this core since it is in the critical section. */         \
 338:FreeRTOS-Kernel/tasks.c ****             xYieldPendings[ ( xCoreID ) ] = pdTRUE;                                          \
 339:FreeRTOS-Kernel/tasks.c ****         }                                                                                    \
 340:FreeRTOS-Kernel/tasks.c ****         else                                                                                 \
 341:FreeRTOS-Kernel/tasks.c ****         {                                                                                    \
 342:FreeRTOS-Kernel/tasks.c ****             /* Request other core to yield if it is not requested before. */                 \
 343:FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCBs[ ( xCoreID ) ]->xTaskRunState != taskTASK_SCHEDULED_TO_YIELD ) \
 344:FreeRTOS-Kernel/tasks.c ****             {                                                                                \
 345:FreeRTOS-Kernel/tasks.c ****                 portYIELD_CORE( xCoreID );                                                   \
 346:FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCBs[ ( xCoreID ) ]->xTaskRunState = taskTASK_SCHEDULED_TO_YIELD;   \
 347:FreeRTOS-Kernel/tasks.c ****             }                                                                                \
 348:FreeRTOS-Kernel/tasks.c ****         }                                                                                    \
 349:FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 350:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 351:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 352:FreeRTOS-Kernel/tasks.c **** 
 353:FreeRTOS-Kernel/tasks.c **** /*
 354:FreeRTOS-Kernel/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 355:FreeRTOS-Kernel/tasks.c ****  * and stores task state information, including a pointer to the task's context
 356:FreeRTOS-Kernel/tasks.c ****  * (the task's run time environment, including register values)
 357:FreeRTOS-Kernel/tasks.c ****  */
 358:FreeRTOS-Kernel/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 359:FreeRTOS-Kernel/tasks.c **** {
 360:FreeRTOS-Kernel/tasks.c ****     volatile StackType_t * pxTopOfStack; /**< Points to the location of the last item placed on the
 361:FreeRTOS-Kernel/tasks.c **** 
 362:FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 363:FreeRTOS-Kernel/tasks.c ****         xMPU_SETTINGS xMPUSettings; /**< The MPU settings are defined as part of the port layer.  T
 364:FreeRTOS-Kernel/tasks.c ****     #endif
 365:FreeRTOS-Kernel/tasks.c **** 
 366:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 )
 367:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCoreAffinityMask; /**< Used to link the task to certain cores.  UBaseType_t m
 368:FreeRTOS-Kernel/tasks.c ****     #endif
 369:FreeRTOS-Kernel/tasks.c **** 
 370:FreeRTOS-Kernel/tasks.c ****     ListItem_t xStateListItem;                  /**< The list that the state list item of a task is
 371:FreeRTOS-Kernel/tasks.c ****     ListItem_t xEventListItem;                  /**< Used to reference a task from an event list. *
 372:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxPriority;                     /**< The priority of the task.  0 is the lowest pri
ARM GAS  /tmp/ccJw1tyY.s 			page 8


 373:FreeRTOS-Kernel/tasks.c ****     StackType_t * pxStack;                      /**< Points to the start of the stack. */
 374:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
 375:FreeRTOS-Kernel/tasks.c ****         volatile BaseType_t xTaskRunState;      /**< Used to identify the core the task is running 
 376:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTaskAttributes;           /**< Task's attributes - currently used to identify
 377:FreeRTOS-Kernel/tasks.c ****     #endif
 378:FreeRTOS-Kernel/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /**< Descriptive name given to the task when create
 379:FreeRTOS-Kernel/tasks.c **** 
 380:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
 381:FreeRTOS-Kernel/tasks.c ****         BaseType_t xPreemptionDisable; /**< Used to prevent the task from being preempted. */
 382:FreeRTOS-Kernel/tasks.c ****     #endif
 383:FreeRTOS-Kernel/tasks.c **** 
 384:FreeRTOS-Kernel/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 385:FreeRTOS-Kernel/tasks.c ****         StackType_t * pxEndOfStack; /**< Points to the highest valid address for the stack. */
 386:FreeRTOS-Kernel/tasks.c ****     #endif
 387:FreeRTOS-Kernel/tasks.c **** 
 388:FreeRTOS-Kernel/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 389:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCriticalNesting; /**< Holds the critical section nesting depth for ports that
 390:FreeRTOS-Kernel/tasks.c ****     #endif
 391:FreeRTOS-Kernel/tasks.c **** 
 392:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 393:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTCBNumber;  /**< Stores a number that increments each time a TCB is created. 
 394:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTaskNumber; /**< Stores a number specifically for use by third party trace co
 395:FreeRTOS-Kernel/tasks.c ****     #endif
 396:FreeRTOS-Kernel/tasks.c **** 
 397:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 398:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxBasePriority; /**< The priority last assigned to the task - used by the prior
 399:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxMutexesHeld;
 400:FreeRTOS-Kernel/tasks.c ****     #endif
 401:FreeRTOS-Kernel/tasks.c **** 
 402:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 403:FreeRTOS-Kernel/tasks.c ****         TaskHookFunction_t pxTaskTag;
 404:FreeRTOS-Kernel/tasks.c ****     #endif
 405:FreeRTOS-Kernel/tasks.c **** 
 406:FreeRTOS-Kernel/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 407:FreeRTOS-Kernel/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 408:FreeRTOS-Kernel/tasks.c ****     #endif
 409:FreeRTOS-Kernel/tasks.c **** 
 410:FreeRTOS-Kernel/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 411:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /**< Stores the amount of time the task has s
 412:FreeRTOS-Kernel/tasks.c ****     #endif
 413:FreeRTOS-Kernel/tasks.c **** 
 414:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
 415:FreeRTOS-Kernel/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /**< Memory block used as Thread Local Storage (TLS) Block 
 416:FreeRTOS-Kernel/tasks.c ****     #endif
 417:FreeRTOS-Kernel/tasks.c **** 
 418:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 419:FreeRTOS-Kernel/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 420:FreeRTOS-Kernel/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 421:FreeRTOS-Kernel/tasks.c ****     #endif
 422:FreeRTOS-Kernel/tasks.c **** 
 423:FreeRTOS-Kernel/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 424:FreeRTOS-Kernel/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 425:FreeRTOS-Kernel/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 426:FreeRTOS-Kernel/tasks.c ****         uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the task is a statically allocated to 
 427:FreeRTOS-Kernel/tasks.c ****     #endif
 428:FreeRTOS-Kernel/tasks.c **** 
 429:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 9


 430:FreeRTOS-Kernel/tasks.c ****         uint8_t ucDelayAborted;
 431:FreeRTOS-Kernel/tasks.c ****     #endif
 432:FreeRTOS-Kernel/tasks.c **** 
 433:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 434:FreeRTOS-Kernel/tasks.c ****         int iTaskErrno;
 435:FreeRTOS-Kernel/tasks.c ****     #endif
 436:FreeRTOS-Kernel/tasks.c **** } tskTCB;
 437:FreeRTOS-Kernel/tasks.c **** 
 438:FreeRTOS-Kernel/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 439:FreeRTOS-Kernel/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 440:FreeRTOS-Kernel/tasks.c **** typedef tskTCB TCB_t;
 441:FreeRTOS-Kernel/tasks.c **** 
 442:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
 443:FreeRTOS-Kernel/tasks.c ****     /* MISRA Ref 8.4.1 [Declaration shall be visible] */
 444:FreeRTOS-Kernel/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-84 */
 445:FreeRTOS-Kernel/tasks.c ****     /* coverity[misra_c_2012_rule_8_4_violation] */
 446:FreeRTOS-Kernel/tasks.c ****     portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 447:FreeRTOS-Kernel/tasks.c **** #else
 448:FreeRTOS-Kernel/tasks.c ****     /* MISRA Ref 8.4.1 [Declaration shall be visible] */
 449:FreeRTOS-Kernel/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-84 */
 450:FreeRTOS-Kernel/tasks.c ****     /* coverity[misra_c_2012_rule_8_4_violation] */
 451:FreeRTOS-Kernel/tasks.c ****     portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCBs[ configNUMBER_OF_CORES ];
 452:FreeRTOS-Kernel/tasks.c ****     #define pxCurrentTCB    xTaskGetCurrentTaskHandle()
 453:FreeRTOS-Kernel/tasks.c **** #endif
 454:FreeRTOS-Kernel/tasks.c **** 
 455:FreeRTOS-Kernel/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 456:FreeRTOS-Kernel/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 457:FreeRTOS-Kernel/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 458:FreeRTOS-Kernel/tasks.c ****  * the static qualifier. */
 459:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /**< Prioritised ready tas
 460:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /**< Delayed tasks. */
 461:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /**< Delayed tasks (two li
 462:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /**< Points to the delayed
 463:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /**< Points to the delayed
 464:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /**< Tasks that have been 
 465:FreeRTOS-Kernel/tasks.c **** 
 466:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 467:FreeRTOS-Kernel/tasks.c **** 
 468:FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /**< Tasks that have been deleted - but
 469:FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 470:FreeRTOS-Kernel/tasks.c **** 
 471:FreeRTOS-Kernel/tasks.c **** #endif
 472:FreeRTOS-Kernel/tasks.c **** 
 473:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 474:FreeRTOS-Kernel/tasks.c **** 
 475:FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /**< Tasks that are currently suspended. */
 476:FreeRTOS-Kernel/tasks.c **** 
 477:FreeRTOS-Kernel/tasks.c **** #endif
 478:FreeRTOS-Kernel/tasks.c **** 
 479:FreeRTOS-Kernel/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 480:FreeRTOS-Kernel/tasks.c ****  * the errno of the currently running task. */
 481:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 482:FreeRTOS-Kernel/tasks.c ****     int FreeRTOS_errno = 0;
 483:FreeRTOS-Kernel/tasks.c **** #endif
 484:FreeRTOS-Kernel/tasks.c **** 
 485:FreeRTOS-Kernel/tasks.c **** /* Other file private variables. --------------------------------*/
 486:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccJw1tyY.s 			page 10


 487:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 488:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 489:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 490:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 491:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPendings[ configNUMBER_OF_CORES ] = { pdFALSE };
 492:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 493:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 494:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 495:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandles[ configNUMBER_OF_CORES ];       /**< Holds the
 496:FreeRTOS-Kernel/tasks.c **** 
 497:FreeRTOS-Kernel/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 498:FreeRTOS-Kernel/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 499:FreeRTOS-Kernel/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 500:FreeRTOS-Kernel/tasks.c **** static const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 501:FreeRTOS-Kernel/tasks.c **** 
 502:FreeRTOS-Kernel/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 503:FreeRTOS-Kernel/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 504:FreeRTOS-Kernel/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 505:FreeRTOS-Kernel/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 506:FreeRTOS-Kernel/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 507:FreeRTOS-Kernel/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 508:FreeRTOS-Kernel/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 509:FreeRTOS-Kernel/tasks.c ****  * accessed from a critical section.
 510:FreeRTOS-Kernel/tasks.c ****  *
 511:FreeRTOS-Kernel/tasks.c ****  * Updates to uxSchedulerSuspended must be protected by both the task lock and the ISR lock
 512:FreeRTOS-Kernel/tasks.c ****  * and must not be done from an ISR. Reads must be protected by either lock and may be done
 513:FreeRTOS-Kernel/tasks.c ****  * from either an ISR or a task. */
 514:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) 0U;
 515:FreeRTOS-Kernel/tasks.c **** 
 516:FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 517:FreeRTOS-Kernel/tasks.c **** 
 518:FreeRTOS-Kernel/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 519:FreeRTOS-Kernel/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 520:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime[ configNUMBER_OF_CORES ] = 
 521:FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime[ configNUMBER_OF_CORES ]
 522:FreeRTOS-Kernel/tasks.c **** 
 523:FreeRTOS-Kernel/tasks.c **** #endif
 524:FreeRTOS-Kernel/tasks.c **** 
 525:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 526:FreeRTOS-Kernel/tasks.c **** 
 527:FreeRTOS-Kernel/tasks.c **** /* File private functions. --------------------------------*/
 528:FreeRTOS-Kernel/tasks.c **** 
 529:FreeRTOS-Kernel/tasks.c **** /*
 530:FreeRTOS-Kernel/tasks.c ****  * Creates the idle tasks during scheduler start.
 531:FreeRTOS-Kernel/tasks.c ****  */
 532:FreeRTOS-Kernel/tasks.c **** static BaseType_t prvCreateIdleTasks( void );
 533:FreeRTOS-Kernel/tasks.c **** 
 534:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 535:FreeRTOS-Kernel/tasks.c **** 
 536:FreeRTOS-Kernel/tasks.c **** /*
 537:FreeRTOS-Kernel/tasks.c ****  * Checks to see if another task moved the current task out of the ready
 538:FreeRTOS-Kernel/tasks.c ****  * list while it was waiting to enter a critical section and yields, if so.
 539:FreeRTOS-Kernel/tasks.c ****  */
 540:FreeRTOS-Kernel/tasks.c ****     static void prvCheckForRunStateChange( void );
 541:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 542:FreeRTOS-Kernel/tasks.c **** 
 543:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 11


 544:FreeRTOS-Kernel/tasks.c **** 
 545:FreeRTOS-Kernel/tasks.c **** /*
 546:FreeRTOS-Kernel/tasks.c ****  * Yields a core, or cores if multiple priorities are not allowed to run
 547:FreeRTOS-Kernel/tasks.c ****  * simultaneously, to allow the task pxTCB to run.
 548:FreeRTOS-Kernel/tasks.c ****  */
 549:FreeRTOS-Kernel/tasks.c ****     static void prvYieldForTask( const TCB_t * pxTCB );
 550:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 551:FreeRTOS-Kernel/tasks.c **** 
 552:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 553:FreeRTOS-Kernel/tasks.c **** 
 554:FreeRTOS-Kernel/tasks.c **** /*
 555:FreeRTOS-Kernel/tasks.c ****  * Selects the highest priority available task for the given core.
 556:FreeRTOS-Kernel/tasks.c ****  */
 557:FreeRTOS-Kernel/tasks.c ****     static void prvSelectHighestPriorityTask( BaseType_t xCoreID );
 558:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 559:FreeRTOS-Kernel/tasks.c **** 
 560:FreeRTOS-Kernel/tasks.c **** /**
 561:FreeRTOS-Kernel/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 562:FreeRTOS-Kernel/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 563:FreeRTOS-Kernel/tasks.c ****  * is in any other state.
 564:FreeRTOS-Kernel/tasks.c ****  */
 565:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 566:FreeRTOS-Kernel/tasks.c **** 
 567:FreeRTOS-Kernel/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 568:FreeRTOS-Kernel/tasks.c **** 
 569:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 570:FreeRTOS-Kernel/tasks.c **** 
 571:FreeRTOS-Kernel/tasks.c **** /*
 572:FreeRTOS-Kernel/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 573:FreeRTOS-Kernel/tasks.c ****  * automatically upon the creation of the first task.
 574:FreeRTOS-Kernel/tasks.c ****  */
 575:FreeRTOS-Kernel/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 576:FreeRTOS-Kernel/tasks.c **** 
 577:FreeRTOS-Kernel/tasks.c **** /*
 578:FreeRTOS-Kernel/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 579:FreeRTOS-Kernel/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 580:FreeRTOS-Kernel/tasks.c ****  * creation of the first user task.
 581:FreeRTOS-Kernel/tasks.c ****  *
 582:FreeRTOS-Kernel/tasks.c ****  * In the FreeRTOS SMP, configNUMBER_OF_CORES - 1 passive idle tasks are also
 583:FreeRTOS-Kernel/tasks.c ****  * created to ensure that each core has an idle task to run when no other
 584:FreeRTOS-Kernel/tasks.c ****  * task is available to run.
 585:FreeRTOS-Kernel/tasks.c ****  *
 586:FreeRTOS-Kernel/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 587:FreeRTOS-Kernel/tasks.c ****  * language extensions.  The equivalent prototype for these functions are:
 588:FreeRTOS-Kernel/tasks.c ****  *
 589:FreeRTOS-Kernel/tasks.c ****  * void prvIdleTask( void *pvParameters );
 590:FreeRTOS-Kernel/tasks.c ****  * void prvPassiveIdleTask( void *pvParameters );
 591:FreeRTOS-Kernel/tasks.c ****  *
 592:FreeRTOS-Kernel/tasks.c ****  */
 593:FreeRTOS-Kernel/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 594:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 595:FreeRTOS-Kernel/tasks.c ****     static portTASK_FUNCTION_PROTO( prvPassiveIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 596:FreeRTOS-Kernel/tasks.c **** #endif
 597:FreeRTOS-Kernel/tasks.c **** 
 598:FreeRTOS-Kernel/tasks.c **** /*
 599:FreeRTOS-Kernel/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 600:FreeRTOS-Kernel/tasks.c ****  * including the stack pointed to by the TCB.
ARM GAS  /tmp/ccJw1tyY.s 			page 12


 601:FreeRTOS-Kernel/tasks.c ****  *
 602:FreeRTOS-Kernel/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 603:FreeRTOS-Kernel/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 604:FreeRTOS-Kernel/tasks.c ****  */
 605:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 606:FreeRTOS-Kernel/tasks.c **** 
 607:FreeRTOS-Kernel/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 608:FreeRTOS-Kernel/tasks.c **** 
 609:FreeRTOS-Kernel/tasks.c **** #endif
 610:FreeRTOS-Kernel/tasks.c **** 
 611:FreeRTOS-Kernel/tasks.c **** /*
 612:FreeRTOS-Kernel/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 613:FreeRTOS-Kernel/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 614:FreeRTOS-Kernel/tasks.c ****  * and its TCB deleted.
 615:FreeRTOS-Kernel/tasks.c ****  */
 616:FreeRTOS-Kernel/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 617:FreeRTOS-Kernel/tasks.c **** 
 618:FreeRTOS-Kernel/tasks.c **** /*
 619:FreeRTOS-Kernel/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 620:FreeRTOS-Kernel/tasks.c ****  * either the current or the overflow delayed task list.
 621:FreeRTOS-Kernel/tasks.c ****  */
 622:FreeRTOS-Kernel/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 623:FreeRTOS-Kernel/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 624:FreeRTOS-Kernel/tasks.c **** 
 625:FreeRTOS-Kernel/tasks.c **** /*
 626:FreeRTOS-Kernel/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 627:FreeRTOS-Kernel/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 628:FreeRTOS-Kernel/tasks.c ****  * a suspended list, etc.).
 629:FreeRTOS-Kernel/tasks.c ****  *
 630:FreeRTOS-Kernel/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 631:FreeRTOS-Kernel/tasks.c ****  * NORMAL APPLICATION CODE.
 632:FreeRTOS-Kernel/tasks.c ****  */
 633:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 634:FreeRTOS-Kernel/tasks.c **** 
 635:FreeRTOS-Kernel/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 636:FreeRTOS-Kernel/tasks.c ****                                                      List_t * pxList,
 637:FreeRTOS-Kernel/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 638:FreeRTOS-Kernel/tasks.c **** 
 639:FreeRTOS-Kernel/tasks.c **** #endif
 640:FreeRTOS-Kernel/tasks.c **** 
 641:FreeRTOS-Kernel/tasks.c **** /*
 642:FreeRTOS-Kernel/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 643:FreeRTOS-Kernel/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 644:FreeRTOS-Kernel/tasks.c ****  */
 645:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 646:FreeRTOS-Kernel/tasks.c **** 
 647:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 648:FreeRTOS-Kernel/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 649:FreeRTOS-Kernel/tasks.c **** 
 650:FreeRTOS-Kernel/tasks.c **** #endif
 651:FreeRTOS-Kernel/tasks.c **** 
 652:FreeRTOS-Kernel/tasks.c **** /*
 653:FreeRTOS-Kernel/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 654:FreeRTOS-Kernel/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 655:FreeRTOS-Kernel/tasks.c ****  * determining how much of the stack remains at the original preset value.
 656:FreeRTOS-Kernel/tasks.c ****  */
 657:FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
ARM GAS  /tmp/ccJw1tyY.s 			page 13


 658:FreeRTOS-Kernel/tasks.c **** 
 659:FreeRTOS-Kernel/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 660:FreeRTOS-Kernel/tasks.c **** 
 661:FreeRTOS-Kernel/tasks.c **** #endif
 662:FreeRTOS-Kernel/tasks.c **** 
 663:FreeRTOS-Kernel/tasks.c **** /*
 664:FreeRTOS-Kernel/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 665:FreeRTOS-Kernel/tasks.c ****  * next move a task from the Blocked state to the Running state.
 666:FreeRTOS-Kernel/tasks.c ****  *
 667:FreeRTOS-Kernel/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 668:FreeRTOS-Kernel/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 669:FreeRTOS-Kernel/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 670:FreeRTOS-Kernel/tasks.c ****  * set to a value other than 1.
 671:FreeRTOS-Kernel/tasks.c ****  */
 672:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 673:FreeRTOS-Kernel/tasks.c **** 
 674:FreeRTOS-Kernel/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 675:FreeRTOS-Kernel/tasks.c **** 
 676:FreeRTOS-Kernel/tasks.c **** #endif
 677:FreeRTOS-Kernel/tasks.c **** 
 678:FreeRTOS-Kernel/tasks.c **** /*
 679:FreeRTOS-Kernel/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 680:FreeRTOS-Kernel/tasks.c ****  * will exit the Blocked state.
 681:FreeRTOS-Kernel/tasks.c ****  */
 682:FreeRTOS-Kernel/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 683:FreeRTOS-Kernel/tasks.c **** 
 684:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 685:FreeRTOS-Kernel/tasks.c **** 
 686:FreeRTOS-Kernel/tasks.c **** /*
 687:FreeRTOS-Kernel/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 688:FreeRTOS-Kernel/tasks.c ****  * human readable tables of task information.
 689:FreeRTOS-Kernel/tasks.c ****  */
 690:FreeRTOS-Kernel/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 691:FreeRTOS-Kernel/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 692:FreeRTOS-Kernel/tasks.c **** 
 693:FreeRTOS-Kernel/tasks.c **** #endif
 694:FreeRTOS-Kernel/tasks.c **** 
 695:FreeRTOS-Kernel/tasks.c **** /*
 696:FreeRTOS-Kernel/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 697:FreeRTOS-Kernel/tasks.c ****  * dynamically to fill in the structure's members.
 698:FreeRTOS-Kernel/tasks.c ****  */
 699:FreeRTOS-Kernel/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 700:FreeRTOS-Kernel/tasks.c ****                                   const char * const pcName,
 701:FreeRTOS-Kernel/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
 702:FreeRTOS-Kernel/tasks.c ****                                   void * const pvParameters,
 703:FreeRTOS-Kernel/tasks.c ****                                   UBaseType_t uxPriority,
 704:FreeRTOS-Kernel/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 705:FreeRTOS-Kernel/tasks.c ****                                   TCB_t * pxNewTCB,
 706:FreeRTOS-Kernel/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 707:FreeRTOS-Kernel/tasks.c **** 
 708:FreeRTOS-Kernel/tasks.c **** /*
 709:FreeRTOS-Kernel/tasks.c ****  * Called after a new task has been created and initialised to place the task
 710:FreeRTOS-Kernel/tasks.c ****  * under the control of the scheduler.
 711:FreeRTOS-Kernel/tasks.c ****  */
 712:FreeRTOS-Kernel/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 713:FreeRTOS-Kernel/tasks.c **** 
 714:FreeRTOS-Kernel/tasks.c **** /*
ARM GAS  /tmp/ccJw1tyY.s 			page 14


 715:FreeRTOS-Kernel/tasks.c ****  * Create a task with static buffer for both TCB and stack. Returns a handle to
 716:FreeRTOS-Kernel/tasks.c ****  * the task if it is created successfully. Otherwise, returns NULL.
 717:FreeRTOS-Kernel/tasks.c ****  */
 718:FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 719:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateStaticTask( TaskFunction_t pxTaskCode,
 720:FreeRTOS-Kernel/tasks.c ****                                         const char * const pcName,
 721:FreeRTOS-Kernel/tasks.c ****                                         const configSTACK_DEPTH_TYPE uxStackDepth,
 722:FreeRTOS-Kernel/tasks.c ****                                         void * const pvParameters,
 723:FreeRTOS-Kernel/tasks.c ****                                         UBaseType_t uxPriority,
 724:FreeRTOS-Kernel/tasks.c ****                                         StackType_t * const puxStackBuffer,
 725:FreeRTOS-Kernel/tasks.c ****                                         StaticTask_t * const pxTaskBuffer,
 726:FreeRTOS-Kernel/tasks.c ****                                         TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;
 727:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 728:FreeRTOS-Kernel/tasks.c **** 
 729:FreeRTOS-Kernel/tasks.c **** /*
 730:FreeRTOS-Kernel/tasks.c ****  * Create a restricted task with static buffer for both TCB and stack. Returns
 731:FreeRTOS-Kernel/tasks.c ****  * a handle to the task if it is created successfully. Otherwise, returns NULL.
 732:FreeRTOS-Kernel/tasks.c ****  */
 733:FreeRTOS-Kernel/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 734:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateRestrictedStaticTask( const TaskParameters_t * const pxTaskDefinition,
 735:FreeRTOS-Kernel/tasks.c ****                                                   TaskHandle_t * const pxCreatedTask ) PRIVILEGED_F
 736:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
 737:FreeRTOS-Kernel/tasks.c **** 
 738:FreeRTOS-Kernel/tasks.c **** /*
 739:FreeRTOS-Kernel/tasks.c ****  * Create a restricted task with static buffer for task stack and allocated buffer
 740:FreeRTOS-Kernel/tasks.c ****  * for TCB. Returns a handle to the task if it is created successfully. Otherwise,
 741:FreeRTOS-Kernel/tasks.c ****  * returns NULL.
 742:FreeRTOS-Kernel/tasks.c ****  */
 743:FreeRTOS-Kernel/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 744:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateRestrictedTask( const TaskParameters_t * const pxTaskDefinition,
 745:FreeRTOS-Kernel/tasks.c ****                                             TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTIO
 746:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
 747:FreeRTOS-Kernel/tasks.c **** 
 748:FreeRTOS-Kernel/tasks.c **** /*
 749:FreeRTOS-Kernel/tasks.c ****  * Create a task with allocated buffer for both TCB and stack. Returns a handle to
 750:FreeRTOS-Kernel/tasks.c ****  * the task if it is created successfully. Otherwise, returns NULL.
 751:FreeRTOS-Kernel/tasks.c ****  */
 752:FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 753:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateTask( TaskFunction_t pxTaskCode,
 754:FreeRTOS-Kernel/tasks.c ****                                   const char * const pcName,
 755:FreeRTOS-Kernel/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
 756:FreeRTOS-Kernel/tasks.c ****                                   void * const pvParameters,
 757:FreeRTOS-Kernel/tasks.c ****                                   UBaseType_t uxPriority,
 758:FreeRTOS-Kernel/tasks.c ****                                   TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;
 759:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 760:FreeRTOS-Kernel/tasks.c **** 
 761:FreeRTOS-Kernel/tasks.c **** /*
 762:FreeRTOS-Kernel/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 763:FreeRTOS-Kernel/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 764:FreeRTOS-Kernel/tasks.c ****  * called by the function.
 765:FreeRTOS-Kernel/tasks.c ****  */
 766:FreeRTOS-Kernel/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 767:FreeRTOS-Kernel/tasks.c **** 
 768:FreeRTOS-Kernel/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 769:FreeRTOS-Kernel/tasks.c **** 
 770:FreeRTOS-Kernel/tasks.c **** #endif
 771:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 15


 772:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_PASSIVE_IDLE_HOOK == 1 )
 773:FreeRTOS-Kernel/tasks.c ****     extern void vApplicationPassiveIdleHook( void );
 774:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configUSE_PASSIVE_IDLE_HOOK == 1 ) */
 775:FreeRTOS-Kernel/tasks.c **** 
 776:FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 777:FreeRTOS-Kernel/tasks.c **** 
 778:FreeRTOS-Kernel/tasks.c **** /*
 779:FreeRTOS-Kernel/tasks.c ****  * Convert the snprintf return value to the number of characters
 780:FreeRTOS-Kernel/tasks.c ****  * written. The following are the possible cases:
 781:FreeRTOS-Kernel/tasks.c ****  *
 782:FreeRTOS-Kernel/tasks.c ****  * 1. The buffer supplied to snprintf is large enough to hold the
 783:FreeRTOS-Kernel/tasks.c ****  *    generated string. The return value in this case is the number
 784:FreeRTOS-Kernel/tasks.c ****  *    of characters actually written, not counting the terminating
 785:FreeRTOS-Kernel/tasks.c ****  *    null character.
 786:FreeRTOS-Kernel/tasks.c ****  * 2. The buffer supplied to snprintf is NOT large enough to hold
 787:FreeRTOS-Kernel/tasks.c ****  *    the generated string. The return value in this case is the
 788:FreeRTOS-Kernel/tasks.c ****  *    number of characters that would have been written if the
 789:FreeRTOS-Kernel/tasks.c ****  *    buffer had been sufficiently large, not counting the
 790:FreeRTOS-Kernel/tasks.c ****  *    terminating null character.
 791:FreeRTOS-Kernel/tasks.c ****  * 3. Encoding error. The return value in this case is a negative
 792:FreeRTOS-Kernel/tasks.c ****  *    number.
 793:FreeRTOS-Kernel/tasks.c ****  *
 794:FreeRTOS-Kernel/tasks.c ****  * From 1 and 2 above ==> Only when the return value is non-negative
 795:FreeRTOS-Kernel/tasks.c ****  * and less than the supplied buffer length, the string has been
 796:FreeRTOS-Kernel/tasks.c ****  * completely written.
 797:FreeRTOS-Kernel/tasks.c ****  */
 798:FreeRTOS-Kernel/tasks.c ****     static size_t prvSnprintfReturnValueToCharsWritten( int iSnprintfReturnValue,
 799:FreeRTOS-Kernel/tasks.c ****                                                         size_t n );
 800:FreeRTOS-Kernel/tasks.c **** 
 801:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 802:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 803:FreeRTOS-Kernel/tasks.c **** 
 804:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 805:FreeRTOS-Kernel/tasks.c ****     static void prvCheckForRunStateChange( void )
 806:FreeRTOS-Kernel/tasks.c ****     {
 807:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxPrevCriticalNesting;
 808:FreeRTOS-Kernel/tasks.c ****         const TCB_t * pxThisTCB;
 809:FreeRTOS-Kernel/tasks.c **** 
 810:FreeRTOS-Kernel/tasks.c ****         /* This must only be called from within a task. */
 811:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_IN_ISR();
 812:FreeRTOS-Kernel/tasks.c **** 
 813:FreeRTOS-Kernel/tasks.c ****         /* This function is always called with interrupts disabled
 814:FreeRTOS-Kernel/tasks.c ****          * so this is safe. */
 815:FreeRTOS-Kernel/tasks.c ****         pxThisTCB = pxCurrentTCBs[ portGET_CORE_ID() ];
 816:FreeRTOS-Kernel/tasks.c **** 
 817:FreeRTOS-Kernel/tasks.c ****         while( pxThisTCB->xTaskRunState == taskTASK_SCHEDULED_TO_YIELD )
 818:FreeRTOS-Kernel/tasks.c ****         {
 819:FreeRTOS-Kernel/tasks.c ****             /* We are only here if we just entered a critical section
 820:FreeRTOS-Kernel/tasks.c ****             * or if we just suspended the scheduler, and another task
 821:FreeRTOS-Kernel/tasks.c ****             * has requested that we yield.
 822:FreeRTOS-Kernel/tasks.c ****             *
 823:FreeRTOS-Kernel/tasks.c ****             * This is slightly complicated since we need to save and restore
 824:FreeRTOS-Kernel/tasks.c ****             * the suspension and critical nesting counts, as well as release
 825:FreeRTOS-Kernel/tasks.c ****             * and reacquire the correct locks. And then, do it all over again
 826:FreeRTOS-Kernel/tasks.c ****             * if our state changed again during the reacquisition. */
 827:FreeRTOS-Kernel/tasks.c ****             uxPrevCriticalNesting = portGET_CRITICAL_NESTING_COUNT();
 828:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 16


 829:FreeRTOS-Kernel/tasks.c ****             if( uxPrevCriticalNesting > 0U )
 830:FreeRTOS-Kernel/tasks.c ****             {
 831:FreeRTOS-Kernel/tasks.c ****                 portSET_CRITICAL_NESTING_COUNT( 0U );
 832:FreeRTOS-Kernel/tasks.c ****                 portRELEASE_ISR_LOCK();
 833:FreeRTOS-Kernel/tasks.c ****             }
 834:FreeRTOS-Kernel/tasks.c ****             else
 835:FreeRTOS-Kernel/tasks.c ****             {
 836:FreeRTOS-Kernel/tasks.c ****                 /* The scheduler is suspended. uxSchedulerSuspended is updated
 837:FreeRTOS-Kernel/tasks.c ****                  * only when the task is not requested to yield. */
 838:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 839:FreeRTOS-Kernel/tasks.c ****             }
 840:FreeRTOS-Kernel/tasks.c **** 
 841:FreeRTOS-Kernel/tasks.c ****             portRELEASE_TASK_LOCK();
 842:FreeRTOS-Kernel/tasks.c ****             portMEMORY_BARRIER();
 843:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxThisTCB->xTaskRunState == taskTASK_SCHEDULED_TO_YIELD );
 844:FreeRTOS-Kernel/tasks.c **** 
 845:FreeRTOS-Kernel/tasks.c ****             portENABLE_INTERRUPTS();
 846:FreeRTOS-Kernel/tasks.c **** 
 847:FreeRTOS-Kernel/tasks.c ****             /* Enabling interrupts should cause this core to immediately
 848:FreeRTOS-Kernel/tasks.c ****              * service the pending interrupt and yield. If the run state is still
 849:FreeRTOS-Kernel/tasks.c ****              * yielding here then that is a problem. */
 850:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxThisTCB->xTaskRunState != taskTASK_SCHEDULED_TO_YIELD );
 851:FreeRTOS-Kernel/tasks.c **** 
 852:FreeRTOS-Kernel/tasks.c ****             portDISABLE_INTERRUPTS();
 853:FreeRTOS-Kernel/tasks.c ****             portGET_TASK_LOCK();
 854:FreeRTOS-Kernel/tasks.c ****             portGET_ISR_LOCK();
 855:FreeRTOS-Kernel/tasks.c **** 
 856:FreeRTOS-Kernel/tasks.c ****             portSET_CRITICAL_NESTING_COUNT( uxPrevCriticalNesting );
 857:FreeRTOS-Kernel/tasks.c **** 
 858:FreeRTOS-Kernel/tasks.c ****             if( uxPrevCriticalNesting == 0U )
 859:FreeRTOS-Kernel/tasks.c ****             {
 860:FreeRTOS-Kernel/tasks.c ****                 portRELEASE_ISR_LOCK();
 861:FreeRTOS-Kernel/tasks.c ****             }
 862:FreeRTOS-Kernel/tasks.c ****         }
 863:FreeRTOS-Kernel/tasks.c ****     }
 864:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 865:FreeRTOS-Kernel/tasks.c **** 
 866:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 867:FreeRTOS-Kernel/tasks.c **** 
 868:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 869:FreeRTOS-Kernel/tasks.c ****     static void prvYieldForTask( const TCB_t * pxTCB )
 870:FreeRTOS-Kernel/tasks.c ****     {
 871:FreeRTOS-Kernel/tasks.c ****         BaseType_t xLowestPriorityToPreempt;
 872:FreeRTOS-Kernel/tasks.c ****         BaseType_t xCurrentCoreTaskPriority;
 873:FreeRTOS-Kernel/tasks.c ****         BaseType_t xLowestPriorityCore = ( BaseType_t ) -1;
 874:FreeRTOS-Kernel/tasks.c ****         BaseType_t xCoreID;
 875:FreeRTOS-Kernel/tasks.c **** 
 876:FreeRTOS-Kernel/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 877:FreeRTOS-Kernel/tasks.c ****             BaseType_t xYieldCount = 0;
 878:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 879:FreeRTOS-Kernel/tasks.c **** 
 880:FreeRTOS-Kernel/tasks.c ****         /* This must be called from a critical section. */
 881:FreeRTOS-Kernel/tasks.c ****         configASSERT( portGET_CRITICAL_NESTING_COUNT() > 0U );
 882:FreeRTOS-Kernel/tasks.c **** 
 883:FreeRTOS-Kernel/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 884:FreeRTOS-Kernel/tasks.c **** 
 885:FreeRTOS-Kernel/tasks.c ****             /* No task should yield for this one if it is a lower priority
ARM GAS  /tmp/ccJw1tyY.s 			page 17


 886:FreeRTOS-Kernel/tasks.c ****              * than priority level of currently ready tasks. */
 887:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxPriority >= uxTopReadyPriority )
 888:FreeRTOS-Kernel/tasks.c ****         #else
 889:FreeRTOS-Kernel/tasks.c ****             /* Yield is not required for a task which is already running. */
 890:FreeRTOS-Kernel/tasks.c ****             if( taskTASK_IS_RUNNING( pxTCB ) == pdFALSE )
 891:FreeRTOS-Kernel/tasks.c ****         #endif
 892:FreeRTOS-Kernel/tasks.c ****         {
 893:FreeRTOS-Kernel/tasks.c ****             xLowestPriorityToPreempt = ( BaseType_t ) pxTCB->uxPriority;
 894:FreeRTOS-Kernel/tasks.c **** 
 895:FreeRTOS-Kernel/tasks.c ****             /* xLowestPriorityToPreempt will be decremented to -1 if the priority of pxTCB
 896:FreeRTOS-Kernel/tasks.c ****              * is 0. This is ok as we will give system idle tasks a priority of -1 below. */
 897:FreeRTOS-Kernel/tasks.c ****             --xLowestPriorityToPreempt;
 898:FreeRTOS-Kernel/tasks.c **** 
 899:FreeRTOS-Kernel/tasks.c ****             for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreI
 900:FreeRTOS-Kernel/tasks.c ****             {
 901:FreeRTOS-Kernel/tasks.c ****                 xCurrentCoreTaskPriority = ( BaseType_t ) pxCurrentTCBs[ xCoreID ]->uxPriority;
 902:FreeRTOS-Kernel/tasks.c **** 
 903:FreeRTOS-Kernel/tasks.c ****                 /* System idle tasks are being assigned a priority of tskIDLE_PRIORITY - 1 here. */
 904:FreeRTOS-Kernel/tasks.c ****                 if( ( pxCurrentTCBs[ xCoreID ]->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) != 0U )
 905:FreeRTOS-Kernel/tasks.c ****                 {
 906:FreeRTOS-Kernel/tasks.c ****                     xCurrentCoreTaskPriority = ( BaseType_t ) ( xCurrentCoreTaskPriority - 1 );
 907:FreeRTOS-Kernel/tasks.c ****                 }
 908:FreeRTOS-Kernel/tasks.c **** 
 909:FreeRTOS-Kernel/tasks.c ****                 if( ( taskTASK_IS_RUNNING( pxCurrentTCBs[ xCoreID ] ) != pdFALSE ) && ( xYieldPendi
 910:FreeRTOS-Kernel/tasks.c ****                 {
 911:FreeRTOS-Kernel/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 912:FreeRTOS-Kernel/tasks.c ****                         if( taskTASK_IS_RUNNING( pxTCB ) == pdFALSE )
 913:FreeRTOS-Kernel/tasks.c ****                     #endif
 914:FreeRTOS-Kernel/tasks.c ****                     {
 915:FreeRTOS-Kernel/tasks.c ****                         if( xCurrentCoreTaskPriority <= xLowestPriorityToPreempt )
 916:FreeRTOS-Kernel/tasks.c ****                         {
 917:FreeRTOS-Kernel/tasks.c ****                             #if ( configUSE_CORE_AFFINITY == 1 )
 918:FreeRTOS-Kernel/tasks.c ****                                 if( ( pxTCB->uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseTy
 919:FreeRTOS-Kernel/tasks.c ****                             #endif
 920:FreeRTOS-Kernel/tasks.c ****                             {
 921:FreeRTOS-Kernel/tasks.c ****                                 #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
 922:FreeRTOS-Kernel/tasks.c ****                                     if( pxCurrentTCBs[ xCoreID ]->xPreemptionDisable == pdFALSE )
 923:FreeRTOS-Kernel/tasks.c ****                                 #endif
 924:FreeRTOS-Kernel/tasks.c ****                                 {
 925:FreeRTOS-Kernel/tasks.c ****                                     xLowestPriorityToPreempt = xCurrentCoreTaskPriority;
 926:FreeRTOS-Kernel/tasks.c ****                                     xLowestPriorityCore = xCoreID;
 927:FreeRTOS-Kernel/tasks.c ****                                 }
 928:FreeRTOS-Kernel/tasks.c ****                             }
 929:FreeRTOS-Kernel/tasks.c ****                         }
 930:FreeRTOS-Kernel/tasks.c ****                         else
 931:FreeRTOS-Kernel/tasks.c ****                         {
 932:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
 933:FreeRTOS-Kernel/tasks.c ****                         }
 934:FreeRTOS-Kernel/tasks.c ****                     }
 935:FreeRTOS-Kernel/tasks.c **** 
 936:FreeRTOS-Kernel/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 937:FreeRTOS-Kernel/tasks.c ****                     {
 938:FreeRTOS-Kernel/tasks.c ****                         /* Yield all currently running non-idle tasks with a priority lower than
 939:FreeRTOS-Kernel/tasks.c ****                          * the task that needs to run. */
 940:FreeRTOS-Kernel/tasks.c ****                         if( ( xCurrentCoreTaskPriority > ( ( BaseType_t ) tskIDLE_PRIORITY - 1 ) ) 
 941:FreeRTOS-Kernel/tasks.c ****                             ( xCurrentCoreTaskPriority < ( BaseType_t ) pxTCB->uxPriority ) )
 942:FreeRTOS-Kernel/tasks.c ****                         {
ARM GAS  /tmp/ccJw1tyY.s 			page 18


 943:FreeRTOS-Kernel/tasks.c ****                             prvYieldCore( xCoreID );
 944:FreeRTOS-Kernel/tasks.c ****                             xYieldCount++;
 945:FreeRTOS-Kernel/tasks.c ****                         }
 946:FreeRTOS-Kernel/tasks.c ****                         else
 947:FreeRTOS-Kernel/tasks.c ****                         {
 948:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
 949:FreeRTOS-Kernel/tasks.c ****                         }
 950:FreeRTOS-Kernel/tasks.c ****                     }
 951:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 952:FreeRTOS-Kernel/tasks.c ****                 }
 953:FreeRTOS-Kernel/tasks.c ****                 else
 954:FreeRTOS-Kernel/tasks.c ****                 {
 955:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
 956:FreeRTOS-Kernel/tasks.c ****                 }
 957:FreeRTOS-Kernel/tasks.c ****             }
 958:FreeRTOS-Kernel/tasks.c **** 
 959:FreeRTOS-Kernel/tasks.c ****             #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 960:FreeRTOS-Kernel/tasks.c ****                 if( ( xYieldCount == 0 ) && ( xLowestPriorityCore >= 0 ) )
 961:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 962:FreeRTOS-Kernel/tasks.c ****                 if( xLowestPriorityCore >= 0 )
 963:FreeRTOS-Kernel/tasks.c ****             #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
 964:FreeRTOS-Kernel/tasks.c ****             {
 965:FreeRTOS-Kernel/tasks.c ****                 prvYieldCore( xLowestPriorityCore );
 966:FreeRTOS-Kernel/tasks.c ****             }
 967:FreeRTOS-Kernel/tasks.c **** 
 968:FreeRTOS-Kernel/tasks.c ****             #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 969:FreeRTOS-Kernel/tasks.c ****                 /* Verify that the calling core always yields to higher priority tasks. */
 970:FreeRTOS-Kernel/tasks.c ****                 if( ( ( pxCurrentTCBs[ portGET_CORE_ID() ]->uxTaskAttributes & taskATTRIBUTE_IS_IDL
 971:FreeRTOS-Kernel/tasks.c ****                     ( pxTCB->uxPriority > pxCurrentTCBs[ portGET_CORE_ID() ]->uxPriority ) )
 972:FreeRTOS-Kernel/tasks.c ****                 {
 973:FreeRTOS-Kernel/tasks.c ****                     configASSERT( ( xYieldPendings[ portGET_CORE_ID() ] == pdTRUE ) ||
 974:FreeRTOS-Kernel/tasks.c ****                                   ( taskTASK_IS_RUNNING( pxCurrentTCBs[ portGET_CORE_ID() ] ) == pd
 975:FreeRTOS-Kernel/tasks.c ****                 }
 976:FreeRTOS-Kernel/tasks.c ****             #endif
 977:FreeRTOS-Kernel/tasks.c ****         }
 978:FreeRTOS-Kernel/tasks.c ****     }
 979:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
 980:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 981:FreeRTOS-Kernel/tasks.c **** 
 982:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
 983:FreeRTOS-Kernel/tasks.c ****     static void prvSelectHighestPriorityTask( BaseType_t xCoreID )
 984:FreeRTOS-Kernel/tasks.c ****     {
 985:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCurrentPriority = uxTopReadyPriority;
 986:FreeRTOS-Kernel/tasks.c ****         BaseType_t xTaskScheduled = pdFALSE;
 987:FreeRTOS-Kernel/tasks.c ****         BaseType_t xDecrementTopPriority = pdTRUE;
 988:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB = NULL;
 989:FreeRTOS-Kernel/tasks.c **** 
 990:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_CORE_AFFINITY == 1 )
 991:FreeRTOS-Kernel/tasks.c ****             const TCB_t * pxPreviousTCB = NULL;
 992:FreeRTOS-Kernel/tasks.c ****         #endif
 993:FreeRTOS-Kernel/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
 994:FreeRTOS-Kernel/tasks.c ****             BaseType_t xPriorityDropped = pdFALSE;
 995:FreeRTOS-Kernel/tasks.c ****         #endif
 996:FreeRTOS-Kernel/tasks.c **** 
 997:FreeRTOS-Kernel/tasks.c ****         /* This function should be called when scheduler is running. */
 998:FreeRTOS-Kernel/tasks.c ****         configASSERT( xSchedulerRunning == pdTRUE );
 999:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 19


1000:FreeRTOS-Kernel/tasks.c ****         /* A new task is created and a running task with the same priority yields
1001:FreeRTOS-Kernel/tasks.c ****          * itself to run the new task. When a running task yields itself, it is still
1002:FreeRTOS-Kernel/tasks.c ****          * in the ready list. This running task will be selected before the new task
1003:FreeRTOS-Kernel/tasks.c ****          * since the new task is always added to the end of the ready list.
1004:FreeRTOS-Kernel/tasks.c ****          * The other problem is that the running task still in the same position of
1005:FreeRTOS-Kernel/tasks.c ****          * the ready list when it yields itself. It is possible that it will be selected
1006:FreeRTOS-Kernel/tasks.c ****          * earlier then other tasks which waits longer than this task.
1007:FreeRTOS-Kernel/tasks.c ****          *
1008:FreeRTOS-Kernel/tasks.c ****          * To fix these problems, the running task should be put to the end of the
1009:FreeRTOS-Kernel/tasks.c ****          * ready list before searching for the ready task in the ready list. */
1010:FreeRTOS-Kernel/tasks.c ****         if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxCurrentTCBs[ xCoreID ]->uxPriority ] )
1011:FreeRTOS-Kernel/tasks.c ****                                      &pxCurrentTCBs[ xCoreID ]->xStateListItem ) == pdTRUE )
1012:FreeRTOS-Kernel/tasks.c ****         {
1013:FreeRTOS-Kernel/tasks.c ****             ( void ) uxListRemove( &pxCurrentTCBs[ xCoreID ]->xStateListItem );
1014:FreeRTOS-Kernel/tasks.c ****             vListInsertEnd( &( pxReadyTasksLists[ pxCurrentTCBs[ xCoreID ]->uxPriority ] ),
1015:FreeRTOS-Kernel/tasks.c ****                             &pxCurrentTCBs[ xCoreID ]->xStateListItem );
1016:FreeRTOS-Kernel/tasks.c ****         }
1017:FreeRTOS-Kernel/tasks.c **** 
1018:FreeRTOS-Kernel/tasks.c ****         while( xTaskScheduled == pdFALSE )
1019:FreeRTOS-Kernel/tasks.c ****         {
1020:FreeRTOS-Kernel/tasks.c ****             #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1021:FreeRTOS-Kernel/tasks.c ****             {
1022:FreeRTOS-Kernel/tasks.c ****                 if( uxCurrentPriority < uxTopReadyPriority )
1023:FreeRTOS-Kernel/tasks.c ****                 {
1024:FreeRTOS-Kernel/tasks.c ****                     /* We can't schedule any tasks, other than idle, that have a
1025:FreeRTOS-Kernel/tasks.c ****                      * priority lower than the priority of a task currently running
1026:FreeRTOS-Kernel/tasks.c ****                      * on another core. */
1027:FreeRTOS-Kernel/tasks.c ****                     uxCurrentPriority = tskIDLE_PRIORITY;
1028:FreeRTOS-Kernel/tasks.c ****                 }
1029:FreeRTOS-Kernel/tasks.c ****             }
1030:FreeRTOS-Kernel/tasks.c ****             #endif
1031:FreeRTOS-Kernel/tasks.c **** 
1032:FreeRTOS-Kernel/tasks.c ****             if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxCurrentPriority ] ) ) == pdFALSE )
1033:FreeRTOS-Kernel/tasks.c ****             {
1034:FreeRTOS-Kernel/tasks.c ****                 const List_t * const pxReadyList = &( pxReadyTasksLists[ uxCurrentPriority ] );
1035:FreeRTOS-Kernel/tasks.c ****                 const ListItem_t * pxEndMarker = listGET_END_MARKER( pxReadyList );
1036:FreeRTOS-Kernel/tasks.c ****                 ListItem_t * pxIterator;
1037:FreeRTOS-Kernel/tasks.c **** 
1038:FreeRTOS-Kernel/tasks.c ****                 /* The ready task list for uxCurrentPriority is not empty, so uxTopReadyPriority
1039:FreeRTOS-Kernel/tasks.c ****                  * must not be decremented any further. */
1040:FreeRTOS-Kernel/tasks.c ****                 xDecrementTopPriority = pdFALSE;
1041:FreeRTOS-Kernel/tasks.c **** 
1042:FreeRTOS-Kernel/tasks.c ****                 for( pxIterator = listGET_HEAD_ENTRY( pxReadyList ); pxIterator != pxEndMarker; pxI
1043:FreeRTOS-Kernel/tasks.c ****                 {
1044:FreeRTOS-Kernel/tasks.c ****                     /* MISRA Ref 11.5.3 [Void pointer assignment] */
1045:FreeRTOS-Kernel/tasks.c ****                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA
1046:FreeRTOS-Kernel/tasks.c ****                     /* coverity[misra_c_2012_rule_11_5_violation] */
1047:FreeRTOS-Kernel/tasks.c ****                     pxTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
1048:FreeRTOS-Kernel/tasks.c **** 
1049:FreeRTOS-Kernel/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1050:FreeRTOS-Kernel/tasks.c ****                     {
1051:FreeRTOS-Kernel/tasks.c ****                         /* When falling back to the idle priority because only one priority
1052:FreeRTOS-Kernel/tasks.c ****                          * level is allowed to run at a time, we should ONLY schedule the true
1053:FreeRTOS-Kernel/tasks.c ****                          * idle tasks, not user tasks at the idle priority. */
1054:FreeRTOS-Kernel/tasks.c ****                         if( uxCurrentPriority < uxTopReadyPriority )
1055:FreeRTOS-Kernel/tasks.c ****                         {
1056:FreeRTOS-Kernel/tasks.c ****                             if( ( pxTCB->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) == 0U )
ARM GAS  /tmp/ccJw1tyY.s 			page 20


1057:FreeRTOS-Kernel/tasks.c ****                             {
1058:FreeRTOS-Kernel/tasks.c ****                                 continue;
1059:FreeRTOS-Kernel/tasks.c ****                             }
1060:FreeRTOS-Kernel/tasks.c ****                         }
1061:FreeRTOS-Kernel/tasks.c ****                     }
1062:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
1063:FreeRTOS-Kernel/tasks.c **** 
1064:FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->xTaskRunState == taskTASK_NOT_RUNNING )
1065:FreeRTOS-Kernel/tasks.c ****                     {
1066:FreeRTOS-Kernel/tasks.c ****                         #if ( configUSE_CORE_AFFINITY == 1 )
1067:FreeRTOS-Kernel/tasks.c ****                             if( ( pxTCB->uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseType_t
1068:FreeRTOS-Kernel/tasks.c ****                         #endif
1069:FreeRTOS-Kernel/tasks.c ****                         {
1070:FreeRTOS-Kernel/tasks.c ****                             /* If the task is not being executed by any core swap it in. */
1071:FreeRTOS-Kernel/tasks.c ****                             pxCurrentTCBs[ xCoreID ]->xTaskRunState = taskTASK_NOT_RUNNING;
1072:FreeRTOS-Kernel/tasks.c ****                             #if ( configUSE_CORE_AFFINITY == 1 )
1073:FreeRTOS-Kernel/tasks.c ****                                 pxPreviousTCB = pxCurrentTCBs[ xCoreID ];
1074:FreeRTOS-Kernel/tasks.c ****                             #endif
1075:FreeRTOS-Kernel/tasks.c ****                             pxTCB->xTaskRunState = xCoreID;
1076:FreeRTOS-Kernel/tasks.c ****                             pxCurrentTCBs[ xCoreID ] = pxTCB;
1077:FreeRTOS-Kernel/tasks.c ****                             xTaskScheduled = pdTRUE;
1078:FreeRTOS-Kernel/tasks.c ****                         }
1079:FreeRTOS-Kernel/tasks.c ****                     }
1080:FreeRTOS-Kernel/tasks.c ****                     else if( pxTCB == pxCurrentTCBs[ xCoreID ] )
1081:FreeRTOS-Kernel/tasks.c ****                     {
1082:FreeRTOS-Kernel/tasks.c ****                         configASSERT( ( pxTCB->xTaskRunState == xCoreID ) || ( pxTCB->xTaskRunState
1083:FreeRTOS-Kernel/tasks.c **** 
1084:FreeRTOS-Kernel/tasks.c ****                         #if ( configUSE_CORE_AFFINITY == 1 )
1085:FreeRTOS-Kernel/tasks.c ****                             if( ( pxTCB->uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseType_t
1086:FreeRTOS-Kernel/tasks.c ****                         #endif
1087:FreeRTOS-Kernel/tasks.c ****                         {
1088:FreeRTOS-Kernel/tasks.c ****                             /* The task is already running on this core, mark it as scheduled. */
1089:FreeRTOS-Kernel/tasks.c ****                             pxTCB->xTaskRunState = xCoreID;
1090:FreeRTOS-Kernel/tasks.c ****                             xTaskScheduled = pdTRUE;
1091:FreeRTOS-Kernel/tasks.c ****                         }
1092:FreeRTOS-Kernel/tasks.c ****                     }
1093:FreeRTOS-Kernel/tasks.c ****                     else
1094:FreeRTOS-Kernel/tasks.c ****                     {
1095:FreeRTOS-Kernel/tasks.c ****                         /* This task is running on the core other than xCoreID. */
1096:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1097:FreeRTOS-Kernel/tasks.c ****                     }
1098:FreeRTOS-Kernel/tasks.c **** 
1099:FreeRTOS-Kernel/tasks.c ****                     if( xTaskScheduled != pdFALSE )
1100:FreeRTOS-Kernel/tasks.c ****                     {
1101:FreeRTOS-Kernel/tasks.c ****                         /* A task has been selected to run on this core. */
1102:FreeRTOS-Kernel/tasks.c ****                         break;
1103:FreeRTOS-Kernel/tasks.c ****                     }
1104:FreeRTOS-Kernel/tasks.c ****                 }
1105:FreeRTOS-Kernel/tasks.c ****             }
1106:FreeRTOS-Kernel/tasks.c ****             else
1107:FreeRTOS-Kernel/tasks.c ****             {
1108:FreeRTOS-Kernel/tasks.c ****                 if( xDecrementTopPriority != pdFALSE )
1109:FreeRTOS-Kernel/tasks.c ****                 {
1110:FreeRTOS-Kernel/tasks.c ****                     uxTopReadyPriority--;
1111:FreeRTOS-Kernel/tasks.c ****                     #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1112:FreeRTOS-Kernel/tasks.c ****                     {
1113:FreeRTOS-Kernel/tasks.c ****                         xPriorityDropped = pdTRUE;
ARM GAS  /tmp/ccJw1tyY.s 			page 21


1114:FreeRTOS-Kernel/tasks.c ****                     }
1115:FreeRTOS-Kernel/tasks.c ****                     #endif
1116:FreeRTOS-Kernel/tasks.c ****                 }
1117:FreeRTOS-Kernel/tasks.c ****             }
1118:FreeRTOS-Kernel/tasks.c **** 
1119:FreeRTOS-Kernel/tasks.c ****             /* There are configNUMBER_OF_CORES Idle tasks created when scheduler started.
1120:FreeRTOS-Kernel/tasks.c ****              * The scheduler should be able to select a task to run when uxCurrentPriority
1121:FreeRTOS-Kernel/tasks.c ****              * is tskIDLE_PRIORITY. uxCurrentPriority is never decreased to value blow
1122:FreeRTOS-Kernel/tasks.c ****              * tskIDLE_PRIORITY. */
1123:FreeRTOS-Kernel/tasks.c ****             if( uxCurrentPriority > tskIDLE_PRIORITY )
1124:FreeRTOS-Kernel/tasks.c ****             {
1125:FreeRTOS-Kernel/tasks.c ****                 uxCurrentPriority--;
1126:FreeRTOS-Kernel/tasks.c ****             }
1127:FreeRTOS-Kernel/tasks.c ****             else
1128:FreeRTOS-Kernel/tasks.c ****             {
1129:FreeRTOS-Kernel/tasks.c ****                 /* This function is called when idle task is not created. Break the
1130:FreeRTOS-Kernel/tasks.c ****                  * loop to prevent uxCurrentPriority overrun. */
1131:FreeRTOS-Kernel/tasks.c ****                 break;
1132:FreeRTOS-Kernel/tasks.c ****             }
1133:FreeRTOS-Kernel/tasks.c ****         }
1134:FreeRTOS-Kernel/tasks.c **** 
1135:FreeRTOS-Kernel/tasks.c ****         #if ( configRUN_MULTIPLE_PRIORITIES == 0 )
1136:FreeRTOS-Kernel/tasks.c ****         {
1137:FreeRTOS-Kernel/tasks.c ****             if( xTaskScheduled == pdTRUE )
1138:FreeRTOS-Kernel/tasks.c ****             {
1139:FreeRTOS-Kernel/tasks.c ****                 if( xPriorityDropped != pdFALSE )
1140:FreeRTOS-Kernel/tasks.c ****                 {
1141:FreeRTOS-Kernel/tasks.c ****                     /* There may be several ready tasks that were being prevented from running beca
1142:FreeRTOS-Kernel/tasks.c ****                      * a higher priority task running. Now that the last of the higher priority tas
1143:FreeRTOS-Kernel/tasks.c ****                      * running, make sure all the other idle tasks yield. */
1144:FreeRTOS-Kernel/tasks.c ****                     BaseType_t x;
1145:FreeRTOS-Kernel/tasks.c **** 
1146:FreeRTOS-Kernel/tasks.c ****                     for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configNUMBER_OF_CORES; x++ )
1147:FreeRTOS-Kernel/tasks.c ****                     {
1148:FreeRTOS-Kernel/tasks.c ****                         if( ( pxCurrentTCBs[ x ]->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) != 0U 
1149:FreeRTOS-Kernel/tasks.c ****                         {
1150:FreeRTOS-Kernel/tasks.c ****                             prvYieldCore( x );
1151:FreeRTOS-Kernel/tasks.c ****                         }
1152:FreeRTOS-Kernel/tasks.c ****                     }
1153:FreeRTOS-Kernel/tasks.c ****                 }
1154:FreeRTOS-Kernel/tasks.c ****             }
1155:FreeRTOS-Kernel/tasks.c ****         }
1156:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configRUN_MULTIPLE_PRIORITIES == 0 ) */
1157:FreeRTOS-Kernel/tasks.c **** 
1158:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_CORE_AFFINITY == 1 )
1159:FreeRTOS-Kernel/tasks.c ****         {
1160:FreeRTOS-Kernel/tasks.c ****             if( xTaskScheduled == pdTRUE )
1161:FreeRTOS-Kernel/tasks.c ****             {
1162:FreeRTOS-Kernel/tasks.c ****                 if( ( pxPreviousTCB != NULL ) && ( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ p
1163:FreeRTOS-Kernel/tasks.c ****                 {
1164:FreeRTOS-Kernel/tasks.c ****                     /* A ready task was just evicted from this core. See if it can be
1165:FreeRTOS-Kernel/tasks.c ****                      * scheduled on any other core. */
1166:FreeRTOS-Kernel/tasks.c ****                     UBaseType_t uxCoreMap = pxPreviousTCB->uxCoreAffinityMask;
1167:FreeRTOS-Kernel/tasks.c ****                     BaseType_t xLowestPriority = ( BaseType_t ) pxPreviousTCB->uxPriority;
1168:FreeRTOS-Kernel/tasks.c ****                     BaseType_t xLowestPriorityCore = -1;
1169:FreeRTOS-Kernel/tasks.c ****                     BaseType_t x;
1170:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 22


1171:FreeRTOS-Kernel/tasks.c ****                     if( ( pxPreviousTCB->uxTaskAttributes & taskATTRIBUTE_IS_IDLE ) != 0U )
1172:FreeRTOS-Kernel/tasks.c ****                     {
1173:FreeRTOS-Kernel/tasks.c ****                         xLowestPriority = xLowestPriority - 1;
1174:FreeRTOS-Kernel/tasks.c ****                     }
1175:FreeRTOS-Kernel/tasks.c **** 
1176:FreeRTOS-Kernel/tasks.c ****                     if( ( uxCoreMap & ( ( UBaseType_t ) 1U << ( UBaseType_t ) xCoreID ) ) != 0U )
1177:FreeRTOS-Kernel/tasks.c ****                     {
1178:FreeRTOS-Kernel/tasks.c ****                         /* pxPreviousTCB was removed from this core and this core is not excluded
1179:FreeRTOS-Kernel/tasks.c ****                          * from it's core affinity mask.
1180:FreeRTOS-Kernel/tasks.c ****                          *
1181:FreeRTOS-Kernel/tasks.c ****                          * pxPreviousTCB is preempted by the new higher priority task
1182:FreeRTOS-Kernel/tasks.c ****                          * pxCurrentTCBs[ xCoreID ]. When searching a new core for pxPreviousTCB,
1183:FreeRTOS-Kernel/tasks.c ****                          * we do not need to look at the cores on which pxCurrentTCBs[ xCoreID ]
1184:FreeRTOS-Kernel/tasks.c ****                          * is allowed to run. The reason is - when more than one cores are
1185:FreeRTOS-Kernel/tasks.c ****                          * eligible for an incoming task, we preempt the core with the minimum
1186:FreeRTOS-Kernel/tasks.c ****                          * priority task. Because this core (i.e. xCoreID) was preempted for
1187:FreeRTOS-Kernel/tasks.c ****                          * pxCurrentTCBs[ xCoreID ], this means that all the others cores
1188:FreeRTOS-Kernel/tasks.c ****                          * where pxCurrentTCBs[ xCoreID ] can run, are running tasks with priority
1189:FreeRTOS-Kernel/tasks.c ****                          * no lower than pxPreviousTCB's priority. Therefore, the only cores where
1190:FreeRTOS-Kernel/tasks.c ****                          * which can be preempted for pxPreviousTCB are the ones where
1191:FreeRTOS-Kernel/tasks.c ****                          * pxCurrentTCBs[ xCoreID ] is not allowed to run (and obviously,
1192:FreeRTOS-Kernel/tasks.c ****                          * pxPreviousTCB is allowed to run).
1193:FreeRTOS-Kernel/tasks.c ****                          *
1194:FreeRTOS-Kernel/tasks.c ****                          * This is an optimization which reduces the number of cores needed to be
1195:FreeRTOS-Kernel/tasks.c ****                          * searched for pxPreviousTCB to run. */
1196:FreeRTOS-Kernel/tasks.c ****                         uxCoreMap &= ~( pxCurrentTCBs[ xCoreID ]->uxCoreAffinityMask );
1197:FreeRTOS-Kernel/tasks.c ****                     }
1198:FreeRTOS-Kernel/tasks.c ****                     else
1199:FreeRTOS-Kernel/tasks.c ****                     {
1200:FreeRTOS-Kernel/tasks.c ****                         /* pxPreviousTCB's core affinity mask is changed and it is no longer
1201:FreeRTOS-Kernel/tasks.c ****                          * allowed to run on this core. Searching all the cores in pxPreviousTCB's
1202:FreeRTOS-Kernel/tasks.c ****                          * new core affinity mask to find a core on which it can run. */
1203:FreeRTOS-Kernel/tasks.c ****                     }
1204:FreeRTOS-Kernel/tasks.c **** 
1205:FreeRTOS-Kernel/tasks.c ****                     uxCoreMap &= ( ( 1U << configNUMBER_OF_CORES ) - 1U );
1206:FreeRTOS-Kernel/tasks.c **** 
1207:FreeRTOS-Kernel/tasks.c ****                     for( x = ( ( BaseType_t ) configNUMBER_OF_CORES - 1 ); x >= ( BaseType_t ) 0; x
1208:FreeRTOS-Kernel/tasks.c ****                     {
1209:FreeRTOS-Kernel/tasks.c ****                         UBaseType_t uxCore = ( UBaseType_t ) x;
1210:FreeRTOS-Kernel/tasks.c ****                         BaseType_t xTaskPriority;
1211:FreeRTOS-Kernel/tasks.c **** 
1212:FreeRTOS-Kernel/tasks.c ****                         if( ( uxCoreMap & ( ( UBaseType_t ) 1U << uxCore ) ) != 0U )
1213:FreeRTOS-Kernel/tasks.c ****                         {
1214:FreeRTOS-Kernel/tasks.c ****                             xTaskPriority = ( BaseType_t ) pxCurrentTCBs[ uxCore ]->uxPriority;
1215:FreeRTOS-Kernel/tasks.c **** 
1216:FreeRTOS-Kernel/tasks.c ****                             if( ( pxCurrentTCBs[ uxCore ]->uxTaskAttributes & taskATTRIBUTE_IS_IDLE
1217:FreeRTOS-Kernel/tasks.c ****                             {
1218:FreeRTOS-Kernel/tasks.c ****                                 xTaskPriority = xTaskPriority - ( BaseType_t ) 1;
1219:FreeRTOS-Kernel/tasks.c ****                             }
1220:FreeRTOS-Kernel/tasks.c **** 
1221:FreeRTOS-Kernel/tasks.c ****                             uxCoreMap &= ~( ( UBaseType_t ) 1U << uxCore );
1222:FreeRTOS-Kernel/tasks.c **** 
1223:FreeRTOS-Kernel/tasks.c ****                             if( ( xTaskPriority < xLowestPriority ) &&
1224:FreeRTOS-Kernel/tasks.c ****                                 ( taskTASK_IS_RUNNING( pxCurrentTCBs[ uxCore ] ) != pdFALSE ) &&
1225:FreeRTOS-Kernel/tasks.c ****                                 ( xYieldPendings[ uxCore ] == pdFALSE ) )
1226:FreeRTOS-Kernel/tasks.c ****                             {
1227:FreeRTOS-Kernel/tasks.c ****                                 #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 23


1228:FreeRTOS-Kernel/tasks.c ****                                     if( pxCurrentTCBs[ uxCore ]->xPreemptionDisable == pdFALSE )
1229:FreeRTOS-Kernel/tasks.c ****                                 #endif
1230:FreeRTOS-Kernel/tasks.c ****                                 {
1231:FreeRTOS-Kernel/tasks.c ****                                     xLowestPriority = xTaskPriority;
1232:FreeRTOS-Kernel/tasks.c ****                                     xLowestPriorityCore = ( BaseType_t ) uxCore;
1233:FreeRTOS-Kernel/tasks.c ****                                 }
1234:FreeRTOS-Kernel/tasks.c ****                             }
1235:FreeRTOS-Kernel/tasks.c ****                         }
1236:FreeRTOS-Kernel/tasks.c ****                     }
1237:FreeRTOS-Kernel/tasks.c **** 
1238:FreeRTOS-Kernel/tasks.c ****                     if( xLowestPriorityCore >= 0 )
1239:FreeRTOS-Kernel/tasks.c ****                     {
1240:FreeRTOS-Kernel/tasks.c ****                         prvYieldCore( xLowestPriorityCore );
1241:FreeRTOS-Kernel/tasks.c ****                     }
1242:FreeRTOS-Kernel/tasks.c ****                 }
1243:FreeRTOS-Kernel/tasks.c ****             }
1244:FreeRTOS-Kernel/tasks.c ****         }
1245:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) */
1246:FreeRTOS-Kernel/tasks.c ****     }
1247:FreeRTOS-Kernel/tasks.c **** 
1248:FreeRTOS-Kernel/tasks.c **** #endif /* ( configNUMBER_OF_CORES > 1 ) */
1249:FreeRTOS-Kernel/tasks.c **** 
1250:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1251:FreeRTOS-Kernel/tasks.c **** 
1252:FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1253:FreeRTOS-Kernel/tasks.c **** 
1254:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateStaticTask( TaskFunction_t pxTaskCode,
1255:FreeRTOS-Kernel/tasks.c ****                                         const char * const pcName,
1256:FreeRTOS-Kernel/tasks.c ****                                         const configSTACK_DEPTH_TYPE uxStackDepth,
1257:FreeRTOS-Kernel/tasks.c ****                                         void * const pvParameters,
1258:FreeRTOS-Kernel/tasks.c ****                                         UBaseType_t uxPriority,
1259:FreeRTOS-Kernel/tasks.c ****                                         StackType_t * const puxStackBuffer,
1260:FreeRTOS-Kernel/tasks.c ****                                         StaticTask_t * const pxTaskBuffer,
1261:FreeRTOS-Kernel/tasks.c ****                                         TaskHandle_t * const pxCreatedTask )
1262:FreeRTOS-Kernel/tasks.c ****     {
1263:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1264:FreeRTOS-Kernel/tasks.c **** 
1265:FreeRTOS-Kernel/tasks.c ****         configASSERT( puxStackBuffer != NULL );
1266:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
1267:FreeRTOS-Kernel/tasks.c **** 
1268:FreeRTOS-Kernel/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
1269:FreeRTOS-Kernel/tasks.c ****         {
1270:FreeRTOS-Kernel/tasks.c ****             /* Sanity check that the size of the structure used to declare a
1271:FreeRTOS-Kernel/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
1272:FreeRTOS-Kernel/tasks.c ****              * structure. */
1273:FreeRTOS-Kernel/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
1274:FreeRTOS-Kernel/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
1275:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
1276:FreeRTOS-Kernel/tasks.c ****         }
1277:FreeRTOS-Kernel/tasks.c ****         #endif /* configASSERT_DEFINED */
1278:FreeRTOS-Kernel/tasks.c **** 
1279:FreeRTOS-Kernel/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1280:FreeRTOS-Kernel/tasks.c ****         {
1281:FreeRTOS-Kernel/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
1282:FreeRTOS-Kernel/tasks.c ****              * function - use them. */
1283:FreeRTOS-Kernel/tasks.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
1284:FreeRTOS-Kernel/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
ARM GAS  /tmp/ccJw1tyY.s 			page 24


1285:FreeRTOS-Kernel/tasks.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
1286:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer;
1287:FreeRTOS-Kernel/tasks.c ****             ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1288:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1289:FreeRTOS-Kernel/tasks.c **** 
1290:FreeRTOS-Kernel/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1291:FreeRTOS-Kernel/tasks.c ****             {
1292:FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
1293:FreeRTOS-Kernel/tasks.c ****                  * task was created statically in case the task is later deleted. */
1294:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1295:FreeRTOS-Kernel/tasks.c ****             }
1296:FreeRTOS-Kernel/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1297:FreeRTOS-Kernel/tasks.c **** 
1298:FreeRTOS-Kernel/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCre
1299:FreeRTOS-Kernel/tasks.c ****         }
1300:FreeRTOS-Kernel/tasks.c ****         else
1301:FreeRTOS-Kernel/tasks.c ****         {
1302:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = NULL;
1303:FreeRTOS-Kernel/tasks.c ****         }
1304:FreeRTOS-Kernel/tasks.c **** 
1305:FreeRTOS-Kernel/tasks.c ****         return pxNewTCB;
1306:FreeRTOS-Kernel/tasks.c ****     }
1307:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1308:FreeRTOS-Kernel/tasks.c **** 
1309:FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
1310:FreeRTOS-Kernel/tasks.c ****                                     const char * const pcName,
1311:FreeRTOS-Kernel/tasks.c ****                                     const configSTACK_DEPTH_TYPE uxStackDepth,
1312:FreeRTOS-Kernel/tasks.c ****                                     void * const pvParameters,
1313:FreeRTOS-Kernel/tasks.c ****                                     UBaseType_t uxPriority,
1314:FreeRTOS-Kernel/tasks.c ****                                     StackType_t * const puxStackBuffer,
1315:FreeRTOS-Kernel/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
1316:FreeRTOS-Kernel/tasks.c ****     {
1317:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn = NULL;
1318:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1319:FreeRTOS-Kernel/tasks.c **** 
1320:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, p
1321:FreeRTOS-Kernel/tasks.c **** 
1322:FreeRTOS-Kernel/tasks.c ****         pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority,
1323:FreeRTOS-Kernel/tasks.c **** 
1324:FreeRTOS-Kernel/tasks.c ****         if( pxNewTCB != NULL )
1325:FreeRTOS-Kernel/tasks.c ****         {
1326:FreeRTOS-Kernel/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1327:FreeRTOS-Kernel/tasks.c ****             {
1328:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1329:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1330:FreeRTOS-Kernel/tasks.c ****             }
1331:FreeRTOS-Kernel/tasks.c ****             #endif
1332:FreeRTOS-Kernel/tasks.c **** 
1333:FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1334:FreeRTOS-Kernel/tasks.c ****         }
1335:FreeRTOS-Kernel/tasks.c ****         else
1336:FreeRTOS-Kernel/tasks.c ****         {
1337:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:FreeRTOS-Kernel/tasks.c ****         }
1339:FreeRTOS-Kernel/tasks.c **** 
1340:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskCreateStatic( xReturn );
1341:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 25


1342:FreeRTOS-Kernel/tasks.c ****         return xReturn;
1343:FreeRTOS-Kernel/tasks.c ****     }
1344:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1345:FreeRTOS-Kernel/tasks.c **** 
1346:FreeRTOS-Kernel/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1347:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xTaskCreateStaticAffinitySet( TaskFunction_t pxTaskCode,
1348:FreeRTOS-Kernel/tasks.c ****                                                    const char * const pcName,
1349:FreeRTOS-Kernel/tasks.c ****                                                    const configSTACK_DEPTH_TYPE uxStackDepth,
1350:FreeRTOS-Kernel/tasks.c ****                                                    void * const pvParameters,
1351:FreeRTOS-Kernel/tasks.c ****                                                    UBaseType_t uxPriority,
1352:FreeRTOS-Kernel/tasks.c ****                                                    StackType_t * const puxStackBuffer,
1353:FreeRTOS-Kernel/tasks.c ****                                                    StaticTask_t * const pxTaskBuffer,
1354:FreeRTOS-Kernel/tasks.c ****                                                    UBaseType_t uxCoreAffinityMask )
1355:FreeRTOS-Kernel/tasks.c ****         {
1356:FreeRTOS-Kernel/tasks.c ****             TaskHandle_t xReturn = NULL;
1357:FreeRTOS-Kernel/tasks.c ****             TCB_t * pxNewTCB;
1358:FreeRTOS-Kernel/tasks.c **** 
1359:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskCreateStaticAffinitySet( pxTaskCode, pcName, uxStackDepth, pvParameters
1360:FreeRTOS-Kernel/tasks.c **** 
1361:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPrior
1362:FreeRTOS-Kernel/tasks.c **** 
1363:FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
1364:FreeRTOS-Kernel/tasks.c ****             {
1365:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1366:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1367:FreeRTOS-Kernel/tasks.c **** 
1368:FreeRTOS-Kernel/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1369:FreeRTOS-Kernel/tasks.c ****             }
1370:FreeRTOS-Kernel/tasks.c ****             else
1371:FreeRTOS-Kernel/tasks.c ****             {
1372:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1373:FreeRTOS-Kernel/tasks.c ****             }
1374:FreeRTOS-Kernel/tasks.c **** 
1375:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskCreateStaticAffinitySet( xReturn );
1376:FreeRTOS-Kernel/tasks.c **** 
1377:FreeRTOS-Kernel/tasks.c ****             return xReturn;
1378:FreeRTOS-Kernel/tasks.c ****         }
1379:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1380:FreeRTOS-Kernel/tasks.c **** 
1381:FreeRTOS-Kernel/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
1382:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1383:FreeRTOS-Kernel/tasks.c **** 
1384:FreeRTOS-Kernel/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1385:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateRestrictedStaticTask( const TaskParameters_t * const pxTaskDefinition,
1386:FreeRTOS-Kernel/tasks.c ****                                                   TaskHandle_t * const pxCreatedTask )
1387:FreeRTOS-Kernel/tasks.c ****     {
1388:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1389:FreeRTOS-Kernel/tasks.c **** 
1390:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
1391:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
1392:FreeRTOS-Kernel/tasks.c **** 
1393:FreeRTOS-Kernel/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
1394:FreeRTOS-Kernel/tasks.c ****         {
1395:FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
1396:FreeRTOS-Kernel/tasks.c ****              * on the implementation of the port malloc function and whether or
1397:FreeRTOS-Kernel/tasks.c ****              * not static allocation is being used. */
1398:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
ARM GAS  /tmp/ccJw1tyY.s 			page 26


1399:FreeRTOS-Kernel/tasks.c ****             ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1400:FreeRTOS-Kernel/tasks.c **** 
1401:FreeRTOS-Kernel/tasks.c ****             /* Store the stack location in the TCB. */
1402:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
1403:FreeRTOS-Kernel/tasks.c **** 
1404:FreeRTOS-Kernel/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1405:FreeRTOS-Kernel/tasks.c ****             {
1406:FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
1407:FreeRTOS-Kernel/tasks.c ****                  * task was created statically in case the task is later deleted. */
1408:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1409:FreeRTOS-Kernel/tasks.c ****             }
1410:FreeRTOS-Kernel/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1411:FreeRTOS-Kernel/tasks.c **** 
1412:FreeRTOS-Kernel/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
1413:FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->pcName,
1414:FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->usStackDepth,
1415:FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->pvParameters,
1416:FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->uxPriority,
1417:FreeRTOS-Kernel/tasks.c ****                                   pxCreatedTask, pxNewTCB,
1418:FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->xRegions );
1419:FreeRTOS-Kernel/tasks.c ****         }
1420:FreeRTOS-Kernel/tasks.c ****         else
1421:FreeRTOS-Kernel/tasks.c ****         {
1422:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = NULL;
1423:FreeRTOS-Kernel/tasks.c ****         }
1424:FreeRTOS-Kernel/tasks.c **** 
1425:FreeRTOS-Kernel/tasks.c ****         return pxNewTCB;
1426:FreeRTOS-Kernel/tasks.c ****     }
1427:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1428:FreeRTOS-Kernel/tasks.c **** 
1429:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
1430:FreeRTOS-Kernel/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
1431:FreeRTOS-Kernel/tasks.c ****     {
1432:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1433:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
1434:FreeRTOS-Kernel/tasks.c **** 
1435:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskCreateRestrictedStatic( pxTaskDefinition, pxCreatedTask );
1436:FreeRTOS-Kernel/tasks.c **** 
1437:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition != NULL );
1438:FreeRTOS-Kernel/tasks.c **** 
1439:FreeRTOS-Kernel/tasks.c ****         pxNewTCB = prvCreateRestrictedStaticTask( pxTaskDefinition, pxCreatedTask );
1440:FreeRTOS-Kernel/tasks.c **** 
1441:FreeRTOS-Kernel/tasks.c ****         if( pxNewTCB != NULL )
1442:FreeRTOS-Kernel/tasks.c ****         {
1443:FreeRTOS-Kernel/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1444:FreeRTOS-Kernel/tasks.c ****             {
1445:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1446:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1447:FreeRTOS-Kernel/tasks.c ****             }
1448:FreeRTOS-Kernel/tasks.c ****             #endif
1449:FreeRTOS-Kernel/tasks.c **** 
1450:FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1451:FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
1452:FreeRTOS-Kernel/tasks.c ****         }
1453:FreeRTOS-Kernel/tasks.c ****         else
1454:FreeRTOS-Kernel/tasks.c ****         {
1455:FreeRTOS-Kernel/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  /tmp/ccJw1tyY.s 			page 27


1456:FreeRTOS-Kernel/tasks.c ****         }
1457:FreeRTOS-Kernel/tasks.c **** 
1458:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskCreateRestrictedStatic( xReturn );
1459:FreeRTOS-Kernel/tasks.c **** 
1460:FreeRTOS-Kernel/tasks.c ****         return xReturn;
1461:FreeRTOS-Kernel/tasks.c ****     }
1462:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1463:FreeRTOS-Kernel/tasks.c **** 
1464:FreeRTOS-Kernel/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1465:FreeRTOS-Kernel/tasks.c ****         BaseType_t xTaskCreateRestrictedStaticAffinitySet( const TaskParameters_t * const pxTaskDef
1466:FreeRTOS-Kernel/tasks.c ****                                                            UBaseType_t uxCoreAffinityMask,
1467:FreeRTOS-Kernel/tasks.c ****                                                            TaskHandle_t * pxCreatedTask )
1468:FreeRTOS-Kernel/tasks.c ****         {
1469:FreeRTOS-Kernel/tasks.c ****             TCB_t * pxNewTCB;
1470:FreeRTOS-Kernel/tasks.c ****             BaseType_t xReturn;
1471:FreeRTOS-Kernel/tasks.c **** 
1472:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskCreateRestrictedStaticAffinitySet( pxTaskDefinition, uxCoreAffinityMask
1473:FreeRTOS-Kernel/tasks.c **** 
1474:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTaskDefinition != NULL );
1475:FreeRTOS-Kernel/tasks.c **** 
1476:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = prvCreateRestrictedStaticTask( pxTaskDefinition, pxCreatedTask );
1477:FreeRTOS-Kernel/tasks.c **** 
1478:FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
1479:FreeRTOS-Kernel/tasks.c ****             {
1480:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1481:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1482:FreeRTOS-Kernel/tasks.c **** 
1483:FreeRTOS-Kernel/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1484:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
1485:FreeRTOS-Kernel/tasks.c ****             }
1486:FreeRTOS-Kernel/tasks.c ****             else
1487:FreeRTOS-Kernel/tasks.c ****             {
1488:FreeRTOS-Kernel/tasks.c ****                 xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1489:FreeRTOS-Kernel/tasks.c ****             }
1490:FreeRTOS-Kernel/tasks.c **** 
1491:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskCreateRestrictedStaticAffinitySet( xReturn );
1492:FreeRTOS-Kernel/tasks.c **** 
1493:FreeRTOS-Kernel/tasks.c ****             return xReturn;
1494:FreeRTOS-Kernel/tasks.c ****         }
1495:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1496:FreeRTOS-Kernel/tasks.c **** 
1497:FreeRTOS-Kernel/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1498:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1499:FreeRTOS-Kernel/tasks.c **** 
1500:FreeRTOS-Kernel/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
1501:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateRestrictedTask( const TaskParameters_t * const pxTaskDefinition,
1502:FreeRTOS-Kernel/tasks.c ****                                             TaskHandle_t * const pxCreatedTask )
1503:FreeRTOS-Kernel/tasks.c ****     {
1504:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1505:FreeRTOS-Kernel/tasks.c **** 
1506:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
1507:FreeRTOS-Kernel/tasks.c **** 
1508:FreeRTOS-Kernel/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
1509:FreeRTOS-Kernel/tasks.c ****         {
1510:FreeRTOS-Kernel/tasks.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1511:FreeRTOS-Kernel/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1512:FreeRTOS-Kernel/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
ARM GAS  /tmp/ccJw1tyY.s 			page 28


1513:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
1514:FreeRTOS-Kernel/tasks.c **** 
1515:FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
1516:FreeRTOS-Kernel/tasks.c ****             {
1517:FreeRTOS-Kernel/tasks.c ****                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1518:FreeRTOS-Kernel/tasks.c **** 
1519:FreeRTOS-Kernel/tasks.c ****                 /* Store the stack location in the TCB. */
1520:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
1521:FreeRTOS-Kernel/tasks.c **** 
1522:FreeRTOS-Kernel/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1523:FreeRTOS-Kernel/tasks.c ****                 {
1524:FreeRTOS-Kernel/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
1525:FreeRTOS-Kernel/tasks.c ****                      * this task had a statically allocated stack in case it is
1526:FreeRTOS-Kernel/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
1527:FreeRTOS-Kernel/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
1528:FreeRTOS-Kernel/tasks.c ****                 }
1529:FreeRTOS-Kernel/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1530:FreeRTOS-Kernel/tasks.c **** 
1531:FreeRTOS-Kernel/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
1532:FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->pcName,
1533:FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->usStackDepth,
1534:FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->pvParameters,
1535:FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->uxPriority,
1536:FreeRTOS-Kernel/tasks.c ****                                       pxCreatedTask, pxNewTCB,
1537:FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->xRegions );
1538:FreeRTOS-Kernel/tasks.c ****             }
1539:FreeRTOS-Kernel/tasks.c ****         }
1540:FreeRTOS-Kernel/tasks.c ****         else
1541:FreeRTOS-Kernel/tasks.c ****         {
1542:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = NULL;
1543:FreeRTOS-Kernel/tasks.c ****         }
1544:FreeRTOS-Kernel/tasks.c **** 
1545:FreeRTOS-Kernel/tasks.c ****         return pxNewTCB;
1546:FreeRTOS-Kernel/tasks.c ****     }
1547:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1548:FreeRTOS-Kernel/tasks.c **** 
1549:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
1550:FreeRTOS-Kernel/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
1551:FreeRTOS-Kernel/tasks.c ****     {
1552:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1553:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
1554:FreeRTOS-Kernel/tasks.c **** 
1555:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskCreateRestricted( pxTaskDefinition, pxCreatedTask );
1556:FreeRTOS-Kernel/tasks.c **** 
1557:FreeRTOS-Kernel/tasks.c ****         pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
1558:FreeRTOS-Kernel/tasks.c **** 
1559:FreeRTOS-Kernel/tasks.c ****         if( pxNewTCB != NULL )
1560:FreeRTOS-Kernel/tasks.c ****         {
1561:FreeRTOS-Kernel/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1562:FreeRTOS-Kernel/tasks.c ****             {
1563:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1564:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1565:FreeRTOS-Kernel/tasks.c ****             }
1566:FreeRTOS-Kernel/tasks.c ****             #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1567:FreeRTOS-Kernel/tasks.c **** 
1568:FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1569:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 29


1570:FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
1571:FreeRTOS-Kernel/tasks.c ****         }
1572:FreeRTOS-Kernel/tasks.c ****         else
1573:FreeRTOS-Kernel/tasks.c ****         {
1574:FreeRTOS-Kernel/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1575:FreeRTOS-Kernel/tasks.c ****         }
1576:FreeRTOS-Kernel/tasks.c **** 
1577:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskCreateRestricted( xReturn );
1578:FreeRTOS-Kernel/tasks.c **** 
1579:FreeRTOS-Kernel/tasks.c ****         return xReturn;
1580:FreeRTOS-Kernel/tasks.c ****     }
1581:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1582:FreeRTOS-Kernel/tasks.c **** 
1583:FreeRTOS-Kernel/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1584:FreeRTOS-Kernel/tasks.c ****         BaseType_t xTaskCreateRestrictedAffinitySet( const TaskParameters_t * const pxTaskDefinitio
1585:FreeRTOS-Kernel/tasks.c ****                                                      UBaseType_t uxCoreAffinityMask,
1586:FreeRTOS-Kernel/tasks.c ****                                                      TaskHandle_t * pxCreatedTask )
1587:FreeRTOS-Kernel/tasks.c ****         {
1588:FreeRTOS-Kernel/tasks.c ****             TCB_t * pxNewTCB;
1589:FreeRTOS-Kernel/tasks.c ****             BaseType_t xReturn;
1590:FreeRTOS-Kernel/tasks.c **** 
1591:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskCreateRestrictedAffinitySet( pxTaskDefinition, uxCoreAffinityMask, pxCr
1592:FreeRTOS-Kernel/tasks.c **** 
1593:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
1594:FreeRTOS-Kernel/tasks.c **** 
1595:FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
1596:FreeRTOS-Kernel/tasks.c ****             {
1597:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1598:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1599:FreeRTOS-Kernel/tasks.c **** 
1600:FreeRTOS-Kernel/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1601:FreeRTOS-Kernel/tasks.c **** 
1602:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
1603:FreeRTOS-Kernel/tasks.c ****             }
1604:FreeRTOS-Kernel/tasks.c ****             else
1605:FreeRTOS-Kernel/tasks.c ****             {
1606:FreeRTOS-Kernel/tasks.c ****                 xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1607:FreeRTOS-Kernel/tasks.c ****             }
1608:FreeRTOS-Kernel/tasks.c **** 
1609:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskCreateRestrictedAffinitySet( xReturn );
1610:FreeRTOS-Kernel/tasks.c **** 
1611:FreeRTOS-Kernel/tasks.c ****             return xReturn;
1612:FreeRTOS-Kernel/tasks.c ****         }
1613:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1614:FreeRTOS-Kernel/tasks.c **** 
1615:FreeRTOS-Kernel/tasks.c **** 
1616:FreeRTOS-Kernel/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
1617:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1618:FreeRTOS-Kernel/tasks.c **** 
1619:FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
1620:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvCreateTask( TaskFunction_t pxTaskCode,
1621:FreeRTOS-Kernel/tasks.c ****                                   const char * const pcName,
1622:FreeRTOS-Kernel/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
1623:FreeRTOS-Kernel/tasks.c ****                                   void * const pvParameters,
1624:FreeRTOS-Kernel/tasks.c ****                                   UBaseType_t uxPriority,
1625:FreeRTOS-Kernel/tasks.c ****                                   TaskHandle_t * const pxCreatedTask )
1626:FreeRTOS-Kernel/tasks.c ****     {
ARM GAS  /tmp/ccJw1tyY.s 			page 30


1627:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1628:FreeRTOS-Kernel/tasks.c **** 
1629:FreeRTOS-Kernel/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
1630:FreeRTOS-Kernel/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
1631:FreeRTOS-Kernel/tasks.c ****          * the TCB then the stack. */
1632:FreeRTOS-Kernel/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
1633:FreeRTOS-Kernel/tasks.c ****         {
1634:FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
1635:FreeRTOS-Kernel/tasks.c ****              * the implementation of the port malloc function and whether or not static
1636:FreeRTOS-Kernel/tasks.c ****              * allocation is being used. */
1637:FreeRTOS-Kernel/tasks.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1638:FreeRTOS-Kernel/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1639:FreeRTOS-Kernel/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
1640:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
1641:FreeRTOS-Kernel/tasks.c **** 
1642:FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
1643:FreeRTOS-Kernel/tasks.c ****             {
1644:FreeRTOS-Kernel/tasks.c ****                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1645:FreeRTOS-Kernel/tasks.c **** 
1646:FreeRTOS-Kernel/tasks.c ****                 /* Allocate space for the stack used by the task being created.
1647:FreeRTOS-Kernel/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
1648:FreeRTOS-Kernel/tasks.c ****                  * be deleted later if required. */
1649:FreeRTOS-Kernel/tasks.c ****                 /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1650:FreeRTOS-Kernel/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
1651:FreeRTOS-Kernel/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
1652:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) uxStackDept
1653:FreeRTOS-Kernel/tasks.c **** 
1654:FreeRTOS-Kernel/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
1655:FreeRTOS-Kernel/tasks.c ****                 {
1656:FreeRTOS-Kernel/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
1657:FreeRTOS-Kernel/tasks.c ****                     vPortFree( pxNewTCB );
1658:FreeRTOS-Kernel/tasks.c ****                     pxNewTCB = NULL;
1659:FreeRTOS-Kernel/tasks.c ****                 }
1660:FreeRTOS-Kernel/tasks.c ****             }
1661:FreeRTOS-Kernel/tasks.c ****         }
1662:FreeRTOS-Kernel/tasks.c ****         #else /* portSTACK_GROWTH */
1663:FreeRTOS-Kernel/tasks.c ****         {
1664:FreeRTOS-Kernel/tasks.c ****             StackType_t * pxStack;
1665:FreeRTOS-Kernel/tasks.c **** 
1666:FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the stack used by the task being created. */
1667:FreeRTOS-Kernel/tasks.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1668:FreeRTOS-Kernel/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
1669:FreeRTOS-Kernel/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
1670:FreeRTOS-Kernel/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
1671:FreeRTOS-Kernel/tasks.c **** 
1672:FreeRTOS-Kernel/tasks.c ****             if( pxStack != NULL )
1673:FreeRTOS-Kernel/tasks.c ****             {
1674:FreeRTOS-Kernel/tasks.c ****                 /* Allocate space for the TCB. */
1675:FreeRTOS-Kernel/tasks.c ****                 /* MISRA Ref 11.5.1 [Malloc memory assignment] */
1676:FreeRTOS-Kernel/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
1677:FreeRTOS-Kernel/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
1678:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
1679:FreeRTOS-Kernel/tasks.c **** 
1680:FreeRTOS-Kernel/tasks.c ****                 if( pxNewTCB != NULL )
1681:FreeRTOS-Kernel/tasks.c ****                 {
1682:FreeRTOS-Kernel/tasks.c ****                     ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
1683:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 31


1684:FreeRTOS-Kernel/tasks.c ****                     /* Store the stack location in the TCB. */
1685:FreeRTOS-Kernel/tasks.c ****                     pxNewTCB->pxStack = pxStack;
1686:FreeRTOS-Kernel/tasks.c ****                 }
1687:FreeRTOS-Kernel/tasks.c ****                 else
1688:FreeRTOS-Kernel/tasks.c ****                 {
1689:FreeRTOS-Kernel/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
1690:FreeRTOS-Kernel/tasks.c ****                      * it again. */
1691:FreeRTOS-Kernel/tasks.c ****                     vPortFreeStack( pxStack );
1692:FreeRTOS-Kernel/tasks.c ****                 }
1693:FreeRTOS-Kernel/tasks.c ****             }
1694:FreeRTOS-Kernel/tasks.c ****             else
1695:FreeRTOS-Kernel/tasks.c ****             {
1696:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB = NULL;
1697:FreeRTOS-Kernel/tasks.c ****             }
1698:FreeRTOS-Kernel/tasks.c ****         }
1699:FreeRTOS-Kernel/tasks.c ****         #endif /* portSTACK_GROWTH */
1700:FreeRTOS-Kernel/tasks.c **** 
1701:FreeRTOS-Kernel/tasks.c ****         if( pxNewTCB != NULL )
1702:FreeRTOS-Kernel/tasks.c ****         {
1703:FreeRTOS-Kernel/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
1704:FreeRTOS-Kernel/tasks.c ****             {
1705:FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
1706:FreeRTOS-Kernel/tasks.c ****                  * task was created dynamically in case it is later deleted. */
1707:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1708:FreeRTOS-Kernel/tasks.c ****             }
1709:FreeRTOS-Kernel/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
1710:FreeRTOS-Kernel/tasks.c **** 
1711:FreeRTOS-Kernel/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCre
1712:FreeRTOS-Kernel/tasks.c ****         }
1713:FreeRTOS-Kernel/tasks.c **** 
1714:FreeRTOS-Kernel/tasks.c ****         return pxNewTCB;
1715:FreeRTOS-Kernel/tasks.c ****     }
1716:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1717:FreeRTOS-Kernel/tasks.c **** 
1718:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
1719:FreeRTOS-Kernel/tasks.c ****                             const char * const pcName,
1720:FreeRTOS-Kernel/tasks.c ****                             const configSTACK_DEPTH_TYPE uxStackDepth,
1721:FreeRTOS-Kernel/tasks.c ****                             void * const pvParameters,
1722:FreeRTOS-Kernel/tasks.c ****                             UBaseType_t uxPriority,
1723:FreeRTOS-Kernel/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
1724:FreeRTOS-Kernel/tasks.c ****     {
1725:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
1726:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
1727:FreeRTOS-Kernel/tasks.c **** 
1728:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreat
1729:FreeRTOS-Kernel/tasks.c **** 
1730:FreeRTOS-Kernel/tasks.c ****         pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCre
1731:FreeRTOS-Kernel/tasks.c **** 
1732:FreeRTOS-Kernel/tasks.c ****         if( pxNewTCB != NULL )
1733:FreeRTOS-Kernel/tasks.c ****         {
1734:FreeRTOS-Kernel/tasks.c ****             #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1735:FreeRTOS-Kernel/tasks.c ****             {
1736:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1737:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
1738:FreeRTOS-Kernel/tasks.c ****             }
1739:FreeRTOS-Kernel/tasks.c ****             #endif
1740:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 32


1741:FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
1742:FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
1743:FreeRTOS-Kernel/tasks.c ****         }
1744:FreeRTOS-Kernel/tasks.c ****         else
1745:FreeRTOS-Kernel/tasks.c ****         {
1746:FreeRTOS-Kernel/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1747:FreeRTOS-Kernel/tasks.c ****         }
1748:FreeRTOS-Kernel/tasks.c **** 
1749:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskCreate( xReturn );
1750:FreeRTOS-Kernel/tasks.c **** 
1751:FreeRTOS-Kernel/tasks.c ****         return xReturn;
1752:FreeRTOS-Kernel/tasks.c ****     }
1753:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1754:FreeRTOS-Kernel/tasks.c **** 
1755:FreeRTOS-Kernel/tasks.c ****     #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
1756:FreeRTOS-Kernel/tasks.c ****         BaseType_t xTaskCreateAffinitySet( TaskFunction_t pxTaskCode,
1757:FreeRTOS-Kernel/tasks.c ****                                            const char * const pcName,
1758:FreeRTOS-Kernel/tasks.c ****                                            const configSTACK_DEPTH_TYPE uxStackDepth,
1759:FreeRTOS-Kernel/tasks.c ****                                            void * const pvParameters,
1760:FreeRTOS-Kernel/tasks.c ****                                            UBaseType_t uxPriority,
1761:FreeRTOS-Kernel/tasks.c ****                                            UBaseType_t uxCoreAffinityMask,
1762:FreeRTOS-Kernel/tasks.c ****                                            TaskHandle_t * const pxCreatedTask )
1763:FreeRTOS-Kernel/tasks.c ****         {
1764:FreeRTOS-Kernel/tasks.c ****             TCB_t * pxNewTCB;
1765:FreeRTOS-Kernel/tasks.c ****             BaseType_t xReturn;
1766:FreeRTOS-Kernel/tasks.c **** 
1767:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskCreateAffinitySet( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPr
1768:FreeRTOS-Kernel/tasks.c **** 
1769:FreeRTOS-Kernel/tasks.c ****             pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, p
1770:FreeRTOS-Kernel/tasks.c **** 
1771:FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
1772:FreeRTOS-Kernel/tasks.c ****             {
1773:FreeRTOS-Kernel/tasks.c ****                 /* Set the task's affinity before scheduling it. */
1774:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxCoreAffinityMask = uxCoreAffinityMask;
1775:FreeRTOS-Kernel/tasks.c **** 
1776:FreeRTOS-Kernel/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
1777:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
1778:FreeRTOS-Kernel/tasks.c ****             }
1779:FreeRTOS-Kernel/tasks.c ****             else
1780:FreeRTOS-Kernel/tasks.c ****             {
1781:FreeRTOS-Kernel/tasks.c ****                 xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1782:FreeRTOS-Kernel/tasks.c ****             }
1783:FreeRTOS-Kernel/tasks.c **** 
1784:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskCreateAffinitySet( xReturn );
1785:FreeRTOS-Kernel/tasks.c **** 
1786:FreeRTOS-Kernel/tasks.c ****             return xReturn;
1787:FreeRTOS-Kernel/tasks.c ****         }
1788:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
1789:FreeRTOS-Kernel/tasks.c **** 
1790:FreeRTOS-Kernel/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1791:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1792:FreeRTOS-Kernel/tasks.c **** 
1793:FreeRTOS-Kernel/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
1794:FreeRTOS-Kernel/tasks.c ****                                   const char * const pcName,
1795:FreeRTOS-Kernel/tasks.c ****                                   const configSTACK_DEPTH_TYPE uxStackDepth,
1796:FreeRTOS-Kernel/tasks.c ****                                   void * const pvParameters,
1797:FreeRTOS-Kernel/tasks.c ****                                   UBaseType_t uxPriority,
ARM GAS  /tmp/ccJw1tyY.s 			page 33


1798:FreeRTOS-Kernel/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
1799:FreeRTOS-Kernel/tasks.c ****                                   TCB_t * pxNewTCB,
1800:FreeRTOS-Kernel/tasks.c ****                                   const MemoryRegion_t * const xRegions )
1801:FreeRTOS-Kernel/tasks.c **** {
1802:FreeRTOS-Kernel/tasks.c ****     StackType_t * pxTopOfStack;
1803:FreeRTOS-Kernel/tasks.c ****     UBaseType_t x;
1804:FreeRTOS-Kernel/tasks.c **** 
1805:FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1806:FreeRTOS-Kernel/tasks.c ****         /* Should the task be created in privileged mode? */
1807:FreeRTOS-Kernel/tasks.c ****         BaseType_t xRunPrivileged;
1808:FreeRTOS-Kernel/tasks.c **** 
1809:FreeRTOS-Kernel/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
1810:FreeRTOS-Kernel/tasks.c ****         {
1811:FreeRTOS-Kernel/tasks.c ****             xRunPrivileged = pdTRUE;
1812:FreeRTOS-Kernel/tasks.c ****         }
1813:FreeRTOS-Kernel/tasks.c ****         else
1814:FreeRTOS-Kernel/tasks.c ****         {
1815:FreeRTOS-Kernel/tasks.c ****             xRunPrivileged = pdFALSE;
1816:FreeRTOS-Kernel/tasks.c ****         }
1817:FreeRTOS-Kernel/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
1818:FreeRTOS-Kernel/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
1819:FreeRTOS-Kernel/tasks.c **** 
1820:FreeRTOS-Kernel/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
1821:FreeRTOS-Kernel/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
1822:FreeRTOS-Kernel/tasks.c ****     {
1823:FreeRTOS-Kernel/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
1824:FreeRTOS-Kernel/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * s
1825:FreeRTOS-Kernel/tasks.c ****     }
1826:FreeRTOS-Kernel/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
1827:FreeRTOS-Kernel/tasks.c **** 
1828:FreeRTOS-Kernel/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
1829:FreeRTOS-Kernel/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
1830:FreeRTOS-Kernel/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
1831:FreeRTOS-Kernel/tasks.c ****      * by the port. */
1832:FreeRTOS-Kernel/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
1833:FreeRTOS-Kernel/tasks.c ****     {
1834:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
1835:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
1836:FreeRTOS-Kernel/tasks.c **** 
1837:FreeRTOS-Kernel/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
1838:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
1839:FreeRTOS-Kernel/tasks.c **** 
1840:FreeRTOS-Kernel/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
1841:FreeRTOS-Kernel/tasks.c ****         {
1842:FreeRTOS-Kernel/tasks.c ****             /* Also record the stack's high address, which may assist
1843:FreeRTOS-Kernel/tasks.c ****              * debugging. */
1844:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
1845:FreeRTOS-Kernel/tasks.c ****         }
1846:FreeRTOS-Kernel/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
1847:FreeRTOS-Kernel/tasks.c ****     }
1848:FreeRTOS-Kernel/tasks.c ****     #else /* portSTACK_GROWTH */
1849:FreeRTOS-Kernel/tasks.c ****     {
1850:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
1851:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) + portBYTE_
1852:FreeRTOS-Kernel/tasks.c **** 
1853:FreeRTOS-Kernel/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
1854:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
ARM GAS  /tmp/ccJw1tyY.s 			page 34


1855:FreeRTOS-Kernel/tasks.c **** 
1856:FreeRTOS-Kernel/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
1857:FreeRTOS-Kernel/tasks.c ****          * performed. */
1858:FreeRTOS-Kernel/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 
1859:FreeRTOS-Kernel/tasks.c ****     }
1860:FreeRTOS-Kernel/tasks.c ****     #endif /* portSTACK_GROWTH */
1861:FreeRTOS-Kernel/tasks.c **** 
1862:FreeRTOS-Kernel/tasks.c ****     /* Store the task name in the TCB. */
1863:FreeRTOS-Kernel/tasks.c ****     if( pcName != NULL )
1864:FreeRTOS-Kernel/tasks.c ****     {
1865:FreeRTOS-Kernel/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1866:FreeRTOS-Kernel/tasks.c ****         {
1867:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1868:FreeRTOS-Kernel/tasks.c **** 
1869:FreeRTOS-Kernel/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
1870:FreeRTOS-Kernel/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
1871:FreeRTOS-Kernel/tasks.c ****              * string is not accessible (extremely unlikely). */
1872:FreeRTOS-Kernel/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
1873:FreeRTOS-Kernel/tasks.c ****             {
1874:FreeRTOS-Kernel/tasks.c ****                 break;
1875:FreeRTOS-Kernel/tasks.c ****             }
1876:FreeRTOS-Kernel/tasks.c ****             else
1877:FreeRTOS-Kernel/tasks.c ****             {
1878:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1879:FreeRTOS-Kernel/tasks.c ****             }
1880:FreeRTOS-Kernel/tasks.c ****         }
1881:FreeRTOS-Kernel/tasks.c **** 
1882:FreeRTOS-Kernel/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
1883:FreeRTOS-Kernel/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
1884:FreeRTOS-Kernel/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
1885:FreeRTOS-Kernel/tasks.c ****     }
1886:FreeRTOS-Kernel/tasks.c ****     else
1887:FreeRTOS-Kernel/tasks.c ****     {
1888:FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1889:FreeRTOS-Kernel/tasks.c ****     }
1890:FreeRTOS-Kernel/tasks.c **** 
1891:FreeRTOS-Kernel/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
1892:FreeRTOS-Kernel/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
1893:FreeRTOS-Kernel/tasks.c **** 
1894:FreeRTOS-Kernel/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1895:FreeRTOS-Kernel/tasks.c ****     {
1896:FreeRTOS-Kernel/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1897:FreeRTOS-Kernel/tasks.c ****     }
1898:FreeRTOS-Kernel/tasks.c ****     else
1899:FreeRTOS-Kernel/tasks.c ****     {
1900:FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1901:FreeRTOS-Kernel/tasks.c ****     }
1902:FreeRTOS-Kernel/tasks.c **** 
1903:FreeRTOS-Kernel/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
1904:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
1905:FreeRTOS-Kernel/tasks.c ****     {
1906:FreeRTOS-Kernel/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
1907:FreeRTOS-Kernel/tasks.c ****     }
1908:FreeRTOS-Kernel/tasks.c ****     #endif /* configUSE_MUTEXES */
1909:FreeRTOS-Kernel/tasks.c **** 
1910:FreeRTOS-Kernel/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1911:FreeRTOS-Kernel/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  /tmp/ccJw1tyY.s 			page 35


1912:FreeRTOS-Kernel/tasks.c **** 
1913:FreeRTOS-Kernel/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
1914:FreeRTOS-Kernel/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
1915:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1916:FreeRTOS-Kernel/tasks.c **** 
1917:FreeRTOS-Kernel/tasks.c ****     /* Event lists are always in priority order. */
1918:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
1919:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1920:FreeRTOS-Kernel/tasks.c **** 
1921:FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1922:FreeRTOS-Kernel/tasks.c ****     {
1923:FreeRTOS-Kernel/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, uxStac
1924:FreeRTOS-Kernel/tasks.c ****     }
1925:FreeRTOS-Kernel/tasks.c ****     #else
1926:FreeRTOS-Kernel/tasks.c ****     {
1927:FreeRTOS-Kernel/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
1928:FreeRTOS-Kernel/tasks.c ****         ( void ) xRegions;
1929:FreeRTOS-Kernel/tasks.c ****     }
1930:FreeRTOS-Kernel/tasks.c ****     #endif
1931:FreeRTOS-Kernel/tasks.c **** 
1932:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
1933:FreeRTOS-Kernel/tasks.c ****     {
1934:FreeRTOS-Kernel/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
1935:FreeRTOS-Kernel/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
1936:FreeRTOS-Kernel/tasks.c ****     }
1937:FreeRTOS-Kernel/tasks.c ****     #endif
1938:FreeRTOS-Kernel/tasks.c **** 
1939:FreeRTOS-Kernel/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1940:FreeRTOS-Kernel/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1941:FreeRTOS-Kernel/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1942:FreeRTOS-Kernel/tasks.c ****      * the top of stack variable is updated. */
1943:FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1944:FreeRTOS-Kernel/tasks.c ****     {
1945:FreeRTOS-Kernel/tasks.c ****         /* If the port has capability to detect stack overflow,
1946:FreeRTOS-Kernel/tasks.c ****          * pass the stack end address to the stack initialization
1947:FreeRTOS-Kernel/tasks.c ****          * function as well. */
1948:FreeRTOS-Kernel/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1949:FreeRTOS-Kernel/tasks.c ****         {
1950:FreeRTOS-Kernel/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
1951:FreeRTOS-Kernel/tasks.c ****             {
1952:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
1953:FreeRTOS-Kernel/tasks.c ****             }
1954:FreeRTOS-Kernel/tasks.c ****             #else /* portSTACK_GROWTH */
1955:FreeRTOS-Kernel/tasks.c ****             {
1956:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1957:FreeRTOS-Kernel/tasks.c ****             }
1958:FreeRTOS-Kernel/tasks.c ****             #endif /* portSTACK_GROWTH */
1959:FreeRTOS-Kernel/tasks.c ****         }
1960:FreeRTOS-Kernel/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1961:FreeRTOS-Kernel/tasks.c ****         {
1962:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
1963:FreeRTOS-Kernel/tasks.c ****         }
1964:FreeRTOS-Kernel/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1965:FreeRTOS-Kernel/tasks.c ****     }
1966:FreeRTOS-Kernel/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1967:FreeRTOS-Kernel/tasks.c ****     {
1968:FreeRTOS-Kernel/tasks.c ****         /* If the port has capability to detect stack overflow,
ARM GAS  /tmp/ccJw1tyY.s 			page 36


1969:FreeRTOS-Kernel/tasks.c ****          * pass the stack end address to the stack initialization
1970:FreeRTOS-Kernel/tasks.c ****          * function as well. */
1971:FreeRTOS-Kernel/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1972:FreeRTOS-Kernel/tasks.c ****         {
1973:FreeRTOS-Kernel/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
1974:FreeRTOS-Kernel/tasks.c ****             {
1975:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
1976:FreeRTOS-Kernel/tasks.c ****             }
1977:FreeRTOS-Kernel/tasks.c ****             #else /* portSTACK_GROWTH */
1978:FreeRTOS-Kernel/tasks.c ****             {
1979:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1980:FreeRTOS-Kernel/tasks.c ****             }
1981:FreeRTOS-Kernel/tasks.c ****             #endif /* portSTACK_GROWTH */
1982:FreeRTOS-Kernel/tasks.c ****         }
1983:FreeRTOS-Kernel/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1984:FreeRTOS-Kernel/tasks.c ****         {
1985:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1986:FreeRTOS-Kernel/tasks.c ****         }
1987:FreeRTOS-Kernel/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1988:FreeRTOS-Kernel/tasks.c ****     }
1989:FreeRTOS-Kernel/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1990:FreeRTOS-Kernel/tasks.c **** 
1991:FreeRTOS-Kernel/tasks.c ****     /* Initialize task state and task attributes. */
1992:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
1993:FreeRTOS-Kernel/tasks.c ****     {
1994:FreeRTOS-Kernel/tasks.c ****         pxNewTCB->xTaskRunState = taskTASK_NOT_RUNNING;
1995:FreeRTOS-Kernel/tasks.c **** 
1996:FreeRTOS-Kernel/tasks.c ****         /* Is this an idle task? */
1997:FreeRTOS-Kernel/tasks.c ****         if( ( ( TaskFunction_t ) pxTaskCode == ( TaskFunction_t ) prvIdleTask ) || ( ( TaskFunction
1998:FreeRTOS-Kernel/tasks.c ****         {
1999:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
2000:FreeRTOS-Kernel/tasks.c ****         }
2001:FreeRTOS-Kernel/tasks.c ****     }
2002:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
2003:FreeRTOS-Kernel/tasks.c **** 
2004:FreeRTOS-Kernel/tasks.c ****     if( pxCreatedTask != NULL )
2005:FreeRTOS-Kernel/tasks.c ****     {
2006:FreeRTOS-Kernel/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
2007:FreeRTOS-Kernel/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
2008:FreeRTOS-Kernel/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
2009:FreeRTOS-Kernel/tasks.c ****     }
2010:FreeRTOS-Kernel/tasks.c ****     else
2011:FreeRTOS-Kernel/tasks.c ****     {
2012:FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
2013:FreeRTOS-Kernel/tasks.c ****     }
2014:FreeRTOS-Kernel/tasks.c **** }
2015:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2016:FreeRTOS-Kernel/tasks.c **** 
2017:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
2018:FreeRTOS-Kernel/tasks.c **** 
2019:FreeRTOS-Kernel/tasks.c ****     static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
2020:FreeRTOS-Kernel/tasks.c ****     {
2021:FreeRTOS-Kernel/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
2022:FreeRTOS-Kernel/tasks.c ****          * updated. */
2023:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2024:FreeRTOS-Kernel/tasks.c ****         {
2025:FreeRTOS-Kernel/tasks.c ****             uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
ARM GAS  /tmp/ccJw1tyY.s 			page 37


2026:FreeRTOS-Kernel/tasks.c **** 
2027:FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB == NULL )
2028:FreeRTOS-Kernel/tasks.c ****             {
2029:FreeRTOS-Kernel/tasks.c ****                 /* There are no other tasks, or all the other tasks are in
2030:FreeRTOS-Kernel/tasks.c ****                  * the suspended state - make this the current task. */
2031:FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB = pxNewTCB;
2032:FreeRTOS-Kernel/tasks.c **** 
2033:FreeRTOS-Kernel/tasks.c ****                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2034:FreeRTOS-Kernel/tasks.c ****                 {
2035:FreeRTOS-Kernel/tasks.c ****                     /* This is the first task to be created so do the preliminary
2036:FreeRTOS-Kernel/tasks.c ****                      * initialisation required.  We will not recover if this call
2037:FreeRTOS-Kernel/tasks.c ****                      * fails, but we will report the failure. */
2038:FreeRTOS-Kernel/tasks.c ****                     prvInitialiseTaskLists();
2039:FreeRTOS-Kernel/tasks.c ****                 }
2040:FreeRTOS-Kernel/tasks.c ****                 else
2041:FreeRTOS-Kernel/tasks.c ****                 {
2042:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2043:FreeRTOS-Kernel/tasks.c ****                 }
2044:FreeRTOS-Kernel/tasks.c ****             }
2045:FreeRTOS-Kernel/tasks.c ****             else
2046:FreeRTOS-Kernel/tasks.c ****             {
2047:FreeRTOS-Kernel/tasks.c ****                 /* If the scheduler is not already running, make this task the
2048:FreeRTOS-Kernel/tasks.c ****                  * current task if it is the highest priority task to be created
2049:FreeRTOS-Kernel/tasks.c ****                  * so far. */
2050:FreeRTOS-Kernel/tasks.c ****                 if( xSchedulerRunning == pdFALSE )
2051:FreeRTOS-Kernel/tasks.c ****                 {
2052:FreeRTOS-Kernel/tasks.c ****                     if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
2053:FreeRTOS-Kernel/tasks.c ****                     {
2054:FreeRTOS-Kernel/tasks.c ****                         pxCurrentTCB = pxNewTCB;
2055:FreeRTOS-Kernel/tasks.c ****                     }
2056:FreeRTOS-Kernel/tasks.c ****                     else
2057:FreeRTOS-Kernel/tasks.c ****                     {
2058:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2059:FreeRTOS-Kernel/tasks.c ****                     }
2060:FreeRTOS-Kernel/tasks.c ****                 }
2061:FreeRTOS-Kernel/tasks.c ****                 else
2062:FreeRTOS-Kernel/tasks.c ****                 {
2063:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2064:FreeRTOS-Kernel/tasks.c ****                 }
2065:FreeRTOS-Kernel/tasks.c ****             }
2066:FreeRTOS-Kernel/tasks.c **** 
2067:FreeRTOS-Kernel/tasks.c ****             uxTaskNumber++;
2068:FreeRTOS-Kernel/tasks.c **** 
2069:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_TRACE_FACILITY == 1 )
2070:FreeRTOS-Kernel/tasks.c ****             {
2071:FreeRTOS-Kernel/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
2072:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
2073:FreeRTOS-Kernel/tasks.c ****             }
2074:FreeRTOS-Kernel/tasks.c ****             #endif /* configUSE_TRACE_FACILITY */
2075:FreeRTOS-Kernel/tasks.c ****             traceTASK_CREATE( pxNewTCB );
2076:FreeRTOS-Kernel/tasks.c **** 
2077:FreeRTOS-Kernel/tasks.c ****             prvAddTaskToReadyList( pxNewTCB );
2078:FreeRTOS-Kernel/tasks.c **** 
2079:FreeRTOS-Kernel/tasks.c ****             portSETUP_TCB( pxNewTCB );
2080:FreeRTOS-Kernel/tasks.c ****         }
2081:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2082:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 38


2083:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
2084:FreeRTOS-Kernel/tasks.c ****         {
2085:FreeRTOS-Kernel/tasks.c ****             /* If the created task is of a higher priority than the current task
2086:FreeRTOS-Kernel/tasks.c ****              * then it should run now. */
2087:FreeRTOS-Kernel/tasks.c ****             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
2088:FreeRTOS-Kernel/tasks.c ****         }
2089:FreeRTOS-Kernel/tasks.c ****         else
2090:FreeRTOS-Kernel/tasks.c ****         {
2091:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2092:FreeRTOS-Kernel/tasks.c ****         }
2093:FreeRTOS-Kernel/tasks.c ****     }
2094:FreeRTOS-Kernel/tasks.c **** 
2095:FreeRTOS-Kernel/tasks.c **** #else /* #if ( configNUMBER_OF_CORES == 1 ) */
2096:FreeRTOS-Kernel/tasks.c **** 
2097:FreeRTOS-Kernel/tasks.c ****     static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
2098:FreeRTOS-Kernel/tasks.c ****     {
2099:FreeRTOS-Kernel/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
2100:FreeRTOS-Kernel/tasks.c ****          * updated. */
2101:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2102:FreeRTOS-Kernel/tasks.c ****         {
2103:FreeRTOS-Kernel/tasks.c ****             uxCurrentNumberOfTasks++;
2104:FreeRTOS-Kernel/tasks.c **** 
2105:FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning == pdFALSE )
2106:FreeRTOS-Kernel/tasks.c ****             {
2107:FreeRTOS-Kernel/tasks.c ****                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2108:FreeRTOS-Kernel/tasks.c ****                 {
2109:FreeRTOS-Kernel/tasks.c ****                     /* This is the first task to be created so do the preliminary
2110:FreeRTOS-Kernel/tasks.c ****                      * initialisation required.  We will not recover if this call
2111:FreeRTOS-Kernel/tasks.c ****                      * fails, but we will report the failure. */
2112:FreeRTOS-Kernel/tasks.c ****                     prvInitialiseTaskLists();
2113:FreeRTOS-Kernel/tasks.c ****                 }
2114:FreeRTOS-Kernel/tasks.c ****                 else
2115:FreeRTOS-Kernel/tasks.c ****                 {
2116:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2117:FreeRTOS-Kernel/tasks.c ****                 }
2118:FreeRTOS-Kernel/tasks.c **** 
2119:FreeRTOS-Kernel/tasks.c ****                 /* All the cores start with idle tasks before the SMP scheduler
2120:FreeRTOS-Kernel/tasks.c ****                  * is running. Idle tasks are assigned to cores when they are
2121:FreeRTOS-Kernel/tasks.c ****                  * created in prvCreateIdleTasks(). */
2122:FreeRTOS-Kernel/tasks.c ****             }
2123:FreeRTOS-Kernel/tasks.c **** 
2124:FreeRTOS-Kernel/tasks.c ****             uxTaskNumber++;
2125:FreeRTOS-Kernel/tasks.c **** 
2126:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_TRACE_FACILITY == 1 )
2127:FreeRTOS-Kernel/tasks.c ****             {
2128:FreeRTOS-Kernel/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
2129:FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
2130:FreeRTOS-Kernel/tasks.c ****             }
2131:FreeRTOS-Kernel/tasks.c ****             #endif /* configUSE_TRACE_FACILITY */
2132:FreeRTOS-Kernel/tasks.c ****             traceTASK_CREATE( pxNewTCB );
2133:FreeRTOS-Kernel/tasks.c **** 
2134:FreeRTOS-Kernel/tasks.c ****             prvAddTaskToReadyList( pxNewTCB );
2135:FreeRTOS-Kernel/tasks.c **** 
2136:FreeRTOS-Kernel/tasks.c ****             portSETUP_TCB( pxNewTCB );
2137:FreeRTOS-Kernel/tasks.c **** 
2138:FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning != pdFALSE )
2139:FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  /tmp/ccJw1tyY.s 			page 39


2140:FreeRTOS-Kernel/tasks.c ****                 /* If the created task is of a higher priority than another
2141:FreeRTOS-Kernel/tasks.c ****                  * currently running task and preemption is on then it should
2142:FreeRTOS-Kernel/tasks.c ****                  * run now. */
2143:FreeRTOS-Kernel/tasks.c ****                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
2144:FreeRTOS-Kernel/tasks.c ****             }
2145:FreeRTOS-Kernel/tasks.c ****             else
2146:FreeRTOS-Kernel/tasks.c ****             {
2147:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2148:FreeRTOS-Kernel/tasks.c ****             }
2149:FreeRTOS-Kernel/tasks.c ****         }
2150:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2151:FreeRTOS-Kernel/tasks.c ****     }
2152:FreeRTOS-Kernel/tasks.c **** 
2153:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2154:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2155:FreeRTOS-Kernel/tasks.c **** 
2156:FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
2157:FreeRTOS-Kernel/tasks.c **** 
2158:FreeRTOS-Kernel/tasks.c ****     static size_t prvSnprintfReturnValueToCharsWritten( int iSnprintfReturnValue,
2159:FreeRTOS-Kernel/tasks.c ****                                                         size_t n )
2160:FreeRTOS-Kernel/tasks.c ****     {
2161:FreeRTOS-Kernel/tasks.c ****         size_t uxCharsWritten;
2162:FreeRTOS-Kernel/tasks.c **** 
2163:FreeRTOS-Kernel/tasks.c ****         if( iSnprintfReturnValue < 0 )
2164:FreeRTOS-Kernel/tasks.c ****         {
2165:FreeRTOS-Kernel/tasks.c ****             /* Encoding error - Return 0 to indicate that nothing
2166:FreeRTOS-Kernel/tasks.c ****              * was written to the buffer. */
2167:FreeRTOS-Kernel/tasks.c ****             uxCharsWritten = 0;
2168:FreeRTOS-Kernel/tasks.c ****         }
2169:FreeRTOS-Kernel/tasks.c ****         else if( iSnprintfReturnValue >= ( int ) n )
2170:FreeRTOS-Kernel/tasks.c ****         {
2171:FreeRTOS-Kernel/tasks.c ****             /* This is the case when the supplied buffer is not
2172:FreeRTOS-Kernel/tasks.c ****              * large to hold the generated string. Return the
2173:FreeRTOS-Kernel/tasks.c ****              * number of characters actually written without
2174:FreeRTOS-Kernel/tasks.c ****              * counting the terminating NULL character. */
2175:FreeRTOS-Kernel/tasks.c ****             uxCharsWritten = n - 1U;
2176:FreeRTOS-Kernel/tasks.c ****         }
2177:FreeRTOS-Kernel/tasks.c ****         else
2178:FreeRTOS-Kernel/tasks.c ****         {
2179:FreeRTOS-Kernel/tasks.c ****             /* Complete string was written to the buffer. */
2180:FreeRTOS-Kernel/tasks.c ****             uxCharsWritten = ( size_t ) iSnprintfReturnValue;
2181:FreeRTOS-Kernel/tasks.c ****         }
2182:FreeRTOS-Kernel/tasks.c **** 
2183:FreeRTOS-Kernel/tasks.c ****         return uxCharsWritten;
2184:FreeRTOS-Kernel/tasks.c ****     }
2185:FreeRTOS-Kernel/tasks.c **** 
2186:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
2187:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2188:FreeRTOS-Kernel/tasks.c **** 
2189:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2190:FreeRTOS-Kernel/tasks.c **** 
2191:FreeRTOS-Kernel/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
2192:FreeRTOS-Kernel/tasks.c ****     {
2193:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
2194:FreeRTOS-Kernel/tasks.c ****         BaseType_t xDeleteTCBInIdleTask = pdFALSE;
2195:FreeRTOS-Kernel/tasks.c ****         BaseType_t xTaskIsRunningOrYielding;
2196:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 40


2197:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskDelete( xTaskToDelete );
2198:FreeRTOS-Kernel/tasks.c **** 
2199:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2200:FreeRTOS-Kernel/tasks.c ****         {
2201:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the calling task that is
2202:FreeRTOS-Kernel/tasks.c ****              * being deleted. */
2203:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
2204:FreeRTOS-Kernel/tasks.c **** 
2205:FreeRTOS-Kernel/tasks.c ****             /* Remove task from the ready/delayed list. */
2206:FreeRTOS-Kernel/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2207:FreeRTOS-Kernel/tasks.c ****             {
2208:FreeRTOS-Kernel/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2209:FreeRTOS-Kernel/tasks.c ****             }
2210:FreeRTOS-Kernel/tasks.c ****             else
2211:FreeRTOS-Kernel/tasks.c ****             {
2212:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2213:FreeRTOS-Kernel/tasks.c ****             }
2214:FreeRTOS-Kernel/tasks.c **** 
2215:FreeRTOS-Kernel/tasks.c ****             /* Is the task waiting on an event also? */
2216:FreeRTOS-Kernel/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2217:FreeRTOS-Kernel/tasks.c ****             {
2218:FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2219:FreeRTOS-Kernel/tasks.c ****             }
2220:FreeRTOS-Kernel/tasks.c ****             else
2221:FreeRTOS-Kernel/tasks.c ****             {
2222:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2223:FreeRTOS-Kernel/tasks.c ****             }
2224:FreeRTOS-Kernel/tasks.c **** 
2225:FreeRTOS-Kernel/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
2226:FreeRTOS-Kernel/tasks.c ****              * detect that the task lists need re-generating.  This is done before
2227:FreeRTOS-Kernel/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
2228:FreeRTOS-Kernel/tasks.c ****              * not return. */
2229:FreeRTOS-Kernel/tasks.c ****             uxTaskNumber++;
2230:FreeRTOS-Kernel/tasks.c **** 
2231:FreeRTOS-Kernel/tasks.c ****             /* Use temp variable as distinct sequence points for reading volatile
2232:FreeRTOS-Kernel/tasks.c ****              * variables prior to a logical operator to ensure compliance with
2233:FreeRTOS-Kernel/tasks.c ****              * MISRA C 2012 Rule 13.5. */
2234:FreeRTOS-Kernel/tasks.c ****             xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
2235:FreeRTOS-Kernel/tasks.c **** 
2236:FreeRTOS-Kernel/tasks.c ****             /* If the task is running (or yielding), we must add it to the
2237:FreeRTOS-Kernel/tasks.c ****              * termination list so that an idle task can delete it when it is
2238:FreeRTOS-Kernel/tasks.c ****              * no longer running. */
2239:FreeRTOS-Kernel/tasks.c ****             if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
2240:FreeRTOS-Kernel/tasks.c ****             {
2241:FreeRTOS-Kernel/tasks.c ****                 /* A running task or a task which is scheduled to yield is being
2242:FreeRTOS-Kernel/tasks.c ****                  * deleted. This cannot complete when the task is still running
2243:FreeRTOS-Kernel/tasks.c ****                  * on a core, as a context switch to another task is required.
2244:FreeRTOS-Kernel/tasks.c ****                  * Place the task in the termination list. The idle task will check
2245:FreeRTOS-Kernel/tasks.c ****                  * the termination list and free up any memory allocated by the
2246:FreeRTOS-Kernel/tasks.c ****                  * scheduler for the TCB and stack of the deleted task. */
2247:FreeRTOS-Kernel/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
2248:FreeRTOS-Kernel/tasks.c **** 
2249:FreeRTOS-Kernel/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
2250:FreeRTOS-Kernel/tasks.c ****                  * there is a task that has been deleted and that it should therefore
2251:FreeRTOS-Kernel/tasks.c ****                  * check the xTasksWaitingTermination list. */
2252:FreeRTOS-Kernel/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
2253:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 41


2254:FreeRTOS-Kernel/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
2255:FreeRTOS-Kernel/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
2256:FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
2257:FreeRTOS-Kernel/tasks.c **** 
2258:FreeRTOS-Kernel/tasks.c ****                 /* Delete the task TCB in idle task. */
2259:FreeRTOS-Kernel/tasks.c ****                 xDeleteTCBInIdleTask = pdTRUE;
2260:FreeRTOS-Kernel/tasks.c **** 
2261:FreeRTOS-Kernel/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
2262:FreeRTOS-Kernel/tasks.c ****                  * in which Windows specific clean up operations are performed,
2263:FreeRTOS-Kernel/tasks.c ****                  * after which it is not possible to yield away from this task -
2264:FreeRTOS-Kernel/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
2265:FreeRTOS-Kernel/tasks.c ****                  * required. */
2266:FreeRTOS-Kernel/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
2267:FreeRTOS-Kernel/tasks.c ****                     portPRE_TASK_DELETE_HOOK( pxTCB, &( xYieldPendings[ 0 ] ) );
2268:FreeRTOS-Kernel/tasks.c ****                 #else
2269:FreeRTOS-Kernel/tasks.c ****                     portPRE_TASK_DELETE_HOOK( pxTCB, &( xYieldPendings[ pxTCB->xTaskRunState ] ) );
2270:FreeRTOS-Kernel/tasks.c ****                 #endif
2271:FreeRTOS-Kernel/tasks.c **** 
2272:FreeRTOS-Kernel/tasks.c ****                 /* In the case of SMP, it is possible that the task being deleted
2273:FreeRTOS-Kernel/tasks.c ****                  * is running on another core. We must evict the task before
2274:FreeRTOS-Kernel/tasks.c ****                  * exiting the critical section to ensure that the task cannot
2275:FreeRTOS-Kernel/tasks.c ****                  * take an action which puts it back on ready/state/event list,
2276:FreeRTOS-Kernel/tasks.c ****                  * thereby nullifying the delete operation. Once evicted, the
2277:FreeRTOS-Kernel/tasks.c ****                  * task won't be scheduled ever as it will no longer be on the
2278:FreeRTOS-Kernel/tasks.c ****                  * ready list. */
2279:FreeRTOS-Kernel/tasks.c ****                 #if ( configNUMBER_OF_CORES > 1 )
2280:FreeRTOS-Kernel/tasks.c ****                 {
2281:FreeRTOS-Kernel/tasks.c ****                     if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
2282:FreeRTOS-Kernel/tasks.c ****                     {
2283:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->xTaskRunState == ( BaseType_t ) portGET_CORE_ID() )
2284:FreeRTOS-Kernel/tasks.c ****                         {
2285:FreeRTOS-Kernel/tasks.c ****                             configASSERT( uxSchedulerSuspended == 0 );
2286:FreeRTOS-Kernel/tasks.c ****                             taskYIELD_WITHIN_API();
2287:FreeRTOS-Kernel/tasks.c ****                         }
2288:FreeRTOS-Kernel/tasks.c ****                         else
2289:FreeRTOS-Kernel/tasks.c ****                         {
2290:FreeRTOS-Kernel/tasks.c ****                             prvYieldCore( pxTCB->xTaskRunState );
2291:FreeRTOS-Kernel/tasks.c ****                         }
2292:FreeRTOS-Kernel/tasks.c ****                     }
2293:FreeRTOS-Kernel/tasks.c ****                 }
2294:FreeRTOS-Kernel/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
2295:FreeRTOS-Kernel/tasks.c ****             }
2296:FreeRTOS-Kernel/tasks.c ****             else
2297:FreeRTOS-Kernel/tasks.c ****             {
2298:FreeRTOS-Kernel/tasks.c ****                 --uxCurrentNumberOfTasks;
2299:FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
2300:FreeRTOS-Kernel/tasks.c **** 
2301:FreeRTOS-Kernel/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
2302:FreeRTOS-Kernel/tasks.c ****                  * the task that has just been deleted. */
2303:FreeRTOS-Kernel/tasks.c ****                 prvResetNextTaskUnblockTime();
2304:FreeRTOS-Kernel/tasks.c ****             }
2305:FreeRTOS-Kernel/tasks.c ****         }
2306:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2307:FreeRTOS-Kernel/tasks.c **** 
2308:FreeRTOS-Kernel/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
2309:FreeRTOS-Kernel/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
2310:FreeRTOS-Kernel/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
ARM GAS  /tmp/ccJw1tyY.s 			page 42


2311:FreeRTOS-Kernel/tasks.c ****         if( xDeleteTCBInIdleTask != pdTRUE )
2312:FreeRTOS-Kernel/tasks.c ****         {
2313:FreeRTOS-Kernel/tasks.c ****             prvDeleteTCB( pxTCB );
2314:FreeRTOS-Kernel/tasks.c ****         }
2315:FreeRTOS-Kernel/tasks.c **** 
2316:FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
2317:FreeRTOS-Kernel/tasks.c ****          * been deleted. */
2318:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
2319:FreeRTOS-Kernel/tasks.c ****         {
2320:FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning != pdFALSE )
2321:FreeRTOS-Kernel/tasks.c ****             {
2322:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB == pxCurrentTCB )
2323:FreeRTOS-Kernel/tasks.c ****                 {
2324:FreeRTOS-Kernel/tasks.c ****                     configASSERT( uxSchedulerSuspended == 0 );
2325:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_WITHIN_API();
2326:FreeRTOS-Kernel/tasks.c ****                 }
2327:FreeRTOS-Kernel/tasks.c ****                 else
2328:FreeRTOS-Kernel/tasks.c ****                 {
2329:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2330:FreeRTOS-Kernel/tasks.c ****                 }
2331:FreeRTOS-Kernel/tasks.c ****             }
2332:FreeRTOS-Kernel/tasks.c ****         }
2333:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2334:FreeRTOS-Kernel/tasks.c **** 
2335:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskDelete();
2336:FreeRTOS-Kernel/tasks.c ****     }
2337:FreeRTOS-Kernel/tasks.c **** 
2338:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskDelete */
2339:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2340:FreeRTOS-Kernel/tasks.c **** 
2341:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
2342:FreeRTOS-Kernel/tasks.c **** 
2343:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
2344:FreeRTOS-Kernel/tasks.c ****                                 const TickType_t xTimeIncrement )
2345:FreeRTOS-Kernel/tasks.c ****     {
2346:FreeRTOS-Kernel/tasks.c ****         TickType_t xTimeToWake;
2347:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
2348:FreeRTOS-Kernel/tasks.c **** 
2349:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
2350:FreeRTOS-Kernel/tasks.c **** 
2351:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxPreviousWakeTime );
2352:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
2353:FreeRTOS-Kernel/tasks.c **** 
2354:FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
2355:FreeRTOS-Kernel/tasks.c ****         {
2356:FreeRTOS-Kernel/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
2357:FreeRTOS-Kernel/tasks.c ****              * block. */
2358:FreeRTOS-Kernel/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
2359:FreeRTOS-Kernel/tasks.c **** 
2360:FreeRTOS-Kernel/tasks.c ****             configASSERT( uxSchedulerSuspended == 1U );
2361:FreeRTOS-Kernel/tasks.c **** 
2362:FreeRTOS-Kernel/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
2363:FreeRTOS-Kernel/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
2364:FreeRTOS-Kernel/tasks.c **** 
2365:FreeRTOS-Kernel/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
2366:FreeRTOS-Kernel/tasks.c ****             {
2367:FreeRTOS-Kernel/tasks.c ****                 /* The tick count has overflowed since this function was
ARM GAS  /tmp/ccJw1tyY.s 			page 43


2368:FreeRTOS-Kernel/tasks.c ****                  * lasted called.  In this case the only time we should ever
2369:FreeRTOS-Kernel/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
2370:FreeRTOS-Kernel/tasks.c ****                  * and the wake time is greater than the tick time.  When this
2371:FreeRTOS-Kernel/tasks.c ****                  * is the case it is as if neither time had overflowed. */
2372:FreeRTOS-Kernel/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
2373:FreeRTOS-Kernel/tasks.c ****                 {
2374:FreeRTOS-Kernel/tasks.c ****                     xShouldDelay = pdTRUE;
2375:FreeRTOS-Kernel/tasks.c ****                 }
2376:FreeRTOS-Kernel/tasks.c ****                 else
2377:FreeRTOS-Kernel/tasks.c ****                 {
2378:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2379:FreeRTOS-Kernel/tasks.c ****                 }
2380:FreeRTOS-Kernel/tasks.c ****             }
2381:FreeRTOS-Kernel/tasks.c ****             else
2382:FreeRTOS-Kernel/tasks.c ****             {
2383:FreeRTOS-Kernel/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
2384:FreeRTOS-Kernel/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
2385:FreeRTOS-Kernel/tasks.c ****                  * tick time is less than the wake time. */
2386:FreeRTOS-Kernel/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
2387:FreeRTOS-Kernel/tasks.c ****                 {
2388:FreeRTOS-Kernel/tasks.c ****                     xShouldDelay = pdTRUE;
2389:FreeRTOS-Kernel/tasks.c ****                 }
2390:FreeRTOS-Kernel/tasks.c ****                 else
2391:FreeRTOS-Kernel/tasks.c ****                 {
2392:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2393:FreeRTOS-Kernel/tasks.c ****                 }
2394:FreeRTOS-Kernel/tasks.c ****             }
2395:FreeRTOS-Kernel/tasks.c **** 
2396:FreeRTOS-Kernel/tasks.c ****             /* Update the wake time ready for the next call. */
2397:FreeRTOS-Kernel/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
2398:FreeRTOS-Kernel/tasks.c **** 
2399:FreeRTOS-Kernel/tasks.c ****             if( xShouldDelay != pdFALSE )
2400:FreeRTOS-Kernel/tasks.c ****             {
2401:FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
2402:FreeRTOS-Kernel/tasks.c **** 
2403:FreeRTOS-Kernel/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
2404:FreeRTOS-Kernel/tasks.c ****                  * the time to wake, so subtract the current tick count. */
2405:FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
2406:FreeRTOS-Kernel/tasks.c ****             }
2407:FreeRTOS-Kernel/tasks.c ****             else
2408:FreeRTOS-Kernel/tasks.c ****             {
2409:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2410:FreeRTOS-Kernel/tasks.c ****             }
2411:FreeRTOS-Kernel/tasks.c ****         }
2412:FreeRTOS-Kernel/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
2413:FreeRTOS-Kernel/tasks.c **** 
2414:FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
2415:FreeRTOS-Kernel/tasks.c ****          * have put ourselves to sleep. */
2416:FreeRTOS-Kernel/tasks.c ****         if( xAlreadyYielded == pdFALSE )
2417:FreeRTOS-Kernel/tasks.c ****         {
2418:FreeRTOS-Kernel/tasks.c ****             taskYIELD_WITHIN_API();
2419:FreeRTOS-Kernel/tasks.c ****         }
2420:FreeRTOS-Kernel/tasks.c ****         else
2421:FreeRTOS-Kernel/tasks.c ****         {
2422:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2423:FreeRTOS-Kernel/tasks.c ****         }
2424:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 44


2425:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskDelayUntil( xShouldDelay );
2426:FreeRTOS-Kernel/tasks.c **** 
2427:FreeRTOS-Kernel/tasks.c ****         return xShouldDelay;
2428:FreeRTOS-Kernel/tasks.c ****     }
2429:FreeRTOS-Kernel/tasks.c **** 
2430:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
2431:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2432:FreeRTOS-Kernel/tasks.c **** 
2433:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
2434:FreeRTOS-Kernel/tasks.c **** 
2435:FreeRTOS-Kernel/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
2436:FreeRTOS-Kernel/tasks.c ****     {
2437:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
2438:FreeRTOS-Kernel/tasks.c **** 
2439:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskDelay( xTicksToDelay );
2440:FreeRTOS-Kernel/tasks.c **** 
2441:FreeRTOS-Kernel/tasks.c ****         /* A delay time of zero just forces a reschedule. */
2442:FreeRTOS-Kernel/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
2443:FreeRTOS-Kernel/tasks.c ****         {
2444:FreeRTOS-Kernel/tasks.c ****             vTaskSuspendAll();
2445:FreeRTOS-Kernel/tasks.c ****             {
2446:FreeRTOS-Kernel/tasks.c ****                 configASSERT( uxSchedulerSuspended == 1U );
2447:FreeRTOS-Kernel/tasks.c **** 
2448:FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELAY();
2449:FreeRTOS-Kernel/tasks.c **** 
2450:FreeRTOS-Kernel/tasks.c ****                 /* A task that is removed from the event list while the
2451:FreeRTOS-Kernel/tasks.c ****                  * scheduler is suspended will not get placed in the ready
2452:FreeRTOS-Kernel/tasks.c ****                  * list or removed from the blocked list until the scheduler
2453:FreeRTOS-Kernel/tasks.c ****                  * is resumed.
2454:FreeRTOS-Kernel/tasks.c ****                  *
2455:FreeRTOS-Kernel/tasks.c ****                  * This task cannot be in an event list as it is the currently
2456:FreeRTOS-Kernel/tasks.c ****                  * executing task. */
2457:FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
2458:FreeRTOS-Kernel/tasks.c ****             }
2459:FreeRTOS-Kernel/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
2460:FreeRTOS-Kernel/tasks.c ****         }
2461:FreeRTOS-Kernel/tasks.c ****         else
2462:FreeRTOS-Kernel/tasks.c ****         {
2463:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2464:FreeRTOS-Kernel/tasks.c ****         }
2465:FreeRTOS-Kernel/tasks.c **** 
2466:FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
2467:FreeRTOS-Kernel/tasks.c ****          * have put ourselves to sleep. */
2468:FreeRTOS-Kernel/tasks.c ****         if( xAlreadyYielded == pdFALSE )
2469:FreeRTOS-Kernel/tasks.c ****         {
2470:FreeRTOS-Kernel/tasks.c ****             taskYIELD_WITHIN_API();
2471:FreeRTOS-Kernel/tasks.c ****         }
2472:FreeRTOS-Kernel/tasks.c ****         else
2473:FreeRTOS-Kernel/tasks.c ****         {
2474:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2475:FreeRTOS-Kernel/tasks.c ****         }
2476:FreeRTOS-Kernel/tasks.c **** 
2477:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskDelay();
2478:FreeRTOS-Kernel/tasks.c ****     }
2479:FreeRTOS-Kernel/tasks.c **** 
2480:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskDelay */
2481:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJw1tyY.s 			page 45


2482:FreeRTOS-Kernel/tasks.c **** 
2483:FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
2484:FreeRTOS-Kernel/tasks.c **** 
2485:FreeRTOS-Kernel/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
2486:FreeRTOS-Kernel/tasks.c ****     {
2487:FreeRTOS-Kernel/tasks.c ****         eTaskState eReturn;
2488:FreeRTOS-Kernel/tasks.c ****         List_t const * pxStateList;
2489:FreeRTOS-Kernel/tasks.c ****         List_t const * pxEventList;
2490:FreeRTOS-Kernel/tasks.c ****         List_t const * pxDelayedList;
2491:FreeRTOS-Kernel/tasks.c ****         List_t const * pxOverflowedDelayedList;
2492:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
2493:FreeRTOS-Kernel/tasks.c **** 
2494:FreeRTOS-Kernel/tasks.c ****         traceENTER_eTaskGetState( xTask );
2495:FreeRTOS-Kernel/tasks.c **** 
2496:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTCB );
2497:FreeRTOS-Kernel/tasks.c **** 
2498:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
2499:FreeRTOS-Kernel/tasks.c ****             if( pxTCB == pxCurrentTCB )
2500:FreeRTOS-Kernel/tasks.c ****             {
2501:FreeRTOS-Kernel/tasks.c ****                 /* The task calling this function is querying its own state. */
2502:FreeRTOS-Kernel/tasks.c ****                 eReturn = eRunning;
2503:FreeRTOS-Kernel/tasks.c ****             }
2504:FreeRTOS-Kernel/tasks.c ****             else
2505:FreeRTOS-Kernel/tasks.c ****         #endif
2506:FreeRTOS-Kernel/tasks.c ****         {
2507:FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
2508:FreeRTOS-Kernel/tasks.c ****             {
2509:FreeRTOS-Kernel/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
2510:FreeRTOS-Kernel/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
2511:FreeRTOS-Kernel/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
2512:FreeRTOS-Kernel/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
2513:FreeRTOS-Kernel/tasks.c ****             }
2514:FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
2515:FreeRTOS-Kernel/tasks.c **** 
2516:FreeRTOS-Kernel/tasks.c ****             if( pxEventList == &xPendingReadyList )
2517:FreeRTOS-Kernel/tasks.c ****             {
2518:FreeRTOS-Kernel/tasks.c ****                 /* The task has been placed on the pending ready list, so its
2519:FreeRTOS-Kernel/tasks.c ****                  * state is eReady regardless of what list the task's state list
2520:FreeRTOS-Kernel/tasks.c ****                  * item is currently placed on. */
2521:FreeRTOS-Kernel/tasks.c ****                 eReturn = eReady;
2522:FreeRTOS-Kernel/tasks.c ****             }
2523:FreeRTOS-Kernel/tasks.c ****             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList )
2524:FreeRTOS-Kernel/tasks.c ****             {
2525:FreeRTOS-Kernel/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
2526:FreeRTOS-Kernel/tasks.c ****                  * lists. */
2527:FreeRTOS-Kernel/tasks.c ****                 eReturn = eBlocked;
2528:FreeRTOS-Kernel/tasks.c ****             }
2529:FreeRTOS-Kernel/tasks.c **** 
2530:FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2531:FreeRTOS-Kernel/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
2532:FreeRTOS-Kernel/tasks.c ****                 {
2533:FreeRTOS-Kernel/tasks.c ****                     /* The task being queried is referenced from the suspended
2534:FreeRTOS-Kernel/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
2535:FreeRTOS-Kernel/tasks.c ****                      * indefinitely? */
2536:FreeRTOS-Kernel/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
2537:FreeRTOS-Kernel/tasks.c ****                     {
2538:FreeRTOS-Kernel/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 46


2539:FreeRTOS-Kernel/tasks.c ****                         {
2540:FreeRTOS-Kernel/tasks.c ****                             BaseType_t x;
2541:FreeRTOS-Kernel/tasks.c **** 
2542:FreeRTOS-Kernel/tasks.c ****                             /* The task does not appear on the event list item of
2543:FreeRTOS-Kernel/tasks.c ****                              * and of the RTOS objects, but could still be in the
2544:FreeRTOS-Kernel/tasks.c ****                              * blocked state if it is waiting on its notification
2545:FreeRTOS-Kernel/tasks.c ****                              * rather than waiting on an object.  If not, is
2546:FreeRTOS-Kernel/tasks.c ****                              * suspended. */
2547:FreeRTOS-Kernel/tasks.c ****                             eReturn = eSuspended;
2548:FreeRTOS-Kernel/tasks.c **** 
2549:FreeRTOS-Kernel/tasks.c ****                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_A
2550:FreeRTOS-Kernel/tasks.c ****                             {
2551:FreeRTOS-Kernel/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
2552:FreeRTOS-Kernel/tasks.c ****                                 {
2553:FreeRTOS-Kernel/tasks.c ****                                     eReturn = eBlocked;
2554:FreeRTOS-Kernel/tasks.c ****                                     break;
2555:FreeRTOS-Kernel/tasks.c ****                                 }
2556:FreeRTOS-Kernel/tasks.c ****                             }
2557:FreeRTOS-Kernel/tasks.c ****                         }
2558:FreeRTOS-Kernel/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
2559:FreeRTOS-Kernel/tasks.c ****                         {
2560:FreeRTOS-Kernel/tasks.c ****                             eReturn = eSuspended;
2561:FreeRTOS-Kernel/tasks.c ****                         }
2562:FreeRTOS-Kernel/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
2563:FreeRTOS-Kernel/tasks.c ****                     }
2564:FreeRTOS-Kernel/tasks.c ****                     else
2565:FreeRTOS-Kernel/tasks.c ****                     {
2566:FreeRTOS-Kernel/tasks.c ****                         eReturn = eBlocked;
2567:FreeRTOS-Kernel/tasks.c ****                     }
2568:FreeRTOS-Kernel/tasks.c ****                 }
2569:FreeRTOS-Kernel/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
2570:FreeRTOS-Kernel/tasks.c **** 
2571:FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2572:FreeRTOS-Kernel/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
2573:FreeRTOS-Kernel/tasks.c ****                 {
2574:FreeRTOS-Kernel/tasks.c ****                     /* The task being queried is referenced from the deleted
2575:FreeRTOS-Kernel/tasks.c ****                      * tasks list, or it is not referenced from any lists at
2576:FreeRTOS-Kernel/tasks.c ****                      * all. */
2577:FreeRTOS-Kernel/tasks.c ****                     eReturn = eDeleted;
2578:FreeRTOS-Kernel/tasks.c ****                 }
2579:FreeRTOS-Kernel/tasks.c ****             #endif
2580:FreeRTOS-Kernel/tasks.c **** 
2581:FreeRTOS-Kernel/tasks.c ****             else
2582:FreeRTOS-Kernel/tasks.c ****             {
2583:FreeRTOS-Kernel/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
2584:FreeRTOS-Kernel/tasks.c ****                 {
2585:FreeRTOS-Kernel/tasks.c ****                     /* If the task is not in any other state, it must be in the
2586:FreeRTOS-Kernel/tasks.c ****                      * Ready (including pending ready) state. */
2587:FreeRTOS-Kernel/tasks.c ****                     eReturn = eReady;
2588:FreeRTOS-Kernel/tasks.c ****                 }
2589:FreeRTOS-Kernel/tasks.c ****                 #else /* #if ( configNUMBER_OF_CORES == 1 ) */
2590:FreeRTOS-Kernel/tasks.c ****                 {
2591:FreeRTOS-Kernel/tasks.c ****                     if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
2592:FreeRTOS-Kernel/tasks.c ****                     {
2593:FreeRTOS-Kernel/tasks.c ****                         /* Is it actively running on a core? */
2594:FreeRTOS-Kernel/tasks.c ****                         eReturn = eRunning;
2595:FreeRTOS-Kernel/tasks.c ****                     }
ARM GAS  /tmp/ccJw1tyY.s 			page 47


2596:FreeRTOS-Kernel/tasks.c ****                     else
2597:FreeRTOS-Kernel/tasks.c ****                     {
2598:FreeRTOS-Kernel/tasks.c ****                         /* If the task is not in any other state, it must be in the
2599:FreeRTOS-Kernel/tasks.c ****                          * Ready (including pending ready) state. */
2600:FreeRTOS-Kernel/tasks.c ****                         eReturn = eReady;
2601:FreeRTOS-Kernel/tasks.c ****                     }
2602:FreeRTOS-Kernel/tasks.c ****                 }
2603:FreeRTOS-Kernel/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2604:FreeRTOS-Kernel/tasks.c ****             }
2605:FreeRTOS-Kernel/tasks.c ****         }
2606:FreeRTOS-Kernel/tasks.c **** 
2607:FreeRTOS-Kernel/tasks.c ****         traceRETURN_eTaskGetState( eReturn );
2608:FreeRTOS-Kernel/tasks.c **** 
2609:FreeRTOS-Kernel/tasks.c ****         return eReturn;
2610:FreeRTOS-Kernel/tasks.c ****     }
2611:FreeRTOS-Kernel/tasks.c **** 
2612:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_eTaskGetState */
2613:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2614:FreeRTOS-Kernel/tasks.c **** 
2615:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
2616:FreeRTOS-Kernel/tasks.c **** 
2617:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
2618:FreeRTOS-Kernel/tasks.c ****     {
2619:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
2620:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
2621:FreeRTOS-Kernel/tasks.c **** 
2622:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskPriorityGet( xTask );
2623:FreeRTOS-Kernel/tasks.c **** 
2624:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2625:FreeRTOS-Kernel/tasks.c ****         {
2626:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the priority of the task
2627:FreeRTOS-Kernel/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
2628:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2629:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
2630:FreeRTOS-Kernel/tasks.c ****         }
2631:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2632:FreeRTOS-Kernel/tasks.c **** 
2633:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskPriorityGet( uxReturn );
2634:FreeRTOS-Kernel/tasks.c **** 
2635:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
2636:FreeRTOS-Kernel/tasks.c ****     }
2637:FreeRTOS-Kernel/tasks.c **** 
2638:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
2639:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2640:FreeRTOS-Kernel/tasks.c **** 
2641:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
2642:FreeRTOS-Kernel/tasks.c **** 
2643:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
2644:FreeRTOS-Kernel/tasks.c ****     {
2645:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
2646:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
2647:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2648:FreeRTOS-Kernel/tasks.c **** 
2649:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskPriorityGetFromISR( xTask );
2650:FreeRTOS-Kernel/tasks.c **** 
2651:FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
2652:FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
ARM GAS  /tmp/ccJw1tyY.s 			page 48


2653:FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
2654:FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
2655:FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
2656:FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
2657:FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2658:FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
2659:FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
2660:FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
2661:FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
2662:FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
2663:FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
2664:FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
2665:FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
2666:FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2667:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2668:FreeRTOS-Kernel/tasks.c **** 
2669:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
2670:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
2671:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
2672:FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2673:FreeRTOS-Kernel/tasks.c ****         {
2674:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the priority of the calling
2675:FreeRTOS-Kernel/tasks.c ****              * task that is being queried. */
2676:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2677:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
2678:FreeRTOS-Kernel/tasks.c ****         }
2679:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2680:FreeRTOS-Kernel/tasks.c **** 
2681:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskPriorityGetFromISR( uxReturn );
2682:FreeRTOS-Kernel/tasks.c **** 
2683:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
2684:FreeRTOS-Kernel/tasks.c ****     }
2685:FreeRTOS-Kernel/tasks.c **** 
2686:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
2687:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2688:FreeRTOS-Kernel/tasks.c **** 
2689:FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )
2690:FreeRTOS-Kernel/tasks.c **** 
2691:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskBasePriorityGet( const TaskHandle_t xTask )
2692:FreeRTOS-Kernel/tasks.c ****     {
2693:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
2694:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
2695:FreeRTOS-Kernel/tasks.c **** 
2696:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskBasePriorityGet( xTask );
2697:FreeRTOS-Kernel/tasks.c **** 
2698:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2699:FreeRTOS-Kernel/tasks.c ****         {
2700:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the base priority of the task
2701:FreeRTOS-Kernel/tasks.c ****              * that called uxTaskBasePriorityGet() that is being queried. */
2702:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2703:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
2704:FreeRTOS-Kernel/tasks.c ****         }
2705:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2706:FreeRTOS-Kernel/tasks.c **** 
2707:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskBasePriorityGet( uxReturn );
2708:FreeRTOS-Kernel/tasks.c **** 
2709:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
ARM GAS  /tmp/ccJw1tyY.s 			page 49


2710:FreeRTOS-Kernel/tasks.c ****     }
2711:FreeRTOS-Kernel/tasks.c **** 
2712:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) ) */
2713:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2714:FreeRTOS-Kernel/tasks.c **** 
2715:FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )
2716:FreeRTOS-Kernel/tasks.c **** 
2717:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskBasePriorityGetFromISR( const TaskHandle_t xTask )
2718:FreeRTOS-Kernel/tasks.c ****     {
2719:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
2720:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
2721:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2722:FreeRTOS-Kernel/tasks.c **** 
2723:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskBasePriorityGetFromISR( xTask );
2724:FreeRTOS-Kernel/tasks.c **** 
2725:FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
2726:FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
2727:FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
2728:FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
2729:FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
2730:FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
2731:FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2732:FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
2733:FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
2734:FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
2735:FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
2736:FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
2737:FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
2738:FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
2739:FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
2740:FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2741:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2742:FreeRTOS-Kernel/tasks.c **** 
2743:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
2744:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
2745:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
2746:FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2747:FreeRTOS-Kernel/tasks.c ****         {
2748:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the base priority of the calling
2749:FreeRTOS-Kernel/tasks.c ****              * task that is being queried. */
2750:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2751:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
2752:FreeRTOS-Kernel/tasks.c ****         }
2753:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2754:FreeRTOS-Kernel/tasks.c **** 
2755:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskBasePriorityGetFromISR( uxReturn );
2756:FreeRTOS-Kernel/tasks.c **** 
2757:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
2758:FreeRTOS-Kernel/tasks.c ****     }
2759:FreeRTOS-Kernel/tasks.c **** 
2760:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) ) */
2761:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2762:FreeRTOS-Kernel/tasks.c **** 
2763:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
2764:FreeRTOS-Kernel/tasks.c **** 
2765:FreeRTOS-Kernel/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
2766:FreeRTOS-Kernel/tasks.c ****                            UBaseType_t uxNewPriority )
ARM GAS  /tmp/ccJw1tyY.s 			page 50


2767:FreeRTOS-Kernel/tasks.c ****     {
2768:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
2769:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
2770:FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
2771:FreeRTOS-Kernel/tasks.c **** 
2772:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES > 1 )
2773:FreeRTOS-Kernel/tasks.c ****             BaseType_t xYieldForTask = pdFALSE;
2774:FreeRTOS-Kernel/tasks.c ****         #endif
2775:FreeRTOS-Kernel/tasks.c **** 
2776:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPrioritySet( xTask, uxNewPriority );
2777:FreeRTOS-Kernel/tasks.c **** 
2778:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
2779:FreeRTOS-Kernel/tasks.c **** 
2780:FreeRTOS-Kernel/tasks.c ****         /* Ensure the new priority is valid. */
2781:FreeRTOS-Kernel/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2782:FreeRTOS-Kernel/tasks.c ****         {
2783:FreeRTOS-Kernel/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2784:FreeRTOS-Kernel/tasks.c ****         }
2785:FreeRTOS-Kernel/tasks.c ****         else
2786:FreeRTOS-Kernel/tasks.c ****         {
2787:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2788:FreeRTOS-Kernel/tasks.c ****         }
2789:FreeRTOS-Kernel/tasks.c **** 
2790:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2791:FreeRTOS-Kernel/tasks.c ****         {
2792:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the priority of the calling
2793:FreeRTOS-Kernel/tasks.c ****              * task that is being changed. */
2794:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2795:FreeRTOS-Kernel/tasks.c **** 
2796:FreeRTOS-Kernel/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
2797:FreeRTOS-Kernel/tasks.c **** 
2798:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
2799:FreeRTOS-Kernel/tasks.c ****             {
2800:FreeRTOS-Kernel/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
2801:FreeRTOS-Kernel/tasks.c ****             }
2802:FreeRTOS-Kernel/tasks.c ****             #else
2803:FreeRTOS-Kernel/tasks.c ****             {
2804:FreeRTOS-Kernel/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
2805:FreeRTOS-Kernel/tasks.c ****             }
2806:FreeRTOS-Kernel/tasks.c ****             #endif
2807:FreeRTOS-Kernel/tasks.c **** 
2808:FreeRTOS-Kernel/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
2809:FreeRTOS-Kernel/tasks.c ****             {
2810:FreeRTOS-Kernel/tasks.c ****                 /* The priority change may have readied a task of higher
2811:FreeRTOS-Kernel/tasks.c ****                  * priority than a running task. */
2812:FreeRTOS-Kernel/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
2813:FreeRTOS-Kernel/tasks.c ****                 {
2814:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
2815:FreeRTOS-Kernel/tasks.c ****                     {
2816:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB != pxCurrentTCB )
2817:FreeRTOS-Kernel/tasks.c ****                         {
2818:FreeRTOS-Kernel/tasks.c ****                             /* The priority of a task other than the currently
2819:FreeRTOS-Kernel/tasks.c ****                              * running task is being raised.  Is the priority being
2820:FreeRTOS-Kernel/tasks.c ****                              * raised above that of the running task? */
2821:FreeRTOS-Kernel/tasks.c ****                             if( uxNewPriority > pxCurrentTCB->uxPriority )
2822:FreeRTOS-Kernel/tasks.c ****                             {
2823:FreeRTOS-Kernel/tasks.c ****                                 xYieldRequired = pdTRUE;
ARM GAS  /tmp/ccJw1tyY.s 			page 51


2824:FreeRTOS-Kernel/tasks.c ****                             }
2825:FreeRTOS-Kernel/tasks.c ****                             else
2826:FreeRTOS-Kernel/tasks.c ****                             {
2827:FreeRTOS-Kernel/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2828:FreeRTOS-Kernel/tasks.c ****                             }
2829:FreeRTOS-Kernel/tasks.c ****                         }
2830:FreeRTOS-Kernel/tasks.c ****                         else
2831:FreeRTOS-Kernel/tasks.c ****                         {
2832:FreeRTOS-Kernel/tasks.c ****                             /* The priority of the running task is being raised,
2833:FreeRTOS-Kernel/tasks.c ****                              * but the running task must already be the highest
2834:FreeRTOS-Kernel/tasks.c ****                              * priority task able to run so no yield is required. */
2835:FreeRTOS-Kernel/tasks.c ****                         }
2836:FreeRTOS-Kernel/tasks.c ****                     }
2837:FreeRTOS-Kernel/tasks.c ****                     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
2838:FreeRTOS-Kernel/tasks.c ****                     {
2839:FreeRTOS-Kernel/tasks.c ****                         /* The priority of a task is being raised so
2840:FreeRTOS-Kernel/tasks.c ****                          * perform a yield for this task later. */
2841:FreeRTOS-Kernel/tasks.c ****                         xYieldForTask = pdTRUE;
2842:FreeRTOS-Kernel/tasks.c ****                     }
2843:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
2844:FreeRTOS-Kernel/tasks.c ****                 }
2845:FreeRTOS-Kernel/tasks.c ****                 else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
2846:FreeRTOS-Kernel/tasks.c ****                 {
2847:FreeRTOS-Kernel/tasks.c ****                     /* Setting the priority of a running task down means
2848:FreeRTOS-Kernel/tasks.c ****                      * there may now be another task of higher priority that
2849:FreeRTOS-Kernel/tasks.c ****                      * is ready to execute. */
2850:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
2851:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->xPreemptionDisable == pdFALSE )
2852:FreeRTOS-Kernel/tasks.c ****                     #endif
2853:FreeRTOS-Kernel/tasks.c ****                     {
2854:FreeRTOS-Kernel/tasks.c ****                         xYieldRequired = pdTRUE;
2855:FreeRTOS-Kernel/tasks.c ****                     }
2856:FreeRTOS-Kernel/tasks.c ****                 }
2857:FreeRTOS-Kernel/tasks.c ****                 else
2858:FreeRTOS-Kernel/tasks.c ****                 {
2859:FreeRTOS-Kernel/tasks.c ****                     /* Setting the priority of any other task down does not
2860:FreeRTOS-Kernel/tasks.c ****                      * require a yield as the running task must be above the
2861:FreeRTOS-Kernel/tasks.c ****                      * new priority of the task being modified. */
2862:FreeRTOS-Kernel/tasks.c ****                 }
2863:FreeRTOS-Kernel/tasks.c **** 
2864:FreeRTOS-Kernel/tasks.c ****                 /* Remember the ready list the task might be referenced from
2865:FreeRTOS-Kernel/tasks.c ****                  * before its uxPriority member is changed so the
2866:FreeRTOS-Kernel/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
2867:FreeRTOS-Kernel/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
2868:FreeRTOS-Kernel/tasks.c **** 
2869:FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
2870:FreeRTOS-Kernel/tasks.c ****                 {
2871:FreeRTOS-Kernel/tasks.c ****                     /* Only change the priority being used if the task is not
2872:FreeRTOS-Kernel/tasks.c ****                      * currently using an inherited priority or the new priority
2873:FreeRTOS-Kernel/tasks.c ****                      * is bigger than the inherited priority. */
2874:FreeRTOS-Kernel/tasks.c ****                     if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->
2875:FreeRTOS-Kernel/tasks.c ****                     {
2876:FreeRTOS-Kernel/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
2877:FreeRTOS-Kernel/tasks.c ****                     }
2878:FreeRTOS-Kernel/tasks.c ****                     else
2879:FreeRTOS-Kernel/tasks.c ****                     {
2880:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccJw1tyY.s 			page 52


2881:FreeRTOS-Kernel/tasks.c ****                     }
2882:FreeRTOS-Kernel/tasks.c **** 
2883:FreeRTOS-Kernel/tasks.c ****                     /* The base priority gets set whatever. */
2884:FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
2885:FreeRTOS-Kernel/tasks.c ****                 }
2886:FreeRTOS-Kernel/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
2887:FreeRTOS-Kernel/tasks.c ****                 {
2888:FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
2889:FreeRTOS-Kernel/tasks.c ****                 }
2890:FreeRTOS-Kernel/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
2891:FreeRTOS-Kernel/tasks.c **** 
2892:FreeRTOS-Kernel/tasks.c ****                 /* Only reset the event list item value if the value is not
2893:FreeRTOS-Kernel/tasks.c ****                  * being used for anything else. */
2894:FreeRTOS-Kernel/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
2895:FreeRTOS-Kernel/tasks.c ****                 {
2896:FreeRTOS-Kernel/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
2897:FreeRTOS-Kernel/tasks.c ****                 }
2898:FreeRTOS-Kernel/tasks.c ****                 else
2899:FreeRTOS-Kernel/tasks.c ****                 {
2900:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2901:FreeRTOS-Kernel/tasks.c ****                 }
2902:FreeRTOS-Kernel/tasks.c **** 
2903:FreeRTOS-Kernel/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
2904:FreeRTOS-Kernel/tasks.c ****                  * nothing more than change its priority variable. However, if
2905:FreeRTOS-Kernel/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
2906:FreeRTOS-Kernel/tasks.c ****                  * in the list appropriate to its new priority. */
2907:FreeRTOS-Kernel/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
2908:FreeRTOS-Kernel/tasks.c ****                 {
2909:FreeRTOS-Kernel/tasks.c ****                     /* The task is currently in its ready list - remove before
2910:FreeRTOS-Kernel/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
2911:FreeRTOS-Kernel/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
2912:FreeRTOS-Kernel/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2913:FreeRTOS-Kernel/tasks.c ****                     {
2914:FreeRTOS-Kernel/tasks.c ****                         /* It is known that the task is in its ready list so
2915:FreeRTOS-Kernel/tasks.c ****                          * there is no need to check again and the port level
2916:FreeRTOS-Kernel/tasks.c ****                          * reset macro can be called directly. */
2917:FreeRTOS-Kernel/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
2918:FreeRTOS-Kernel/tasks.c ****                     }
2919:FreeRTOS-Kernel/tasks.c ****                     else
2920:FreeRTOS-Kernel/tasks.c ****                     {
2921:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2922:FreeRTOS-Kernel/tasks.c ****                     }
2923:FreeRTOS-Kernel/tasks.c **** 
2924:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2925:FreeRTOS-Kernel/tasks.c ****                 }
2926:FreeRTOS-Kernel/tasks.c ****                 else
2927:FreeRTOS-Kernel/tasks.c ****                 {
2928:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
2929:FreeRTOS-Kernel/tasks.c ****                     {
2930:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2931:FreeRTOS-Kernel/tasks.c ****                     }
2932:FreeRTOS-Kernel/tasks.c ****                     #else
2933:FreeRTOS-Kernel/tasks.c ****                     {
2934:FreeRTOS-Kernel/tasks.c ****                         /* It's possible that xYieldForTask was already set to pdTRUE because
2935:FreeRTOS-Kernel/tasks.c ****                          * its priority is being raised. However, since it is not in a ready list
2936:FreeRTOS-Kernel/tasks.c ****                          * we don't actually need to yield for it. */
2937:FreeRTOS-Kernel/tasks.c ****                         xYieldForTask = pdFALSE;
ARM GAS  /tmp/ccJw1tyY.s 			page 53


2938:FreeRTOS-Kernel/tasks.c ****                     }
2939:FreeRTOS-Kernel/tasks.c ****                     #endif
2940:FreeRTOS-Kernel/tasks.c ****                 }
2941:FreeRTOS-Kernel/tasks.c **** 
2942:FreeRTOS-Kernel/tasks.c ****                 if( xYieldRequired != pdFALSE )
2943:FreeRTOS-Kernel/tasks.c ****                 {
2944:FreeRTOS-Kernel/tasks.c ****                     /* The running task priority is set down. Request the task to yield. */
2945:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
2946:FreeRTOS-Kernel/tasks.c ****                 }
2947:FreeRTOS-Kernel/tasks.c ****                 else
2948:FreeRTOS-Kernel/tasks.c ****                 {
2949:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
2950:FreeRTOS-Kernel/tasks.c ****                         if( xYieldForTask != pdFALSE )
2951:FreeRTOS-Kernel/tasks.c ****                         {
2952:FreeRTOS-Kernel/tasks.c ****                             /* The priority of the task is being raised. If a running
2953:FreeRTOS-Kernel/tasks.c ****                              * task has priority lower than this task, it should yield
2954:FreeRTOS-Kernel/tasks.c ****                              * for this task. */
2955:FreeRTOS-Kernel/tasks.c ****                             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
2956:FreeRTOS-Kernel/tasks.c ****                         }
2957:FreeRTOS-Kernel/tasks.c ****                         else
2958:FreeRTOS-Kernel/tasks.c ****                     #endif /* if ( configNUMBER_OF_CORES > 1 ) */
2959:FreeRTOS-Kernel/tasks.c ****                     {
2960:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2961:FreeRTOS-Kernel/tasks.c ****                     }
2962:FreeRTOS-Kernel/tasks.c ****                 }
2963:FreeRTOS-Kernel/tasks.c **** 
2964:FreeRTOS-Kernel/tasks.c ****                 /* Remove compiler warning about unused variables when the port
2965:FreeRTOS-Kernel/tasks.c ****                  * optimised task selection is not being used. */
2966:FreeRTOS-Kernel/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
2967:FreeRTOS-Kernel/tasks.c ****             }
2968:FreeRTOS-Kernel/tasks.c ****         }
2969:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2970:FreeRTOS-Kernel/tasks.c **** 
2971:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskPrioritySet();
2972:FreeRTOS-Kernel/tasks.c ****     }
2973:FreeRTOS-Kernel/tasks.c **** 
2974:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
2975:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2976:FreeRTOS-Kernel/tasks.c **** 
2977:FreeRTOS-Kernel/tasks.c **** #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
2978:FreeRTOS-Kernel/tasks.c ****     void vTaskCoreAffinitySet( const TaskHandle_t xTask,
2979:FreeRTOS-Kernel/tasks.c ****                                UBaseType_t uxCoreAffinityMask )
2980:FreeRTOS-Kernel/tasks.c ****     {
2981:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
2982:FreeRTOS-Kernel/tasks.c ****         BaseType_t xCoreID;
2983:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxPrevCoreAffinityMask;
2984:FreeRTOS-Kernel/tasks.c **** 
2985:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2986:FreeRTOS-Kernel/tasks.c ****             UBaseType_t uxPrevNotAllowedCores;
2987:FreeRTOS-Kernel/tasks.c ****         #endif
2988:FreeRTOS-Kernel/tasks.c **** 
2989:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskCoreAffinitySet( xTask, uxCoreAffinityMask );
2990:FreeRTOS-Kernel/tasks.c **** 
2991:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2992:FreeRTOS-Kernel/tasks.c ****         {
2993:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
2994:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 54


2995:FreeRTOS-Kernel/tasks.c ****             uxPrevCoreAffinityMask = pxTCB->uxCoreAffinityMask;
2996:FreeRTOS-Kernel/tasks.c ****             pxTCB->uxCoreAffinityMask = uxCoreAffinityMask;
2997:FreeRTOS-Kernel/tasks.c **** 
2998:FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning != pdFALSE )
2999:FreeRTOS-Kernel/tasks.c ****             {
3000:FreeRTOS-Kernel/tasks.c ****                 if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
3001:FreeRTOS-Kernel/tasks.c ****                 {
3002:FreeRTOS-Kernel/tasks.c ****                     xCoreID = ( BaseType_t ) pxTCB->xTaskRunState;
3003:FreeRTOS-Kernel/tasks.c **** 
3004:FreeRTOS-Kernel/tasks.c ****                     /* If the task can no longer run on the core it was running,
3005:FreeRTOS-Kernel/tasks.c ****                      * request the core to yield. */
3006:FreeRTOS-Kernel/tasks.c ****                     if( ( uxCoreAffinityMask & ( ( UBaseType_t ) 1U << ( UBaseType_t ) xCoreID ) ) 
3007:FreeRTOS-Kernel/tasks.c ****                     {
3008:FreeRTOS-Kernel/tasks.c ****                         prvYieldCore( xCoreID );
3009:FreeRTOS-Kernel/tasks.c ****                     }
3010:FreeRTOS-Kernel/tasks.c ****                 }
3011:FreeRTOS-Kernel/tasks.c ****                 else
3012:FreeRTOS-Kernel/tasks.c ****                 {
3013:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
3014:FreeRTOS-Kernel/tasks.c ****                     {
3015:FreeRTOS-Kernel/tasks.c ****                         /* Calculate the cores on which this task was not allowed to
3016:FreeRTOS-Kernel/tasks.c ****                          * run previously. */
3017:FreeRTOS-Kernel/tasks.c ****                         uxPrevNotAllowedCores = ( ~uxPrevCoreAffinityMask ) & ( ( 1U << configNUMBE
3018:FreeRTOS-Kernel/tasks.c **** 
3019:FreeRTOS-Kernel/tasks.c ****                         /* Does the new core mask enables this task to run on any of the
3020:FreeRTOS-Kernel/tasks.c ****                          * previously not allowed cores? If yes, check if this task can be
3021:FreeRTOS-Kernel/tasks.c ****                          * scheduled on any of those cores. */
3022:FreeRTOS-Kernel/tasks.c ****                         if( ( uxPrevNotAllowedCores & uxCoreAffinityMask ) != 0U )
3023:FreeRTOS-Kernel/tasks.c ****                         {
3024:FreeRTOS-Kernel/tasks.c ****                             prvYieldForTask( pxTCB );
3025:FreeRTOS-Kernel/tasks.c ****                         }
3026:FreeRTOS-Kernel/tasks.c ****                     }
3027:FreeRTOS-Kernel/tasks.c ****                     #else /* #if( configUSE_PREEMPTION == 1 ) */
3028:FreeRTOS-Kernel/tasks.c ****                     {
3029:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3030:FreeRTOS-Kernel/tasks.c ****                     }
3031:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if( configUSE_PREEMPTION == 1 ) */
3032:FreeRTOS-Kernel/tasks.c ****                 }
3033:FreeRTOS-Kernel/tasks.c ****             }
3034:FreeRTOS-Kernel/tasks.c ****         }
3035:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
3036:FreeRTOS-Kernel/tasks.c **** 
3037:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskCoreAffinitySet();
3038:FreeRTOS-Kernel/tasks.c ****     }
3039:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
3040:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3041:FreeRTOS-Kernel/tasks.c **** 
3042:FreeRTOS-Kernel/tasks.c **** #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) )
3043:FreeRTOS-Kernel/tasks.c ****     UBaseType_t vTaskCoreAffinityGet( ConstTaskHandle_t xTask )
3044:FreeRTOS-Kernel/tasks.c ****     {
3045:FreeRTOS-Kernel/tasks.c ****         const TCB_t * pxTCB;
3046:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCoreAffinityMask;
3047:FreeRTOS-Kernel/tasks.c **** 
3048:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskCoreAffinityGet( xTask );
3049:FreeRTOS-Kernel/tasks.c **** 
3050:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
3051:FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  /tmp/ccJw1tyY.s 			page 55


3052:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
3053:FreeRTOS-Kernel/tasks.c ****             uxCoreAffinityMask = pxTCB->uxCoreAffinityMask;
3054:FreeRTOS-Kernel/tasks.c ****         }
3055:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
3056:FreeRTOS-Kernel/tasks.c **** 
3057:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskCoreAffinityGet( uxCoreAffinityMask );
3058:FreeRTOS-Kernel/tasks.c **** 
3059:FreeRTOS-Kernel/tasks.c ****         return uxCoreAffinityMask;
3060:FreeRTOS-Kernel/tasks.c ****     }
3061:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
3062:FreeRTOS-Kernel/tasks.c **** 
3063:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3064:FreeRTOS-Kernel/tasks.c **** 
3065:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
3066:FreeRTOS-Kernel/tasks.c **** 
3067:FreeRTOS-Kernel/tasks.c ****     void vTaskPreemptionDisable( const TaskHandle_t xTask )
3068:FreeRTOS-Kernel/tasks.c ****     {
3069:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3070:FreeRTOS-Kernel/tasks.c **** 
3071:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPreemptionDisable( xTask );
3072:FreeRTOS-Kernel/tasks.c **** 
3073:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
3074:FreeRTOS-Kernel/tasks.c ****         {
3075:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
3076:FreeRTOS-Kernel/tasks.c **** 
3077:FreeRTOS-Kernel/tasks.c ****             pxTCB->xPreemptionDisable = pdTRUE;
3078:FreeRTOS-Kernel/tasks.c ****         }
3079:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
3080:FreeRTOS-Kernel/tasks.c **** 
3081:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskPreemptionDisable();
3082:FreeRTOS-Kernel/tasks.c ****     }
3083:FreeRTOS-Kernel/tasks.c **** 
3084:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 ) */
3085:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3086:FreeRTOS-Kernel/tasks.c **** 
3087:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
3088:FreeRTOS-Kernel/tasks.c **** 
3089:FreeRTOS-Kernel/tasks.c ****     void vTaskPreemptionEnable( const TaskHandle_t xTask )
3090:FreeRTOS-Kernel/tasks.c ****     {
3091:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3092:FreeRTOS-Kernel/tasks.c ****         BaseType_t xCoreID;
3093:FreeRTOS-Kernel/tasks.c **** 
3094:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPreemptionEnable( xTask );
3095:FreeRTOS-Kernel/tasks.c **** 
3096:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
3097:FreeRTOS-Kernel/tasks.c ****         {
3098:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
3099:FreeRTOS-Kernel/tasks.c **** 
3100:FreeRTOS-Kernel/tasks.c ****             pxTCB->xPreemptionDisable = pdFALSE;
3101:FreeRTOS-Kernel/tasks.c **** 
3102:FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning != pdFALSE )
3103:FreeRTOS-Kernel/tasks.c ****             {
3104:FreeRTOS-Kernel/tasks.c ****                 if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
3105:FreeRTOS-Kernel/tasks.c ****                 {
3106:FreeRTOS-Kernel/tasks.c ****                     xCoreID = ( BaseType_t ) pxTCB->xTaskRunState;
3107:FreeRTOS-Kernel/tasks.c ****                     prvYieldCore( xCoreID );
3108:FreeRTOS-Kernel/tasks.c ****                 }
ARM GAS  /tmp/ccJw1tyY.s 			page 56


3109:FreeRTOS-Kernel/tasks.c ****             }
3110:FreeRTOS-Kernel/tasks.c ****         }
3111:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
3112:FreeRTOS-Kernel/tasks.c **** 
3113:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskPreemptionEnable();
3114:FreeRTOS-Kernel/tasks.c ****     }
3115:FreeRTOS-Kernel/tasks.c **** 
3116:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 ) */
3117:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3118:FreeRTOS-Kernel/tasks.c **** 
3119:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
3120:FreeRTOS-Kernel/tasks.c **** 
3121:FreeRTOS-Kernel/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
3122:FreeRTOS-Kernel/tasks.c ****     {
3123:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3124:FreeRTOS-Kernel/tasks.c **** 
3125:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSuspend( xTaskToSuspend );
3126:FreeRTOS-Kernel/tasks.c **** 
3127:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
3128:FreeRTOS-Kernel/tasks.c ****         {
3129:FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the running task that is
3130:FreeRTOS-Kernel/tasks.c ****              * being suspended. */
3131:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
3132:FreeRTOS-Kernel/tasks.c **** 
3133:FreeRTOS-Kernel/tasks.c ****             traceTASK_SUSPEND( pxTCB );
3134:FreeRTOS-Kernel/tasks.c **** 
3135:FreeRTOS-Kernel/tasks.c ****             /* Remove task from the ready/delayed list and place in the
3136:FreeRTOS-Kernel/tasks.c ****              * suspended list. */
3137:FreeRTOS-Kernel/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3138:FreeRTOS-Kernel/tasks.c ****             {
3139:FreeRTOS-Kernel/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3140:FreeRTOS-Kernel/tasks.c ****             }
3141:FreeRTOS-Kernel/tasks.c ****             else
3142:FreeRTOS-Kernel/tasks.c ****             {
3143:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3144:FreeRTOS-Kernel/tasks.c ****             }
3145:FreeRTOS-Kernel/tasks.c **** 
3146:FreeRTOS-Kernel/tasks.c ****             /* Is the task waiting on an event also? */
3147:FreeRTOS-Kernel/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3148:FreeRTOS-Kernel/tasks.c ****             {
3149:FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
3150:FreeRTOS-Kernel/tasks.c ****             }
3151:FreeRTOS-Kernel/tasks.c ****             else
3152:FreeRTOS-Kernel/tasks.c ****             {
3153:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3154:FreeRTOS-Kernel/tasks.c ****             }
3155:FreeRTOS-Kernel/tasks.c **** 
3156:FreeRTOS-Kernel/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
3157:FreeRTOS-Kernel/tasks.c **** 
3158:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
3159:FreeRTOS-Kernel/tasks.c ****             {
3160:FreeRTOS-Kernel/tasks.c ****                 BaseType_t x;
3161:FreeRTOS-Kernel/tasks.c **** 
3162:FreeRTOS-Kernel/tasks.c ****                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES
3163:FreeRTOS-Kernel/tasks.c ****                 {
3164:FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
3165:FreeRTOS-Kernel/tasks.c ****                     {
ARM GAS  /tmp/ccJw1tyY.s 			page 57


3166:FreeRTOS-Kernel/tasks.c ****                         /* The task was blocked to wait for a notification, but is
3167:FreeRTOS-Kernel/tasks.c ****                          * now suspended, so no notification was received. */
3168:FreeRTOS-Kernel/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
3169:FreeRTOS-Kernel/tasks.c ****                     }
3170:FreeRTOS-Kernel/tasks.c ****                 }
3171:FreeRTOS-Kernel/tasks.c ****             }
3172:FreeRTOS-Kernel/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
3173:FreeRTOS-Kernel/tasks.c **** 
3174:FreeRTOS-Kernel/tasks.c ****             /* In the case of SMP, it is possible that the task being suspended
3175:FreeRTOS-Kernel/tasks.c ****              * is running on another core. We must evict the task before
3176:FreeRTOS-Kernel/tasks.c ****              * exiting the critical section to ensure that the task cannot
3177:FreeRTOS-Kernel/tasks.c ****              * take an action which puts it back on ready/state/event list,
3178:FreeRTOS-Kernel/tasks.c ****              * thereby nullifying the suspend operation. Once evicted, the
3179:FreeRTOS-Kernel/tasks.c ****              * task won't be scheduled before it is resumed as it will no longer
3180:FreeRTOS-Kernel/tasks.c ****              * be on the ready list. */
3181:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES > 1 )
3182:FreeRTOS-Kernel/tasks.c ****             {
3183:FreeRTOS-Kernel/tasks.c ****                 if( xSchedulerRunning != pdFALSE )
3184:FreeRTOS-Kernel/tasks.c ****                 {
3185:FreeRTOS-Kernel/tasks.c ****                     /* Reset the next expected unblock time in case it referred to the
3186:FreeRTOS-Kernel/tasks.c ****                      * task that is now in the Suspended state. */
3187:FreeRTOS-Kernel/tasks.c ****                     prvResetNextTaskUnblockTime();
3188:FreeRTOS-Kernel/tasks.c **** 
3189:FreeRTOS-Kernel/tasks.c ****                     if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
3190:FreeRTOS-Kernel/tasks.c ****                     {
3191:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->xTaskRunState == ( BaseType_t ) portGET_CORE_ID() )
3192:FreeRTOS-Kernel/tasks.c ****                         {
3193:FreeRTOS-Kernel/tasks.c ****                             /* The current task has just been suspended. */
3194:FreeRTOS-Kernel/tasks.c ****                             configASSERT( uxSchedulerSuspended == 0 );
3195:FreeRTOS-Kernel/tasks.c ****                             vTaskYieldWithinAPI();
3196:FreeRTOS-Kernel/tasks.c ****                         }
3197:FreeRTOS-Kernel/tasks.c ****                         else
3198:FreeRTOS-Kernel/tasks.c ****                         {
3199:FreeRTOS-Kernel/tasks.c ****                             prvYieldCore( pxTCB->xTaskRunState );
3200:FreeRTOS-Kernel/tasks.c ****                         }
3201:FreeRTOS-Kernel/tasks.c ****                     }
3202:FreeRTOS-Kernel/tasks.c ****                     else
3203:FreeRTOS-Kernel/tasks.c ****                     {
3204:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3205:FreeRTOS-Kernel/tasks.c ****                     }
3206:FreeRTOS-Kernel/tasks.c ****                 }
3207:FreeRTOS-Kernel/tasks.c ****                 else
3208:FreeRTOS-Kernel/tasks.c ****                 {
3209:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3210:FreeRTOS-Kernel/tasks.c ****                 }
3211:FreeRTOS-Kernel/tasks.c ****             }
3212:FreeRTOS-Kernel/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
3213:FreeRTOS-Kernel/tasks.c ****         }
3214:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
3215:FreeRTOS-Kernel/tasks.c **** 
3216:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
3217:FreeRTOS-Kernel/tasks.c ****         {
3218:FreeRTOS-Kernel/tasks.c ****             UBaseType_t uxCurrentListLength;
3219:FreeRTOS-Kernel/tasks.c **** 
3220:FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning != pdFALSE )
3221:FreeRTOS-Kernel/tasks.c ****             {
3222:FreeRTOS-Kernel/tasks.c ****                 /* Reset the next expected unblock time in case it referred to the
ARM GAS  /tmp/ccJw1tyY.s 			page 58


3223:FreeRTOS-Kernel/tasks.c ****                  * task that is now in the Suspended state. */
3224:FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
3225:FreeRTOS-Kernel/tasks.c ****                 {
3226:FreeRTOS-Kernel/tasks.c ****                     prvResetNextTaskUnblockTime();
3227:FreeRTOS-Kernel/tasks.c ****                 }
3228:FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
3229:FreeRTOS-Kernel/tasks.c ****             }
3230:FreeRTOS-Kernel/tasks.c ****             else
3231:FreeRTOS-Kernel/tasks.c ****             {
3232:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3233:FreeRTOS-Kernel/tasks.c ****             }
3234:FreeRTOS-Kernel/tasks.c **** 
3235:FreeRTOS-Kernel/tasks.c ****             if( pxTCB == pxCurrentTCB )
3236:FreeRTOS-Kernel/tasks.c ****             {
3237:FreeRTOS-Kernel/tasks.c ****                 if( xSchedulerRunning != pdFALSE )
3238:FreeRTOS-Kernel/tasks.c ****                 {
3239:FreeRTOS-Kernel/tasks.c ****                     /* The current task has just been suspended. */
3240:FreeRTOS-Kernel/tasks.c ****                     configASSERT( uxSchedulerSuspended == 0 );
3241:FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
3242:FreeRTOS-Kernel/tasks.c ****                 }
3243:FreeRTOS-Kernel/tasks.c ****                 else
3244:FreeRTOS-Kernel/tasks.c ****                 {
3245:FreeRTOS-Kernel/tasks.c ****                     /* The scheduler is not running, but the task that was pointed
3246:FreeRTOS-Kernel/tasks.c ****                      * to by pxCurrentTCB has just been suspended and pxCurrentTCB
3247:FreeRTOS-Kernel/tasks.c ****                      * must be adjusted to point to a different task. */
3248:FreeRTOS-Kernel/tasks.c **** 
3249:FreeRTOS-Kernel/tasks.c ****                     /* Use a temp variable as a distinct sequence point for reading
3250:FreeRTOS-Kernel/tasks.c ****                      * volatile variables prior to a comparison to ensure compliance
3251:FreeRTOS-Kernel/tasks.c ****                      * with MISRA C 2012 Rule 13.2. */
3252:FreeRTOS-Kernel/tasks.c ****                     uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
3253:FreeRTOS-Kernel/tasks.c **** 
3254:FreeRTOS-Kernel/tasks.c ****                     if( uxCurrentListLength == uxCurrentNumberOfTasks )
3255:FreeRTOS-Kernel/tasks.c ****                     {
3256:FreeRTOS-Kernel/tasks.c ****                         /* No other tasks are ready, so set pxCurrentTCB back to
3257:FreeRTOS-Kernel/tasks.c ****                          * NULL so when the next task is created pxCurrentTCB will
3258:FreeRTOS-Kernel/tasks.c ****                          * be set to point to it no matter what its relative priority
3259:FreeRTOS-Kernel/tasks.c ****                          * is. */
3260:FreeRTOS-Kernel/tasks.c ****                         pxCurrentTCB = NULL;
3261:FreeRTOS-Kernel/tasks.c ****                     }
3262:FreeRTOS-Kernel/tasks.c ****                     else
3263:FreeRTOS-Kernel/tasks.c ****                     {
3264:FreeRTOS-Kernel/tasks.c ****                         vTaskSwitchContext();
3265:FreeRTOS-Kernel/tasks.c ****                     }
3266:FreeRTOS-Kernel/tasks.c ****                 }
3267:FreeRTOS-Kernel/tasks.c ****             }
3268:FreeRTOS-Kernel/tasks.c ****             else
3269:FreeRTOS-Kernel/tasks.c ****             {
3270:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3271:FreeRTOS-Kernel/tasks.c ****             }
3272:FreeRTOS-Kernel/tasks.c ****         }
3273:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
3274:FreeRTOS-Kernel/tasks.c **** 
3275:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskSuspend();
3276:FreeRTOS-Kernel/tasks.c ****     }
3277:FreeRTOS-Kernel/tasks.c **** 
3278:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
3279:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJw1tyY.s 			page 59


3280:FreeRTOS-Kernel/tasks.c **** 
3281:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
3282:FreeRTOS-Kernel/tasks.c **** 
3283:FreeRTOS-Kernel/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
3284:FreeRTOS-Kernel/tasks.c ****     {
  29              		.loc 1 3284 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
3285:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
  34              		.loc 1 3285 9 view .LVU1
3286:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
  35              		.loc 1 3286 9 view .LVU2
3287:FreeRTOS-Kernel/tasks.c **** 
3288:FreeRTOS-Kernel/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
3289:FreeRTOS-Kernel/tasks.c ****          * section. */
3290:FreeRTOS-Kernel/tasks.c **** 
3291:FreeRTOS-Kernel/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
3292:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTask );
  36              		.loc 1 3292 9 view .LVU3
  37 0000 0346     		mov	r3, r0
  38 0002 28B1     		cbz	r0, .L11
  39              		.loc 1 3292 30 discriminator 2 view .LVU4
3293:FreeRTOS-Kernel/tasks.c **** 
3294:FreeRTOS-Kernel/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
3295:FreeRTOS-Kernel/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  40              		.loc 1 3295 9 discriminator 2 view .LVU5
  41              		.loc 1 3295 13 is_stmt 0 discriminator 2 view .LVU6
  42 0004 4169     		ldr	r1, [r0, #20]
  43              		.loc 1 3295 11 discriminator 2 view .LVU7
  44 0006 134A     		ldr	r2, .L13
  45 0008 9142     		cmp	r1, r2
  46 000a 0AD0     		beq	.L12
3285:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
  47              		.loc 1 3285 20 view .LVU8
  48 000c 0020     		movs	r0, #0
  49              	.LVL1:
3285:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
  50              		.loc 1 3285 20 view .LVU9
  51 000e 7047     		bx	lr
  52              	.LVL2:
  53              	.L11:
3292:FreeRTOS-Kernel/tasks.c **** 
  54              		.loc 1 3292 9 is_stmt 1 view .LVU10
  55              	.LBB173:
  56              	.LBI173:
  57              		.file 2 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
ARM GAS  /tmp/ccJw1tyY.s 			page 60


  10:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
ARM GAS  /tmp/ccJw1tyY.s 			page 61


  67:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
  85:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
ARM GAS  /tmp/ccJw1tyY.s 			page 62


 124:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/ccJw1tyY.s 			page 63


 181:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  58              		.loc 2 213 30 view .LVU11
  59              	.LBB174:
 214:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
  60              		.loc 2 215 5 view .LVU12
 216:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
  61              		.loc 2 217 5 view .LVU13
  62              		.syntax unified
  63              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
  64 0010 4FF05003 		   mov r3, #80                                              
  65 0014 83F31188 	   msr basepri, r3                                         
  66 0018 BFF36F8F 	   isb                                                     
  67 001c BFF34F8F 	   dsb                                                     
  68              	
  69              	@ 0 "" 2
  70              	.LVL3:
  71              		.thumb
  72              		.syntax unified
  73              	.L3:
  74              		.loc 2 217 5 is_stmt 0 view .LVU14
  75              	.LBE174:
  76              	.LBE173:
3292:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 64


  77              		.loc 1 3292 9 is_stmt 1 discriminator 1 view .LVU15
3292:FreeRTOS-Kernel/tasks.c **** 
  78              		.loc 1 3292 9 discriminator 1 view .LVU16
  79 0020 FEE7     		b	.L3
  80              	.L12:
3296:FreeRTOS-Kernel/tasks.c ****         {
3297:FreeRTOS-Kernel/tasks.c ****             /* Has the task already been resumed from within an ISR? */
3298:FreeRTOS-Kernel/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  81              		.loc 1 3298 13 view .LVU17
  82              		.loc 1 3298 17 is_stmt 0 view .LVU18
  83 0022 826A     		ldr	r2, [r0, #40]
  84              		.loc 1 3298 15 view .LVU19
  85 0024 0C49     		ldr	r1, .L13+4
  86 0026 8A42     		cmp	r2, r1
  87 0028 0FD0     		beq	.L8
3299:FreeRTOS-Kernel/tasks.c ****             {
3300:FreeRTOS-Kernel/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
3301:FreeRTOS-Kernel/tasks.c ****                  * state, or because it is blocked with no timeout? */
3302:FreeRTOS-Kernel/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  88              		.loc 1 3302 17 is_stmt 1 view .LVU20
  89              		.loc 1 3302 19 is_stmt 0 view .LVU21
  90 002a 4AB1     		cbz	r2, .L9
3285:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
  91              		.loc 1 3285 20 view .LVU22
  92 002c 0020     		movs	r0, #0
  93              	.LVL4:
3285:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
  94              		.loc 1 3285 20 view .LVU23
  95 002e 7047     		bx	lr
  96              	.LVL5:
  97              	.L6:
  98              	.LBB175:
3303:FreeRTOS-Kernel/tasks.c ****                 {
3304:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
3305:FreeRTOS-Kernel/tasks.c ****                     {
3306:FreeRTOS-Kernel/tasks.c ****                         BaseType_t x;
3307:FreeRTOS-Kernel/tasks.c **** 
3308:FreeRTOS-Kernel/tasks.c ****                         /* The task does not appear on the event list item of
3309:FreeRTOS-Kernel/tasks.c ****                          * and of the RTOS objects, but could still be in the
3310:FreeRTOS-Kernel/tasks.c ****                          * blocked state if it is waiting on its notification
3311:FreeRTOS-Kernel/tasks.c ****                          * rather than waiting on an object.  If not, is
3312:FreeRTOS-Kernel/tasks.c ****                          * suspended. */
3313:FreeRTOS-Kernel/tasks.c ****                         xReturn = pdTRUE;
3314:FreeRTOS-Kernel/tasks.c **** 
3315:FreeRTOS-Kernel/tasks.c ****                         for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY
3316:FreeRTOS-Kernel/tasks.c ****                         {
3317:FreeRTOS-Kernel/tasks.c ****                             if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
  99              		.loc 1 3317 29 is_stmt 1 view .LVU24
 100              		.loc 1 3317 53 is_stmt 0 view .LVU25
 101 0030 9918     		adds	r1, r3, r2
 102 0032 91F85010 		ldrb	r1, [r1, #80]	@ zero_extendqisi2
 103 0036 C9B2     		uxtb	r1, r1
 104              		.loc 1 3317 31 view .LVU26
 105 0038 0129     		cmp	r1, #1
 106 003a 08D0     		beq	.L10
3315:FreeRTOS-Kernel/tasks.c ****                         {
 107              		.loc 1 3315 111 is_stmt 1 discriminator 2 view .LVU27
ARM GAS  /tmp/ccJw1tyY.s 			page 65


 108 003c 0132     		adds	r2, r2, #1
 109              	.LVL6:
3315:FreeRTOS-Kernel/tasks.c ****                         {
 110              		.loc 1 3315 111 is_stmt 0 discriminator 2 view .LVU28
 111 003e 00E0     		b	.L5
 112              	.LVL7:
 113              	.L9:
3315:FreeRTOS-Kernel/tasks.c ****                         {
 114              		.loc 1 3315 32 view .LVU29
 115 0040 0022     		movs	r2, #0
 116              	.LVL8:
 117              	.L5:
3315:FreeRTOS-Kernel/tasks.c ****                         {
 118              		.loc 1 3315 54 is_stmt 1 discriminator 1 view .LVU30
 119 0042 002A     		cmp	r2, #0
 120 0044 F4DD     		ble	.L6
3313:FreeRTOS-Kernel/tasks.c **** 
 121              		.loc 1 3313 33 is_stmt 0 view .LVU31
 122 0046 0120     		movs	r0, #1
 123              	.LVL9:
3313:FreeRTOS-Kernel/tasks.c **** 
 124              		.loc 1 3313 33 view .LVU32
 125 0048 7047     		bx	lr
 126              	.LVL10:
 127              	.L8:
3313:FreeRTOS-Kernel/tasks.c **** 
 128              		.loc 1 3313 33 view .LVU33
 129              	.LBE175:
3285:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
 130              		.loc 1 3285 20 view .LVU34
 131 004a 0020     		movs	r0, #0
 132              	.LVL11:
3285:FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
 133              		.loc 1 3285 20 view .LVU35
 134 004c 7047     		bx	lr
 135              	.LVL12:
 136              	.L10:
 137              	.LBB176:
3318:FreeRTOS-Kernel/tasks.c ****                             {
3319:FreeRTOS-Kernel/tasks.c ****                                 xReturn = pdFALSE;
 138              		.loc 1 3319 41 view .LVU36
 139 004e 0020     		movs	r0, #0
 140              	.LVL13:
 141              		.loc 1 3319 41 view .LVU37
 142              	.LBE176:
3320:FreeRTOS-Kernel/tasks.c ****                                 break;
3321:FreeRTOS-Kernel/tasks.c ****                             }
3322:FreeRTOS-Kernel/tasks.c ****                         }
3323:FreeRTOS-Kernel/tasks.c ****                     }
3324:FreeRTOS-Kernel/tasks.c ****                     #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
3325:FreeRTOS-Kernel/tasks.c ****                     {
3326:FreeRTOS-Kernel/tasks.c ****                         xReturn = pdTRUE;
3327:FreeRTOS-Kernel/tasks.c ****                     }
3328:FreeRTOS-Kernel/tasks.c ****                     #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
3329:FreeRTOS-Kernel/tasks.c ****                 }
3330:FreeRTOS-Kernel/tasks.c ****                 else
3331:FreeRTOS-Kernel/tasks.c ****                 {
ARM GAS  /tmp/ccJw1tyY.s 			page 66


3332:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3333:FreeRTOS-Kernel/tasks.c ****                 }
3334:FreeRTOS-Kernel/tasks.c ****             }
3335:FreeRTOS-Kernel/tasks.c ****             else
3336:FreeRTOS-Kernel/tasks.c ****             {
3337:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3338:FreeRTOS-Kernel/tasks.c ****             }
3339:FreeRTOS-Kernel/tasks.c ****         }
3340:FreeRTOS-Kernel/tasks.c ****         else
3341:FreeRTOS-Kernel/tasks.c ****         {
3342:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 143              		.loc 1 3342 37 is_stmt 1 view .LVU38
3343:FreeRTOS-Kernel/tasks.c ****         }
3344:FreeRTOS-Kernel/tasks.c **** 
3345:FreeRTOS-Kernel/tasks.c ****         return xReturn;
 144              		.loc 1 3345 9 view .LVU39
3346:FreeRTOS-Kernel/tasks.c ****     }
 145              		.loc 1 3346 5 is_stmt 0 view .LVU40
 146 0050 7047     		bx	lr
 147              	.L14:
 148 0052 00BF     		.align	2
 149              	.L13:
 150 0054 00000000 		.word	xSuspendedTaskList
 151 0058 00000000 		.word	xPendingReadyList
 152              		.cfi_endproc
 153              	.LFE18:
 155              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 156              		.align	1
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	prvResetNextTaskUnblockTime:
 162              	.LFB47:
3347:FreeRTOS-Kernel/tasks.c **** 
3348:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
3349:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3350:FreeRTOS-Kernel/tasks.c **** 
3351:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
3352:FreeRTOS-Kernel/tasks.c **** 
3353:FreeRTOS-Kernel/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
3354:FreeRTOS-Kernel/tasks.c ****     {
3355:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
3356:FreeRTOS-Kernel/tasks.c **** 
3357:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskResume( xTaskToResume );
3358:FreeRTOS-Kernel/tasks.c **** 
3359:FreeRTOS-Kernel/tasks.c ****         /* It does not make sense to resume the calling task. */
3360:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToResume );
3361:FreeRTOS-Kernel/tasks.c **** 
3362:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
3363:FreeRTOS-Kernel/tasks.c **** 
3364:FreeRTOS-Kernel/tasks.c ****             /* The parameter cannot be NULL as it is impossible to resume the
3365:FreeRTOS-Kernel/tasks.c ****              * currently executing task. */
3366:FreeRTOS-Kernel/tasks.c ****             if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
3367:FreeRTOS-Kernel/tasks.c ****         #else
3368:FreeRTOS-Kernel/tasks.c **** 
3369:FreeRTOS-Kernel/tasks.c ****             /* The parameter cannot be NULL as it is impossible to resume the
3370:FreeRTOS-Kernel/tasks.c ****              * currently executing task. It is also impossible to resume a task
ARM GAS  /tmp/ccJw1tyY.s 			page 67


3371:FreeRTOS-Kernel/tasks.c ****              * that is actively running on another core but it is not safe
3372:FreeRTOS-Kernel/tasks.c ****              * to check their run state here. Therefore, we get into a critical
3373:FreeRTOS-Kernel/tasks.c ****              * section and check if the task is actually suspended or not. */
3374:FreeRTOS-Kernel/tasks.c ****             if( pxTCB != NULL )
3375:FreeRTOS-Kernel/tasks.c ****         #endif
3376:FreeRTOS-Kernel/tasks.c ****         {
3377:FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
3378:FreeRTOS-Kernel/tasks.c ****             {
3379:FreeRTOS-Kernel/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
3380:FreeRTOS-Kernel/tasks.c ****                 {
3381:FreeRTOS-Kernel/tasks.c ****                     traceTASK_RESUME( pxTCB );
3382:FreeRTOS-Kernel/tasks.c **** 
3383:FreeRTOS-Kernel/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
3384:FreeRTOS-Kernel/tasks.c ****                      * suspended because this is inside a critical section. */
3385:FreeRTOS-Kernel/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3386:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
3387:FreeRTOS-Kernel/tasks.c **** 
3388:FreeRTOS-Kernel/tasks.c ****                     /* This yield may not cause the task just resumed to run,
3389:FreeRTOS-Kernel/tasks.c ****                      * but will leave the lists in the correct state for the
3390:FreeRTOS-Kernel/tasks.c ****                      * next yield. */
3391:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
3392:FreeRTOS-Kernel/tasks.c ****                 }
3393:FreeRTOS-Kernel/tasks.c ****                 else
3394:FreeRTOS-Kernel/tasks.c ****                 {
3395:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3396:FreeRTOS-Kernel/tasks.c ****                 }
3397:FreeRTOS-Kernel/tasks.c ****             }
3398:FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
3399:FreeRTOS-Kernel/tasks.c ****         }
3400:FreeRTOS-Kernel/tasks.c ****         else
3401:FreeRTOS-Kernel/tasks.c ****         {
3402:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3403:FreeRTOS-Kernel/tasks.c ****         }
3404:FreeRTOS-Kernel/tasks.c **** 
3405:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskResume();
3406:FreeRTOS-Kernel/tasks.c ****     }
3407:FreeRTOS-Kernel/tasks.c **** 
3408:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
3409:FreeRTOS-Kernel/tasks.c **** 
3410:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3411:FreeRTOS-Kernel/tasks.c **** 
3412:FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
3413:FreeRTOS-Kernel/tasks.c **** 
3414:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
3415:FreeRTOS-Kernel/tasks.c ****     {
3416:FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
3417:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
3418:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
3419:FreeRTOS-Kernel/tasks.c **** 
3420:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskResumeFromISR( xTaskToResume );
3421:FreeRTOS-Kernel/tasks.c **** 
3422:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToResume );
3423:FreeRTOS-Kernel/tasks.c **** 
3424:FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
3425:FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
3426:FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
3427:FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  /tmp/ccJw1tyY.s 			page 68


3428:FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
3429:FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
3430:FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
3431:FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
3432:FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
3433:FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
3434:FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
3435:FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
3436:FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
3437:FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
3438:FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
3439:FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
3440:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
3441:FreeRTOS-Kernel/tasks.c **** 
3442:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
3443:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
3444:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
3445:FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
3446:FreeRTOS-Kernel/tasks.c ****         {
3447:FreeRTOS-Kernel/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
3448:FreeRTOS-Kernel/tasks.c ****             {
3449:FreeRTOS-Kernel/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
3450:FreeRTOS-Kernel/tasks.c **** 
3451:FreeRTOS-Kernel/tasks.c ****                 /* Check the ready lists can be accessed. */
3452:FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3453:FreeRTOS-Kernel/tasks.c ****                 {
3454:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
3455:FreeRTOS-Kernel/tasks.c ****                     {
3456:FreeRTOS-Kernel/tasks.c ****                         /* Ready lists can be accessed so move the task from the
3457:FreeRTOS-Kernel/tasks.c ****                          * suspended list to the ready list directly. */
3458:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3459:FreeRTOS-Kernel/tasks.c ****                         {
3460:FreeRTOS-Kernel/tasks.c ****                             xYieldRequired = pdTRUE;
3461:FreeRTOS-Kernel/tasks.c **** 
3462:FreeRTOS-Kernel/tasks.c ****                             /* Mark that a yield is pending in case the user is not
3463:FreeRTOS-Kernel/tasks.c ****                              * using the return value to initiate a context switch
3464:FreeRTOS-Kernel/tasks.c ****                              * from the ISR using the port specific portYIELD_FROM_ISR(). */
3465:FreeRTOS-Kernel/tasks.c ****                             xYieldPendings[ 0 ] = pdTRUE;
3466:FreeRTOS-Kernel/tasks.c ****                         }
3467:FreeRTOS-Kernel/tasks.c ****                         else
3468:FreeRTOS-Kernel/tasks.c ****                         {
3469:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3470:FreeRTOS-Kernel/tasks.c ****                         }
3471:FreeRTOS-Kernel/tasks.c ****                     }
3472:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
3473:FreeRTOS-Kernel/tasks.c **** 
3474:FreeRTOS-Kernel/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3475:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
3476:FreeRTOS-Kernel/tasks.c ****                 }
3477:FreeRTOS-Kernel/tasks.c ****                 else
3478:FreeRTOS-Kernel/tasks.c ****                 {
3479:FreeRTOS-Kernel/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
3480:FreeRTOS-Kernel/tasks.c ****                      * is held in the pending ready list until the scheduler is
3481:FreeRTOS-Kernel/tasks.c ****                      * unsuspended. */
3482:FreeRTOS-Kernel/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
3483:FreeRTOS-Kernel/tasks.c ****                 }
3484:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 69


3485:FreeRTOS-Kernel/tasks.c ****                 #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PREEMPTION == 1 ) )
3486:FreeRTOS-Kernel/tasks.c ****                 {
3487:FreeRTOS-Kernel/tasks.c ****                     prvYieldForTask( pxTCB );
3488:FreeRTOS-Kernel/tasks.c **** 
3489:FreeRTOS-Kernel/tasks.c ****                     if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
3490:FreeRTOS-Kernel/tasks.c ****                     {
3491:FreeRTOS-Kernel/tasks.c ****                         xYieldRequired = pdTRUE;
3492:FreeRTOS-Kernel/tasks.c ****                     }
3493:FreeRTOS-Kernel/tasks.c ****                 }
3494:FreeRTOS-Kernel/tasks.c ****                 #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PREEMPTION == 1 ) ) */
3495:FreeRTOS-Kernel/tasks.c ****             }
3496:FreeRTOS-Kernel/tasks.c ****             else
3497:FreeRTOS-Kernel/tasks.c ****             {
3498:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3499:FreeRTOS-Kernel/tasks.c ****             }
3500:FreeRTOS-Kernel/tasks.c ****         }
3501:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
3502:FreeRTOS-Kernel/tasks.c **** 
3503:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskResumeFromISR( xYieldRequired );
3504:FreeRTOS-Kernel/tasks.c **** 
3505:FreeRTOS-Kernel/tasks.c ****         return xYieldRequired;
3506:FreeRTOS-Kernel/tasks.c ****     }
3507:FreeRTOS-Kernel/tasks.c **** 
3508:FreeRTOS-Kernel/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
3509:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3510:FreeRTOS-Kernel/tasks.c **** 
3511:FreeRTOS-Kernel/tasks.c **** static BaseType_t prvCreateIdleTasks( void )
3512:FreeRTOS-Kernel/tasks.c **** {
3513:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn = pdPASS;
3514:FreeRTOS-Kernel/tasks.c ****     BaseType_t xCoreID;
3515:FreeRTOS-Kernel/tasks.c ****     char cIdleName[ configMAX_TASK_NAME_LEN ];
3516:FreeRTOS-Kernel/tasks.c ****     TaskFunction_t pxIdleTaskFunction = NULL;
3517:FreeRTOS-Kernel/tasks.c ****     BaseType_t xIdleTaskNameIndex;
3518:FreeRTOS-Kernel/tasks.c **** 
3519:FreeRTOS-Kernel/tasks.c ****     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_
3520:FreeRTOS-Kernel/tasks.c ****     {
3521:FreeRTOS-Kernel/tasks.c ****         cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
3522:FreeRTOS-Kernel/tasks.c **** 
3523:FreeRTOS-Kernel/tasks.c ****         /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
3524:FreeRTOS-Kernel/tasks.c ****          * configMAX_TASK_NAME_LEN characters just in case the memory after the
3525:FreeRTOS-Kernel/tasks.c ****          * string is not accessible (extremely unlikely). */
3526:FreeRTOS-Kernel/tasks.c ****         if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
3527:FreeRTOS-Kernel/tasks.c ****         {
3528:FreeRTOS-Kernel/tasks.c ****             break;
3529:FreeRTOS-Kernel/tasks.c ****         }
3530:FreeRTOS-Kernel/tasks.c ****         else
3531:FreeRTOS-Kernel/tasks.c ****         {
3532:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3533:FreeRTOS-Kernel/tasks.c ****         }
3534:FreeRTOS-Kernel/tasks.c ****     }
3535:FreeRTOS-Kernel/tasks.c **** 
3536:FreeRTOS-Kernel/tasks.c ****     /* Add each idle task at the lowest priority. */
3537:FreeRTOS-Kernel/tasks.c ****     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
3538:FreeRTOS-Kernel/tasks.c ****     {
3539:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES == 1 )
3540:FreeRTOS-Kernel/tasks.c ****         {
3541:FreeRTOS-Kernel/tasks.c ****             pxIdleTaskFunction = prvIdleTask;
ARM GAS  /tmp/ccJw1tyY.s 			page 70


3542:FreeRTOS-Kernel/tasks.c ****         }
3543:FreeRTOS-Kernel/tasks.c ****         #else /* #if (  configNUMBER_OF_CORES == 1 ) */
3544:FreeRTOS-Kernel/tasks.c ****         {
3545:FreeRTOS-Kernel/tasks.c ****             /* In the FreeRTOS SMP, configNUMBER_OF_CORES - 1 passive idle tasks
3546:FreeRTOS-Kernel/tasks.c ****              * are also created to ensure that each core has an idle task to
3547:FreeRTOS-Kernel/tasks.c ****              * run when no other task is available to run. */
3548:FreeRTOS-Kernel/tasks.c ****             if( xCoreID == 0 )
3549:FreeRTOS-Kernel/tasks.c ****             {
3550:FreeRTOS-Kernel/tasks.c ****                 pxIdleTaskFunction = prvIdleTask;
3551:FreeRTOS-Kernel/tasks.c ****             }
3552:FreeRTOS-Kernel/tasks.c ****             else
3553:FreeRTOS-Kernel/tasks.c ****             {
3554:FreeRTOS-Kernel/tasks.c ****                 pxIdleTaskFunction = prvPassiveIdleTask;
3555:FreeRTOS-Kernel/tasks.c ****             }
3556:FreeRTOS-Kernel/tasks.c ****         }
3557:FreeRTOS-Kernel/tasks.c ****         #endif /* #if (  configNUMBER_OF_CORES == 1 ) */
3558:FreeRTOS-Kernel/tasks.c **** 
3559:FreeRTOS-Kernel/tasks.c ****         /* Update the idle task name with suffix to differentiate the idle tasks.
3560:FreeRTOS-Kernel/tasks.c ****          * This function is not required in single core FreeRTOS since there is
3561:FreeRTOS-Kernel/tasks.c ****          * only one idle task. */
3562:FreeRTOS-Kernel/tasks.c ****         #if ( configNUMBER_OF_CORES > 1 )
3563:FreeRTOS-Kernel/tasks.c ****         {
3564:FreeRTOS-Kernel/tasks.c ****             /* Append the idle task number to the end of the name if there is space. */
3565:FreeRTOS-Kernel/tasks.c ****             if( xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN )
3566:FreeRTOS-Kernel/tasks.c ****             {
3567:FreeRTOS-Kernel/tasks.c ****                 cIdleName[ xIdleTaskNameIndex ] = ( char ) ( xCoreID + '0' );
3568:FreeRTOS-Kernel/tasks.c **** 
3569:FreeRTOS-Kernel/tasks.c ****                 /* And append a null character if there is space. */
3570:FreeRTOS-Kernel/tasks.c ****                 if( ( xIdleTaskNameIndex + 1 ) < ( BaseType_t ) configMAX_TASK_NAME_LEN )
3571:FreeRTOS-Kernel/tasks.c ****                 {
3572:FreeRTOS-Kernel/tasks.c ****                     cIdleName[ xIdleTaskNameIndex + 1 ] = '\0';
3573:FreeRTOS-Kernel/tasks.c ****                 }
3574:FreeRTOS-Kernel/tasks.c ****                 else
3575:FreeRTOS-Kernel/tasks.c ****                 {
3576:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3577:FreeRTOS-Kernel/tasks.c ****                 }
3578:FreeRTOS-Kernel/tasks.c ****             }
3579:FreeRTOS-Kernel/tasks.c ****             else
3580:FreeRTOS-Kernel/tasks.c ****             {
3581:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3582:FreeRTOS-Kernel/tasks.c ****             }
3583:FreeRTOS-Kernel/tasks.c ****         }
3584:FreeRTOS-Kernel/tasks.c ****         #endif /* if ( configNUMBER_OF_CORES > 1 ) */
3585:FreeRTOS-Kernel/tasks.c **** 
3586:FreeRTOS-Kernel/tasks.c ****         #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
3587:FreeRTOS-Kernel/tasks.c ****         {
3588:FreeRTOS-Kernel/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
3589:FreeRTOS-Kernel/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
3590:FreeRTOS-Kernel/tasks.c ****             configSTACK_DEPTH_TYPE uxIdleTaskStackSize;
3591:FreeRTOS-Kernel/tasks.c **** 
3592:FreeRTOS-Kernel/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
3593:FreeRTOS-Kernel/tasks.c ****              * address of the RAM then create the idle task. */
3594:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
3595:FreeRTOS-Kernel/tasks.c ****             {
3596:FreeRTOS-Kernel/tasks.c ****                 vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdl
3597:FreeRTOS-Kernel/tasks.c ****             }
3598:FreeRTOS-Kernel/tasks.c ****             #else
ARM GAS  /tmp/ccJw1tyY.s 			page 71


3599:FreeRTOS-Kernel/tasks.c ****             {
3600:FreeRTOS-Kernel/tasks.c ****                 if( xCoreID == 0 )
3601:FreeRTOS-Kernel/tasks.c ****                 {
3602:FreeRTOS-Kernel/tasks.c ****                     vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &u
3603:FreeRTOS-Kernel/tasks.c ****                 }
3604:FreeRTOS-Kernel/tasks.c ****                 else
3605:FreeRTOS-Kernel/tasks.c ****                 {
3606:FreeRTOS-Kernel/tasks.c ****                     vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuf
3607:FreeRTOS-Kernel/tasks.c ****                 }
3608:FreeRTOS-Kernel/tasks.c ****             }
3609:FreeRTOS-Kernel/tasks.c ****             #endif /* if ( configNUMBER_OF_CORES == 1 ) */
3610:FreeRTOS-Kernel/tasks.c ****             xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
3611:FreeRTOS-Kernel/tasks.c ****                                                              cIdleName,
3612:FreeRTOS-Kernel/tasks.c ****                                                              uxIdleTaskStackSize,
3613:FreeRTOS-Kernel/tasks.c ****                                                              ( void * ) NULL,
3614:FreeRTOS-Kernel/tasks.c ****                                                              portPRIVILEGE_BIT, /* In effect ( tskI
3615:FreeRTOS-Kernel/tasks.c ****                                                              pxIdleTaskStackBuffer,
3616:FreeRTOS-Kernel/tasks.c ****                                                              pxIdleTaskTCBBuffer );
3617:FreeRTOS-Kernel/tasks.c **** 
3618:FreeRTOS-Kernel/tasks.c ****             if( xIdleTaskHandles[ xCoreID ] != NULL )
3619:FreeRTOS-Kernel/tasks.c ****             {
3620:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
3621:FreeRTOS-Kernel/tasks.c ****             }
3622:FreeRTOS-Kernel/tasks.c ****             else
3623:FreeRTOS-Kernel/tasks.c ****             {
3624:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFAIL;
3625:FreeRTOS-Kernel/tasks.c ****             }
3626:FreeRTOS-Kernel/tasks.c ****         }
3627:FreeRTOS-Kernel/tasks.c ****         #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
3628:FreeRTOS-Kernel/tasks.c ****         {
3629:FreeRTOS-Kernel/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
3630:FreeRTOS-Kernel/tasks.c ****             xReturn = xTaskCreate( pxIdleTaskFunction,
3631:FreeRTOS-Kernel/tasks.c ****                                    cIdleName,
3632:FreeRTOS-Kernel/tasks.c ****                                    configMINIMAL_STACK_SIZE,
3633:FreeRTOS-Kernel/tasks.c ****                                    ( void * ) NULL,
3634:FreeRTOS-Kernel/tasks.c ****                                    portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILE
3635:FreeRTOS-Kernel/tasks.c ****                                    &xIdleTaskHandles[ xCoreID ] );
3636:FreeRTOS-Kernel/tasks.c ****         }
3637:FreeRTOS-Kernel/tasks.c ****         #endif /* configSUPPORT_STATIC_ALLOCATION */
3638:FreeRTOS-Kernel/tasks.c **** 
3639:FreeRTOS-Kernel/tasks.c ****         /* Break the loop if any of the idle task is failed to be created. */
3640:FreeRTOS-Kernel/tasks.c ****         if( xReturn == pdFAIL )
3641:FreeRTOS-Kernel/tasks.c ****         {
3642:FreeRTOS-Kernel/tasks.c ****             break;
3643:FreeRTOS-Kernel/tasks.c ****         }
3644:FreeRTOS-Kernel/tasks.c ****         else
3645:FreeRTOS-Kernel/tasks.c ****         {
3646:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
3647:FreeRTOS-Kernel/tasks.c ****             {
3648:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3649:FreeRTOS-Kernel/tasks.c ****             }
3650:FreeRTOS-Kernel/tasks.c ****             #else
3651:FreeRTOS-Kernel/tasks.c ****             {
3652:FreeRTOS-Kernel/tasks.c ****                 /* Assign idle task to each core before SMP scheduler is running. */
3653:FreeRTOS-Kernel/tasks.c ****                 xIdleTaskHandles[ xCoreID ]->xTaskRunState = xCoreID;
3654:FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCBs[ xCoreID ] = xIdleTaskHandles[ xCoreID ];
3655:FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  /tmp/ccJw1tyY.s 			page 72


3656:FreeRTOS-Kernel/tasks.c ****             #endif
3657:FreeRTOS-Kernel/tasks.c ****         }
3658:FreeRTOS-Kernel/tasks.c ****     }
3659:FreeRTOS-Kernel/tasks.c **** 
3660:FreeRTOS-Kernel/tasks.c ****     return xReturn;
3661:FreeRTOS-Kernel/tasks.c **** }
3662:FreeRTOS-Kernel/tasks.c **** 
3663:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3664:FreeRTOS-Kernel/tasks.c **** 
3665:FreeRTOS-Kernel/tasks.c **** void vTaskStartScheduler( void )
3666:FreeRTOS-Kernel/tasks.c **** {
3667:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
3668:FreeRTOS-Kernel/tasks.c **** 
3669:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskStartScheduler();
3670:FreeRTOS-Kernel/tasks.c **** 
3671:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 )
3672:FreeRTOS-Kernel/tasks.c ****     {
3673:FreeRTOS-Kernel/tasks.c ****         /* Sanity check that the UBaseType_t must have greater than or equal to
3674:FreeRTOS-Kernel/tasks.c ****          * the number of bits as confNUMBER_OF_CORES. */
3675:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
3676:FreeRTOS-Kernel/tasks.c ****     }
3677:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */
3678:FreeRTOS-Kernel/tasks.c **** 
3679:FreeRTOS-Kernel/tasks.c ****     xReturn = prvCreateIdleTasks();
3680:FreeRTOS-Kernel/tasks.c **** 
3681:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TIMERS == 1 )
3682:FreeRTOS-Kernel/tasks.c ****     {
3683:FreeRTOS-Kernel/tasks.c ****         if( xReturn == pdPASS )
3684:FreeRTOS-Kernel/tasks.c ****         {
3685:FreeRTOS-Kernel/tasks.c ****             xReturn = xTimerCreateTimerTask();
3686:FreeRTOS-Kernel/tasks.c ****         }
3687:FreeRTOS-Kernel/tasks.c ****         else
3688:FreeRTOS-Kernel/tasks.c ****         {
3689:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3690:FreeRTOS-Kernel/tasks.c ****         }
3691:FreeRTOS-Kernel/tasks.c ****     }
3692:FreeRTOS-Kernel/tasks.c ****     #endif /* configUSE_TIMERS */
3693:FreeRTOS-Kernel/tasks.c **** 
3694:FreeRTOS-Kernel/tasks.c ****     if( xReturn == pdPASS )
3695:FreeRTOS-Kernel/tasks.c ****     {
3696:FreeRTOS-Kernel/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
3697:FreeRTOS-Kernel/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
3698:FreeRTOS-Kernel/tasks.c ****          * the only macro called by the function. */
3699:FreeRTOS-Kernel/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
3700:FreeRTOS-Kernel/tasks.c ****         {
3701:FreeRTOS-Kernel/tasks.c ****             freertos_tasks_c_additions_init();
3702:FreeRTOS-Kernel/tasks.c ****         }
3703:FreeRTOS-Kernel/tasks.c ****         #endif
3704:FreeRTOS-Kernel/tasks.c **** 
3705:FreeRTOS-Kernel/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
3706:FreeRTOS-Kernel/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
3707:FreeRTOS-Kernel/tasks.c ****          * the created tasks contain a status word with interrupts switched on
3708:FreeRTOS-Kernel/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
3709:FreeRTOS-Kernel/tasks.c ****          * starts to run. */
3710:FreeRTOS-Kernel/tasks.c ****         portDISABLE_INTERRUPTS();
3711:FreeRTOS-Kernel/tasks.c **** 
3712:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 73


3713:FreeRTOS-Kernel/tasks.c ****         {
3714:FreeRTOS-Kernel/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3715:FreeRTOS-Kernel/tasks.c ****              * block specific to the task that will run first. */
3716:FreeRTOS-Kernel/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3717:FreeRTOS-Kernel/tasks.c ****         }
3718:FreeRTOS-Kernel/tasks.c ****         #endif
3719:FreeRTOS-Kernel/tasks.c **** 
3720:FreeRTOS-Kernel/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
3721:FreeRTOS-Kernel/tasks.c ****         xSchedulerRunning = pdTRUE;
3722:FreeRTOS-Kernel/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
3723:FreeRTOS-Kernel/tasks.c **** 
3724:FreeRTOS-Kernel/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
3725:FreeRTOS-Kernel/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
3726:FreeRTOS-Kernel/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
3727:FreeRTOS-Kernel/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
3728:FreeRTOS-Kernel/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
3729:FreeRTOS-Kernel/tasks.c ****          * FreeRTOSConfig.h file. */
3730:FreeRTOS-Kernel/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
3731:FreeRTOS-Kernel/tasks.c **** 
3732:FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
3733:FreeRTOS-Kernel/tasks.c **** 
3734:FreeRTOS-Kernel/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
3735:FreeRTOS-Kernel/tasks.c ****          * portable interface. */
3736:FreeRTOS-Kernel/tasks.c **** 
3737:FreeRTOS-Kernel/tasks.c ****         /* The return value for xPortStartScheduler is not required
3738:FreeRTOS-Kernel/tasks.c ****          * hence using a void datatype. */
3739:FreeRTOS-Kernel/tasks.c ****         ( void ) xPortStartScheduler();
3740:FreeRTOS-Kernel/tasks.c **** 
3741:FreeRTOS-Kernel/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
3742:FreeRTOS-Kernel/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
3743:FreeRTOS-Kernel/tasks.c ****          * to create either the Idle or the Timer task. If it returned
3744:FreeRTOS-Kernel/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
3745:FreeRTOS-Kernel/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
3746:FreeRTOS-Kernel/tasks.c ****          * nothing to return to. */
3747:FreeRTOS-Kernel/tasks.c ****     }
3748:FreeRTOS-Kernel/tasks.c ****     else
3749:FreeRTOS-Kernel/tasks.c ****     {
3750:FreeRTOS-Kernel/tasks.c ****         /* This line will only be reached if the kernel could not be started,
3751:FreeRTOS-Kernel/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
3752:FreeRTOS-Kernel/tasks.c ****          * or the timer task. */
3753:FreeRTOS-Kernel/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
3754:FreeRTOS-Kernel/tasks.c ****     }
3755:FreeRTOS-Kernel/tasks.c **** 
3756:FreeRTOS-Kernel/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
3757:FreeRTOS-Kernel/tasks.c ****      * meaning xIdleTaskHandles are not used anywhere else. */
3758:FreeRTOS-Kernel/tasks.c ****     ( void ) xIdleTaskHandles;
3759:FreeRTOS-Kernel/tasks.c **** 
3760:FreeRTOS-Kernel/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
3761:FreeRTOS-Kernel/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
3762:FreeRTOS-Kernel/tasks.c ****     ( void ) uxTopUsedPriority;
3763:FreeRTOS-Kernel/tasks.c **** 
3764:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskStartScheduler();
3765:FreeRTOS-Kernel/tasks.c **** }
3766:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3767:FreeRTOS-Kernel/tasks.c **** 
3768:FreeRTOS-Kernel/tasks.c **** void vTaskEndScheduler( void )
3769:FreeRTOS-Kernel/tasks.c **** {
ARM GAS  /tmp/ccJw1tyY.s 			page 74


3770:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskEndScheduler();
3771:FreeRTOS-Kernel/tasks.c **** 
3772:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3773:FreeRTOS-Kernel/tasks.c ****     {
3774:FreeRTOS-Kernel/tasks.c ****         BaseType_t xCoreID;
3775:FreeRTOS-Kernel/tasks.c **** 
3776:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TIMERS == 1 )
3777:FreeRTOS-Kernel/tasks.c ****         {
3778:FreeRTOS-Kernel/tasks.c ****             /* Delete the timer task created by the kernel. */
3779:FreeRTOS-Kernel/tasks.c ****             vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
3780:FreeRTOS-Kernel/tasks.c ****         }
3781:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configUSE_TIMERS == 1 ) */
3782:FreeRTOS-Kernel/tasks.c **** 
3783:FreeRTOS-Kernel/tasks.c ****         /* Delete Idle tasks created by the kernel.*/
3784:FreeRTOS-Kernel/tasks.c ****         for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
3785:FreeRTOS-Kernel/tasks.c ****         {
3786:FreeRTOS-Kernel/tasks.c ****             vTaskDelete( xIdleTaskHandles[ xCoreID ] );
3787:FreeRTOS-Kernel/tasks.c ****         }
3788:FreeRTOS-Kernel/tasks.c **** 
3789:FreeRTOS-Kernel/tasks.c ****         /* Idle task is responsible for reclaiming the resources of the tasks in
3790:FreeRTOS-Kernel/tasks.c ****          * xTasksWaitingTermination list. Since the idle task is now deleted and
3791:FreeRTOS-Kernel/tasks.c ****          * no longer going to run, we need to reclaim resources of all the tasks
3792:FreeRTOS-Kernel/tasks.c ****          * in the xTasksWaitingTermination list. */
3793:FreeRTOS-Kernel/tasks.c ****         prvCheckTasksWaitingTermination();
3794:FreeRTOS-Kernel/tasks.c ****     }
3795:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */
3796:FreeRTOS-Kernel/tasks.c **** 
3797:FreeRTOS-Kernel/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
3798:FreeRTOS-Kernel/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
3799:FreeRTOS-Kernel/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
3800:FreeRTOS-Kernel/tasks.c ****     portDISABLE_INTERRUPTS();
3801:FreeRTOS-Kernel/tasks.c ****     xSchedulerRunning = pdFALSE;
3802:FreeRTOS-Kernel/tasks.c **** 
3803:FreeRTOS-Kernel/tasks.c ****     /* This function must be called from a task and the application is
3804:FreeRTOS-Kernel/tasks.c ****      * responsible for deleting that task after the scheduler is stopped. */
3805:FreeRTOS-Kernel/tasks.c ****     vPortEndScheduler();
3806:FreeRTOS-Kernel/tasks.c **** 
3807:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskEndScheduler();
3808:FreeRTOS-Kernel/tasks.c **** }
3809:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
3810:FreeRTOS-Kernel/tasks.c **** 
3811:FreeRTOS-Kernel/tasks.c **** void vTaskSuspendAll( void )
3812:FreeRTOS-Kernel/tasks.c **** {
3813:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskSuspendAll();
3814:FreeRTOS-Kernel/tasks.c **** 
3815:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
3816:FreeRTOS-Kernel/tasks.c ****     {
3817:FreeRTOS-Kernel/tasks.c ****         /* A critical section is not required as the variable is of type
3818:FreeRTOS-Kernel/tasks.c ****          * BaseType_t.  Please read Richard Barry's reply in the following link to a
3819:FreeRTOS-Kernel/tasks.c ****          * post in the FreeRTOS support forum before reporting this as a bug! -
3820:FreeRTOS-Kernel/tasks.c ****          * https://goo.gl/wu4acr */
3821:FreeRTOS-Kernel/tasks.c **** 
3822:FreeRTOS-Kernel/tasks.c ****         /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
3823:FreeRTOS-Kernel/tasks.c ****          * do not otherwise exhibit real time behaviour. */
3824:FreeRTOS-Kernel/tasks.c ****         portSOFTWARE_BARRIER();
3825:FreeRTOS-Kernel/tasks.c **** 
3826:FreeRTOS-Kernel/tasks.c ****         /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
ARM GAS  /tmp/ccJw1tyY.s 			page 75


3827:FreeRTOS-Kernel/tasks.c ****          * is used to allow calls to vTaskSuspendAll() to nest. */
3828:FreeRTOS-Kernel/tasks.c ****         uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
3829:FreeRTOS-Kernel/tasks.c **** 
3830:FreeRTOS-Kernel/tasks.c ****         /* Enforces ordering for ports and optimised compilers that may otherwise place
3831:FreeRTOS-Kernel/tasks.c ****          * the above increment elsewhere. */
3832:FreeRTOS-Kernel/tasks.c ****         portMEMORY_BARRIER();
3833:FreeRTOS-Kernel/tasks.c ****     }
3834:FreeRTOS-Kernel/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
3835:FreeRTOS-Kernel/tasks.c ****     {
3836:FreeRTOS-Kernel/tasks.c ****         UBaseType_t ulState;
3837:FreeRTOS-Kernel/tasks.c **** 
3838:FreeRTOS-Kernel/tasks.c ****         /* This must only be called from within a task. */
3839:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_IN_ISR();
3840:FreeRTOS-Kernel/tasks.c **** 
3841:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
3842:FreeRTOS-Kernel/tasks.c ****         {
3843:FreeRTOS-Kernel/tasks.c ****             /* Writes to uxSchedulerSuspended must be protected by both the task AND ISR locks.
3844:FreeRTOS-Kernel/tasks.c ****              * We must disable interrupts before we grab the locks in the event that this task is
3845:FreeRTOS-Kernel/tasks.c ****              * interrupted and switches context before incrementing uxSchedulerSuspended.
3846:FreeRTOS-Kernel/tasks.c ****              * It is safe to re-enable interrupts after releasing the ISR lock and incrementing
3847:FreeRTOS-Kernel/tasks.c ****              * uxSchedulerSuspended since that will prevent context switches. */
3848:FreeRTOS-Kernel/tasks.c ****             ulState = portSET_INTERRUPT_MASK();
3849:FreeRTOS-Kernel/tasks.c **** 
3850:FreeRTOS-Kernel/tasks.c ****             /* This must never be called from inside a critical section. */
3851:FreeRTOS-Kernel/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() == 0 );
3852:FreeRTOS-Kernel/tasks.c **** 
3853:FreeRTOS-Kernel/tasks.c ****             /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
3854:FreeRTOS-Kernel/tasks.c ****              * do not otherwise exhibit real time behaviour. */
3855:FreeRTOS-Kernel/tasks.c ****             portSOFTWARE_BARRIER();
3856:FreeRTOS-Kernel/tasks.c **** 
3857:FreeRTOS-Kernel/tasks.c ****             portGET_TASK_LOCK();
3858:FreeRTOS-Kernel/tasks.c **** 
3859:FreeRTOS-Kernel/tasks.c ****             /* uxSchedulerSuspended is increased after prvCheckForRunStateChange. The
3860:FreeRTOS-Kernel/tasks.c ****              * purpose is to prevent altering the variable when fromISR APIs are readying
3861:FreeRTOS-Kernel/tasks.c ****              * it. */
3862:FreeRTOS-Kernel/tasks.c ****             if( uxSchedulerSuspended == 0U )
3863:FreeRTOS-Kernel/tasks.c ****             {
3864:FreeRTOS-Kernel/tasks.c ****                 prvCheckForRunStateChange();
3865:FreeRTOS-Kernel/tasks.c ****             }
3866:FreeRTOS-Kernel/tasks.c ****             else
3867:FreeRTOS-Kernel/tasks.c ****             {
3868:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3869:FreeRTOS-Kernel/tasks.c ****             }
3870:FreeRTOS-Kernel/tasks.c **** 
3871:FreeRTOS-Kernel/tasks.c ****             portGET_ISR_LOCK();
3872:FreeRTOS-Kernel/tasks.c **** 
3873:FreeRTOS-Kernel/tasks.c ****             /* The scheduler is suspended if uxSchedulerSuspended is non-zero. An increment
3874:FreeRTOS-Kernel/tasks.c ****              * is used to allow calls to vTaskSuspendAll() to nest. */
3875:FreeRTOS-Kernel/tasks.c ****             ++uxSchedulerSuspended;
3876:FreeRTOS-Kernel/tasks.c ****             portRELEASE_ISR_LOCK();
3877:FreeRTOS-Kernel/tasks.c **** 
3878:FreeRTOS-Kernel/tasks.c ****             portCLEAR_INTERRUPT_MASK( ulState );
3879:FreeRTOS-Kernel/tasks.c ****         }
3880:FreeRTOS-Kernel/tasks.c ****         else
3881:FreeRTOS-Kernel/tasks.c ****         {
3882:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3883:FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  /tmp/ccJw1tyY.s 			page 76


3884:FreeRTOS-Kernel/tasks.c ****     }
3885:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
3886:FreeRTOS-Kernel/tasks.c **** 
3887:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskSuspendAll();
3888:FreeRTOS-Kernel/tasks.c **** }
3889:FreeRTOS-Kernel/tasks.c **** 
3890:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
3891:FreeRTOS-Kernel/tasks.c **** 
3892:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3893:FreeRTOS-Kernel/tasks.c **** 
3894:FreeRTOS-Kernel/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
3895:FreeRTOS-Kernel/tasks.c ****     {
3896:FreeRTOS-Kernel/tasks.c ****         TickType_t xReturn;
3897:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
3898:FreeRTOS-Kernel/tasks.c **** 
3899:FreeRTOS-Kernel/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
3900:FreeRTOS-Kernel/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
3901:FreeRTOS-Kernel/tasks.c ****          * task that are in the Ready state, even though the idle task is
3902:FreeRTOS-Kernel/tasks.c ****          * running. */
3903:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
3904:FreeRTOS-Kernel/tasks.c ****         {
3905:FreeRTOS-Kernel/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
3906:FreeRTOS-Kernel/tasks.c ****             {
3907:FreeRTOS-Kernel/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
3908:FreeRTOS-Kernel/tasks.c ****             }
3909:FreeRTOS-Kernel/tasks.c ****         }
3910:FreeRTOS-Kernel/tasks.c ****         #else
3911:FreeRTOS-Kernel/tasks.c ****         {
3912:FreeRTOS-Kernel/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
3913:FreeRTOS-Kernel/tasks.c **** 
3914:FreeRTOS-Kernel/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
3915:FreeRTOS-Kernel/tasks.c ****              * variable is used as a bit map.  If bits other than the least
3916:FreeRTOS-Kernel/tasks.c ****              * significant bit are set then there are tasks that have a priority
3917:FreeRTOS-Kernel/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
3918:FreeRTOS-Kernel/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
3919:FreeRTOS-Kernel/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
3920:FreeRTOS-Kernel/tasks.c ****             {
3921:FreeRTOS-Kernel/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
3922:FreeRTOS-Kernel/tasks.c ****             }
3923:FreeRTOS-Kernel/tasks.c ****         }
3924:FreeRTOS-Kernel/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
3925:FreeRTOS-Kernel/tasks.c **** 
3926:FreeRTOS-Kernel/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
3927:FreeRTOS-Kernel/tasks.c ****         {
3928:FreeRTOS-Kernel/tasks.c ****             xReturn = 0;
3929:FreeRTOS-Kernel/tasks.c ****         }
3930:FreeRTOS-Kernel/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1U )
3931:FreeRTOS-Kernel/tasks.c ****         {
3932:FreeRTOS-Kernel/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
3933:FreeRTOS-Kernel/tasks.c ****              * time slicing is used then the very next tick interrupt must be
3934:FreeRTOS-Kernel/tasks.c ****              * processed. */
3935:FreeRTOS-Kernel/tasks.c ****             xReturn = 0;
3936:FreeRTOS-Kernel/tasks.c ****         }
3937:FreeRTOS-Kernel/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
3938:FreeRTOS-Kernel/tasks.c ****         {
3939:FreeRTOS-Kernel/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
3940:FreeRTOS-Kernel/tasks.c ****              * idle priority.  This path can only be reached if
ARM GAS  /tmp/ccJw1tyY.s 			page 77


3941:FreeRTOS-Kernel/tasks.c ****              * configUSE_PREEMPTION is 0. */
3942:FreeRTOS-Kernel/tasks.c ****             xReturn = 0;
3943:FreeRTOS-Kernel/tasks.c ****         }
3944:FreeRTOS-Kernel/tasks.c ****         else
3945:FreeRTOS-Kernel/tasks.c ****         {
3946:FreeRTOS-Kernel/tasks.c ****             xReturn = xNextTaskUnblockTime;
3947:FreeRTOS-Kernel/tasks.c ****             xReturn -= xTickCount;
3948:FreeRTOS-Kernel/tasks.c ****         }
3949:FreeRTOS-Kernel/tasks.c **** 
3950:FreeRTOS-Kernel/tasks.c ****         return xReturn;
3951:FreeRTOS-Kernel/tasks.c ****     }
3952:FreeRTOS-Kernel/tasks.c **** 
3953:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3954:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
3955:FreeRTOS-Kernel/tasks.c **** 
3956:FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskResumeAll( void )
3957:FreeRTOS-Kernel/tasks.c **** {
3958:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB = NULL;
3959:FreeRTOS-Kernel/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
3960:FreeRTOS-Kernel/tasks.c **** 
3961:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskResumeAll();
3962:FreeRTOS-Kernel/tasks.c **** 
3963:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
3964:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
3965:FreeRTOS-Kernel/tasks.c ****     #endif
3966:FreeRTOS-Kernel/tasks.c ****     {
3967:FreeRTOS-Kernel/tasks.c ****         /* It is possible that an ISR caused a task to be removed from an event
3968:FreeRTOS-Kernel/tasks.c ****          * list while the scheduler was suspended.  If this was the case then the
3969:FreeRTOS-Kernel/tasks.c ****          * removed task will have been added to the xPendingReadyList.  Once the
3970:FreeRTOS-Kernel/tasks.c ****          * scheduler has been resumed it is safe to move all the pending ready
3971:FreeRTOS-Kernel/tasks.c ****          * tasks from this list into their appropriate ready list. */
3972:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
3973:FreeRTOS-Kernel/tasks.c ****         {
3974:FreeRTOS-Kernel/tasks.c ****             BaseType_t xCoreID;
3975:FreeRTOS-Kernel/tasks.c ****             xCoreID = ( BaseType_t ) portGET_CORE_ID();
3976:FreeRTOS-Kernel/tasks.c **** 
3977:FreeRTOS-Kernel/tasks.c ****             /* If uxSchedulerSuspended is zero then this function does not match a
3978:FreeRTOS-Kernel/tasks.c ****              * previous call to vTaskSuspendAll(). */
3979:FreeRTOS-Kernel/tasks.c ****             configASSERT( uxSchedulerSuspended != 0U );
3980:FreeRTOS-Kernel/tasks.c **** 
3981:FreeRTOS-Kernel/tasks.c ****             uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
3982:FreeRTOS-Kernel/tasks.c ****             portRELEASE_TASK_LOCK();
3983:FreeRTOS-Kernel/tasks.c **** 
3984:FreeRTOS-Kernel/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3985:FreeRTOS-Kernel/tasks.c ****             {
3986:FreeRTOS-Kernel/tasks.c ****                 if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
3987:FreeRTOS-Kernel/tasks.c ****                 {
3988:FreeRTOS-Kernel/tasks.c ****                     /* Move any readied tasks from the pending list into the
3989:FreeRTOS-Kernel/tasks.c ****                      * appropriate ready list. */
3990:FreeRTOS-Kernel/tasks.c ****                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3991:FreeRTOS-Kernel/tasks.c ****                     {
3992:FreeRTOS-Kernel/tasks.c ****                         /* MISRA Ref 11.5.3 [Void pointer assignment] */
3993:FreeRTOS-Kernel/tasks.c ****                         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/M
3994:FreeRTOS-Kernel/tasks.c ****                         /* coverity[misra_c_2012_rule_11_5_violation] */
3995:FreeRTOS-Kernel/tasks.c ****                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
3996:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3997:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
ARM GAS  /tmp/ccJw1tyY.s 			page 78


3998:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3999:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4000:FreeRTOS-Kernel/tasks.c **** 
4001:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES == 1 )
4002:FreeRTOS-Kernel/tasks.c ****                         {
4003:FreeRTOS-Kernel/tasks.c ****                             /* If the moved task has a priority higher than the current
4004:FreeRTOS-Kernel/tasks.c ****                              * task then a yield must be performed. */
4005:FreeRTOS-Kernel/tasks.c ****                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4006:FreeRTOS-Kernel/tasks.c ****                             {
4007:FreeRTOS-Kernel/tasks.c ****                                 xYieldPendings[ xCoreID ] = pdTRUE;
4008:FreeRTOS-Kernel/tasks.c ****                             }
4009:FreeRTOS-Kernel/tasks.c ****                             else
4010:FreeRTOS-Kernel/tasks.c ****                             {
4011:FreeRTOS-Kernel/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
4012:FreeRTOS-Kernel/tasks.c ****                             }
4013:FreeRTOS-Kernel/tasks.c ****                         }
4014:FreeRTOS-Kernel/tasks.c ****                         #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4015:FreeRTOS-Kernel/tasks.c ****                         {
4016:FreeRTOS-Kernel/tasks.c ****                             /* All appropriate tasks yield at the moment a task is added to xPendin
4017:FreeRTOS-Kernel/tasks.c ****                              * If the current core yielded then vTaskSwitchContext() has already be
4018:FreeRTOS-Kernel/tasks.c ****                              * which sets xYieldPendings for the current core to pdTRUE. */
4019:FreeRTOS-Kernel/tasks.c ****                         }
4020:FreeRTOS-Kernel/tasks.c ****                         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4021:FreeRTOS-Kernel/tasks.c ****                     }
4022:FreeRTOS-Kernel/tasks.c **** 
4023:FreeRTOS-Kernel/tasks.c ****                     if( pxTCB != NULL )
4024:FreeRTOS-Kernel/tasks.c ****                     {
4025:FreeRTOS-Kernel/tasks.c ****                         /* A task was unblocked while the scheduler was suspended,
4026:FreeRTOS-Kernel/tasks.c ****                          * which may have prevented the next unblock time from being
4027:FreeRTOS-Kernel/tasks.c ****                          * re-calculated, in which case re-calculate it now.  Mainly
4028:FreeRTOS-Kernel/tasks.c ****                          * important for low power tickless implementations, where
4029:FreeRTOS-Kernel/tasks.c ****                          * this can prevent an unnecessary exit from low power
4030:FreeRTOS-Kernel/tasks.c ****                          * state. */
4031:FreeRTOS-Kernel/tasks.c ****                         prvResetNextTaskUnblockTime();
4032:FreeRTOS-Kernel/tasks.c ****                     }
4033:FreeRTOS-Kernel/tasks.c **** 
4034:FreeRTOS-Kernel/tasks.c ****                     /* If any ticks occurred while the scheduler was suspended then
4035:FreeRTOS-Kernel/tasks.c ****                      * they should be processed now.  This ensures the tick count does
4036:FreeRTOS-Kernel/tasks.c ****                      * not  slip, and that any delayed tasks are resumed at the correct
4037:FreeRTOS-Kernel/tasks.c ****                      * time.
4038:FreeRTOS-Kernel/tasks.c ****                      *
4039:FreeRTOS-Kernel/tasks.c ****                      * It should be safe to call xTaskIncrementTick here from any core
4040:FreeRTOS-Kernel/tasks.c ****                      * since we are in a critical section and xTaskIncrementTick itself
4041:FreeRTOS-Kernel/tasks.c ****                      * protects itself within a critical section. Suspending the scheduler
4042:FreeRTOS-Kernel/tasks.c ****                      * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
4043:FreeRTOS-Kernel/tasks.c ****                     {
4044:FreeRTOS-Kernel/tasks.c ****                         TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
4045:FreeRTOS-Kernel/tasks.c **** 
4046:FreeRTOS-Kernel/tasks.c ****                         if( xPendedCounts > ( TickType_t ) 0U )
4047:FreeRTOS-Kernel/tasks.c ****                         {
4048:FreeRTOS-Kernel/tasks.c ****                             do
4049:FreeRTOS-Kernel/tasks.c ****                             {
4050:FreeRTOS-Kernel/tasks.c ****                                 if( xTaskIncrementTick() != pdFALSE )
4051:FreeRTOS-Kernel/tasks.c ****                                 {
4052:FreeRTOS-Kernel/tasks.c ****                                     /* Other cores are interrupted from
4053:FreeRTOS-Kernel/tasks.c ****                                      * within xTaskIncrementTick(). */
4054:FreeRTOS-Kernel/tasks.c ****                                     xYieldPendings[ xCoreID ] = pdTRUE;
ARM GAS  /tmp/ccJw1tyY.s 			page 79


4055:FreeRTOS-Kernel/tasks.c ****                                 }
4056:FreeRTOS-Kernel/tasks.c ****                                 else
4057:FreeRTOS-Kernel/tasks.c ****                                 {
4058:FreeRTOS-Kernel/tasks.c ****                                     mtCOVERAGE_TEST_MARKER();
4059:FreeRTOS-Kernel/tasks.c ****                                 }
4060:FreeRTOS-Kernel/tasks.c **** 
4061:FreeRTOS-Kernel/tasks.c ****                                 --xPendedCounts;
4062:FreeRTOS-Kernel/tasks.c ****                             } while( xPendedCounts > ( TickType_t ) 0U );
4063:FreeRTOS-Kernel/tasks.c **** 
4064:FreeRTOS-Kernel/tasks.c ****                             xPendedTicks = 0;
4065:FreeRTOS-Kernel/tasks.c ****                         }
4066:FreeRTOS-Kernel/tasks.c ****                         else
4067:FreeRTOS-Kernel/tasks.c ****                         {
4068:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4069:FreeRTOS-Kernel/tasks.c ****                         }
4070:FreeRTOS-Kernel/tasks.c ****                     }
4071:FreeRTOS-Kernel/tasks.c **** 
4072:FreeRTOS-Kernel/tasks.c ****                     if( xYieldPendings[ xCoreID ] != pdFALSE )
4073:FreeRTOS-Kernel/tasks.c ****                     {
4074:FreeRTOS-Kernel/tasks.c ****                         #if ( configUSE_PREEMPTION != 0 )
4075:FreeRTOS-Kernel/tasks.c ****                         {
4076:FreeRTOS-Kernel/tasks.c ****                             xAlreadyYielded = pdTRUE;
4077:FreeRTOS-Kernel/tasks.c ****                         }
4078:FreeRTOS-Kernel/tasks.c ****                         #endif /* #if ( configUSE_PREEMPTION != 0 ) */
4079:FreeRTOS-Kernel/tasks.c **** 
4080:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES == 1 )
4081:FreeRTOS-Kernel/tasks.c ****                         {
4082:FreeRTOS-Kernel/tasks.c ****                             taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
4083:FreeRTOS-Kernel/tasks.c ****                         }
4084:FreeRTOS-Kernel/tasks.c ****                         #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4085:FreeRTOS-Kernel/tasks.c ****                     }
4086:FreeRTOS-Kernel/tasks.c ****                     else
4087:FreeRTOS-Kernel/tasks.c ****                     {
4088:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4089:FreeRTOS-Kernel/tasks.c ****                     }
4090:FreeRTOS-Kernel/tasks.c ****                 }
4091:FreeRTOS-Kernel/tasks.c ****             }
4092:FreeRTOS-Kernel/tasks.c ****             else
4093:FreeRTOS-Kernel/tasks.c ****             {
4094:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4095:FreeRTOS-Kernel/tasks.c ****             }
4096:FreeRTOS-Kernel/tasks.c ****         }
4097:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4098:FreeRTOS-Kernel/tasks.c ****     }
4099:FreeRTOS-Kernel/tasks.c **** 
4100:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskResumeAll( xAlreadyYielded );
4101:FreeRTOS-Kernel/tasks.c **** 
4102:FreeRTOS-Kernel/tasks.c ****     return xAlreadyYielded;
4103:FreeRTOS-Kernel/tasks.c **** }
4104:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4105:FreeRTOS-Kernel/tasks.c **** 
4106:FreeRTOS-Kernel/tasks.c **** TickType_t xTaskGetTickCount( void )
4107:FreeRTOS-Kernel/tasks.c **** {
4108:FreeRTOS-Kernel/tasks.c ****     TickType_t xTicks;
4109:FreeRTOS-Kernel/tasks.c **** 
4110:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskGetTickCount();
4111:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 80


4112:FreeRTOS-Kernel/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
4113:FreeRTOS-Kernel/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
4114:FreeRTOS-Kernel/tasks.c ****     {
4115:FreeRTOS-Kernel/tasks.c ****         xTicks = xTickCount;
4116:FreeRTOS-Kernel/tasks.c ****     }
4117:FreeRTOS-Kernel/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
4118:FreeRTOS-Kernel/tasks.c **** 
4119:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskGetTickCount( xTicks );
4120:FreeRTOS-Kernel/tasks.c **** 
4121:FreeRTOS-Kernel/tasks.c ****     return xTicks;
4122:FreeRTOS-Kernel/tasks.c **** }
4123:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4124:FreeRTOS-Kernel/tasks.c **** 
4125:FreeRTOS-Kernel/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
4126:FreeRTOS-Kernel/tasks.c **** {
4127:FreeRTOS-Kernel/tasks.c ****     TickType_t xReturn;
4128:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
4129:FreeRTOS-Kernel/tasks.c **** 
4130:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskGetTickCountFromISR();
4131:FreeRTOS-Kernel/tasks.c **** 
4132:FreeRTOS-Kernel/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
4133:FreeRTOS-Kernel/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
4134:FreeRTOS-Kernel/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
4135:FreeRTOS-Kernel/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
4136:FreeRTOS-Kernel/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
4137:FreeRTOS-Kernel/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4138:FreeRTOS-Kernel/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
4139:FreeRTOS-Kernel/tasks.c ****      * assigned a priority above the configured maximum system call priority.
4140:FreeRTOS-Kernel/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
4141:FreeRTOS-Kernel/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
4142:FreeRTOS-Kernel/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
4143:FreeRTOS-Kernel/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
4144:FreeRTOS-Kernel/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
4145:FreeRTOS-Kernel/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4146:FreeRTOS-Kernel/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4147:FreeRTOS-Kernel/tasks.c **** 
4148:FreeRTOS-Kernel/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
4149:FreeRTOS-Kernel/tasks.c ****     {
4150:FreeRTOS-Kernel/tasks.c ****         xReturn = xTickCount;
4151:FreeRTOS-Kernel/tasks.c ****     }
4152:FreeRTOS-Kernel/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4153:FreeRTOS-Kernel/tasks.c **** 
4154:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskGetTickCountFromISR( xReturn );
4155:FreeRTOS-Kernel/tasks.c **** 
4156:FreeRTOS-Kernel/tasks.c ****     return xReturn;
4157:FreeRTOS-Kernel/tasks.c **** }
4158:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4159:FreeRTOS-Kernel/tasks.c **** 
4160:FreeRTOS-Kernel/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
4161:FreeRTOS-Kernel/tasks.c **** {
4162:FreeRTOS-Kernel/tasks.c ****     traceENTER_uxTaskGetNumberOfTasks();
4163:FreeRTOS-Kernel/tasks.c **** 
4164:FreeRTOS-Kernel/tasks.c ****     /* A critical section is not required because the variables are of type
4165:FreeRTOS-Kernel/tasks.c ****      * BaseType_t. */
4166:FreeRTOS-Kernel/tasks.c ****     traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
4167:FreeRTOS-Kernel/tasks.c **** 
4168:FreeRTOS-Kernel/tasks.c ****     return uxCurrentNumberOfTasks;
ARM GAS  /tmp/ccJw1tyY.s 			page 81


4169:FreeRTOS-Kernel/tasks.c **** }
4170:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4171:FreeRTOS-Kernel/tasks.c **** 
4172:FreeRTOS-Kernel/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery )
4173:FreeRTOS-Kernel/tasks.c **** {
4174:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
4175:FreeRTOS-Kernel/tasks.c **** 
4176:FreeRTOS-Kernel/tasks.c ****     traceENTER_pcTaskGetName( xTaskToQuery );
4177:FreeRTOS-Kernel/tasks.c **** 
4178:FreeRTOS-Kernel/tasks.c ****     /* If null is passed in here then the name of the calling task is being
4179:FreeRTOS-Kernel/tasks.c ****      * queried. */
4180:FreeRTOS-Kernel/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
4181:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
4182:FreeRTOS-Kernel/tasks.c **** 
4183:FreeRTOS-Kernel/tasks.c ****     traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );
4184:FreeRTOS-Kernel/tasks.c **** 
4185:FreeRTOS-Kernel/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
4186:FreeRTOS-Kernel/tasks.c **** }
4187:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4188:FreeRTOS-Kernel/tasks.c **** 
4189:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
4190:FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
4191:FreeRTOS-Kernel/tasks.c ****                                                      const char pcNameToQuery[] )
4192:FreeRTOS-Kernel/tasks.c ****     {
4193:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxReturn = NULL;
4194:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB = NULL;
4195:FreeRTOS-Kernel/tasks.c ****         UBaseType_t x;
4196:FreeRTOS-Kernel/tasks.c ****         char cNextChar;
4197:FreeRTOS-Kernel/tasks.c ****         BaseType_t xBreakLoop;
4198:FreeRTOS-Kernel/tasks.c ****         const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
4199:FreeRTOS-Kernel/tasks.c ****         ListItem_t * pxIterator;
4200:FreeRTOS-Kernel/tasks.c **** 
4201:FreeRTOS-Kernel/tasks.c ****         /* This function is called with the scheduler suspended. */
4202:FreeRTOS-Kernel/tasks.c **** 
4203:FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
4204:FreeRTOS-Kernel/tasks.c ****         {
4205:FreeRTOS-Kernel/tasks.c ****             for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator =
4206:FreeRTOS-Kernel/tasks.c ****             {
4207:FreeRTOS-Kernel/tasks.c ****                 /* MISRA Ref 11.5.3 [Void pointer assignment] */
4208:FreeRTOS-Kernel/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
4209:FreeRTOS-Kernel/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
4210:FreeRTOS-Kernel/tasks.c ****                 pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
4211:FreeRTOS-Kernel/tasks.c **** 
4212:FreeRTOS-Kernel/tasks.c ****                 /* Check each character in the name looking for a match or
4213:FreeRTOS-Kernel/tasks.c ****                  * mismatch. */
4214:FreeRTOS-Kernel/tasks.c ****                 xBreakLoop = pdFALSE;
4215:FreeRTOS-Kernel/tasks.c **** 
4216:FreeRTOS-Kernel/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
4217:FreeRTOS-Kernel/tasks.c ****                 {
4218:FreeRTOS-Kernel/tasks.c ****                     cNextChar = pxTCB->pcTaskName[ x ];
4219:FreeRTOS-Kernel/tasks.c **** 
4220:FreeRTOS-Kernel/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
4221:FreeRTOS-Kernel/tasks.c ****                     {
4222:FreeRTOS-Kernel/tasks.c ****                         /* Characters didn't match. */
4223:FreeRTOS-Kernel/tasks.c ****                         xBreakLoop = pdTRUE;
4224:FreeRTOS-Kernel/tasks.c ****                     }
4225:FreeRTOS-Kernel/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
ARM GAS  /tmp/ccJw1tyY.s 			page 82


4226:FreeRTOS-Kernel/tasks.c ****                     {
4227:FreeRTOS-Kernel/tasks.c ****                         /* Both strings terminated, a match must have been
4228:FreeRTOS-Kernel/tasks.c ****                          * found. */
4229:FreeRTOS-Kernel/tasks.c ****                         pxReturn = pxTCB;
4230:FreeRTOS-Kernel/tasks.c ****                         xBreakLoop = pdTRUE;
4231:FreeRTOS-Kernel/tasks.c ****                     }
4232:FreeRTOS-Kernel/tasks.c ****                     else
4233:FreeRTOS-Kernel/tasks.c ****                     {
4234:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4235:FreeRTOS-Kernel/tasks.c ****                     }
4236:FreeRTOS-Kernel/tasks.c **** 
4237:FreeRTOS-Kernel/tasks.c ****                     if( xBreakLoop != pdFALSE )
4238:FreeRTOS-Kernel/tasks.c ****                     {
4239:FreeRTOS-Kernel/tasks.c ****                         break;
4240:FreeRTOS-Kernel/tasks.c ****                     }
4241:FreeRTOS-Kernel/tasks.c ****                 }
4242:FreeRTOS-Kernel/tasks.c **** 
4243:FreeRTOS-Kernel/tasks.c ****                 if( pxReturn != NULL )
4244:FreeRTOS-Kernel/tasks.c ****                 {
4245:FreeRTOS-Kernel/tasks.c ****                     /* The handle has been found. */
4246:FreeRTOS-Kernel/tasks.c ****                     break;
4247:FreeRTOS-Kernel/tasks.c ****                 }
4248:FreeRTOS-Kernel/tasks.c ****             }
4249:FreeRTOS-Kernel/tasks.c ****         }
4250:FreeRTOS-Kernel/tasks.c ****         else
4251:FreeRTOS-Kernel/tasks.c ****         {
4252:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4253:FreeRTOS-Kernel/tasks.c ****         }
4254:FreeRTOS-Kernel/tasks.c **** 
4255:FreeRTOS-Kernel/tasks.c ****         return pxReturn;
4256:FreeRTOS-Kernel/tasks.c ****     }
4257:FreeRTOS-Kernel/tasks.c **** 
4258:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
4259:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4260:FreeRTOS-Kernel/tasks.c **** 
4261:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
4262:FreeRTOS-Kernel/tasks.c **** 
4263:FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery )
4264:FreeRTOS-Kernel/tasks.c ****     {
4265:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
4266:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
4267:FreeRTOS-Kernel/tasks.c **** 
4268:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetHandle( pcNameToQuery );
4269:FreeRTOS-Kernel/tasks.c **** 
4270:FreeRTOS-Kernel/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
4271:FreeRTOS-Kernel/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
4272:FreeRTOS-Kernel/tasks.c **** 
4273:FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
4274:FreeRTOS-Kernel/tasks.c ****         {
4275:FreeRTOS-Kernel/tasks.c ****             /* Search the ready lists. */
4276:FreeRTOS-Kernel/tasks.c ****             do
4277:FreeRTOS-Kernel/tasks.c ****             {
4278:FreeRTOS-Kernel/tasks.c ****                 uxQueue--;
4279:FreeRTOS-Kernel/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
4280:FreeRTOS-Kernel/tasks.c **** 
4281:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB != NULL )
4282:FreeRTOS-Kernel/tasks.c ****                 {
ARM GAS  /tmp/ccJw1tyY.s 			page 83


4283:FreeRTOS-Kernel/tasks.c ****                     /* Found the handle. */
4284:FreeRTOS-Kernel/tasks.c ****                     break;
4285:FreeRTOS-Kernel/tasks.c ****                 }
4286:FreeRTOS-Kernel/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
4287:FreeRTOS-Kernel/tasks.c **** 
4288:FreeRTOS-Kernel/tasks.c ****             /* Search the delayed lists. */
4289:FreeRTOS-Kernel/tasks.c ****             if( pxTCB == NULL )
4290:FreeRTOS-Kernel/tasks.c ****             {
4291:FreeRTOS-Kernel/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
4292:FreeRTOS-Kernel/tasks.c ****             }
4293:FreeRTOS-Kernel/tasks.c **** 
4294:FreeRTOS-Kernel/tasks.c ****             if( pxTCB == NULL )
4295:FreeRTOS-Kernel/tasks.c ****             {
4296:FreeRTOS-Kernel/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
4297:FreeRTOS-Kernel/tasks.c ****             }
4298:FreeRTOS-Kernel/tasks.c **** 
4299:FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
4300:FreeRTOS-Kernel/tasks.c ****             {
4301:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB == NULL )
4302:FreeRTOS-Kernel/tasks.c ****                 {
4303:FreeRTOS-Kernel/tasks.c ****                     /* Search the suspended list. */
4304:FreeRTOS-Kernel/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
4305:FreeRTOS-Kernel/tasks.c ****                 }
4306:FreeRTOS-Kernel/tasks.c ****             }
4307:FreeRTOS-Kernel/tasks.c ****             #endif
4308:FreeRTOS-Kernel/tasks.c **** 
4309:FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
4310:FreeRTOS-Kernel/tasks.c ****             {
4311:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB == NULL )
4312:FreeRTOS-Kernel/tasks.c ****                 {
4313:FreeRTOS-Kernel/tasks.c ****                     /* Search the deleted list. */
4314:FreeRTOS-Kernel/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
4315:FreeRTOS-Kernel/tasks.c ****                 }
4316:FreeRTOS-Kernel/tasks.c ****             }
4317:FreeRTOS-Kernel/tasks.c ****             #endif
4318:FreeRTOS-Kernel/tasks.c ****         }
4319:FreeRTOS-Kernel/tasks.c ****         ( void ) xTaskResumeAll();
4320:FreeRTOS-Kernel/tasks.c **** 
4321:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetHandle( pxTCB );
4322:FreeRTOS-Kernel/tasks.c **** 
4323:FreeRTOS-Kernel/tasks.c ****         return pxTCB;
4324:FreeRTOS-Kernel/tasks.c ****     }
4325:FreeRTOS-Kernel/tasks.c **** 
4326:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
4327:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4328:FreeRTOS-Kernel/tasks.c **** 
4329:FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
4330:FreeRTOS-Kernel/tasks.c **** 
4331:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGetStaticBuffers( TaskHandle_t xTask,
4332:FreeRTOS-Kernel/tasks.c ****                                       StackType_t ** ppuxStackBuffer,
4333:FreeRTOS-Kernel/tasks.c ****                                       StaticTask_t ** ppxTaskBuffer )
4334:FreeRTOS-Kernel/tasks.c ****     {
4335:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
4336:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
4337:FreeRTOS-Kernel/tasks.c **** 
4338:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetStaticBuffers( xTask, ppuxStackBuffer, ppxTaskBuffer );
4339:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 84


4340:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppuxStackBuffer != NULL );
4341:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
4342:FreeRTOS-Kernel/tasks.c **** 
4343:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
4344:FreeRTOS-Kernel/tasks.c **** 
4345:FreeRTOS-Kernel/tasks.c ****         #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
4346:FreeRTOS-Kernel/tasks.c ****         {
4347:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB )
4348:FreeRTOS-Kernel/tasks.c ****             {
4349:FreeRTOS-Kernel/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
4350:FreeRTOS-Kernel/tasks.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
4351:FreeRTOS-Kernel/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
4352:FreeRTOS-Kernel/tasks.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
4353:FreeRTOS-Kernel/tasks.c ****                 *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
4354:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
4355:FreeRTOS-Kernel/tasks.c ****             }
4356:FreeRTOS-Kernel/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
4357:FreeRTOS-Kernel/tasks.c ****             {
4358:FreeRTOS-Kernel/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
4359:FreeRTOS-Kernel/tasks.c ****                 *ppxTaskBuffer = NULL;
4360:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
4361:FreeRTOS-Kernel/tasks.c ****             }
4362:FreeRTOS-Kernel/tasks.c ****             else
4363:FreeRTOS-Kernel/tasks.c ****             {
4364:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFALSE;
4365:FreeRTOS-Kernel/tasks.c ****             }
4366:FreeRTOS-Kernel/tasks.c ****         }
4367:FreeRTOS-Kernel/tasks.c ****         #else /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
4368:FreeRTOS-Kernel/tasks.c ****         {
4369:FreeRTOS-Kernel/tasks.c ****             *ppuxStackBuffer = pxTCB->pxStack;
4370:FreeRTOS-Kernel/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
4371:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
4372:FreeRTOS-Kernel/tasks.c ****         }
4373:FreeRTOS-Kernel/tasks.c ****         #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
4374:FreeRTOS-Kernel/tasks.c **** 
4375:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetStaticBuffers( xReturn );
4376:FreeRTOS-Kernel/tasks.c **** 
4377:FreeRTOS-Kernel/tasks.c ****         return xReturn;
4378:FreeRTOS-Kernel/tasks.c ****     }
4379:FreeRTOS-Kernel/tasks.c **** 
4380:FreeRTOS-Kernel/tasks.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
4381:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4382:FreeRTOS-Kernel/tasks.c **** 
4383:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
4384:FreeRTOS-Kernel/tasks.c **** 
4385:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
4386:FreeRTOS-Kernel/tasks.c ****                                       const UBaseType_t uxArraySize,
4387:FreeRTOS-Kernel/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
4388:FreeRTOS-Kernel/tasks.c ****     {
4389:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
4390:FreeRTOS-Kernel/tasks.c **** 
4391:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
4392:FreeRTOS-Kernel/tasks.c **** 
4393:FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
4394:FreeRTOS-Kernel/tasks.c ****         {
4395:FreeRTOS-Kernel/tasks.c ****             /* Is there a space in the array for each task in the system? */
4396:FreeRTOS-Kernel/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  /tmp/ccJw1tyY.s 			page 85


4397:FreeRTOS-Kernel/tasks.c ****             {
4398:FreeRTOS-Kernel/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
4399:FreeRTOS-Kernel/tasks.c ****                  * task in the Ready state. */
4400:FreeRTOS-Kernel/tasks.c ****                 do
4401:FreeRTOS-Kernel/tasks.c ****                 {
4402:FreeRTOS-Kernel/tasks.c ****                     uxQueue--;
4403:FreeRTOS-Kernel/tasks.c ****                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStat
4404:FreeRTOS-Kernel/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
4405:FreeRTOS-Kernel/tasks.c **** 
4406:FreeRTOS-Kernel/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
4407:FreeRTOS-Kernel/tasks.c ****                  * task in the Blocked state. */
4408:FreeRTOS-Kernel/tasks.c ****                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusAr
4409:FreeRTOS-Kernel/tasks.c ****                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusAr
4410:FreeRTOS-Kernel/tasks.c **** 
4411:FreeRTOS-Kernel/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
4412:FreeRTOS-Kernel/tasks.c ****                 {
4413:FreeRTOS-Kernel/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
4414:FreeRTOS-Kernel/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
4415:FreeRTOS-Kernel/tasks.c ****                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStat
4416:FreeRTOS-Kernel/tasks.c ****                 }
4417:FreeRTOS-Kernel/tasks.c ****                 #endif
4418:FreeRTOS-Kernel/tasks.c **** 
4419:FreeRTOS-Kernel/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
4420:FreeRTOS-Kernel/tasks.c ****                 {
4421:FreeRTOS-Kernel/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
4422:FreeRTOS-Kernel/tasks.c ****                      * each task in the Suspended state. */
4423:FreeRTOS-Kernel/tasks.c ****                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStat
4424:FreeRTOS-Kernel/tasks.c ****                 }
4425:FreeRTOS-Kernel/tasks.c ****                 #endif
4426:FreeRTOS-Kernel/tasks.c **** 
4427:FreeRTOS-Kernel/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
4428:FreeRTOS-Kernel/tasks.c ****                 {
4429:FreeRTOS-Kernel/tasks.c ****                     if( pulTotalRunTime != NULL )
4430:FreeRTOS-Kernel/tasks.c ****                     {
4431:FreeRTOS-Kernel/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
4432:FreeRTOS-Kernel/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
4433:FreeRTOS-Kernel/tasks.c ****                         #else
4434:FreeRTOS-Kernel/tasks.c ****                             *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COU
4435:FreeRTOS-Kernel/tasks.c ****                         #endif
4436:FreeRTOS-Kernel/tasks.c ****                     }
4437:FreeRTOS-Kernel/tasks.c ****                 }
4438:FreeRTOS-Kernel/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
4439:FreeRTOS-Kernel/tasks.c ****                 {
4440:FreeRTOS-Kernel/tasks.c ****                     if( pulTotalRunTime != NULL )
4441:FreeRTOS-Kernel/tasks.c ****                     {
4442:FreeRTOS-Kernel/tasks.c ****                         *pulTotalRunTime = 0;
4443:FreeRTOS-Kernel/tasks.c ****                     }
4444:FreeRTOS-Kernel/tasks.c ****                 }
4445:FreeRTOS-Kernel/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
4446:FreeRTOS-Kernel/tasks.c ****             }
4447:FreeRTOS-Kernel/tasks.c ****             else
4448:FreeRTOS-Kernel/tasks.c ****             {
4449:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4450:FreeRTOS-Kernel/tasks.c ****             }
4451:FreeRTOS-Kernel/tasks.c ****         }
4452:FreeRTOS-Kernel/tasks.c ****         ( void ) xTaskResumeAll();
4453:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 86


4454:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskGetSystemState( uxTask );
4455:FreeRTOS-Kernel/tasks.c **** 
4456:FreeRTOS-Kernel/tasks.c ****         return uxTask;
4457:FreeRTOS-Kernel/tasks.c ****     }
4458:FreeRTOS-Kernel/tasks.c **** 
4459:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
4460:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
4461:FreeRTOS-Kernel/tasks.c **** 
4462:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
4463:FreeRTOS-Kernel/tasks.c **** 
4464:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
4465:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xTaskGetIdleTaskHandle( void )
4466:FreeRTOS-Kernel/tasks.c ****         {
4467:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskGetIdleTaskHandle();
4468:FreeRTOS-Kernel/tasks.c **** 
4469:FreeRTOS-Kernel/tasks.c ****             /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
4470:FreeRTOS-Kernel/tasks.c ****              * started, then xIdleTaskHandles will be NULL. */
4471:FreeRTOS-Kernel/tasks.c ****             configASSERT( ( xIdleTaskHandles[ 0 ] != NULL ) );
4472:FreeRTOS-Kernel/tasks.c **** 
4473:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskGetIdleTaskHandle( xIdleTaskHandles[ 0 ] );
4474:FreeRTOS-Kernel/tasks.c **** 
4475:FreeRTOS-Kernel/tasks.c ****             return xIdleTaskHandles[ 0 ];
4476:FreeRTOS-Kernel/tasks.c ****         }
4477:FreeRTOS-Kernel/tasks.c ****     #endif /* if ( configNUMBER_OF_CORES == 1 ) */
4478:FreeRTOS-Kernel/tasks.c **** 
4479:FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandleForCore( BaseType_t xCoreID )
4480:FreeRTOS-Kernel/tasks.c ****     {
4481:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetIdleTaskHandleForCore( xCoreID );
4482:FreeRTOS-Kernel/tasks.c **** 
4483:FreeRTOS-Kernel/tasks.c ****         /* Ensure the core ID is valid. */
4484:FreeRTOS-Kernel/tasks.c ****         configASSERT( taskVALID_CORE_ID( xCoreID ) == pdTRUE );
4485:FreeRTOS-Kernel/tasks.c **** 
4486:FreeRTOS-Kernel/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
4487:FreeRTOS-Kernel/tasks.c ****          * started, then xIdleTaskHandles will be NULL. */
4488:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xIdleTaskHandles[ xCoreID ] != NULL ) );
4489:FreeRTOS-Kernel/tasks.c **** 
4490:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetIdleTaskHandleForCore( xIdleTaskHandles[ xCoreID ] );
4491:FreeRTOS-Kernel/tasks.c **** 
4492:FreeRTOS-Kernel/tasks.c ****         return xIdleTaskHandles[ xCoreID ];
4493:FreeRTOS-Kernel/tasks.c ****     }
4494:FreeRTOS-Kernel/tasks.c **** 
4495:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
4496:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
4497:FreeRTOS-Kernel/tasks.c **** 
4498:FreeRTOS-Kernel/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
4499:FreeRTOS-Kernel/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
4500:FreeRTOS-Kernel/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
4501:FreeRTOS-Kernel/tasks.c ****  * 1. */
4502:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
4503:FreeRTOS-Kernel/tasks.c **** 
4504:FreeRTOS-Kernel/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
4505:FreeRTOS-Kernel/tasks.c ****     {
4506:FreeRTOS-Kernel/tasks.c ****         TickType_t xUpdatedTickCount;
4507:FreeRTOS-Kernel/tasks.c **** 
4508:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskStepTick( xTicksToJump );
4509:FreeRTOS-Kernel/tasks.c **** 
4510:FreeRTOS-Kernel/tasks.c ****         /* Correct the tick count value after a period during which the tick
ARM GAS  /tmp/ccJw1tyY.s 			page 87


4511:FreeRTOS-Kernel/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
4512:FreeRTOS-Kernel/tasks.c ****          * each stepped tick. */
4513:FreeRTOS-Kernel/tasks.c ****         xUpdatedTickCount = xTickCount + xTicksToJump;
4514:FreeRTOS-Kernel/tasks.c ****         configASSERT( xUpdatedTickCount <= xNextTaskUnblockTime );
4515:FreeRTOS-Kernel/tasks.c **** 
4516:FreeRTOS-Kernel/tasks.c ****         if( xUpdatedTickCount == xNextTaskUnblockTime )
4517:FreeRTOS-Kernel/tasks.c ****         {
4518:FreeRTOS-Kernel/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
4519:FreeRTOS-Kernel/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
4520:FreeRTOS-Kernel/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
4521:FreeRTOS-Kernel/tasks.c ****             configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
4522:FreeRTOS-Kernel/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
4523:FreeRTOS-Kernel/tasks.c **** 
4524:FreeRTOS-Kernel/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
4525:FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
4526:FreeRTOS-Kernel/tasks.c ****             {
4527:FreeRTOS-Kernel/tasks.c ****                 xPendedTicks++;
4528:FreeRTOS-Kernel/tasks.c ****             }
4529:FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
4530:FreeRTOS-Kernel/tasks.c ****             xTicksToJump--;
4531:FreeRTOS-Kernel/tasks.c ****         }
4532:FreeRTOS-Kernel/tasks.c ****         else
4533:FreeRTOS-Kernel/tasks.c ****         {
4534:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4535:FreeRTOS-Kernel/tasks.c ****         }
4536:FreeRTOS-Kernel/tasks.c **** 
4537:FreeRTOS-Kernel/tasks.c ****         xTickCount += xTicksToJump;
4538:FreeRTOS-Kernel/tasks.c **** 
4539:FreeRTOS-Kernel/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
4540:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskStepTick();
4541:FreeRTOS-Kernel/tasks.c ****     }
4542:FreeRTOS-Kernel/tasks.c **** 
4543:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
4544:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
4545:FreeRTOS-Kernel/tasks.c **** 
4546:FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
4547:FreeRTOS-Kernel/tasks.c **** {
4548:FreeRTOS-Kernel/tasks.c ****     BaseType_t xYieldOccurred;
4549:FreeRTOS-Kernel/tasks.c **** 
4550:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskCatchUpTicks( xTicksToCatchUp );
4551:FreeRTOS-Kernel/tasks.c **** 
4552:FreeRTOS-Kernel/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
4553:FreeRTOS-Kernel/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
4554:FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
4555:FreeRTOS-Kernel/tasks.c **** 
4556:FreeRTOS-Kernel/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
4557:FreeRTOS-Kernel/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
4558:FreeRTOS-Kernel/tasks.c ****     vTaskSuspendAll();
4559:FreeRTOS-Kernel/tasks.c **** 
4560:FreeRTOS-Kernel/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
4561:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
4562:FreeRTOS-Kernel/tasks.c ****     {
4563:FreeRTOS-Kernel/tasks.c ****         xPendedTicks += xTicksToCatchUp;
4564:FreeRTOS-Kernel/tasks.c ****     }
4565:FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
4566:FreeRTOS-Kernel/tasks.c ****     xYieldOccurred = xTaskResumeAll();
4567:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 88


4568:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskCatchUpTicks( xYieldOccurred );
4569:FreeRTOS-Kernel/tasks.c **** 
4570:FreeRTOS-Kernel/tasks.c ****     return xYieldOccurred;
4571:FreeRTOS-Kernel/tasks.c **** }
4572:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
4573:FreeRTOS-Kernel/tasks.c **** 
4574:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
4575:FreeRTOS-Kernel/tasks.c **** 
4576:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
4577:FreeRTOS-Kernel/tasks.c ****     {
4578:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB = xTask;
4579:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
4580:FreeRTOS-Kernel/tasks.c **** 
4581:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskAbortDelay( xTask );
4582:FreeRTOS-Kernel/tasks.c **** 
4583:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTCB );
4584:FreeRTOS-Kernel/tasks.c **** 
4585:FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
4586:FreeRTOS-Kernel/tasks.c ****         {
4587:FreeRTOS-Kernel/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
4588:FreeRTOS-Kernel/tasks.c ****              * it is actually in the Blocked state. */
4589:FreeRTOS-Kernel/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
4590:FreeRTOS-Kernel/tasks.c ****             {
4591:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
4592:FreeRTOS-Kernel/tasks.c **** 
4593:FreeRTOS-Kernel/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
4594:FreeRTOS-Kernel/tasks.c ****                  * interrupt won't touch the xStateListItem because the
4595:FreeRTOS-Kernel/tasks.c ****                  * scheduler is suspended. */
4596:FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4597:FreeRTOS-Kernel/tasks.c **** 
4598:FreeRTOS-Kernel/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
4599:FreeRTOS-Kernel/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
4600:FreeRTOS-Kernel/tasks.c ****                  * even though the scheduler is suspended, so a critical section
4601:FreeRTOS-Kernel/tasks.c ****                  * is used. */
4602:FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
4603:FreeRTOS-Kernel/tasks.c ****                 {
4604:FreeRTOS-Kernel/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
4605:FreeRTOS-Kernel/tasks.c ****                     {
4606:FreeRTOS-Kernel/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
4607:FreeRTOS-Kernel/tasks.c **** 
4608:FreeRTOS-Kernel/tasks.c ****                         /* This lets the task know it was forcibly removed from the
4609:FreeRTOS-Kernel/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
4610:FreeRTOS-Kernel/tasks.c ****                          * then block again. */
4611:FreeRTOS-Kernel/tasks.c ****                         pxTCB->ucDelayAborted = ( uint8_t ) pdTRUE;
4612:FreeRTOS-Kernel/tasks.c ****                     }
4613:FreeRTOS-Kernel/tasks.c ****                     else
4614:FreeRTOS-Kernel/tasks.c ****                     {
4615:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4616:FreeRTOS-Kernel/tasks.c ****                     }
4617:FreeRTOS-Kernel/tasks.c ****                 }
4618:FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
4619:FreeRTOS-Kernel/tasks.c **** 
4620:FreeRTOS-Kernel/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
4621:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4622:FreeRTOS-Kernel/tasks.c **** 
4623:FreeRTOS-Kernel/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
4624:FreeRTOS-Kernel/tasks.c ****                  * switch if preemption is turned off. */
ARM GAS  /tmp/ccJw1tyY.s 			page 89


4625:FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
4626:FreeRTOS-Kernel/tasks.c ****                 {
4627:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES == 1 )
4628:FreeRTOS-Kernel/tasks.c ****                     {
4629:FreeRTOS-Kernel/tasks.c ****                         /* Preemption is on, but a context switch should only be
4630:FreeRTOS-Kernel/tasks.c ****                          * performed if the unblocked task has a priority that is
4631:FreeRTOS-Kernel/tasks.c ****                          * higher than the currently executing task. */
4632:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4633:FreeRTOS-Kernel/tasks.c ****                         {
4634:FreeRTOS-Kernel/tasks.c ****                             /* Pend the yield to be performed when the scheduler
4635:FreeRTOS-Kernel/tasks.c ****                              * is unsuspended. */
4636:FreeRTOS-Kernel/tasks.c ****                             xYieldPendings[ 0 ] = pdTRUE;
4637:FreeRTOS-Kernel/tasks.c ****                         }
4638:FreeRTOS-Kernel/tasks.c ****                         else
4639:FreeRTOS-Kernel/tasks.c ****                         {
4640:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4641:FreeRTOS-Kernel/tasks.c ****                         }
4642:FreeRTOS-Kernel/tasks.c ****                     }
4643:FreeRTOS-Kernel/tasks.c ****                     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4644:FreeRTOS-Kernel/tasks.c ****                     {
4645:FreeRTOS-Kernel/tasks.c ****                         taskENTER_CRITICAL();
4646:FreeRTOS-Kernel/tasks.c ****                         {
4647:FreeRTOS-Kernel/tasks.c ****                             prvYieldForTask( pxTCB );
4648:FreeRTOS-Kernel/tasks.c ****                         }
4649:FreeRTOS-Kernel/tasks.c ****                         taskEXIT_CRITICAL();
4650:FreeRTOS-Kernel/tasks.c ****                     }
4651:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4652:FreeRTOS-Kernel/tasks.c ****                 }
4653:FreeRTOS-Kernel/tasks.c ****                 #endif /* #if ( configUSE_PREEMPTION == 1 ) */
4654:FreeRTOS-Kernel/tasks.c ****             }
4655:FreeRTOS-Kernel/tasks.c ****             else
4656:FreeRTOS-Kernel/tasks.c ****             {
4657:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFAIL;
4658:FreeRTOS-Kernel/tasks.c ****             }
4659:FreeRTOS-Kernel/tasks.c ****         }
4660:FreeRTOS-Kernel/tasks.c ****         ( void ) xTaskResumeAll();
4661:FreeRTOS-Kernel/tasks.c **** 
4662:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskAbortDelay( xReturn );
4663:FreeRTOS-Kernel/tasks.c **** 
4664:FreeRTOS-Kernel/tasks.c ****         return xReturn;
4665:FreeRTOS-Kernel/tasks.c ****     }
4666:FreeRTOS-Kernel/tasks.c **** 
4667:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
4668:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
4669:FreeRTOS-Kernel/tasks.c **** 
4670:FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskIncrementTick( void )
4671:FreeRTOS-Kernel/tasks.c **** {
4672:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
4673:FreeRTOS-Kernel/tasks.c ****     TickType_t xItemValue;
4674:FreeRTOS-Kernel/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
4675:FreeRTOS-Kernel/tasks.c **** 
4676:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_PREEMPTION == 1 ) && ( configNUMBER_OF_CORES > 1 )
4677:FreeRTOS-Kernel/tasks.c ****     BaseType_t xYieldRequiredForCore[ configNUMBER_OF_CORES ] = { pdFALSE };
4678:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configUSE_PREEMPTION == 1 ) && ( configNUMBER_OF_CORES > 1 ) */
4679:FreeRTOS-Kernel/tasks.c **** 
4680:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskIncrementTick();
4681:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 90


4682:FreeRTOS-Kernel/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
4683:FreeRTOS-Kernel/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
4684:FreeRTOS-Kernel/tasks.c ****      * tasks to be unblocked. */
4685:FreeRTOS-Kernel/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
4686:FreeRTOS-Kernel/tasks.c **** 
4687:FreeRTOS-Kernel/tasks.c ****     /* Tick increment should occur on every kernel timer event. Core 0 has the
4688:FreeRTOS-Kernel/tasks.c ****      * responsibility to increment the tick, or increment the pended ticks if the
4689:FreeRTOS-Kernel/tasks.c ****      * scheduler is suspended.  If pended ticks is greater than zero, the core that
4690:FreeRTOS-Kernel/tasks.c ****      * calls xTaskResumeAll has the responsibility to increment the tick. */
4691:FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
4692:FreeRTOS-Kernel/tasks.c ****     {
4693:FreeRTOS-Kernel/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
4694:FreeRTOS-Kernel/tasks.c ****          * block. */
4695:FreeRTOS-Kernel/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
4696:FreeRTOS-Kernel/tasks.c **** 
4697:FreeRTOS-Kernel/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
4698:FreeRTOS-Kernel/tasks.c ****          * delayed lists if it wraps to 0. */
4699:FreeRTOS-Kernel/tasks.c ****         xTickCount = xConstTickCount;
4700:FreeRTOS-Kernel/tasks.c **** 
4701:FreeRTOS-Kernel/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U )
4702:FreeRTOS-Kernel/tasks.c ****         {
4703:FreeRTOS-Kernel/tasks.c ****             taskSWITCH_DELAYED_LISTS();
4704:FreeRTOS-Kernel/tasks.c ****         }
4705:FreeRTOS-Kernel/tasks.c ****         else
4706:FreeRTOS-Kernel/tasks.c ****         {
4707:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4708:FreeRTOS-Kernel/tasks.c ****         }
4709:FreeRTOS-Kernel/tasks.c **** 
4710:FreeRTOS-Kernel/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
4711:FreeRTOS-Kernel/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
4712:FreeRTOS-Kernel/tasks.c ****          * has been found whose block time has not expired there is no need to
4713:FreeRTOS-Kernel/tasks.c ****          * look any further down the list. */
4714:FreeRTOS-Kernel/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
4715:FreeRTOS-Kernel/tasks.c ****         {
4716:FreeRTOS-Kernel/tasks.c ****             for( ; ; )
4717:FreeRTOS-Kernel/tasks.c ****             {
4718:FreeRTOS-Kernel/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
4719:FreeRTOS-Kernel/tasks.c ****                 {
4720:FreeRTOS-Kernel/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
4721:FreeRTOS-Kernel/tasks.c ****                      * to the maximum possible value so it is extremely
4722:FreeRTOS-Kernel/tasks.c ****                      * unlikely that the
4723:FreeRTOS-Kernel/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
4724:FreeRTOS-Kernel/tasks.c ****                      * next time through. */
4725:FreeRTOS-Kernel/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY;
4726:FreeRTOS-Kernel/tasks.c ****                     break;
4727:FreeRTOS-Kernel/tasks.c ****                 }
4728:FreeRTOS-Kernel/tasks.c ****                 else
4729:FreeRTOS-Kernel/tasks.c ****                 {
4730:FreeRTOS-Kernel/tasks.c ****                     /* The delayed list is not empty, get the value of the
4731:FreeRTOS-Kernel/tasks.c ****                      * item at the head of the delayed list.  This is the time
4732:FreeRTOS-Kernel/tasks.c ****                      * at which the task at the head of the delayed list must
4733:FreeRTOS-Kernel/tasks.c ****                      * be removed from the Blocked state. */
4734:FreeRTOS-Kernel/tasks.c ****                     /* MISRA Ref 11.5.3 [Void pointer assignment] */
4735:FreeRTOS-Kernel/tasks.c ****                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA
4736:FreeRTOS-Kernel/tasks.c ****                     /* coverity[misra_c_2012_rule_11_5_violation] */
4737:FreeRTOS-Kernel/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
4738:FreeRTOS-Kernel/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccJw1tyY.s 			page 91


4739:FreeRTOS-Kernel/tasks.c **** 
4740:FreeRTOS-Kernel/tasks.c ****                     if( xConstTickCount < xItemValue )
4741:FreeRTOS-Kernel/tasks.c ****                     {
4742:FreeRTOS-Kernel/tasks.c ****                         /* It is not time to unblock this item yet, but the
4743:FreeRTOS-Kernel/tasks.c ****                          * item value is the time at which the task at the head
4744:FreeRTOS-Kernel/tasks.c ****                          * of the blocked list must be removed from the Blocked
4745:FreeRTOS-Kernel/tasks.c ****                          * state -  so record the item value in
4746:FreeRTOS-Kernel/tasks.c ****                          * xNextTaskUnblockTime. */
4747:FreeRTOS-Kernel/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
4748:FreeRTOS-Kernel/tasks.c ****                         break;
4749:FreeRTOS-Kernel/tasks.c ****                     }
4750:FreeRTOS-Kernel/tasks.c ****                     else
4751:FreeRTOS-Kernel/tasks.c ****                     {
4752:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4753:FreeRTOS-Kernel/tasks.c ****                     }
4754:FreeRTOS-Kernel/tasks.c **** 
4755:FreeRTOS-Kernel/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
4756:FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4757:FreeRTOS-Kernel/tasks.c **** 
4758:FreeRTOS-Kernel/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
4759:FreeRTOS-Kernel/tasks.c ****                      * it from the event list. */
4760:FreeRTOS-Kernel/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
4761:FreeRTOS-Kernel/tasks.c ****                     {
4762:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
4763:FreeRTOS-Kernel/tasks.c ****                     }
4764:FreeRTOS-Kernel/tasks.c ****                     else
4765:FreeRTOS-Kernel/tasks.c ****                     {
4766:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4767:FreeRTOS-Kernel/tasks.c ****                     }
4768:FreeRTOS-Kernel/tasks.c **** 
4769:FreeRTOS-Kernel/tasks.c ****                     /* Place the unblocked task into the appropriate ready
4770:FreeRTOS-Kernel/tasks.c ****                      * list. */
4771:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4772:FreeRTOS-Kernel/tasks.c **** 
4773:FreeRTOS-Kernel/tasks.c ****                     /* A task being unblocked cannot cause an immediate
4774:FreeRTOS-Kernel/tasks.c ****                      * context switch if preemption is turned off. */
4775:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
4776:FreeRTOS-Kernel/tasks.c ****                     {
4777:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES == 1 )
4778:FreeRTOS-Kernel/tasks.c ****                         {
4779:FreeRTOS-Kernel/tasks.c ****                             /* Preemption is on, but a context switch should
4780:FreeRTOS-Kernel/tasks.c ****                              * only be performed if the unblocked task's
4781:FreeRTOS-Kernel/tasks.c ****                              * priority is higher than the currently executing
4782:FreeRTOS-Kernel/tasks.c ****                              * task.
4783:FreeRTOS-Kernel/tasks.c ****                              * The case of equal priority tasks sharing
4784:FreeRTOS-Kernel/tasks.c ****                              * processing time (which happens when both
4785:FreeRTOS-Kernel/tasks.c ****                              * preemption and time slicing are on) is
4786:FreeRTOS-Kernel/tasks.c ****                              * handled below.*/
4787:FreeRTOS-Kernel/tasks.c ****                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4788:FreeRTOS-Kernel/tasks.c ****                             {
4789:FreeRTOS-Kernel/tasks.c ****                                 xSwitchRequired = pdTRUE;
4790:FreeRTOS-Kernel/tasks.c ****                             }
4791:FreeRTOS-Kernel/tasks.c ****                             else
4792:FreeRTOS-Kernel/tasks.c ****                             {
4793:FreeRTOS-Kernel/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
4794:FreeRTOS-Kernel/tasks.c ****                             }
4795:FreeRTOS-Kernel/tasks.c ****                         }
ARM GAS  /tmp/ccJw1tyY.s 			page 92


4796:FreeRTOS-Kernel/tasks.c ****                         #else /* #if( configNUMBER_OF_CORES == 1 ) */
4797:FreeRTOS-Kernel/tasks.c ****                         {
4798:FreeRTOS-Kernel/tasks.c ****                             prvYieldForTask( pxTCB );
4799:FreeRTOS-Kernel/tasks.c ****                         }
4800:FreeRTOS-Kernel/tasks.c ****                         #endif /* #if( configNUMBER_OF_CORES == 1 ) */
4801:FreeRTOS-Kernel/tasks.c ****                     }
4802:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configUSE_PREEMPTION == 1 ) */
4803:FreeRTOS-Kernel/tasks.c ****                 }
4804:FreeRTOS-Kernel/tasks.c ****             }
4805:FreeRTOS-Kernel/tasks.c ****         }
4806:FreeRTOS-Kernel/tasks.c **** 
4807:FreeRTOS-Kernel/tasks.c ****         /* Tasks of equal priority to the currently running task will share
4808:FreeRTOS-Kernel/tasks.c ****          * processing time (time slice) if preemption is on, and the application
4809:FreeRTOS-Kernel/tasks.c ****          * writer has not explicitly turned time slicing off. */
4810:FreeRTOS-Kernel/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
4811:FreeRTOS-Kernel/tasks.c ****         {
4812:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
4813:FreeRTOS-Kernel/tasks.c ****             {
4814:FreeRTOS-Kernel/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
4815:FreeRTOS-Kernel/tasks.c ****                 {
4816:FreeRTOS-Kernel/tasks.c ****                     xSwitchRequired = pdTRUE;
4817:FreeRTOS-Kernel/tasks.c ****                 }
4818:FreeRTOS-Kernel/tasks.c ****                 else
4819:FreeRTOS-Kernel/tasks.c ****                 {
4820:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4821:FreeRTOS-Kernel/tasks.c ****                 }
4822:FreeRTOS-Kernel/tasks.c ****             }
4823:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4824:FreeRTOS-Kernel/tasks.c ****             {
4825:FreeRTOS-Kernel/tasks.c ****                 BaseType_t xCoreID;
4826:FreeRTOS-Kernel/tasks.c **** 
4827:FreeRTOS-Kernel/tasks.c ****                 for( xCoreID = 0; xCoreID < ( ( BaseType_t ) configNUMBER_OF_CORES ); xCoreID++ )
4828:FreeRTOS-Kernel/tasks.c ****                 {
4829:FreeRTOS-Kernel/tasks.c ****                     if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCBs[ xCoreID ]->ux
4830:FreeRTOS-Kernel/tasks.c ****                     {
4831:FreeRTOS-Kernel/tasks.c ****                         xYieldRequiredForCore[ xCoreID ] = pdTRUE;
4832:FreeRTOS-Kernel/tasks.c ****                     }
4833:FreeRTOS-Kernel/tasks.c ****                     else
4834:FreeRTOS-Kernel/tasks.c ****                     {
4835:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4836:FreeRTOS-Kernel/tasks.c ****                     }
4837:FreeRTOS-Kernel/tasks.c ****                 }
4838:FreeRTOS-Kernel/tasks.c ****             }
4839:FreeRTOS-Kernel/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4840:FreeRTOS-Kernel/tasks.c ****         }
4841:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
4842:FreeRTOS-Kernel/tasks.c **** 
4843:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
4844:FreeRTOS-Kernel/tasks.c ****         {
4845:FreeRTOS-Kernel/tasks.c ****             /* Guard against the tick hook being called when the pended tick
4846:FreeRTOS-Kernel/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
4847:FreeRTOS-Kernel/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
4848:FreeRTOS-Kernel/tasks.c ****             {
4849:FreeRTOS-Kernel/tasks.c ****                 vApplicationTickHook();
4850:FreeRTOS-Kernel/tasks.c ****             }
4851:FreeRTOS-Kernel/tasks.c ****             else
4852:FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  /tmp/ccJw1tyY.s 			page 93


4853:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4854:FreeRTOS-Kernel/tasks.c ****             }
4855:FreeRTOS-Kernel/tasks.c ****         }
4856:FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_TICK_HOOK */
4857:FreeRTOS-Kernel/tasks.c **** 
4858:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
4859:FreeRTOS-Kernel/tasks.c ****         {
4860:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
4861:FreeRTOS-Kernel/tasks.c ****             {
4862:FreeRTOS-Kernel/tasks.c ****                 /* For single core the core ID is always 0. */
4863:FreeRTOS-Kernel/tasks.c ****                 if( xYieldPendings[ 0 ] != pdFALSE )
4864:FreeRTOS-Kernel/tasks.c ****                 {
4865:FreeRTOS-Kernel/tasks.c ****                     xSwitchRequired = pdTRUE;
4866:FreeRTOS-Kernel/tasks.c ****                 }
4867:FreeRTOS-Kernel/tasks.c ****                 else
4868:FreeRTOS-Kernel/tasks.c ****                 {
4869:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4870:FreeRTOS-Kernel/tasks.c ****                 }
4871:FreeRTOS-Kernel/tasks.c ****             }
4872:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
4873:FreeRTOS-Kernel/tasks.c ****             {
4874:FreeRTOS-Kernel/tasks.c ****                 BaseType_t xCoreID, xCurrentCoreID;
4875:FreeRTOS-Kernel/tasks.c ****                 xCurrentCoreID = ( BaseType_t ) portGET_CORE_ID();
4876:FreeRTOS-Kernel/tasks.c **** 
4877:FreeRTOS-Kernel/tasks.c ****                 for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
4878:FreeRTOS-Kernel/tasks.c ****                 {
4879:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
4880:FreeRTOS-Kernel/tasks.c ****                         if( pxCurrentTCBs[ xCoreID ]->xPreemptionDisable == pdFALSE )
4881:FreeRTOS-Kernel/tasks.c ****                     #endif
4882:FreeRTOS-Kernel/tasks.c ****                     {
4883:FreeRTOS-Kernel/tasks.c ****                         if( ( xYieldRequiredForCore[ xCoreID ] != pdFALSE ) || ( xYieldPendings[ xC
4884:FreeRTOS-Kernel/tasks.c ****                         {
4885:FreeRTOS-Kernel/tasks.c ****                             if( xCoreID == xCurrentCoreID )
4886:FreeRTOS-Kernel/tasks.c ****                             {
4887:FreeRTOS-Kernel/tasks.c ****                                 xSwitchRequired = pdTRUE;
4888:FreeRTOS-Kernel/tasks.c ****                             }
4889:FreeRTOS-Kernel/tasks.c ****                             else
4890:FreeRTOS-Kernel/tasks.c ****                             {
4891:FreeRTOS-Kernel/tasks.c ****                                 prvYieldCore( xCoreID );
4892:FreeRTOS-Kernel/tasks.c ****                             }
4893:FreeRTOS-Kernel/tasks.c ****                         }
4894:FreeRTOS-Kernel/tasks.c ****                         else
4895:FreeRTOS-Kernel/tasks.c ****                         {
4896:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4897:FreeRTOS-Kernel/tasks.c ****                         }
4898:FreeRTOS-Kernel/tasks.c ****                     }
4899:FreeRTOS-Kernel/tasks.c ****                 }
4900:FreeRTOS-Kernel/tasks.c ****             }
4901:FreeRTOS-Kernel/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
4902:FreeRTOS-Kernel/tasks.c ****         }
4903:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configUSE_PREEMPTION == 1 ) */
4904:FreeRTOS-Kernel/tasks.c ****     }
4905:FreeRTOS-Kernel/tasks.c ****     else
4906:FreeRTOS-Kernel/tasks.c ****     {
4907:FreeRTOS-Kernel/tasks.c ****         xPendedTicks += 1U;
4908:FreeRTOS-Kernel/tasks.c **** 
4909:FreeRTOS-Kernel/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
ARM GAS  /tmp/ccJw1tyY.s 			page 94


4910:FreeRTOS-Kernel/tasks.c ****          * scheduler is locked. */
4911:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
4912:FreeRTOS-Kernel/tasks.c ****         {
4913:FreeRTOS-Kernel/tasks.c ****             vApplicationTickHook();
4914:FreeRTOS-Kernel/tasks.c ****         }
4915:FreeRTOS-Kernel/tasks.c ****         #endif
4916:FreeRTOS-Kernel/tasks.c ****     }
4917:FreeRTOS-Kernel/tasks.c **** 
4918:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskIncrementTick( xSwitchRequired );
4919:FreeRTOS-Kernel/tasks.c **** 
4920:FreeRTOS-Kernel/tasks.c ****     return xSwitchRequired;
4921:FreeRTOS-Kernel/tasks.c **** }
4922:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4923:FreeRTOS-Kernel/tasks.c **** 
4924:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
4925:FreeRTOS-Kernel/tasks.c **** 
4926:FreeRTOS-Kernel/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
4927:FreeRTOS-Kernel/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
4928:FreeRTOS-Kernel/tasks.c ****     {
4929:FreeRTOS-Kernel/tasks.c ****         TCB_t * xTCB;
4930:FreeRTOS-Kernel/tasks.c **** 
4931:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSetApplicationTaskTag( xTask, pxHookFunction );
4932:FreeRTOS-Kernel/tasks.c **** 
4933:FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
4934:FreeRTOS-Kernel/tasks.c ****          * getting set. */
4935:FreeRTOS-Kernel/tasks.c ****         if( xTask == NULL )
4936:FreeRTOS-Kernel/tasks.c ****         {
4937:FreeRTOS-Kernel/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
4938:FreeRTOS-Kernel/tasks.c ****         }
4939:FreeRTOS-Kernel/tasks.c ****         else
4940:FreeRTOS-Kernel/tasks.c ****         {
4941:FreeRTOS-Kernel/tasks.c ****             xTCB = xTask;
4942:FreeRTOS-Kernel/tasks.c ****         }
4943:FreeRTOS-Kernel/tasks.c **** 
4944:FreeRTOS-Kernel/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
4945:FreeRTOS-Kernel/tasks.c ****          * the value can be accessed from an interrupt. */
4946:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4947:FreeRTOS-Kernel/tasks.c ****         {
4948:FreeRTOS-Kernel/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
4949:FreeRTOS-Kernel/tasks.c ****         }
4950:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4951:FreeRTOS-Kernel/tasks.c **** 
4952:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskSetApplicationTaskTag();
4953:FreeRTOS-Kernel/tasks.c ****     }
4954:FreeRTOS-Kernel/tasks.c **** 
4955:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
4956:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4957:FreeRTOS-Kernel/tasks.c **** 
4958:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
4959:FreeRTOS-Kernel/tasks.c **** 
4960:FreeRTOS-Kernel/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
4961:FreeRTOS-Kernel/tasks.c ****     {
4962:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
4963:FreeRTOS-Kernel/tasks.c ****         TaskHookFunction_t xReturn;
4964:FreeRTOS-Kernel/tasks.c **** 
4965:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetApplicationTaskTag( xTask );
4966:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 95


4967:FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
4968:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
4969:FreeRTOS-Kernel/tasks.c **** 
4970:FreeRTOS-Kernel/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
4971:FreeRTOS-Kernel/tasks.c ****          * the value can be accessed from an interrupt. */
4972:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4973:FreeRTOS-Kernel/tasks.c ****         {
4974:FreeRTOS-Kernel/tasks.c ****             xReturn = pxTCB->pxTaskTag;
4975:FreeRTOS-Kernel/tasks.c ****         }
4976:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4977:FreeRTOS-Kernel/tasks.c **** 
4978:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetApplicationTaskTag( xReturn );
4979:FreeRTOS-Kernel/tasks.c **** 
4980:FreeRTOS-Kernel/tasks.c ****         return xReturn;
4981:FreeRTOS-Kernel/tasks.c ****     }
4982:FreeRTOS-Kernel/tasks.c **** 
4983:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
4984:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4985:FreeRTOS-Kernel/tasks.c **** 
4986:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
4987:FreeRTOS-Kernel/tasks.c **** 
4988:FreeRTOS-Kernel/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
4989:FreeRTOS-Kernel/tasks.c ****     {
4990:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
4991:FreeRTOS-Kernel/tasks.c ****         TaskHookFunction_t xReturn;
4992:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4993:FreeRTOS-Kernel/tasks.c **** 
4994:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetApplicationTaskTagFromISR( xTask );
4995:FreeRTOS-Kernel/tasks.c **** 
4996:FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
4997:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
4998:FreeRTOS-Kernel/tasks.c **** 
4999:FreeRTOS-Kernel/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
5000:FreeRTOS-Kernel/tasks.c ****          * the value can be accessed from an interrupt. */
5001:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
5002:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
5003:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
5004:FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
5005:FreeRTOS-Kernel/tasks.c ****         {
5006:FreeRTOS-Kernel/tasks.c ****             xReturn = pxTCB->pxTaskTag;
5007:FreeRTOS-Kernel/tasks.c ****         }
5008:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
5009:FreeRTOS-Kernel/tasks.c **** 
5010:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetApplicationTaskTagFromISR( xReturn );
5011:FreeRTOS-Kernel/tasks.c **** 
5012:FreeRTOS-Kernel/tasks.c ****         return xReturn;
5013:FreeRTOS-Kernel/tasks.c ****     }
5014:FreeRTOS-Kernel/tasks.c **** 
5015:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
5016:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5017:FreeRTOS-Kernel/tasks.c **** 
5018:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
5019:FreeRTOS-Kernel/tasks.c **** 
5020:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
5021:FreeRTOS-Kernel/tasks.c ****                                              void * pvParameter )
5022:FreeRTOS-Kernel/tasks.c ****     {
5023:FreeRTOS-Kernel/tasks.c ****         TCB_t * xTCB;
ARM GAS  /tmp/ccJw1tyY.s 			page 96


5024:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
5025:FreeRTOS-Kernel/tasks.c **** 
5026:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskCallApplicationTaskHook( xTask, pvParameter );
5027:FreeRTOS-Kernel/tasks.c **** 
5028:FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
5029:FreeRTOS-Kernel/tasks.c ****         if( xTask == NULL )
5030:FreeRTOS-Kernel/tasks.c ****         {
5031:FreeRTOS-Kernel/tasks.c ****             xTCB = pxCurrentTCB;
5032:FreeRTOS-Kernel/tasks.c ****         }
5033:FreeRTOS-Kernel/tasks.c ****         else
5034:FreeRTOS-Kernel/tasks.c ****         {
5035:FreeRTOS-Kernel/tasks.c ****             xTCB = xTask;
5036:FreeRTOS-Kernel/tasks.c ****         }
5037:FreeRTOS-Kernel/tasks.c **** 
5038:FreeRTOS-Kernel/tasks.c ****         if( xTCB->pxTaskTag != NULL )
5039:FreeRTOS-Kernel/tasks.c ****         {
5040:FreeRTOS-Kernel/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
5041:FreeRTOS-Kernel/tasks.c ****         }
5042:FreeRTOS-Kernel/tasks.c ****         else
5043:FreeRTOS-Kernel/tasks.c ****         {
5044:FreeRTOS-Kernel/tasks.c ****             xReturn = pdFAIL;
5045:FreeRTOS-Kernel/tasks.c ****         }
5046:FreeRTOS-Kernel/tasks.c **** 
5047:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskCallApplicationTaskHook( xReturn );
5048:FreeRTOS-Kernel/tasks.c **** 
5049:FreeRTOS-Kernel/tasks.c ****         return xReturn;
5050:FreeRTOS-Kernel/tasks.c ****     }
5051:FreeRTOS-Kernel/tasks.c **** 
5052:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
5053:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5054:FreeRTOS-Kernel/tasks.c **** 
5055:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES == 1 )
5056:FreeRTOS-Kernel/tasks.c ****     void vTaskSwitchContext( void )
5057:FreeRTOS-Kernel/tasks.c ****     {
5058:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSwitchContext();
5059:FreeRTOS-Kernel/tasks.c **** 
5060:FreeRTOS-Kernel/tasks.c ****         if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
5061:FreeRTOS-Kernel/tasks.c ****         {
5062:FreeRTOS-Kernel/tasks.c ****             /* The scheduler is currently suspended - do not allow a context
5063:FreeRTOS-Kernel/tasks.c ****              * switch. */
5064:FreeRTOS-Kernel/tasks.c ****             xYieldPendings[ 0 ] = pdTRUE;
5065:FreeRTOS-Kernel/tasks.c ****         }
5066:FreeRTOS-Kernel/tasks.c ****         else
5067:FreeRTOS-Kernel/tasks.c ****         {
5068:FreeRTOS-Kernel/tasks.c ****             xYieldPendings[ 0 ] = pdFALSE;
5069:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_OUT();
5070:FreeRTOS-Kernel/tasks.c **** 
5071:FreeRTOS-Kernel/tasks.c ****             #if ( configGENERATE_RUN_TIME_STATS == 1 )
5072:FreeRTOS-Kernel/tasks.c ****             {
5073:FreeRTOS-Kernel/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
5074:FreeRTOS-Kernel/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime[ 0 ] );
5075:FreeRTOS-Kernel/tasks.c ****                 #else
5076:FreeRTOS-Kernel/tasks.c ****                     ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
5077:FreeRTOS-Kernel/tasks.c ****                 #endif
5078:FreeRTOS-Kernel/tasks.c **** 
5079:FreeRTOS-Kernel/tasks.c ****                 /* Add the amount of time the task has been running to the
5080:FreeRTOS-Kernel/tasks.c ****                  * accumulated time so far.  The time the task started running was
ARM GAS  /tmp/ccJw1tyY.s 			page 97


5081:FreeRTOS-Kernel/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
5082:FreeRTOS-Kernel/tasks.c ****                  * protection here so count values are only valid until the timer
5083:FreeRTOS-Kernel/tasks.c ****                  * overflows.  The guard against negative values is to protect
5084:FreeRTOS-Kernel/tasks.c ****                  * against suspect run time stat counter implementations - which
5085:FreeRTOS-Kernel/tasks.c ****                  * are provided by the application, not the kernel. */
5086:FreeRTOS-Kernel/tasks.c ****                 if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
5087:FreeRTOS-Kernel/tasks.c ****                 {
5088:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[
5089:FreeRTOS-Kernel/tasks.c ****                 }
5090:FreeRTOS-Kernel/tasks.c ****                 else
5091:FreeRTOS-Kernel/tasks.c ****                 {
5092:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5093:FreeRTOS-Kernel/tasks.c ****                 }
5094:FreeRTOS-Kernel/tasks.c **** 
5095:FreeRTOS-Kernel/tasks.c ****                 ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
5096:FreeRTOS-Kernel/tasks.c ****             }
5097:FreeRTOS-Kernel/tasks.c ****             #endif /* configGENERATE_RUN_TIME_STATS */
5098:FreeRTOS-Kernel/tasks.c **** 
5099:FreeRTOS-Kernel/tasks.c ****             /* Check for stack overflow, if configured. */
5100:FreeRTOS-Kernel/tasks.c ****             taskCHECK_FOR_STACK_OVERFLOW();
5101:FreeRTOS-Kernel/tasks.c **** 
5102:FreeRTOS-Kernel/tasks.c ****             /* Before the currently running task is switched out, save its errno. */
5103:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_POSIX_ERRNO == 1 )
5104:FreeRTOS-Kernel/tasks.c ****             {
5105:FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
5106:FreeRTOS-Kernel/tasks.c ****             }
5107:FreeRTOS-Kernel/tasks.c ****             #endif
5108:FreeRTOS-Kernel/tasks.c **** 
5109:FreeRTOS-Kernel/tasks.c ****             /* Select a new task to run using either the generic C or port
5110:FreeRTOS-Kernel/tasks.c ****              * optimised asm code. */
5111:FreeRTOS-Kernel/tasks.c ****             /* MISRA Ref 11.5.3 [Void pointer assignment] */
5112:FreeRTOS-Kernel/tasks.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
5113:FreeRTOS-Kernel/tasks.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
5114:FreeRTOS-Kernel/tasks.c ****             taskSELECT_HIGHEST_PRIORITY_TASK();
5115:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
5116:FreeRTOS-Kernel/tasks.c **** 
5117:FreeRTOS-Kernel/tasks.c ****             /* Macro to inject port specific behaviour immediately after
5118:FreeRTOS-Kernel/tasks.c ****              * switching tasks, such as setting an end of stack watchpoint
5119:FreeRTOS-Kernel/tasks.c ****              * or reconfiguring the MPU. */
5120:FreeRTOS-Kernel/tasks.c ****             portTASK_SWITCH_HOOK( pxCurrentTCB );
5121:FreeRTOS-Kernel/tasks.c **** 
5122:FreeRTOS-Kernel/tasks.c ****             /* After the new task is switched in, update the global errno. */
5123:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_POSIX_ERRNO == 1 )
5124:FreeRTOS-Kernel/tasks.c ****             {
5125:FreeRTOS-Kernel/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
5126:FreeRTOS-Kernel/tasks.c ****             }
5127:FreeRTOS-Kernel/tasks.c ****             #endif
5128:FreeRTOS-Kernel/tasks.c **** 
5129:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
5130:FreeRTOS-Kernel/tasks.c ****             {
5131:FreeRTOS-Kernel/tasks.c ****                 /* Switch C-Runtime's TLS Block to point to the TLS
5132:FreeRTOS-Kernel/tasks.c ****                  * Block specific to this task. */
5133:FreeRTOS-Kernel/tasks.c ****                 configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
5134:FreeRTOS-Kernel/tasks.c ****             }
5135:FreeRTOS-Kernel/tasks.c ****             #endif
5136:FreeRTOS-Kernel/tasks.c ****         }
5137:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 98


5138:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskSwitchContext();
5139:FreeRTOS-Kernel/tasks.c ****     }
5140:FreeRTOS-Kernel/tasks.c **** #else /* if ( configNUMBER_OF_CORES == 1 ) */
5141:FreeRTOS-Kernel/tasks.c ****     void vTaskSwitchContext( BaseType_t xCoreID )
5142:FreeRTOS-Kernel/tasks.c ****     {
5143:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSwitchContext();
5144:FreeRTOS-Kernel/tasks.c **** 
5145:FreeRTOS-Kernel/tasks.c ****         /* Acquire both locks:
5146:FreeRTOS-Kernel/tasks.c ****          * - The ISR lock protects the ready list from simultaneous access by
5147:FreeRTOS-Kernel/tasks.c ****          *   both other ISRs and tasks.
5148:FreeRTOS-Kernel/tasks.c ****          * - We also take the task lock to pause here in case another core has
5149:FreeRTOS-Kernel/tasks.c ****          *   suspended the scheduler. We don't want to simply set xYieldPending
5150:FreeRTOS-Kernel/tasks.c ****          *   and move on if another core suspended the scheduler. We should only
5151:FreeRTOS-Kernel/tasks.c ****          *   do that if the current core has suspended the scheduler. */
5152:FreeRTOS-Kernel/tasks.c **** 
5153:FreeRTOS-Kernel/tasks.c ****         portGET_TASK_LOCK(); /* Must always acquire the task lock first. */
5154:FreeRTOS-Kernel/tasks.c ****         portGET_ISR_LOCK();
5155:FreeRTOS-Kernel/tasks.c ****         {
5156:FreeRTOS-Kernel/tasks.c ****             /* vTaskSwitchContext() must never be called from within a critical section.
5157:FreeRTOS-Kernel/tasks.c ****              * This is not necessarily true for single core FreeRTOS, but it is for this
5158:FreeRTOS-Kernel/tasks.c ****              * SMP port. */
5159:FreeRTOS-Kernel/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() == 0 );
5160:FreeRTOS-Kernel/tasks.c **** 
5161:FreeRTOS-Kernel/tasks.c ****             if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
5162:FreeRTOS-Kernel/tasks.c ****             {
5163:FreeRTOS-Kernel/tasks.c ****                 /* The scheduler is currently suspended - do not allow a context
5164:FreeRTOS-Kernel/tasks.c ****                  * switch. */
5165:FreeRTOS-Kernel/tasks.c ****                 xYieldPendings[ xCoreID ] = pdTRUE;
5166:FreeRTOS-Kernel/tasks.c ****             }
5167:FreeRTOS-Kernel/tasks.c ****             else
5168:FreeRTOS-Kernel/tasks.c ****             {
5169:FreeRTOS-Kernel/tasks.c ****                 xYieldPendings[ xCoreID ] = pdFALSE;
5170:FreeRTOS-Kernel/tasks.c ****                 traceTASK_SWITCHED_OUT();
5171:FreeRTOS-Kernel/tasks.c **** 
5172:FreeRTOS-Kernel/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
5173:FreeRTOS-Kernel/tasks.c ****                 {
5174:FreeRTOS-Kernel/tasks.c ****                     #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
5175:FreeRTOS-Kernel/tasks.c ****                         portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime[ xCoreID ] );
5176:FreeRTOS-Kernel/tasks.c ****                     #else
5177:FreeRTOS-Kernel/tasks.c ****                         ulTotalRunTime[ xCoreID ] = portGET_RUN_TIME_COUNTER_VALUE();
5178:FreeRTOS-Kernel/tasks.c ****                     #endif
5179:FreeRTOS-Kernel/tasks.c **** 
5180:FreeRTOS-Kernel/tasks.c ****                     /* Add the amount of time the task has been running to the
5181:FreeRTOS-Kernel/tasks.c ****                      * accumulated time so far.  The time the task started running was
5182:FreeRTOS-Kernel/tasks.c ****                      * stored in ulTaskSwitchedInTime.  Note that there is no overflow
5183:FreeRTOS-Kernel/tasks.c ****                      * protection here so count values are only valid until the timer
5184:FreeRTOS-Kernel/tasks.c ****                      * overflows.  The guard against negative values is to protect
5185:FreeRTOS-Kernel/tasks.c ****                      * against suspect run time stat counter implementations - which
5186:FreeRTOS-Kernel/tasks.c ****                      * are provided by the application, not the kernel. */
5187:FreeRTOS-Kernel/tasks.c ****                     if( ulTotalRunTime[ xCoreID ] > ulTaskSwitchedInTime[ xCoreID ] )
5188:FreeRTOS-Kernel/tasks.c ****                     {
5189:FreeRTOS-Kernel/tasks.c ****                         pxCurrentTCBs[ xCoreID ]->ulRunTimeCounter += ( ulTotalRunTime[ xCoreID ] -
5190:FreeRTOS-Kernel/tasks.c ****                     }
5191:FreeRTOS-Kernel/tasks.c ****                     else
5192:FreeRTOS-Kernel/tasks.c ****                     {
5193:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5194:FreeRTOS-Kernel/tasks.c ****                     }
ARM GAS  /tmp/ccJw1tyY.s 			page 99


5195:FreeRTOS-Kernel/tasks.c **** 
5196:FreeRTOS-Kernel/tasks.c ****                     ulTaskSwitchedInTime[ xCoreID ] = ulTotalRunTime[ xCoreID ];
5197:FreeRTOS-Kernel/tasks.c ****                 }
5198:FreeRTOS-Kernel/tasks.c ****                 #endif /* configGENERATE_RUN_TIME_STATS */
5199:FreeRTOS-Kernel/tasks.c **** 
5200:FreeRTOS-Kernel/tasks.c ****                 /* Check for stack overflow, if configured. */
5201:FreeRTOS-Kernel/tasks.c ****                 taskCHECK_FOR_STACK_OVERFLOW();
5202:FreeRTOS-Kernel/tasks.c **** 
5203:FreeRTOS-Kernel/tasks.c ****                 /* Before the currently running task is switched out, save its errno. */
5204:FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_POSIX_ERRNO == 1 )
5205:FreeRTOS-Kernel/tasks.c ****                 {
5206:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCBs[ xCoreID ]->iTaskErrno = FreeRTOS_errno;
5207:FreeRTOS-Kernel/tasks.c ****                 }
5208:FreeRTOS-Kernel/tasks.c ****                 #endif
5209:FreeRTOS-Kernel/tasks.c **** 
5210:FreeRTOS-Kernel/tasks.c ****                 /* Select a new task to run. */
5211:FreeRTOS-Kernel/tasks.c ****                 taskSELECT_HIGHEST_PRIORITY_TASK( xCoreID );
5212:FreeRTOS-Kernel/tasks.c ****                 traceTASK_SWITCHED_IN();
5213:FreeRTOS-Kernel/tasks.c **** 
5214:FreeRTOS-Kernel/tasks.c ****                 /* Macro to inject port specific behaviour immediately after
5215:FreeRTOS-Kernel/tasks.c ****                  * switching tasks, such as setting an end of stack watchpoint
5216:FreeRTOS-Kernel/tasks.c ****                  * or reconfiguring the MPU. */
5217:FreeRTOS-Kernel/tasks.c ****                 portTASK_SWITCH_HOOK( pxCurrentTCBs[ portGET_CORE_ID() ] );
5218:FreeRTOS-Kernel/tasks.c **** 
5219:FreeRTOS-Kernel/tasks.c ****                 /* After the new task is switched in, update the global errno. */
5220:FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_POSIX_ERRNO == 1 )
5221:FreeRTOS-Kernel/tasks.c ****                 {
5222:FreeRTOS-Kernel/tasks.c ****                     FreeRTOS_errno = pxCurrentTCBs[ xCoreID ]->iTaskErrno;
5223:FreeRTOS-Kernel/tasks.c ****                 }
5224:FreeRTOS-Kernel/tasks.c ****                 #endif
5225:FreeRTOS-Kernel/tasks.c **** 
5226:FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
5227:FreeRTOS-Kernel/tasks.c ****                 {
5228:FreeRTOS-Kernel/tasks.c ****                     /* Switch C-Runtime's TLS Block to point to the TLS
5229:FreeRTOS-Kernel/tasks.c ****                      * Block specific to this task. */
5230:FreeRTOS-Kernel/tasks.c ****                     configSET_TLS_BLOCK( pxCurrentTCBs[ xCoreID ]->xTLSBlock );
5231:FreeRTOS-Kernel/tasks.c ****                 }
5232:FreeRTOS-Kernel/tasks.c ****                 #endif
5233:FreeRTOS-Kernel/tasks.c ****             }
5234:FreeRTOS-Kernel/tasks.c ****         }
5235:FreeRTOS-Kernel/tasks.c ****         portRELEASE_ISR_LOCK();
5236:FreeRTOS-Kernel/tasks.c ****         portRELEASE_TASK_LOCK();
5237:FreeRTOS-Kernel/tasks.c **** 
5238:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskSwitchContext();
5239:FreeRTOS-Kernel/tasks.c ****     }
5240:FreeRTOS-Kernel/tasks.c **** #endif /* if ( configNUMBER_OF_CORES > 1 ) */
5241:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5242:FreeRTOS-Kernel/tasks.c **** 
5243:FreeRTOS-Kernel/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
5244:FreeRTOS-Kernel/tasks.c ****                             const TickType_t xTicksToWait )
5245:FreeRTOS-Kernel/tasks.c **** {
5246:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );
5247:FreeRTOS-Kernel/tasks.c **** 
5248:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxEventList );
5249:FreeRTOS-Kernel/tasks.c **** 
5250:FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE
5251:FreeRTOS-Kernel/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
ARM GAS  /tmp/ccJw1tyY.s 			page 100


5252:FreeRTOS-Kernel/tasks.c **** 
5253:FreeRTOS-Kernel/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
5254:FreeRTOS-Kernel/tasks.c ****      * This is placed in the list in priority order so the highest priority task
5255:FreeRTOS-Kernel/tasks.c ****      * is the first to be woken by the event.
5256:FreeRTOS-Kernel/tasks.c ****      *
5257:FreeRTOS-Kernel/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
5258:FreeRTOS-Kernel/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
5259:FreeRTOS-Kernel/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
5260:FreeRTOS-Kernel/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
5261:FreeRTOS-Kernel/tasks.c ****      *
5262:FreeRTOS-Kernel/tasks.c ****      * The queue that contains the event list is locked, preventing
5263:FreeRTOS-Kernel/tasks.c ****      * simultaneous access from interrupts. */
5264:FreeRTOS-Kernel/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
5265:FreeRTOS-Kernel/tasks.c **** 
5266:FreeRTOS-Kernel/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
5267:FreeRTOS-Kernel/tasks.c **** 
5268:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskPlaceOnEventList();
5269:FreeRTOS-Kernel/tasks.c **** }
5270:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5271:FreeRTOS-Kernel/tasks.c **** 
5272:FreeRTOS-Kernel/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
5273:FreeRTOS-Kernel/tasks.c ****                                      const TickType_t xItemValue,
5274:FreeRTOS-Kernel/tasks.c ****                                      const TickType_t xTicksToWait )
5275:FreeRTOS-Kernel/tasks.c **** {
5276:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );
5277:FreeRTOS-Kernel/tasks.c **** 
5278:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxEventList );
5279:FreeRTOS-Kernel/tasks.c **** 
5280:FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
5281:FreeRTOS-Kernel/tasks.c ****      * the event groups implementation. */
5282:FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
5283:FreeRTOS-Kernel/tasks.c **** 
5284:FreeRTOS-Kernel/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
5285:FreeRTOS-Kernel/tasks.c ****      * event list item here as interrupts won't access the event list item of a
5286:FreeRTOS-Kernel/tasks.c ****      * task that is not in the Blocked state. */
5287:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
5288:FreeRTOS-Kernel/tasks.c **** 
5289:FreeRTOS-Kernel/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
5290:FreeRTOS-Kernel/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
5291:FreeRTOS-Kernel/tasks.c ****      * event group implementation - and interrupts don't access event groups
5292:FreeRTOS-Kernel/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
5293:FreeRTOS-Kernel/tasks.c ****      * the task level). */
5294:FreeRTOS-Kernel/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
5295:FreeRTOS-Kernel/tasks.c **** 
5296:FreeRTOS-Kernel/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
5297:FreeRTOS-Kernel/tasks.c **** 
5298:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskPlaceOnUnorderedEventList();
5299:FreeRTOS-Kernel/tasks.c **** }
5300:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5301:FreeRTOS-Kernel/tasks.c **** 
5302:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TIMERS == 1 )
5303:FreeRTOS-Kernel/tasks.c **** 
5304:FreeRTOS-Kernel/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
5305:FreeRTOS-Kernel/tasks.c ****                                           TickType_t xTicksToWait,
5306:FreeRTOS-Kernel/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
5307:FreeRTOS-Kernel/tasks.c ****     {
5308:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );
ARM GAS  /tmp/ccJw1tyY.s 			page 101


5309:FreeRTOS-Kernel/tasks.c **** 
5310:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxEventList );
5311:FreeRTOS-Kernel/tasks.c **** 
5312:FreeRTOS-Kernel/tasks.c ****         /* This function should not be called by application code hence the
5313:FreeRTOS-Kernel/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
5314:FreeRTOS-Kernel/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
5315:FreeRTOS-Kernel/tasks.c ****          * it should be called with the scheduler suspended. */
5316:FreeRTOS-Kernel/tasks.c **** 
5317:FreeRTOS-Kernel/tasks.c **** 
5318:FreeRTOS-Kernel/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
5319:FreeRTOS-Kernel/tasks.c ****          * In this case it is assume that this is the only task that is going to
5320:FreeRTOS-Kernel/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
5321:FreeRTOS-Kernel/tasks.c ****          * can be used in place of vListInsert. */
5322:FreeRTOS-Kernel/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
5323:FreeRTOS-Kernel/tasks.c **** 
5324:FreeRTOS-Kernel/tasks.c ****         /* If the task should block indefinitely then set the block time to a
5325:FreeRTOS-Kernel/tasks.c ****          * value that will be recognised as an indefinite delay inside the
5326:FreeRTOS-Kernel/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
5327:FreeRTOS-Kernel/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
5328:FreeRTOS-Kernel/tasks.c ****         {
5329:FreeRTOS-Kernel/tasks.c ****             xTicksToWait = portMAX_DELAY;
5330:FreeRTOS-Kernel/tasks.c ****         }
5331:FreeRTOS-Kernel/tasks.c **** 
5332:FreeRTOS-Kernel/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
5333:FreeRTOS-Kernel/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
5334:FreeRTOS-Kernel/tasks.c **** 
5335:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskPlaceOnEventListRestricted();
5336:FreeRTOS-Kernel/tasks.c ****     }
5337:FreeRTOS-Kernel/tasks.c **** 
5338:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TIMERS */
5339:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5340:FreeRTOS-Kernel/tasks.c **** 
5341:FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
5342:FreeRTOS-Kernel/tasks.c **** {
5343:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
5344:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
5345:FreeRTOS-Kernel/tasks.c **** 
5346:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskRemoveFromEventList( pxEventList );
5347:FreeRTOS-Kernel/tasks.c **** 
5348:FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
5349:FreeRTOS-Kernel/tasks.c ****      * called from a critical section within an ISR. */
5350:FreeRTOS-Kernel/tasks.c **** 
5351:FreeRTOS-Kernel/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
5352:FreeRTOS-Kernel/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
5353:FreeRTOS-Kernel/tasks.c ****      * the delayed list, and add it to the ready list.
5354:FreeRTOS-Kernel/tasks.c ****      *
5355:FreeRTOS-Kernel/tasks.c ****      * If an event is for a queue that is locked then this function will never
5356:FreeRTOS-Kernel/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
5357:FreeRTOS-Kernel/tasks.c ****      * means exclusive access to the event list is guaranteed here.
5358:FreeRTOS-Kernel/tasks.c ****      *
5359:FreeRTOS-Kernel/tasks.c ****      * This function assumes that a check has already been made to ensure that
5360:FreeRTOS-Kernel/tasks.c ****      * pxEventList is not empty. */
5361:FreeRTOS-Kernel/tasks.c ****     /* MISRA Ref 11.5.3 [Void pointer assignment] */
5362:FreeRTOS-Kernel/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
5363:FreeRTOS-Kernel/tasks.c ****     /* coverity[misra_c_2012_rule_11_5_violation] */
5364:FreeRTOS-Kernel/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
5365:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/ccJw1tyY.s 			page 102


5366:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
5367:FreeRTOS-Kernel/tasks.c **** 
5368:FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
5369:FreeRTOS-Kernel/tasks.c ****     {
5370:FreeRTOS-Kernel/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
5371:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
5372:FreeRTOS-Kernel/tasks.c **** 
5373:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
5374:FreeRTOS-Kernel/tasks.c ****         {
5375:FreeRTOS-Kernel/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
5376:FreeRTOS-Kernel/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
5377:FreeRTOS-Kernel/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
5378:FreeRTOS-Kernel/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
5379:FreeRTOS-Kernel/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
5380:FreeRTOS-Kernel/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
5381:FreeRTOS-Kernel/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
5382:FreeRTOS-Kernel/tasks.c ****              * ensure it is updated at the earliest possible time. */
5383:FreeRTOS-Kernel/tasks.c ****             prvResetNextTaskUnblockTime();
5384:FreeRTOS-Kernel/tasks.c ****         }
5385:FreeRTOS-Kernel/tasks.c ****         #endif
5386:FreeRTOS-Kernel/tasks.c ****     }
5387:FreeRTOS-Kernel/tasks.c ****     else
5388:FreeRTOS-Kernel/tasks.c ****     {
5389:FreeRTOS-Kernel/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
5390:FreeRTOS-Kernel/tasks.c ****          * pending until the scheduler is resumed. */
5391:FreeRTOS-Kernel/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
5392:FreeRTOS-Kernel/tasks.c ****     }
5393:FreeRTOS-Kernel/tasks.c **** 
5394:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
5395:FreeRTOS-Kernel/tasks.c ****     {
5396:FreeRTOS-Kernel/tasks.c ****         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
5397:FreeRTOS-Kernel/tasks.c ****         {
5398:FreeRTOS-Kernel/tasks.c ****             /* Return true if the task removed from the event list has a higher
5399:FreeRTOS-Kernel/tasks.c ****              * priority than the calling task.  This allows the calling task to know if
5400:FreeRTOS-Kernel/tasks.c ****              * it should force a context switch now. */
5401:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
5402:FreeRTOS-Kernel/tasks.c **** 
5403:FreeRTOS-Kernel/tasks.c ****             /* Mark that a yield is pending in case the user is not using the
5404:FreeRTOS-Kernel/tasks.c ****              * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
5405:FreeRTOS-Kernel/tasks.c ****             xYieldPendings[ 0 ] = pdTRUE;
5406:FreeRTOS-Kernel/tasks.c ****         }
5407:FreeRTOS-Kernel/tasks.c ****         else
5408:FreeRTOS-Kernel/tasks.c ****         {
5409:FreeRTOS-Kernel/tasks.c ****             xReturn = pdFALSE;
5410:FreeRTOS-Kernel/tasks.c ****         }
5411:FreeRTOS-Kernel/tasks.c ****     }
5412:FreeRTOS-Kernel/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
5413:FreeRTOS-Kernel/tasks.c ****     {
5414:FreeRTOS-Kernel/tasks.c ****         xReturn = pdFALSE;
5415:FreeRTOS-Kernel/tasks.c **** 
5416:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
5417:FreeRTOS-Kernel/tasks.c ****         {
5418:FreeRTOS-Kernel/tasks.c ****             prvYieldForTask( pxUnblockedTCB );
5419:FreeRTOS-Kernel/tasks.c **** 
5420:FreeRTOS-Kernel/tasks.c ****             if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
5421:FreeRTOS-Kernel/tasks.c ****             {
5422:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
ARM GAS  /tmp/ccJw1tyY.s 			page 103


5423:FreeRTOS-Kernel/tasks.c ****             }
5424:FreeRTOS-Kernel/tasks.c ****         }
5425:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( configUSE_PREEMPTION == 1 ) */
5426:FreeRTOS-Kernel/tasks.c ****     }
5427:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
5428:FreeRTOS-Kernel/tasks.c **** 
5429:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskRemoveFromEventList( xReturn );
5430:FreeRTOS-Kernel/tasks.c ****     return xReturn;
5431:FreeRTOS-Kernel/tasks.c **** }
5432:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5433:FreeRTOS-Kernel/tasks.c **** 
5434:FreeRTOS-Kernel/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
5435:FreeRTOS-Kernel/tasks.c ****                                         const TickType_t xItemValue )
5436:FreeRTOS-Kernel/tasks.c **** {
5437:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
5438:FreeRTOS-Kernel/tasks.c **** 
5439:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );
5440:FreeRTOS-Kernel/tasks.c **** 
5441:FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
5442:FreeRTOS-Kernel/tasks.c ****      * the event flags implementation. */
5443:FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
5444:FreeRTOS-Kernel/tasks.c **** 
5445:FreeRTOS-Kernel/tasks.c ****     /* Store the new item value in the event list. */
5446:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
5447:FreeRTOS-Kernel/tasks.c **** 
5448:FreeRTOS-Kernel/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
5449:FreeRTOS-Kernel/tasks.c ****      * event flags. */
5450:FreeRTOS-Kernel/tasks.c ****     /* MISRA Ref 11.5.3 [Void pointer assignment] */
5451:FreeRTOS-Kernel/tasks.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
5452:FreeRTOS-Kernel/tasks.c ****     /* coverity[misra_c_2012_rule_11_5_violation] */
5453:FreeRTOS-Kernel/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
5454:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
5455:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
5456:FreeRTOS-Kernel/tasks.c **** 
5457:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
5458:FreeRTOS-Kernel/tasks.c ****     {
5459:FreeRTOS-Kernel/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
5460:FreeRTOS-Kernel/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
5461:FreeRTOS-Kernel/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
5462:FreeRTOS-Kernel/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
5463:FreeRTOS-Kernel/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
5464:FreeRTOS-Kernel/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
5465:FreeRTOS-Kernel/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
5466:FreeRTOS-Kernel/tasks.c ****          * ensure it is updated at the earliest possible time. */
5467:FreeRTOS-Kernel/tasks.c ****         prvResetNextTaskUnblockTime();
5468:FreeRTOS-Kernel/tasks.c ****     }
5469:FreeRTOS-Kernel/tasks.c ****     #endif
5470:FreeRTOS-Kernel/tasks.c **** 
5471:FreeRTOS-Kernel/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
5472:FreeRTOS-Kernel/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
5473:FreeRTOS-Kernel/tasks.c ****      * lists. */
5474:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
5475:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
5476:FreeRTOS-Kernel/tasks.c **** 
5477:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
5478:FreeRTOS-Kernel/tasks.c ****     {
5479:FreeRTOS-Kernel/tasks.c ****         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccJw1tyY.s 			page 104


5480:FreeRTOS-Kernel/tasks.c ****         {
5481:FreeRTOS-Kernel/tasks.c ****             /* The unblocked task has a priority above that of the calling task, so
5482:FreeRTOS-Kernel/tasks.c ****              * a context switch is required.  This function is called with the
5483:FreeRTOS-Kernel/tasks.c ****              * scheduler suspended so xYieldPending is set so the context switch
5484:FreeRTOS-Kernel/tasks.c ****              * occurs immediately that the scheduler is resumed (unsuspended). */
5485:FreeRTOS-Kernel/tasks.c ****             xYieldPendings[ 0 ] = pdTRUE;
5486:FreeRTOS-Kernel/tasks.c ****         }
5487:FreeRTOS-Kernel/tasks.c ****     }
5488:FreeRTOS-Kernel/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
5489:FreeRTOS-Kernel/tasks.c ****     {
5490:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
5491:FreeRTOS-Kernel/tasks.c ****         {
5492:FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
5493:FreeRTOS-Kernel/tasks.c ****             {
5494:FreeRTOS-Kernel/tasks.c ****                 prvYieldForTask( pxUnblockedTCB );
5495:FreeRTOS-Kernel/tasks.c ****             }
5496:FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
5497:FreeRTOS-Kernel/tasks.c ****         }
5498:FreeRTOS-Kernel/tasks.c ****         #endif
5499:FreeRTOS-Kernel/tasks.c ****     }
5500:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
5501:FreeRTOS-Kernel/tasks.c **** 
5502:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskRemoveFromUnorderedEventList();
5503:FreeRTOS-Kernel/tasks.c **** }
5504:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5505:FreeRTOS-Kernel/tasks.c **** 
5506:FreeRTOS-Kernel/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
5507:FreeRTOS-Kernel/tasks.c **** {
5508:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskSetTimeOutState( pxTimeOut );
5509:FreeRTOS-Kernel/tasks.c **** 
5510:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTimeOut );
5511:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
5512:FreeRTOS-Kernel/tasks.c ****     {
5513:FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
5514:FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
5515:FreeRTOS-Kernel/tasks.c ****     }
5516:FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
5517:FreeRTOS-Kernel/tasks.c **** 
5518:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskSetTimeOutState();
5519:FreeRTOS-Kernel/tasks.c **** }
5520:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5521:FreeRTOS-Kernel/tasks.c **** 
5522:FreeRTOS-Kernel/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
5523:FreeRTOS-Kernel/tasks.c **** {
5524:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );
5525:FreeRTOS-Kernel/tasks.c **** 
5526:FreeRTOS-Kernel/tasks.c ****     /* For internal use only as it does not use a critical section. */
5527:FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
5528:FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
5529:FreeRTOS-Kernel/tasks.c **** 
5530:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskInternalSetTimeOutState();
5531:FreeRTOS-Kernel/tasks.c **** }
5532:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5533:FreeRTOS-Kernel/tasks.c **** 
5534:FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
5535:FreeRTOS-Kernel/tasks.c ****                                  TickType_t * const pxTicksToWait )
5536:FreeRTOS-Kernel/tasks.c **** {
ARM GAS  /tmp/ccJw1tyY.s 			page 105


5537:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
5538:FreeRTOS-Kernel/tasks.c **** 
5539:FreeRTOS-Kernel/tasks.c ****     traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
5540:FreeRTOS-Kernel/tasks.c **** 
5541:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTimeOut );
5542:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
5543:FreeRTOS-Kernel/tasks.c **** 
5544:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
5545:FreeRTOS-Kernel/tasks.c ****     {
5546:FreeRTOS-Kernel/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
5547:FreeRTOS-Kernel/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
5548:FreeRTOS-Kernel/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
5549:FreeRTOS-Kernel/tasks.c **** 
5550:FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
5551:FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
5552:FreeRTOS-Kernel/tasks.c ****             {
5553:FreeRTOS-Kernel/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
5554:FreeRTOS-Kernel/tasks.c ****                  * but has the same result. */
5555:FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
5556:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
5557:FreeRTOS-Kernel/tasks.c ****             }
5558:FreeRTOS-Kernel/tasks.c ****             else
5559:FreeRTOS-Kernel/tasks.c ****         #endif
5560:FreeRTOS-Kernel/tasks.c **** 
5561:FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
5562:FreeRTOS-Kernel/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
5563:FreeRTOS-Kernel/tasks.c ****             {
5564:FreeRTOS-Kernel/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
5565:FreeRTOS-Kernel/tasks.c ****                  * specified is the maximum block time then the task should block
5566:FreeRTOS-Kernel/tasks.c ****                  * indefinitely, and therefore never time out. */
5567:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFALSE;
5568:FreeRTOS-Kernel/tasks.c ****             }
5569:FreeRTOS-Kernel/tasks.c ****             else
5570:FreeRTOS-Kernel/tasks.c ****         #endif
5571:FreeRTOS-Kernel/tasks.c **** 
5572:FreeRTOS-Kernel/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
5573:FreeRTOS-Kernel/tasks.c ****         {
5574:FreeRTOS-Kernel/tasks.c ****             /* The tick count is greater than the time at which
5575:FreeRTOS-Kernel/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
5576:FreeRTOS-Kernel/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
5577:FreeRTOS-Kernel/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
5578:FreeRTOS-Kernel/tasks.c ****              * was called. */
5579:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
5580:FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
5581:FreeRTOS-Kernel/tasks.c ****         }
5582:FreeRTOS-Kernel/tasks.c ****         else if( xElapsedTime < *pxTicksToWait )
5583:FreeRTOS-Kernel/tasks.c ****         {
5584:FreeRTOS-Kernel/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
5585:FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait -= xElapsedTime;
5586:FreeRTOS-Kernel/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
5587:FreeRTOS-Kernel/tasks.c ****             xReturn = pdFALSE;
5588:FreeRTOS-Kernel/tasks.c ****         }
5589:FreeRTOS-Kernel/tasks.c ****         else
5590:FreeRTOS-Kernel/tasks.c ****         {
5591:FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
5592:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
5593:FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  /tmp/ccJw1tyY.s 			page 106


5594:FreeRTOS-Kernel/tasks.c ****     }
5595:FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
5596:FreeRTOS-Kernel/tasks.c **** 
5597:FreeRTOS-Kernel/tasks.c ****     traceRETURN_xTaskCheckForTimeOut( xReturn );
5598:FreeRTOS-Kernel/tasks.c **** 
5599:FreeRTOS-Kernel/tasks.c ****     return xReturn;
5600:FreeRTOS-Kernel/tasks.c **** }
5601:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5602:FreeRTOS-Kernel/tasks.c **** 
5603:FreeRTOS-Kernel/tasks.c **** void vTaskMissedYield( void )
5604:FreeRTOS-Kernel/tasks.c **** {
5605:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskMissedYield();
5606:FreeRTOS-Kernel/tasks.c **** 
5607:FreeRTOS-Kernel/tasks.c ****     /* Must be called from within a critical section. */
5608:FreeRTOS-Kernel/tasks.c ****     xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
5609:FreeRTOS-Kernel/tasks.c **** 
5610:FreeRTOS-Kernel/tasks.c ****     traceRETURN_vTaskMissedYield();
5611:FreeRTOS-Kernel/tasks.c **** }
5612:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5613:FreeRTOS-Kernel/tasks.c **** 
5614:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
5615:FreeRTOS-Kernel/tasks.c **** 
5616:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
5617:FreeRTOS-Kernel/tasks.c ****     {
5618:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
5619:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
5620:FreeRTOS-Kernel/tasks.c **** 
5621:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskGetTaskNumber( xTask );
5622:FreeRTOS-Kernel/tasks.c **** 
5623:FreeRTOS-Kernel/tasks.c ****         if( xTask != NULL )
5624:FreeRTOS-Kernel/tasks.c ****         {
5625:FreeRTOS-Kernel/tasks.c ****             pxTCB = xTask;
5626:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
5627:FreeRTOS-Kernel/tasks.c ****         }
5628:FreeRTOS-Kernel/tasks.c ****         else
5629:FreeRTOS-Kernel/tasks.c ****         {
5630:FreeRTOS-Kernel/tasks.c ****             uxReturn = 0U;
5631:FreeRTOS-Kernel/tasks.c ****         }
5632:FreeRTOS-Kernel/tasks.c **** 
5633:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskGetTaskNumber( uxReturn );
5634:FreeRTOS-Kernel/tasks.c **** 
5635:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
5636:FreeRTOS-Kernel/tasks.c ****     }
5637:FreeRTOS-Kernel/tasks.c **** 
5638:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
5639:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5640:FreeRTOS-Kernel/tasks.c **** 
5641:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
5642:FreeRTOS-Kernel/tasks.c **** 
5643:FreeRTOS-Kernel/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
5644:FreeRTOS-Kernel/tasks.c ****                              const UBaseType_t uxHandle )
5645:FreeRTOS-Kernel/tasks.c ****     {
5646:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5647:FreeRTOS-Kernel/tasks.c **** 
5648:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSetTaskNumber( xTask, uxHandle );
5649:FreeRTOS-Kernel/tasks.c **** 
5650:FreeRTOS-Kernel/tasks.c ****         if( xTask != NULL )
ARM GAS  /tmp/ccJw1tyY.s 			page 107


5651:FreeRTOS-Kernel/tasks.c ****         {
5652:FreeRTOS-Kernel/tasks.c ****             pxTCB = xTask;
5653:FreeRTOS-Kernel/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
5654:FreeRTOS-Kernel/tasks.c ****         }
5655:FreeRTOS-Kernel/tasks.c **** 
5656:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskSetTaskNumber();
5657:FreeRTOS-Kernel/tasks.c ****     }
5658:FreeRTOS-Kernel/tasks.c **** 
5659:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
5660:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5661:FreeRTOS-Kernel/tasks.c **** 
5662:FreeRTOS-Kernel/tasks.c **** /*
5663:FreeRTOS-Kernel/tasks.c ****  * -----------------------------------------------------------
5664:FreeRTOS-Kernel/tasks.c ****  * The passive idle task.
5665:FreeRTOS-Kernel/tasks.c ****  * ----------------------------------------------------------
5666:FreeRTOS-Kernel/tasks.c ****  *
5667:FreeRTOS-Kernel/tasks.c ****  * The passive idle task is used for all the additional cores in a SMP
5668:FreeRTOS-Kernel/tasks.c ****  * system. There must be only 1 active idle task and the rest are passive
5669:FreeRTOS-Kernel/tasks.c ****  * idle tasks.
5670:FreeRTOS-Kernel/tasks.c ****  *
5671:FreeRTOS-Kernel/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
5672:FreeRTOS-Kernel/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
5673:FreeRTOS-Kernel/tasks.c ****  *
5674:FreeRTOS-Kernel/tasks.c ****  * void prvPassiveIdleTask( void *pvParameters );
5675:FreeRTOS-Kernel/tasks.c ****  */
5676:FreeRTOS-Kernel/tasks.c **** 
5677:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
5678:FreeRTOS-Kernel/tasks.c ****     static portTASK_FUNCTION( prvPassiveIdleTask, pvParameters )
5679:FreeRTOS-Kernel/tasks.c ****     {
5680:FreeRTOS-Kernel/tasks.c ****         ( void ) pvParameters;
5681:FreeRTOS-Kernel/tasks.c **** 
5682:FreeRTOS-Kernel/tasks.c ****         taskYIELD();
5683:FreeRTOS-Kernel/tasks.c **** 
5684:FreeRTOS-Kernel/tasks.c ****         for( ; configCONTROL_INFINITE_LOOP(); )
5685:FreeRTOS-Kernel/tasks.c ****         {
5686:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_PREEMPTION == 0 )
5687:FreeRTOS-Kernel/tasks.c ****             {
5688:FreeRTOS-Kernel/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
5689:FreeRTOS-Kernel/tasks.c ****                  * see if any other task has become available.  If we are using
5690:FreeRTOS-Kernel/tasks.c ****                  * preemption we don't need to do this as any task becoming available
5691:FreeRTOS-Kernel/tasks.c ****                  * will automatically get the processor anyway. */
5692:FreeRTOS-Kernel/tasks.c ****                 taskYIELD();
5693:FreeRTOS-Kernel/tasks.c ****             }
5694:FreeRTOS-Kernel/tasks.c ****             #endif /* configUSE_PREEMPTION */
5695:FreeRTOS-Kernel/tasks.c **** 
5696:FreeRTOS-Kernel/tasks.c ****             #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
5697:FreeRTOS-Kernel/tasks.c ****             {
5698:FreeRTOS-Kernel/tasks.c ****                 /* When using preemption tasks of equal priority will be
5699:FreeRTOS-Kernel/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
5700:FreeRTOS-Kernel/tasks.c ****                  * to run then the idle task should yield before the end of the
5701:FreeRTOS-Kernel/tasks.c ****                  * timeslice.
5702:FreeRTOS-Kernel/tasks.c ****                  *
5703:FreeRTOS-Kernel/tasks.c ****                  * A critical region is not required here as we are just reading from
5704:FreeRTOS-Kernel/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
5705:FreeRTOS-Kernel/tasks.c ****                  * the ready list at the idle priority contains one more task than the
5706:FreeRTOS-Kernel/tasks.c ****                  * number of idle tasks, which is equal to the configured numbers of cores
5707:FreeRTOS-Kernel/tasks.c ****                  * then a task other than the idle task is ready to execute. */
ARM GAS  /tmp/ccJw1tyY.s 			page 108


5708:FreeRTOS-Kernel/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
5709:FreeRTOS-Kernel/tasks.c ****                 {
5710:FreeRTOS-Kernel/tasks.c ****                     taskYIELD();
5711:FreeRTOS-Kernel/tasks.c ****                 }
5712:FreeRTOS-Kernel/tasks.c ****                 else
5713:FreeRTOS-Kernel/tasks.c ****                 {
5714:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5715:FreeRTOS-Kernel/tasks.c ****                 }
5716:FreeRTOS-Kernel/tasks.c ****             }
5717:FreeRTOS-Kernel/tasks.c ****             #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
5718:FreeRTOS-Kernel/tasks.c **** 
5719:FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_PASSIVE_IDLE_HOOK == 1 )
5720:FreeRTOS-Kernel/tasks.c ****             {
5721:FreeRTOS-Kernel/tasks.c ****                 /* Call the user defined function from within the idle task.  This
5722:FreeRTOS-Kernel/tasks.c ****                  * allows the application designer to add background functionality
5723:FreeRTOS-Kernel/tasks.c ****                  * without the overhead of a separate task.
5724:FreeRTOS-Kernel/tasks.c ****                  *
5725:FreeRTOS-Kernel/tasks.c ****                  * This hook is intended to manage core activity such as disabling cores that go id
5726:FreeRTOS-Kernel/tasks.c ****                  *
5727:FreeRTOS-Kernel/tasks.c ****                  * NOTE: vApplicationPassiveIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
5728:FreeRTOS-Kernel/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
5729:FreeRTOS-Kernel/tasks.c ****                 vApplicationPassiveIdleHook();
5730:FreeRTOS-Kernel/tasks.c ****             }
5731:FreeRTOS-Kernel/tasks.c ****             #endif /* configUSE_PASSIVE_IDLE_HOOK */
5732:FreeRTOS-Kernel/tasks.c ****         }
5733:FreeRTOS-Kernel/tasks.c ****     }
5734:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
5735:FreeRTOS-Kernel/tasks.c **** 
5736:FreeRTOS-Kernel/tasks.c **** /*
5737:FreeRTOS-Kernel/tasks.c ****  * -----------------------------------------------------------
5738:FreeRTOS-Kernel/tasks.c ****  * The idle task.
5739:FreeRTOS-Kernel/tasks.c ****  * ----------------------------------------------------------
5740:FreeRTOS-Kernel/tasks.c ****  *
5741:FreeRTOS-Kernel/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
5742:FreeRTOS-Kernel/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
5743:FreeRTOS-Kernel/tasks.c ****  *
5744:FreeRTOS-Kernel/tasks.c ****  * void prvIdleTask( void *pvParameters );
5745:FreeRTOS-Kernel/tasks.c ****  *
5746:FreeRTOS-Kernel/tasks.c ****  */
5747:FreeRTOS-Kernel/tasks.c **** 
5748:FreeRTOS-Kernel/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
5749:FreeRTOS-Kernel/tasks.c **** {
5750:FreeRTOS-Kernel/tasks.c ****     /* Stop warnings. */
5751:FreeRTOS-Kernel/tasks.c ****     ( void ) pvParameters;
5752:FreeRTOS-Kernel/tasks.c **** 
5753:FreeRTOS-Kernel/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
5754:FreeRTOS-Kernel/tasks.c ****      * SCHEDULER IS STARTED. **/
5755:FreeRTOS-Kernel/tasks.c **** 
5756:FreeRTOS-Kernel/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
5757:FreeRTOS-Kernel/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
5758:FreeRTOS-Kernel/tasks.c ****      * any. */
5759:FreeRTOS-Kernel/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
5760:FreeRTOS-Kernel/tasks.c **** 
5761:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
5762:FreeRTOS-Kernel/tasks.c ****     {
5763:FreeRTOS-Kernel/tasks.c ****         /* SMP all cores start up in the idle task. This initial yield gets the application
5764:FreeRTOS-Kernel/tasks.c ****          * tasks started. */
ARM GAS  /tmp/ccJw1tyY.s 			page 109


5765:FreeRTOS-Kernel/tasks.c ****         taskYIELD();
5766:FreeRTOS-Kernel/tasks.c ****     }
5767:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
5768:FreeRTOS-Kernel/tasks.c **** 
5769:FreeRTOS-Kernel/tasks.c ****     for( ; configCONTROL_INFINITE_LOOP(); )
5770:FreeRTOS-Kernel/tasks.c ****     {
5771:FreeRTOS-Kernel/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
5772:FreeRTOS-Kernel/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
5773:FreeRTOS-Kernel/tasks.c ****         prvCheckTasksWaitingTermination();
5774:FreeRTOS-Kernel/tasks.c **** 
5775:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
5776:FreeRTOS-Kernel/tasks.c ****         {
5777:FreeRTOS-Kernel/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
5778:FreeRTOS-Kernel/tasks.c ****              * see if any other task has become available.  If we are using
5779:FreeRTOS-Kernel/tasks.c ****              * preemption we don't need to do this as any task becoming available
5780:FreeRTOS-Kernel/tasks.c ****              * will automatically get the processor anyway. */
5781:FreeRTOS-Kernel/tasks.c ****             taskYIELD();
5782:FreeRTOS-Kernel/tasks.c ****         }
5783:FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_PREEMPTION */
5784:FreeRTOS-Kernel/tasks.c **** 
5785:FreeRTOS-Kernel/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
5786:FreeRTOS-Kernel/tasks.c ****         {
5787:FreeRTOS-Kernel/tasks.c ****             /* When using preemption tasks of equal priority will be
5788:FreeRTOS-Kernel/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
5789:FreeRTOS-Kernel/tasks.c ****              * to run then the idle task should yield before the end of the
5790:FreeRTOS-Kernel/tasks.c ****              * timeslice.
5791:FreeRTOS-Kernel/tasks.c ****              *
5792:FreeRTOS-Kernel/tasks.c ****              * A critical region is not required here as we are just reading from
5793:FreeRTOS-Kernel/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
5794:FreeRTOS-Kernel/tasks.c ****              * the ready list at the idle priority contains one more task than the
5795:FreeRTOS-Kernel/tasks.c ****              * number of idle tasks, which is equal to the configured numbers of cores
5796:FreeRTOS-Kernel/tasks.c ****              * then a task other than the idle task is ready to execute. */
5797:FreeRTOS-Kernel/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
5798:FreeRTOS-Kernel/tasks.c ****             {
5799:FreeRTOS-Kernel/tasks.c ****                 taskYIELD();
5800:FreeRTOS-Kernel/tasks.c ****             }
5801:FreeRTOS-Kernel/tasks.c ****             else
5802:FreeRTOS-Kernel/tasks.c ****             {
5803:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5804:FreeRTOS-Kernel/tasks.c ****             }
5805:FreeRTOS-Kernel/tasks.c ****         }
5806:FreeRTOS-Kernel/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
5807:FreeRTOS-Kernel/tasks.c **** 
5808:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
5809:FreeRTOS-Kernel/tasks.c ****         {
5810:FreeRTOS-Kernel/tasks.c ****             /* Call the user defined function from within the idle task. */
5811:FreeRTOS-Kernel/tasks.c ****             vApplicationIdleHook();
5812:FreeRTOS-Kernel/tasks.c ****         }
5813:FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
5814:FreeRTOS-Kernel/tasks.c **** 
5815:FreeRTOS-Kernel/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
5816:FreeRTOS-Kernel/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
5817:FreeRTOS-Kernel/tasks.c ****          * user defined low power mode  implementations require
5818:FreeRTOS-Kernel/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
5819:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
5820:FreeRTOS-Kernel/tasks.c ****         {
5821:FreeRTOS-Kernel/tasks.c ****             TickType_t xExpectedIdleTime;
ARM GAS  /tmp/ccJw1tyY.s 			page 110


5822:FreeRTOS-Kernel/tasks.c **** 
5823:FreeRTOS-Kernel/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
5824:FreeRTOS-Kernel/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
5825:FreeRTOS-Kernel/tasks.c ****              * test of the expected idle time is performed without the
5826:FreeRTOS-Kernel/tasks.c ****              * scheduler suspended.  The result here is not necessarily
5827:FreeRTOS-Kernel/tasks.c ****              * valid. */
5828:FreeRTOS-Kernel/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
5829:FreeRTOS-Kernel/tasks.c **** 
5830:FreeRTOS-Kernel/tasks.c ****             if( xExpectedIdleTime >= ( TickType_t ) configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
5831:FreeRTOS-Kernel/tasks.c ****             {
5832:FreeRTOS-Kernel/tasks.c ****                 vTaskSuspendAll();
5833:FreeRTOS-Kernel/tasks.c ****                 {
5834:FreeRTOS-Kernel/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
5835:FreeRTOS-Kernel/tasks.c ****                      * time can be sampled again, and this time its value can
5836:FreeRTOS-Kernel/tasks.c ****                      * be used. */
5837:FreeRTOS-Kernel/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
5838:FreeRTOS-Kernel/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
5839:FreeRTOS-Kernel/tasks.c **** 
5840:FreeRTOS-Kernel/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
5841:FreeRTOS-Kernel/tasks.c ****                      * if the application does not want
5842:FreeRTOS-Kernel/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
5843:FreeRTOS-Kernel/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
5844:FreeRTOS-Kernel/tasks.c **** 
5845:FreeRTOS-Kernel/tasks.c ****                     if( xExpectedIdleTime >= ( TickType_t ) configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
5846:FreeRTOS-Kernel/tasks.c ****                     {
5847:FreeRTOS-Kernel/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
5848:FreeRTOS-Kernel/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
5849:FreeRTOS-Kernel/tasks.c ****                         traceLOW_POWER_IDLE_END();
5850:FreeRTOS-Kernel/tasks.c ****                     }
5851:FreeRTOS-Kernel/tasks.c ****                     else
5852:FreeRTOS-Kernel/tasks.c ****                     {
5853:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5854:FreeRTOS-Kernel/tasks.c ****                     }
5855:FreeRTOS-Kernel/tasks.c ****                 }
5856:FreeRTOS-Kernel/tasks.c ****                 ( void ) xTaskResumeAll();
5857:FreeRTOS-Kernel/tasks.c ****             }
5858:FreeRTOS-Kernel/tasks.c ****             else
5859:FreeRTOS-Kernel/tasks.c ****             {
5860:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5861:FreeRTOS-Kernel/tasks.c ****             }
5862:FreeRTOS-Kernel/tasks.c ****         }
5863:FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
5864:FreeRTOS-Kernel/tasks.c **** 
5865:FreeRTOS-Kernel/tasks.c ****         #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PASSIVE_IDLE_HOOK == 1 ) )
5866:FreeRTOS-Kernel/tasks.c ****         {
5867:FreeRTOS-Kernel/tasks.c ****             /* Call the user defined function from within the idle task.  This
5868:FreeRTOS-Kernel/tasks.c ****              * allows the application designer to add background functionality
5869:FreeRTOS-Kernel/tasks.c ****              * without the overhead of a separate task.
5870:FreeRTOS-Kernel/tasks.c ****              *
5871:FreeRTOS-Kernel/tasks.c ****              * This hook is intended to manage core activity such as disabling cores that go idle.
5872:FreeRTOS-Kernel/tasks.c ****              *
5873:FreeRTOS-Kernel/tasks.c ****              * NOTE: vApplicationPassiveIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
5874:FreeRTOS-Kernel/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
5875:FreeRTOS-Kernel/tasks.c ****             vApplicationPassiveIdleHook();
5876:FreeRTOS-Kernel/tasks.c ****         }
5877:FreeRTOS-Kernel/tasks.c ****         #endif /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_PASSIVE_IDLE_HOOK == 1 ) ) */
5878:FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  /tmp/ccJw1tyY.s 			page 111


5879:FreeRTOS-Kernel/tasks.c **** }
5880:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5881:FreeRTOS-Kernel/tasks.c **** 
5882:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
5883:FreeRTOS-Kernel/tasks.c **** 
5884:FreeRTOS-Kernel/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
5885:FreeRTOS-Kernel/tasks.c ****     {
5886:FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
5887:FreeRTOS-Kernel/tasks.c ****             /* The idle task exists in addition to the application tasks. */
5888:FreeRTOS-Kernel/tasks.c ****             const UBaseType_t uxNonApplicationTasks = configNUMBER_OF_CORES;
5889:FreeRTOS-Kernel/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
5890:FreeRTOS-Kernel/tasks.c **** 
5891:FreeRTOS-Kernel/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
5892:FreeRTOS-Kernel/tasks.c **** 
5893:FreeRTOS-Kernel/tasks.c ****         traceENTER_eTaskConfirmSleepModeStatus();
5894:FreeRTOS-Kernel/tasks.c **** 
5895:FreeRTOS-Kernel/tasks.c ****         /* This function must be called from a critical section. */
5896:FreeRTOS-Kernel/tasks.c **** 
5897:FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0U )
5898:FreeRTOS-Kernel/tasks.c ****         {
5899:FreeRTOS-Kernel/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
5900:FreeRTOS-Kernel/tasks.c ****             eReturn = eAbortSleep;
5901:FreeRTOS-Kernel/tasks.c ****         }
5902:FreeRTOS-Kernel/tasks.c ****         else if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
5903:FreeRTOS-Kernel/tasks.c ****         {
5904:FreeRTOS-Kernel/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
5905:FreeRTOS-Kernel/tasks.c ****             eReturn = eAbortSleep;
5906:FreeRTOS-Kernel/tasks.c ****         }
5907:FreeRTOS-Kernel/tasks.c ****         else if( xPendedTicks != 0U )
5908:FreeRTOS-Kernel/tasks.c ****         {
5909:FreeRTOS-Kernel/tasks.c ****             /* A tick interrupt has already occurred but was held pending
5910:FreeRTOS-Kernel/tasks.c ****              * because the scheduler is suspended. */
5911:FreeRTOS-Kernel/tasks.c ****             eReturn = eAbortSleep;
5912:FreeRTOS-Kernel/tasks.c ****         }
5913:FreeRTOS-Kernel/tasks.c **** 
5914:FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
5915:FreeRTOS-Kernel/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
5916:FreeRTOS-Kernel/tasks.c ****             {
5917:FreeRTOS-Kernel/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
5918:FreeRTOS-Kernel/tasks.c ****                  * have an infinite block time rather than actually being suspended)
5919:FreeRTOS-Kernel/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
5920:FreeRTOS-Kernel/tasks.c ****                  * interrupts. */
5921:FreeRTOS-Kernel/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
5922:FreeRTOS-Kernel/tasks.c ****             }
5923:FreeRTOS-Kernel/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
5924:FreeRTOS-Kernel/tasks.c ****         else
5925:FreeRTOS-Kernel/tasks.c ****         {
5926:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
5927:FreeRTOS-Kernel/tasks.c ****         }
5928:FreeRTOS-Kernel/tasks.c **** 
5929:FreeRTOS-Kernel/tasks.c ****         traceRETURN_eTaskConfirmSleepModeStatus( eReturn );
5930:FreeRTOS-Kernel/tasks.c **** 
5931:FreeRTOS-Kernel/tasks.c ****         return eReturn;
5932:FreeRTOS-Kernel/tasks.c ****     }
5933:FreeRTOS-Kernel/tasks.c **** 
5934:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
5935:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJw1tyY.s 			page 112


5936:FreeRTOS-Kernel/tasks.c **** 
5937:FreeRTOS-Kernel/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
5938:FreeRTOS-Kernel/tasks.c **** 
5939:FreeRTOS-Kernel/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
5940:FreeRTOS-Kernel/tasks.c ****                                             BaseType_t xIndex,
5941:FreeRTOS-Kernel/tasks.c ****                                             void * pvValue )
5942:FreeRTOS-Kernel/tasks.c ****     {
5943:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5944:FreeRTOS-Kernel/tasks.c **** 
5945:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSetThreadLocalStoragePointer( xTaskToSet, xIndex, pvValue );
5946:FreeRTOS-Kernel/tasks.c **** 
5947:FreeRTOS-Kernel/tasks.c ****         if( ( xIndex >= 0 ) &&
5948:FreeRTOS-Kernel/tasks.c ****             ( xIndex < ( BaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
5949:FreeRTOS-Kernel/tasks.c ****         {
5950:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
5951:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB != NULL );
5952:FreeRTOS-Kernel/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
5953:FreeRTOS-Kernel/tasks.c ****         }
5954:FreeRTOS-Kernel/tasks.c **** 
5955:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskSetThreadLocalStoragePointer();
5956:FreeRTOS-Kernel/tasks.c ****     }
5957:FreeRTOS-Kernel/tasks.c **** 
5958:FreeRTOS-Kernel/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
5959:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5960:FreeRTOS-Kernel/tasks.c **** 
5961:FreeRTOS-Kernel/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
5962:FreeRTOS-Kernel/tasks.c **** 
5963:FreeRTOS-Kernel/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
5964:FreeRTOS-Kernel/tasks.c ****                                                BaseType_t xIndex )
5965:FreeRTOS-Kernel/tasks.c ****     {
5966:FreeRTOS-Kernel/tasks.c ****         void * pvReturn = NULL;
5967:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5968:FreeRTOS-Kernel/tasks.c **** 
5969:FreeRTOS-Kernel/tasks.c ****         traceENTER_pvTaskGetThreadLocalStoragePointer( xTaskToQuery, xIndex );
5970:FreeRTOS-Kernel/tasks.c **** 
5971:FreeRTOS-Kernel/tasks.c ****         if( ( xIndex >= 0 ) &&
5972:FreeRTOS-Kernel/tasks.c ****             ( xIndex < ( BaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
5973:FreeRTOS-Kernel/tasks.c ****         {
5974:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
5975:FreeRTOS-Kernel/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
5976:FreeRTOS-Kernel/tasks.c ****         }
5977:FreeRTOS-Kernel/tasks.c ****         else
5978:FreeRTOS-Kernel/tasks.c ****         {
5979:FreeRTOS-Kernel/tasks.c ****             pvReturn = NULL;
5980:FreeRTOS-Kernel/tasks.c ****         }
5981:FreeRTOS-Kernel/tasks.c **** 
5982:FreeRTOS-Kernel/tasks.c ****         traceRETURN_pvTaskGetThreadLocalStoragePointer( pvReturn );
5983:FreeRTOS-Kernel/tasks.c **** 
5984:FreeRTOS-Kernel/tasks.c ****         return pvReturn;
5985:FreeRTOS-Kernel/tasks.c ****     }
5986:FreeRTOS-Kernel/tasks.c **** 
5987:FreeRTOS-Kernel/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
5988:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5989:FreeRTOS-Kernel/tasks.c **** 
5990:FreeRTOS-Kernel/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
5991:FreeRTOS-Kernel/tasks.c **** 
5992:FreeRTOS-Kernel/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
ARM GAS  /tmp/ccJw1tyY.s 			page 113


5993:FreeRTOS-Kernel/tasks.c ****                                   const MemoryRegion_t * const pxRegions )
5994:FreeRTOS-Kernel/tasks.c ****     {
5995:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5996:FreeRTOS-Kernel/tasks.c **** 
5997:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskAllocateMPURegions( xTaskToModify, pxRegions );
5998:FreeRTOS-Kernel/tasks.c **** 
5999:FreeRTOS-Kernel/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
6000:FreeRTOS-Kernel/tasks.c ****          * the calling task. */
6001:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
6002:FreeRTOS-Kernel/tasks.c **** 
6003:FreeRTOS-Kernel/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), pxRegions, NULL, 0 );
6004:FreeRTOS-Kernel/tasks.c **** 
6005:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskAllocateMPURegions();
6006:FreeRTOS-Kernel/tasks.c ****     }
6007:FreeRTOS-Kernel/tasks.c **** 
6008:FreeRTOS-Kernel/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
6009:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6010:FreeRTOS-Kernel/tasks.c **** 
6011:FreeRTOS-Kernel/tasks.c **** static void prvInitialiseTaskLists( void )
6012:FreeRTOS-Kernel/tasks.c **** {
6013:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxPriority;
6014:FreeRTOS-Kernel/tasks.c **** 
6015:FreeRTOS-Kernel/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
6016:FreeRTOS-Kernel/tasks.c ****     {
6017:FreeRTOS-Kernel/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
6018:FreeRTOS-Kernel/tasks.c ****     }
6019:FreeRTOS-Kernel/tasks.c **** 
6020:FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
6021:FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
6022:FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xPendingReadyList );
6023:FreeRTOS-Kernel/tasks.c **** 
6024:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
6025:FreeRTOS-Kernel/tasks.c ****     {
6026:FreeRTOS-Kernel/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
6027:FreeRTOS-Kernel/tasks.c ****     }
6028:FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
6029:FreeRTOS-Kernel/tasks.c **** 
6030:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
6031:FreeRTOS-Kernel/tasks.c ****     {
6032:FreeRTOS-Kernel/tasks.c ****         vListInitialise( &xSuspendedTaskList );
6033:FreeRTOS-Kernel/tasks.c ****     }
6034:FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
6035:FreeRTOS-Kernel/tasks.c **** 
6036:FreeRTOS-Kernel/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
6037:FreeRTOS-Kernel/tasks.c ****      * using list2. */
6038:FreeRTOS-Kernel/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
6039:FreeRTOS-Kernel/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
6040:FreeRTOS-Kernel/tasks.c **** }
6041:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6042:FreeRTOS-Kernel/tasks.c **** 
6043:FreeRTOS-Kernel/tasks.c **** static void prvCheckTasksWaitingTermination( void )
6044:FreeRTOS-Kernel/tasks.c **** {
6045:FreeRTOS-Kernel/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
6046:FreeRTOS-Kernel/tasks.c **** 
6047:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
6048:FreeRTOS-Kernel/tasks.c ****     {
6049:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
ARM GAS  /tmp/ccJw1tyY.s 			page 114


6050:FreeRTOS-Kernel/tasks.c **** 
6051:FreeRTOS-Kernel/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
6052:FreeRTOS-Kernel/tasks.c ****          * being called too often in the idle task. */
6053:FreeRTOS-Kernel/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
6054:FreeRTOS-Kernel/tasks.c ****         {
6055:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
6056:FreeRTOS-Kernel/tasks.c ****             {
6057:FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
6058:FreeRTOS-Kernel/tasks.c ****                 {
6059:FreeRTOS-Kernel/tasks.c ****                     {
6060:FreeRTOS-Kernel/tasks.c ****                         /* MISRA Ref 11.5.3 [Void pointer assignment] */
6061:FreeRTOS-Kernel/tasks.c ****                         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/M
6062:FreeRTOS-Kernel/tasks.c ****                         /* coverity[misra_c_2012_rule_11_5_violation] */
6063:FreeRTOS-Kernel/tasks.c ****                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
6064:FreeRTOS-Kernel/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
6065:FreeRTOS-Kernel/tasks.c ****                         --uxCurrentNumberOfTasks;
6066:FreeRTOS-Kernel/tasks.c ****                         --uxDeletedTasksWaitingCleanUp;
6067:FreeRTOS-Kernel/tasks.c ****                     }
6068:FreeRTOS-Kernel/tasks.c ****                 }
6069:FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
6070:FreeRTOS-Kernel/tasks.c **** 
6071:FreeRTOS-Kernel/tasks.c ****                 prvDeleteTCB( pxTCB );
6072:FreeRTOS-Kernel/tasks.c ****             }
6073:FreeRTOS-Kernel/tasks.c ****             #else /* #if( configNUMBER_OF_CORES == 1 ) */
6074:FreeRTOS-Kernel/tasks.c ****             {
6075:FreeRTOS-Kernel/tasks.c ****                 pxTCB = NULL;
6076:FreeRTOS-Kernel/tasks.c **** 
6077:FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
6078:FreeRTOS-Kernel/tasks.c ****                 {
6079:FreeRTOS-Kernel/tasks.c ****                     /* For SMP, multiple idles can be running simultaneously
6080:FreeRTOS-Kernel/tasks.c ****                      * and we need to check that other idles did not cleanup while we were
6081:FreeRTOS-Kernel/tasks.c ****                      * waiting to enter the critical section. */
6082:FreeRTOS-Kernel/tasks.c ****                     if( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
6083:FreeRTOS-Kernel/tasks.c ****                     {
6084:FreeRTOS-Kernel/tasks.c ****                         /* MISRA Ref 11.5.3 [Void pointer assignment] */
6085:FreeRTOS-Kernel/tasks.c ****                         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/M
6086:FreeRTOS-Kernel/tasks.c ****                         /* coverity[misra_c_2012_rule_11_5_violation] */
6087:FreeRTOS-Kernel/tasks.c ****                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
6088:FreeRTOS-Kernel/tasks.c **** 
6089:FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->xTaskRunState == taskTASK_NOT_RUNNING )
6090:FreeRTOS-Kernel/tasks.c ****                         {
6091:FreeRTOS-Kernel/tasks.c ****                             ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
6092:FreeRTOS-Kernel/tasks.c ****                             --uxCurrentNumberOfTasks;
6093:FreeRTOS-Kernel/tasks.c ****                             --uxDeletedTasksWaitingCleanUp;
6094:FreeRTOS-Kernel/tasks.c ****                         }
6095:FreeRTOS-Kernel/tasks.c ****                         else
6096:FreeRTOS-Kernel/tasks.c ****                         {
6097:FreeRTOS-Kernel/tasks.c ****                             /* The TCB to be deleted still has not yet been switched out
6098:FreeRTOS-Kernel/tasks.c ****                              * by the scheduler, so we will just exit this loop early and
6099:FreeRTOS-Kernel/tasks.c ****                              * try again next time. */
6100:FreeRTOS-Kernel/tasks.c ****                             taskEXIT_CRITICAL();
6101:FreeRTOS-Kernel/tasks.c ****                             break;
6102:FreeRTOS-Kernel/tasks.c ****                         }
6103:FreeRTOS-Kernel/tasks.c ****                     }
6104:FreeRTOS-Kernel/tasks.c ****                 }
6105:FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
6106:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 115


6107:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB != NULL )
6108:FreeRTOS-Kernel/tasks.c ****                 {
6109:FreeRTOS-Kernel/tasks.c ****                     prvDeleteTCB( pxTCB );
6110:FreeRTOS-Kernel/tasks.c ****                 }
6111:FreeRTOS-Kernel/tasks.c ****             }
6112:FreeRTOS-Kernel/tasks.c ****             #endif /* #if( configNUMBER_OF_CORES == 1 ) */
6113:FreeRTOS-Kernel/tasks.c ****         }
6114:FreeRTOS-Kernel/tasks.c ****     }
6115:FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
6116:FreeRTOS-Kernel/tasks.c **** }
6117:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6118:FreeRTOS-Kernel/tasks.c **** 
6119:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
6120:FreeRTOS-Kernel/tasks.c **** 
6121:FreeRTOS-Kernel/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
6122:FreeRTOS-Kernel/tasks.c ****                        TaskStatus_t * pxTaskStatus,
6123:FreeRTOS-Kernel/tasks.c ****                        BaseType_t xGetFreeStackSpace,
6124:FreeRTOS-Kernel/tasks.c ****                        eTaskState eState )
6125:FreeRTOS-Kernel/tasks.c ****     {
6126:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
6127:FreeRTOS-Kernel/tasks.c **** 
6128:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
6129:FreeRTOS-Kernel/tasks.c **** 
6130:FreeRTOS-Kernel/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
6131:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
6132:FreeRTOS-Kernel/tasks.c **** 
6133:FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->xHandle = pxTCB;
6134:FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
6135:FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
6136:FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
6137:FreeRTOS-Kernel/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
6138:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
6139:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
6140:FreeRTOS-Kernel/tasks.c ****         #endif
6141:FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
6142:FreeRTOS-Kernel/tasks.c **** 
6143:FreeRTOS-Kernel/tasks.c ****         #if ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) )
6144:FreeRTOS-Kernel/tasks.c ****         {
6145:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->uxCoreAffinityMask = pxTCB->uxCoreAffinityMask;
6146:FreeRTOS-Kernel/tasks.c ****         }
6147:FreeRTOS-Kernel/tasks.c ****         #endif
6148:FreeRTOS-Kernel/tasks.c **** 
6149:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
6150:FreeRTOS-Kernel/tasks.c ****         {
6151:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
6152:FreeRTOS-Kernel/tasks.c ****         }
6153:FreeRTOS-Kernel/tasks.c ****         #else
6154:FreeRTOS-Kernel/tasks.c ****         {
6155:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
6156:FreeRTOS-Kernel/tasks.c ****         }
6157:FreeRTOS-Kernel/tasks.c ****         #endif
6158:FreeRTOS-Kernel/tasks.c **** 
6159:FreeRTOS-Kernel/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
6160:FreeRTOS-Kernel/tasks.c ****         {
6161:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
6162:FreeRTOS-Kernel/tasks.c ****         }
6163:FreeRTOS-Kernel/tasks.c ****         #else
ARM GAS  /tmp/ccJw1tyY.s 			page 116


6164:FreeRTOS-Kernel/tasks.c ****         {
6165:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
6166:FreeRTOS-Kernel/tasks.c ****         }
6167:FreeRTOS-Kernel/tasks.c ****         #endif
6168:FreeRTOS-Kernel/tasks.c **** 
6169:FreeRTOS-Kernel/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
6170:FreeRTOS-Kernel/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
6171:FreeRTOS-Kernel/tasks.c ****          * state is just set to whatever is passed in. */
6172:FreeRTOS-Kernel/tasks.c ****         if( eState != eInvalid )
6173:FreeRTOS-Kernel/tasks.c ****         {
6174:FreeRTOS-Kernel/tasks.c ****             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
6175:FreeRTOS-Kernel/tasks.c ****             {
6176:FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
6177:FreeRTOS-Kernel/tasks.c ****             }
6178:FreeRTOS-Kernel/tasks.c ****             else
6179:FreeRTOS-Kernel/tasks.c ****             {
6180:FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
6181:FreeRTOS-Kernel/tasks.c **** 
6182:FreeRTOS-Kernel/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
6183:FreeRTOS-Kernel/tasks.c ****                 {
6184:FreeRTOS-Kernel/tasks.c ****                     /* If the task is in the suspended list then there is a
6185:FreeRTOS-Kernel/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
6186:FreeRTOS-Kernel/tasks.c ****                      *  it should be reported as being in the Blocked state. */
6187:FreeRTOS-Kernel/tasks.c ****                     if( eState == eSuspended )
6188:FreeRTOS-Kernel/tasks.c ****                     {
6189:FreeRTOS-Kernel/tasks.c ****                         vTaskSuspendAll();
6190:FreeRTOS-Kernel/tasks.c ****                         {
6191:FreeRTOS-Kernel/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
6192:FreeRTOS-Kernel/tasks.c ****                             {
6193:FreeRTOS-Kernel/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
6194:FreeRTOS-Kernel/tasks.c ****                             }
6195:FreeRTOS-Kernel/tasks.c ****                             else
6196:FreeRTOS-Kernel/tasks.c ****                             {
6197:FreeRTOS-Kernel/tasks.c ****                                 #if ( configUSE_TASK_NOTIFICATIONS == 1 )
6198:FreeRTOS-Kernel/tasks.c ****                                 {
6199:FreeRTOS-Kernel/tasks.c ****                                     BaseType_t x;
6200:FreeRTOS-Kernel/tasks.c **** 
6201:FreeRTOS-Kernel/tasks.c ****                                     /* The task does not appear on the event list item of
6202:FreeRTOS-Kernel/tasks.c ****                                      * and of the RTOS objects, but could still be in the
6203:FreeRTOS-Kernel/tasks.c ****                                      * blocked state if it is waiting on its notification
6204:FreeRTOS-Kernel/tasks.c ****                                      * rather than waiting on an object.  If not, is
6205:FreeRTOS-Kernel/tasks.c ****                                      * suspended. */
6206:FreeRTOS-Kernel/tasks.c ****                                     for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFI
6207:FreeRTOS-Kernel/tasks.c ****                                     {
6208:FreeRTOS-Kernel/tasks.c ****                                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
6209:FreeRTOS-Kernel/tasks.c ****                                         {
6210:FreeRTOS-Kernel/tasks.c ****                                             pxTaskStatus->eCurrentState = eBlocked;
6211:FreeRTOS-Kernel/tasks.c ****                                             break;
6212:FreeRTOS-Kernel/tasks.c ****                                         }
6213:FreeRTOS-Kernel/tasks.c ****                                     }
6214:FreeRTOS-Kernel/tasks.c ****                                 }
6215:FreeRTOS-Kernel/tasks.c ****                                 #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
6216:FreeRTOS-Kernel/tasks.c ****                             }
6217:FreeRTOS-Kernel/tasks.c ****                         }
6218:FreeRTOS-Kernel/tasks.c ****                         ( void ) xTaskResumeAll();
6219:FreeRTOS-Kernel/tasks.c ****                     }
6220:FreeRTOS-Kernel/tasks.c ****                 }
ARM GAS  /tmp/ccJw1tyY.s 			page 117


6221:FreeRTOS-Kernel/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
6222:FreeRTOS-Kernel/tasks.c **** 
6223:FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be in pending ready list and other state list at the
6224:FreeRTOS-Kernel/tasks.c ****                  * same time. These tasks are in ready state no matter what state
6225:FreeRTOS-Kernel/tasks.c ****                  * list the task is in. */
6226:FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
6227:FreeRTOS-Kernel/tasks.c ****                 {
6228:FreeRTOS-Kernel/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) !
6229:FreeRTOS-Kernel/tasks.c ****                     {
6230:FreeRTOS-Kernel/tasks.c ****                         pxTaskStatus->eCurrentState = eReady;
6231:FreeRTOS-Kernel/tasks.c ****                     }
6232:FreeRTOS-Kernel/tasks.c ****                 }
6233:FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
6234:FreeRTOS-Kernel/tasks.c ****             }
6235:FreeRTOS-Kernel/tasks.c ****         }
6236:FreeRTOS-Kernel/tasks.c ****         else
6237:FreeRTOS-Kernel/tasks.c ****         {
6238:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
6239:FreeRTOS-Kernel/tasks.c ****         }
6240:FreeRTOS-Kernel/tasks.c **** 
6241:FreeRTOS-Kernel/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
6242:FreeRTOS-Kernel/tasks.c ****          * parameter is provided to allow it to be skipped. */
6243:FreeRTOS-Kernel/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
6244:FreeRTOS-Kernel/tasks.c ****         {
6245:FreeRTOS-Kernel/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
6246:FreeRTOS-Kernel/tasks.c ****             {
6247:FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
6248:FreeRTOS-Kernel/tasks.c ****             }
6249:FreeRTOS-Kernel/tasks.c ****             #else
6250:FreeRTOS-Kernel/tasks.c ****             {
6251:FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
6252:FreeRTOS-Kernel/tasks.c ****             }
6253:FreeRTOS-Kernel/tasks.c ****             #endif
6254:FreeRTOS-Kernel/tasks.c ****         }
6255:FreeRTOS-Kernel/tasks.c ****         else
6256:FreeRTOS-Kernel/tasks.c ****         {
6257:FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
6258:FreeRTOS-Kernel/tasks.c ****         }
6259:FreeRTOS-Kernel/tasks.c **** 
6260:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskGetInfo();
6261:FreeRTOS-Kernel/tasks.c ****     }
6262:FreeRTOS-Kernel/tasks.c **** 
6263:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
6264:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6265:FreeRTOS-Kernel/tasks.c **** 
6266:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
6267:FreeRTOS-Kernel/tasks.c **** 
6268:FreeRTOS-Kernel/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
6269:FreeRTOS-Kernel/tasks.c ****                                                      List_t * pxList,
6270:FreeRTOS-Kernel/tasks.c ****                                                      eTaskState eState )
6271:FreeRTOS-Kernel/tasks.c ****     {
6272:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTask = 0;
6273:FreeRTOS-Kernel/tasks.c ****         const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
6274:FreeRTOS-Kernel/tasks.c ****         ListItem_t * pxIterator;
6275:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB = NULL;
6276:FreeRTOS-Kernel/tasks.c **** 
6277:FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccJw1tyY.s 			page 118


6278:FreeRTOS-Kernel/tasks.c ****         {
6279:FreeRTOS-Kernel/tasks.c ****             /* Populate an TaskStatus_t structure within the
6280:FreeRTOS-Kernel/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
6281:FreeRTOS-Kernel/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
6282:FreeRTOS-Kernel/tasks.c ****              * meaning of each TaskStatus_t structure member. */
6283:FreeRTOS-Kernel/tasks.c ****             for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator =
6284:FreeRTOS-Kernel/tasks.c ****             {
6285:FreeRTOS-Kernel/tasks.c ****                 /* MISRA Ref 11.5.3 [Void pointer assignment] */
6286:FreeRTOS-Kernel/tasks.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
6287:FreeRTOS-Kernel/tasks.c ****                 /* coverity[misra_c_2012_rule_11_5_violation] */
6288:FreeRTOS-Kernel/tasks.c ****                 pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
6289:FreeRTOS-Kernel/tasks.c **** 
6290:FreeRTOS-Kernel/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eSt
6291:FreeRTOS-Kernel/tasks.c ****                 uxTask++;
6292:FreeRTOS-Kernel/tasks.c ****             }
6293:FreeRTOS-Kernel/tasks.c ****         }
6294:FreeRTOS-Kernel/tasks.c ****         else
6295:FreeRTOS-Kernel/tasks.c ****         {
6296:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6297:FreeRTOS-Kernel/tasks.c ****         }
6298:FreeRTOS-Kernel/tasks.c **** 
6299:FreeRTOS-Kernel/tasks.c ****         return uxTask;
6300:FreeRTOS-Kernel/tasks.c ****     }
6301:FreeRTOS-Kernel/tasks.c **** 
6302:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
6303:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6304:FreeRTOS-Kernel/tasks.c **** 
6305:FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
6306:FreeRTOS-Kernel/tasks.c **** 
6307:FreeRTOS-Kernel/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
6308:FreeRTOS-Kernel/tasks.c ****     {
6309:FreeRTOS-Kernel/tasks.c ****         configSTACK_DEPTH_TYPE uxCount = 0U;
6310:FreeRTOS-Kernel/tasks.c **** 
6311:FreeRTOS-Kernel/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
6312:FreeRTOS-Kernel/tasks.c ****         {
6313:FreeRTOS-Kernel/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
6314:FreeRTOS-Kernel/tasks.c ****             uxCount++;
6315:FreeRTOS-Kernel/tasks.c ****         }
6316:FreeRTOS-Kernel/tasks.c **** 
6317:FreeRTOS-Kernel/tasks.c ****         uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
6318:FreeRTOS-Kernel/tasks.c **** 
6319:FreeRTOS-Kernel/tasks.c ****         return uxCount;
6320:FreeRTOS-Kernel/tasks.c ****     }
6321:FreeRTOS-Kernel/tasks.c **** 
6322:FreeRTOS-Kernel/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
6323:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6324:FreeRTOS-Kernel/tasks.c **** 
6325:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
6326:FreeRTOS-Kernel/tasks.c **** 
6327:FreeRTOS-Kernel/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
6328:FreeRTOS-Kernel/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
6329:FreeRTOS-Kernel/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
6330:FreeRTOS-Kernel/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
6331:FreeRTOS-Kernel/tasks.c ****  * applications that expect an 8-bit return type. */
6332:FreeRTOS-Kernel/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
6333:FreeRTOS-Kernel/tasks.c ****     {
6334:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
ARM GAS  /tmp/ccJw1tyY.s 			page 119


6335:FreeRTOS-Kernel/tasks.c ****         uint8_t * pucEndOfStack;
6336:FreeRTOS-Kernel/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
6337:FreeRTOS-Kernel/tasks.c **** 
6338:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskGetStackHighWaterMark2( xTask );
6339:FreeRTOS-Kernel/tasks.c **** 
6340:FreeRTOS-Kernel/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
6341:FreeRTOS-Kernel/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
6342:FreeRTOS-Kernel/tasks.c ****          * allows the user to determine the return type.  It gets around the
6343:FreeRTOS-Kernel/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
6344:FreeRTOS-Kernel/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
6345:FreeRTOS-Kernel/tasks.c ****          * type. */
6346:FreeRTOS-Kernel/tasks.c **** 
6347:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
6348:FreeRTOS-Kernel/tasks.c **** 
6349:FreeRTOS-Kernel/tasks.c ****         #if portSTACK_GROWTH < 0
6350:FreeRTOS-Kernel/tasks.c ****         {
6351:FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
6352:FreeRTOS-Kernel/tasks.c ****         }
6353:FreeRTOS-Kernel/tasks.c ****         #else
6354:FreeRTOS-Kernel/tasks.c ****         {
6355:FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
6356:FreeRTOS-Kernel/tasks.c ****         }
6357:FreeRTOS-Kernel/tasks.c ****         #endif
6358:FreeRTOS-Kernel/tasks.c **** 
6359:FreeRTOS-Kernel/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
6360:FreeRTOS-Kernel/tasks.c **** 
6361:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskGetStackHighWaterMark2( uxReturn );
6362:FreeRTOS-Kernel/tasks.c **** 
6363:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
6364:FreeRTOS-Kernel/tasks.c ****     }
6365:FreeRTOS-Kernel/tasks.c **** 
6366:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
6367:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6368:FreeRTOS-Kernel/tasks.c **** 
6369:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
6370:FreeRTOS-Kernel/tasks.c **** 
6371:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
6372:FreeRTOS-Kernel/tasks.c ****     {
6373:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
6374:FreeRTOS-Kernel/tasks.c ****         uint8_t * pucEndOfStack;
6375:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
6376:FreeRTOS-Kernel/tasks.c **** 
6377:FreeRTOS-Kernel/tasks.c ****         traceENTER_uxTaskGetStackHighWaterMark( xTask );
6378:FreeRTOS-Kernel/tasks.c **** 
6379:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
6380:FreeRTOS-Kernel/tasks.c **** 
6381:FreeRTOS-Kernel/tasks.c ****         #if portSTACK_GROWTH < 0
6382:FreeRTOS-Kernel/tasks.c ****         {
6383:FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
6384:FreeRTOS-Kernel/tasks.c ****         }
6385:FreeRTOS-Kernel/tasks.c ****         #else
6386:FreeRTOS-Kernel/tasks.c ****         {
6387:FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
6388:FreeRTOS-Kernel/tasks.c ****         }
6389:FreeRTOS-Kernel/tasks.c ****         #endif
6390:FreeRTOS-Kernel/tasks.c **** 
6391:FreeRTOS-Kernel/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  /tmp/ccJw1tyY.s 			page 120


6392:FreeRTOS-Kernel/tasks.c **** 
6393:FreeRTOS-Kernel/tasks.c ****         traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
6394:FreeRTOS-Kernel/tasks.c **** 
6395:FreeRTOS-Kernel/tasks.c ****         return uxReturn;
6396:FreeRTOS-Kernel/tasks.c ****     }
6397:FreeRTOS-Kernel/tasks.c **** 
6398:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
6399:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6400:FreeRTOS-Kernel/tasks.c **** 
6401:FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
6402:FreeRTOS-Kernel/tasks.c **** 
6403:FreeRTOS-Kernel/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
6404:FreeRTOS-Kernel/tasks.c ****     {
6405:FreeRTOS-Kernel/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
6406:FreeRTOS-Kernel/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
6407:FreeRTOS-Kernel/tasks.c ****          * want to allocate and clean RAM statically. */
6408:FreeRTOS-Kernel/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
6409:FreeRTOS-Kernel/tasks.c **** 
6410:FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
6411:FreeRTOS-Kernel/tasks.c ****         {
6412:FreeRTOS-Kernel/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
6413:FreeRTOS-Kernel/tasks.c ****             configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
6414:FreeRTOS-Kernel/tasks.c ****         }
6415:FreeRTOS-Kernel/tasks.c ****         #endif
6416:FreeRTOS-Kernel/tasks.c **** 
6417:FreeRTOS-Kernel/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
6418:FreeRTOS-Kernel/tasks.c ****         {
6419:FreeRTOS-Kernel/tasks.c ****             /* The task can only have been allocated dynamically - free both
6420:FreeRTOS-Kernel/tasks.c ****              * the stack and TCB. */
6421:FreeRTOS-Kernel/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
6422:FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTCB );
6423:FreeRTOS-Kernel/tasks.c ****         }
6424:FreeRTOS-Kernel/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
6425:FreeRTOS-Kernel/tasks.c ****         {
6426:FreeRTOS-Kernel/tasks.c ****             /* The task could have been allocated statically or dynamically, so
6427:FreeRTOS-Kernel/tasks.c ****              * check what was statically allocated before trying to free the
6428:FreeRTOS-Kernel/tasks.c ****              * memory. */
6429:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
6430:FreeRTOS-Kernel/tasks.c ****             {
6431:FreeRTOS-Kernel/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
6432:FreeRTOS-Kernel/tasks.c ****                  * must be freed. */
6433:FreeRTOS-Kernel/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
6434:FreeRTOS-Kernel/tasks.c ****                 vPortFree( pxTCB );
6435:FreeRTOS-Kernel/tasks.c ****             }
6436:FreeRTOS-Kernel/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
6437:FreeRTOS-Kernel/tasks.c ****             {
6438:FreeRTOS-Kernel/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
6439:FreeRTOS-Kernel/tasks.c ****                  * only memory that must be freed. */
6440:FreeRTOS-Kernel/tasks.c ****                 vPortFree( pxTCB );
6441:FreeRTOS-Kernel/tasks.c ****             }
6442:FreeRTOS-Kernel/tasks.c ****             else
6443:FreeRTOS-Kernel/tasks.c ****             {
6444:FreeRTOS-Kernel/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
6445:FreeRTOS-Kernel/tasks.c ****                  * nothing needs to be freed. */
6446:FreeRTOS-Kernel/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
6447:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
6448:FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  /tmp/ccJw1tyY.s 			page 121


6449:FreeRTOS-Kernel/tasks.c ****         }
6450:FreeRTOS-Kernel/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
6451:FreeRTOS-Kernel/tasks.c ****     }
6452:FreeRTOS-Kernel/tasks.c **** 
6453:FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskDelete */
6454:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6455:FreeRTOS-Kernel/tasks.c **** 
6456:FreeRTOS-Kernel/tasks.c **** static void prvResetNextTaskUnblockTime( void )
6457:FreeRTOS-Kernel/tasks.c **** {
 163              		.loc 1 6457 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
6458:FreeRTOS-Kernel/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 168              		.loc 1 6458 5 view .LVU42
 169              		.loc 1 6458 9 is_stmt 0 view .LVU43
 170 0000 074B     		ldr	r3, .L18
 171 0002 1B68     		ldr	r3, [r3]
 172 0004 1B68     		ldr	r3, [r3]
 173              		.loc 1 6458 7 view .LVU44
 174 0006 23B9     		cbnz	r3, .L16
6459:FreeRTOS-Kernel/tasks.c ****     {
6460:FreeRTOS-Kernel/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
6461:FreeRTOS-Kernel/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
6462:FreeRTOS-Kernel/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
6463:FreeRTOS-Kernel/tasks.c ****          * there is an item in the delayed list. */
6464:FreeRTOS-Kernel/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 175              		.loc 1 6464 9 is_stmt 1 view .LVU45
 176              		.loc 1 6464 30 is_stmt 0 view .LVU46
 177 0008 064B     		ldr	r3, .L18+4
 178 000a 4FF0FF32 		mov	r2, #-1
 179 000e 1A60     		str	r2, [r3]
 180 0010 7047     		bx	lr
 181              	.L16:
6465:FreeRTOS-Kernel/tasks.c ****     }
6466:FreeRTOS-Kernel/tasks.c ****     else
6467:FreeRTOS-Kernel/tasks.c ****     {
6468:FreeRTOS-Kernel/tasks.c ****         /* The new current delayed list is not empty, get the value of
6469:FreeRTOS-Kernel/tasks.c ****          * the item at the head of the delayed list.  This is the time at
6470:FreeRTOS-Kernel/tasks.c ****          * which the task at the head of the delayed list should be removed
6471:FreeRTOS-Kernel/tasks.c ****          * from the Blocked state. */
6472:FreeRTOS-Kernel/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 182              		.loc 1 6472 9 is_stmt 1 view .LVU47
 183              		.loc 1 6472 32 is_stmt 0 view .LVU48
 184 0012 034B     		ldr	r3, .L18
 185 0014 1B68     		ldr	r3, [r3]
 186 0016 DB68     		ldr	r3, [r3, #12]
 187 0018 1A68     		ldr	r2, [r3]
 188              		.loc 1 6472 30 view .LVU49
 189 001a 024B     		ldr	r3, .L18+4
 190 001c 1A60     		str	r2, [r3]
6473:FreeRTOS-Kernel/tasks.c ****     }
6474:FreeRTOS-Kernel/tasks.c **** }
 191              		.loc 1 6474 1 view .LVU50
 192 001e 7047     		bx	lr
 193              	.L19:
ARM GAS  /tmp/ccJw1tyY.s 			page 122


 194              		.align	2
 195              	.L18:
 196 0020 00000000 		.word	pxDelayedTaskList
 197 0024 00000000 		.word	xNextTaskUnblockTime
 198              		.cfi_endproc
 199              	.LFE47:
 201              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 202              		.align	1
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 207              	prvInitialiseNewTask:
 208              	.LVL14:
 209              	.LFB7:
1801:FreeRTOS-Kernel/tasks.c ****     StackType_t * pxTopOfStack;
 210              		.loc 1 1801 1 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ args = 16, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
1801:FreeRTOS-Kernel/tasks.c ****     StackType_t * pxTopOfStack;
 214              		.loc 1 1801 1 is_stmt 0 view .LVU52
 215 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 216              	.LCFI0:
 217              		.cfi_def_cfa_offset 24
 218              		.cfi_offset 4, -24
 219              		.cfi_offset 5, -20
 220              		.cfi_offset 6, -16
 221              		.cfi_offset 7, -12
 222              		.cfi_offset 8, -8
 223              		.cfi_offset 14, -4
 224 0004 0746     		mov	r7, r0
 225 0006 9846     		mov	r8, r3
 226 0008 069E     		ldr	r6, [sp, #24]
 227 000a 089C     		ldr	r4, [sp, #32]
1802:FreeRTOS-Kernel/tasks.c ****     UBaseType_t x;
 228              		.loc 1 1802 5 is_stmt 1 view .LVU53
1803:FreeRTOS-Kernel/tasks.c **** 
 229              		.loc 1 1803 5 view .LVU54
1834:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 230              		.loc 1 1834 9 view .LVU55
1834:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 231              		.loc 1 1834 35 is_stmt 0 view .LVU56
 232 000c 206B     		ldr	r0, [r4, #48]
 233              	.LVL15:
1834:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 234              		.loc 1 1834 44 view .LVU57
 235 000e 02F18043 		add	r3, r2, #1073741824
 236              	.LVL16:
1834:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 237              		.loc 1 1834 44 view .LVU58
 238 0012 013B     		subs	r3, r3, #1
1834:FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 239              		.loc 1 1834 22 view .LVU59
 240 0014 00EB8300 		add	r0, r0, r3, lsl #2
 241              	.LVL17:
1835:FreeRTOS-Kernel/tasks.c **** 
 242              		.loc 1 1835 9 is_stmt 1 view .LVU60
ARM GAS  /tmp/ccJw1tyY.s 			page 123


1835:FreeRTOS-Kernel/tasks.c **** 
 243              		.loc 1 1835 87 is_stmt 0 view .LVU61
 244 0018 20F00705 		bic	r5, r0, #7
 245              	.LVL18:
1838:FreeRTOS-Kernel/tasks.c **** 
 246              		.loc 1 1838 9 is_stmt 1 view .LVU62
1838:FreeRTOS-Kernel/tasks.c **** 
 247              		.loc 1 1838 129 view .LVU63
1863:FreeRTOS-Kernel/tasks.c ****     {
 248              		.loc 1 1863 5 view .LVU64
1863:FreeRTOS-Kernel/tasks.c ****     {
 249              		.loc 1 1863 7 is_stmt 0 view .LVU65
 250 001c 71B1     		cbz	r1, .L22
 251 001e 0B46     		mov	r3, r1
1865:FreeRTOS-Kernel/tasks.c ****         {
 252              		.loc 1 1865 16 view .LVU66
 253 0020 0022     		movs	r2, #0
 254              	.LVL19:
 255              	.L21:
1865:FreeRTOS-Kernel/tasks.c ****         {
 256              		.loc 1 1865 39 is_stmt 1 discriminator 1 view .LVU67
 257 0022 0F2A     		cmp	r2, #15
 258 0024 07D8     		bhi	.L23
1867:FreeRTOS-Kernel/tasks.c **** 
 259              		.loc 1 1867 13 view .LVU68
1867:FreeRTOS-Kernel/tasks.c **** 
 260              		.loc 1 1867 47 is_stmt 0 view .LVU69
 261 0026 995C     		ldrb	r1, [r3, r2]	@ zero_extendqisi2
1867:FreeRTOS-Kernel/tasks.c **** 
 262              		.loc 1 1867 39 view .LVU70
 263 0028 04EB020C 		add	ip, r4, r2
 264 002c 8CF83410 		strb	r1, [ip, #52]
1872:FreeRTOS-Kernel/tasks.c ****             {
 265              		.loc 1 1872 13 is_stmt 1 view .LVU71
1872:FreeRTOS-Kernel/tasks.c ****             {
 266              		.loc 1 1872 15 is_stmt 0 view .LVU72
 267 0030 09B1     		cbz	r1, .L23
1878:FreeRTOS-Kernel/tasks.c ****             }
 268              		.loc 1 1878 41 is_stmt 1 discriminator 2 view .LVU73
1865:FreeRTOS-Kernel/tasks.c ****         {
 269              		.loc 1 1865 83 discriminator 2 view .LVU74
 270 0032 0132     		adds	r2, r2, #1
 271              	.LVL20:
1865:FreeRTOS-Kernel/tasks.c ****         {
 272              		.loc 1 1865 83 is_stmt 0 discriminator 2 view .LVU75
 273 0034 F5E7     		b	.L21
 274              	.L23:
1884:FreeRTOS-Kernel/tasks.c ****     }
 275              		.loc 1 1884 9 is_stmt 1 view .LVU76
1884:FreeRTOS-Kernel/tasks.c ****     }
 276              		.loc 1 1884 62 is_stmt 0 view .LVU77
 277 0036 0023     		movs	r3, #0
 278              	.LVL21:
1884:FreeRTOS-Kernel/tasks.c ****     }
 279              		.loc 1 1884 62 view .LVU78
 280 0038 84F84330 		strb	r3, [r4, #67]
 281              	.LVL22:
ARM GAS  /tmp/ccJw1tyY.s 			page 124


 282              	.L22:
1888:FreeRTOS-Kernel/tasks.c ****     }
 283              		.loc 1 1888 33 is_stmt 1 view .LVU79
1892:FreeRTOS-Kernel/tasks.c **** 
 284              		.loc 1 1892 5 view .LVU80
 285 003c 062E     		cmp	r6, #6
 286 003e 08D9     		bls	.L25
1892:FreeRTOS-Kernel/tasks.c **** 
 287              		.loc 1 1892 5 view .LVU81
 288              	.LBB177:
 289              	.LBI177:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 290              		.loc 2 213 30 view .LVU82
 291              	.LBB178:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 292              		.loc 2 215 5 view .LVU83
 293              		.loc 2 217 5 view .LVU84
 294              		.syntax unified
 295              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 296 0040 4FF05003 		   mov r3, #80                                              
 297 0044 83F31188 	   msr basepri, r3                                         
 298 0048 BFF36F8F 	   isb                                                     
 299 004c BFF34F8F 	   dsb                                                     
 300              	
 301              	@ 0 "" 2
 302              	.LVL23:
 303              		.thumb
 304              		.syntax unified
 305              	.L26:
 306              		.loc 2 217 5 is_stmt 0 view .LVU85
 307              	.LBE178:
 308              	.LBE177:
1892:FreeRTOS-Kernel/tasks.c **** 
 309              		.loc 1 1892 5 is_stmt 1 discriminator 2 view .LVU86
1892:FreeRTOS-Kernel/tasks.c **** 
 310              		.loc 1 1892 5 discriminator 2 view .LVU87
 311 0050 FEE7     		b	.L26
 312              	.L25:
1892:FreeRTOS-Kernel/tasks.c **** 
 313              		.loc 1 1892 54 view .LVU88
1894:FreeRTOS-Kernel/tasks.c ****     {
 314              		.loc 1 1894 5 view .LVU89
 315              	.LVL24:
1900:FreeRTOS-Kernel/tasks.c ****     }
 316              		.loc 1 1900 33 view .LVU90
1903:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 317              		.loc 1 1903 5 view .LVU91
1903:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 318              		.loc 1 1903 26 is_stmt 0 view .LVU92
 319 0052 E662     		str	r6, [r4, #44]
1906:FreeRTOS-Kernel/tasks.c ****     }
 320              		.loc 1 1906 9 is_stmt 1 view .LVU93
1906:FreeRTOS-Kernel/tasks.c ****     }
 321              		.loc 1 1906 34 is_stmt 0 view .LVU94
 322 0054 6664     		str	r6, [r4, #68]
1910:FreeRTOS-Kernel/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 323              		.loc 1 1910 5 is_stmt 1 view .LVU95
ARM GAS  /tmp/ccJw1tyY.s 			page 125


 324 0056 201D     		adds	r0, r4, #4
 325 0058 FFF7FEFF 		bl	vListInitialiseItem
 326              	.LVL25:
1911:FreeRTOS-Kernel/tasks.c **** 
 327              		.loc 1 1911 5 view .LVU96
 328 005c 04F11800 		add	r0, r4, #24
 329 0060 FFF7FEFF 		bl	vListInitialiseItem
 330              	.LVL26:
1915:FreeRTOS-Kernel/tasks.c **** 
 331              		.loc 1 1915 5 view .LVU97
 332 0064 2461     		str	r4, [r4, #16]
1918:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 333              		.loc 1 1918 5 view .LVU98
 334 0066 C6F10706 		rsb	r6, r6, #7
 335              	.LVL27:
1918:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 336              		.loc 1 1918 5 is_stmt 0 view .LVU99
 337 006a A661     		str	r6, [r4, #24]
1919:FreeRTOS-Kernel/tasks.c **** 
 338              		.loc 1 1919 5 is_stmt 1 view .LVU100
 339 006c 6462     		str	r4, [r4, #36]
1928:FreeRTOS-Kernel/tasks.c ****     }
 340              		.loc 1 1928 9 view .LVU101
1985:FreeRTOS-Kernel/tasks.c ****         }
 341              		.loc 1 1985 13 view .LVU102
1985:FreeRTOS-Kernel/tasks.c ****         }
 342              		.loc 1 1985 38 is_stmt 0 view .LVU103
 343 006e 4246     		mov	r2, r8
 344 0070 3946     		mov	r1, r7
 345 0072 2846     		mov	r0, r5
 346 0074 FFF7FEFF 		bl	pxPortInitialiseStack
 347              	.LVL28:
1985:FreeRTOS-Kernel/tasks.c ****         }
 348              		.loc 1 1985 36 view .LVU104
 349 0078 2060     		str	r0, [r4]
2004:FreeRTOS-Kernel/tasks.c ****     {
 350              		.loc 1 2004 5 is_stmt 1 view .LVU105
2004:FreeRTOS-Kernel/tasks.c ****     {
 351              		.loc 1 2004 7 is_stmt 0 view .LVU106
 352 007a 079B     		ldr	r3, [sp, #28]
 353 007c 03B1     		cbz	r3, .L20
2008:FreeRTOS-Kernel/tasks.c ****     }
 354              		.loc 1 2008 9 is_stmt 1 view .LVU107
2008:FreeRTOS-Kernel/tasks.c ****     }
 355              		.loc 1 2008 24 is_stmt 0 view .LVU108
 356 007e 1C60     		str	r4, [r3]
2012:FreeRTOS-Kernel/tasks.c ****     }
 357              		.loc 1 2012 33 is_stmt 1 view .LVU109
 358              	.L20:
2014:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 359              		.loc 1 2014 1 is_stmt 0 view .LVU110
 360 0080 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
2014:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 361              		.loc 1 2014 1 view .LVU111
 362              		.cfi_endproc
 363              	.LFE7:
 365              		.section	.text.prvCreateStaticTask,"ax",%progbits
ARM GAS  /tmp/ccJw1tyY.s 			page 126


 366              		.align	1
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 371              	prvCreateStaticTask:
 372              	.LVL29:
 373              	.LFB5:
1262:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 374              		.loc 1 1262 5 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 16, pretend = 0, frame = 8
 377              		@ frame_needed = 0, uses_anonymous_args = 0
1262:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 378              		.loc 1 1262 5 is_stmt 0 view .LVU113
 379 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 380              	.LCFI1:
 381              		.cfi_def_cfa_offset 24
 382              		.cfi_offset 4, -24
 383              		.cfi_offset 5, -20
 384              		.cfi_offset 6, -16
 385              		.cfi_offset 7, -12
 386              		.cfi_offset 8, -8
 387              		.cfi_offset 14, -4
 388 0004 86B0     		sub	sp, sp, #24
 389              	.LCFI2:
 390              		.cfi_def_cfa_offset 48
 391 0006 0D9F     		ldr	r7, [sp, #52]
1263:FreeRTOS-Kernel/tasks.c **** 
 392              		.loc 1 1263 9 is_stmt 1 view .LVU114
1265:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 393              		.loc 1 1265 9 view .LVU115
 394 0008 9FB1     		cbz	r7, .L38
 395 000a 8046     		mov	r8, r0
 396 000c 0E46     		mov	r6, r1
 397 000e 1546     		mov	r5, r2
 398 0010 1C46     		mov	r4, r3
1265:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 399              		.loc 1 1265 47 discriminator 2 view .LVU116
1266:FreeRTOS-Kernel/tasks.c **** 
 400              		.loc 1 1266 9 discriminator 2 view .LVU117
 401 0012 0E9B     		ldr	r3, [sp, #56]
 402              	.LVL30:
1266:FreeRTOS-Kernel/tasks.c **** 
 403              		.loc 1 1266 9 is_stmt 0 discriminator 2 view .LVU118
 404 0014 B3B1     		cbz	r3, .L39
1266:FreeRTOS-Kernel/tasks.c **** 
 405              		.loc 1 1266 45 is_stmt 1 discriminator 2 view .LVU119
 406              	.LBB179:
1273:FreeRTOS-Kernel/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 407              		.loc 1 1273 13 discriminator 2 view .LVU120
1273:FreeRTOS-Kernel/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 408              		.loc 1 1273 29 is_stmt 0 discriminator 2 view .LVU121
 409 0016 5423     		movs	r3, #84
 410 0018 0593     		str	r3, [sp, #20]
1274:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 411              		.loc 1 1274 13 is_stmt 1 discriminator 2 view .LVU122
 412 001a 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccJw1tyY.s 			page 127


 413 001c 542B     		cmp	r3, #84
 414 001e 1AD0     		beq	.L35
1274:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 415              		.loc 1 1274 13 view .LVU123
 416              	.LBB180:
 417              	.LBI180:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 418              		.loc 2 213 30 view .LVU124
 419              	.LBB181:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 420              		.loc 2 215 5 view .LVU125
 421              		.loc 2 217 5 view .LVU126
 422              		.syntax unified
 423              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 424 0020 4FF05003 		   mov r3, #80                                              
 425 0024 83F31188 	   msr basepri, r3                                         
 426 0028 BFF36F8F 	   isb                                                     
 427 002c BFF34F8F 	   dsb                                                     
 428              	
 429              	@ 0 "" 2
 430              	.LVL31:
 431              		.thumb
 432              		.syntax unified
 433              	.L36:
 434              		.loc 2 217 5 is_stmt 0 view .LVU127
 435              	.LBE181:
 436              	.LBE180:
1274:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 437              		.loc 1 1274 13 is_stmt 1 discriminator 3 view .LVU128
1274:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 438              		.loc 1 1274 13 discriminator 3 view .LVU129
 439 0030 FEE7     		b	.L36
 440              	.LVL32:
 441              	.L38:
1274:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 442              		.loc 1 1274 13 is_stmt 0 discriminator 3 view .LVU130
 443              	.LBE179:
1265:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 444              		.loc 1 1265 9 is_stmt 1 view .LVU131
 445              	.LBB182:
 446              	.LBI182:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 447              		.loc 2 213 30 view .LVU132
 448              	.LBB183:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 449              		.loc 2 215 5 view .LVU133
 450              		.loc 2 217 5 view .LVU134
 451              		.syntax unified
 452              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 453 0032 4FF05003 		   mov r3, #80                                              
 454 0036 83F31188 	   msr basepri, r3                                         
 455 003a BFF36F8F 	   isb                                                     
 456 003e BFF34F8F 	   dsb                                                     
 457              	
 458              	@ 0 "" 2
 459              	.LVL33:
 460              		.thumb
ARM GAS  /tmp/ccJw1tyY.s 			page 128


 461              		.syntax unified
 462              	.L32:
 463              		.loc 2 217 5 is_stmt 0 view .LVU135
 464              	.LBE183:
 465              	.LBE182:
1265:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 466              		.loc 1 1265 9 is_stmt 1 discriminator 1 view .LVU136
1265:FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 467              		.loc 1 1265 9 discriminator 1 view .LVU137
 468 0042 FEE7     		b	.L32
 469              	.LVL34:
 470              	.L39:
1266:FreeRTOS-Kernel/tasks.c **** 
 471              		.loc 1 1266 9 view .LVU138
 472              	.LBB184:
 473              	.LBI184:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 474              		.loc 2 213 30 view .LVU139
 475              	.LBB185:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 476              		.loc 2 215 5 view .LVU140
 477              		.loc 2 217 5 view .LVU141
 478              		.syntax unified
 479              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 480 0044 4FF05003 		   mov r3, #80                                              
 481 0048 83F31188 	   msr basepri, r3                                         
 482 004c BFF36F8F 	   isb                                                     
 483 0050 BFF34F8F 	   dsb                                                     
 484              	
 485              	@ 0 "" 2
 486              	.LVL35:
 487              		.thumb
 488              		.syntax unified
 489              	.L34:
 490              		.loc 2 217 5 is_stmt 0 view .LVU142
 491              	.LBE185:
 492              	.LBE184:
1266:FreeRTOS-Kernel/tasks.c **** 
 493              		.loc 1 1266 9 is_stmt 1 discriminator 2 view .LVU143
1266:FreeRTOS-Kernel/tasks.c **** 
 494              		.loc 1 1266 9 discriminator 2 view .LVU144
 495 0054 FEE7     		b	.L34
 496              	.L35:
 497              	.LBB186:
1274:FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 498              		.loc 1 1274 53 discriminator 2 view .LVU145
1275:FreeRTOS-Kernel/tasks.c ****         }
 499              		.loc 1 1275 13 discriminator 2 view .LVU146
 500 0056 059B     		ldr	r3, [sp, #20]
 501              	.LBE186:
1279:FreeRTOS-Kernel/tasks.c ****         {
 502              		.loc 1 1279 9 discriminator 2 view .LVU147
1286:FreeRTOS-Kernel/tasks.c ****             ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 503              		.loc 1 1286 13 discriminator 2 view .LVU148
 504              	.LVL36:
1287:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 505              		.loc 1 1287 13 discriminator 2 view .LVU149
ARM GAS  /tmp/ccJw1tyY.s 			page 129


1287:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 506              		.loc 1 1287 22 is_stmt 0 discriminator 2 view .LVU150
 507 0058 5422     		movs	r2, #84
 508              	.LVL37:
1287:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 509              		.loc 1 1287 22 discriminator 2 view .LVU151
 510 005a 0021     		movs	r1, #0
 511              	.LVL38:
1287:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 512              		.loc 1 1287 22 discriminator 2 view .LVU152
 513 005c 0E98     		ldr	r0, [sp, #56]
 514              	.LVL39:
1287:FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 515              		.loc 1 1287 22 discriminator 2 view .LVU153
 516 005e FFF7FEFF 		bl	memset
 517              	.LVL40:
1288:FreeRTOS-Kernel/tasks.c **** 
 518              		.loc 1 1288 13 is_stmt 1 discriminator 2 view .LVU154
1288:FreeRTOS-Kernel/tasks.c **** 
 519              		.loc 1 1288 31 is_stmt 0 discriminator 2 view .LVU155
 520 0062 0E9B     		ldr	r3, [sp, #56]
 521 0064 1F63     		str	r7, [r3, #48]
1298:FreeRTOS-Kernel/tasks.c ****         }
 522              		.loc 1 1298 13 is_stmt 1 discriminator 2 view .LVU156
 523 0066 0023     		movs	r3, #0
 524 0068 0393     		str	r3, [sp, #12]
 525 006a 0E9B     		ldr	r3, [sp, #56]
 526 006c 0293     		str	r3, [sp, #8]
 527 006e 0F9B     		ldr	r3, [sp, #60]
 528 0070 0193     		str	r3, [sp, #4]
 529 0072 0C9B     		ldr	r3, [sp, #48]
 530 0074 0093     		str	r3, [sp]
 531 0076 2346     		mov	r3, r4
 532 0078 2A46     		mov	r2, r5
 533 007a 3146     		mov	r1, r6
 534 007c 4046     		mov	r0, r8
 535 007e FFF7FEFF 		bl	prvInitialiseNewTask
 536              	.LVL41:
1305:FreeRTOS-Kernel/tasks.c ****     }
 537              		.loc 1 1305 9 discriminator 2 view .LVU157
1306:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 538              		.loc 1 1306 5 is_stmt 0 discriminator 2 view .LVU158
 539 0082 0E98     		ldr	r0, [sp, #56]
 540 0084 06B0     		add	sp, sp, #24
 541              	.LCFI3:
 542              		.cfi_def_cfa_offset 24
 543              		@ sp needed
 544 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
1306:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 545              		.loc 1 1306 5 discriminator 2 view .LVU159
 546              		.cfi_endproc
 547              	.LFE5:
 549              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 550              		.align	1
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
ARM GAS  /tmp/ccJw1tyY.s 			page 130


 555              	prvInitialiseTaskLists:
 556              	.LFB44:
6012:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxPriority;
 557              		.loc 1 6012 1 is_stmt 1 view -0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561 0000 38B5     		push	{r3, r4, r5, lr}
 562              	.LCFI4:
 563              		.cfi_def_cfa_offset 16
 564              		.cfi_offset 3, -16
 565              		.cfi_offset 4, -12
 566              		.cfi_offset 5, -8
 567              		.cfi_offset 14, -4
6013:FreeRTOS-Kernel/tasks.c **** 
 568              		.loc 1 6013 5 view .LVU161
6015:FreeRTOS-Kernel/tasks.c ****     {
 569              		.loc 1 6015 5 view .LVU162
 570              	.LVL42:
6015:FreeRTOS-Kernel/tasks.c ****     {
 571              		.loc 1 6015 21 is_stmt 0 view .LVU163
 572 0002 0024     		movs	r4, #0
6015:FreeRTOS-Kernel/tasks.c ****     {
 573              		.loc 1 6015 5 view .LVU164
 574 0004 07E0     		b	.L41
 575              	.LVL43:
 576              	.L42:
6017:FreeRTOS-Kernel/tasks.c ****     }
 577              		.loc 1 6017 9 is_stmt 1 discriminator 3 view .LVU165
 578 0006 04EB8402 		add	r2, r4, r4, lsl #2
 579 000a 9300     		lsls	r3, r2, #2
 580 000c 0E48     		ldr	r0, .L44
 581 000e 1844     		add	r0, r0, r3
 582 0010 FFF7FEFF 		bl	vListInitialise
 583              	.LVL44:
6015:FreeRTOS-Kernel/tasks.c ****     {
 584              		.loc 1 6015 104 discriminator 3 view .LVU166
 585 0014 0134     		adds	r4, r4, #1
 586              	.LVL45:
 587              	.L41:
6015:FreeRTOS-Kernel/tasks.c ****     {
 588              		.loc 1 6015 54 discriminator 1 view .LVU167
 589 0016 062C     		cmp	r4, #6
 590 0018 F5D9     		bls	.L42
6020:FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 591              		.loc 1 6020 5 view .LVU168
 592 001a 0C4D     		ldr	r5, .L44+4
 593 001c 2846     		mov	r0, r5
 594 001e FFF7FEFF 		bl	vListInitialise
 595              	.LVL46:
6021:FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xPendingReadyList );
 596              		.loc 1 6021 5 view .LVU169
 597 0022 0B4C     		ldr	r4, .L44+8
 598              	.LVL47:
6021:FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xPendingReadyList );
 599              		.loc 1 6021 5 is_stmt 0 view .LVU170
 600 0024 2046     		mov	r0, r4
ARM GAS  /tmp/ccJw1tyY.s 			page 131


 601 0026 FFF7FEFF 		bl	vListInitialise
 602              	.LVL48:
6022:FreeRTOS-Kernel/tasks.c **** 
 603              		.loc 1 6022 5 is_stmt 1 view .LVU171
 604 002a 0A48     		ldr	r0, .L44+12
 605 002c FFF7FEFF 		bl	vListInitialise
 606              	.LVL49:
6026:FreeRTOS-Kernel/tasks.c ****     }
 607              		.loc 1 6026 9 view .LVU172
 608 0030 0948     		ldr	r0, .L44+16
 609 0032 FFF7FEFF 		bl	vListInitialise
 610              	.LVL50:
6032:FreeRTOS-Kernel/tasks.c ****     }
 611              		.loc 1 6032 9 view .LVU173
 612 0036 0948     		ldr	r0, .L44+20
 613 0038 FFF7FEFF 		bl	vListInitialise
 614              	.LVL51:
6038:FreeRTOS-Kernel/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 615              		.loc 1 6038 5 view .LVU174
6038:FreeRTOS-Kernel/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 616              		.loc 1 6038 23 is_stmt 0 view .LVU175
 617 003c 084B     		ldr	r3, .L44+24
 618 003e 1D60     		str	r5, [r3]
6039:FreeRTOS-Kernel/tasks.c **** }
 619              		.loc 1 6039 5 is_stmt 1 view .LVU176
6039:FreeRTOS-Kernel/tasks.c **** }
 620              		.loc 1 6039 31 is_stmt 0 view .LVU177
 621 0040 084B     		ldr	r3, .L44+28
 622 0042 1C60     		str	r4, [r3]
6040:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 623              		.loc 1 6040 1 view .LVU178
 624 0044 38BD     		pop	{r3, r4, r5, pc}
 625              	.L45:
 626 0046 00BF     		.align	2
 627              	.L44:
 628 0048 00000000 		.word	pxReadyTasksLists
 629 004c 00000000 		.word	xDelayedTaskList1
 630 0050 00000000 		.word	xDelayedTaskList2
 631 0054 00000000 		.word	xPendingReadyList
 632 0058 00000000 		.word	xTasksWaitingTermination
 633 005c 00000000 		.word	xSuspendedTaskList
 634 0060 00000000 		.word	pxDelayedTaskList
 635 0064 00000000 		.word	pxOverflowDelayedTaskList
 636              		.cfi_endproc
 637              	.LFE44:
 639              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 640              		.align	1
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 645              	prvAddNewTaskToReadyList:
 646              	.LVL52:
 647              	.LFB8:
2020:FreeRTOS-Kernel/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
 648              		.loc 1 2020 5 is_stmt 1 view -0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJw1tyY.s 			page 132


 651              		@ frame_needed = 0, uses_anonymous_args = 0
2020:FreeRTOS-Kernel/tasks.c ****         /* Ensure interrupts don't access the task lists while the lists are being
 652              		.loc 1 2020 5 is_stmt 0 view .LVU180
 653 0000 10B5     		push	{r4, lr}
 654              	.LCFI5:
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 4, -8
 657              		.cfi_offset 14, -4
 658 0002 0446     		mov	r4, r0
2023:FreeRTOS-Kernel/tasks.c ****         {
 659              		.loc 1 2023 9 is_stmt 1 view .LVU181
 660 0004 FFF7FEFF 		bl	vPortEnterCritical
 661              	.LVL53:
2025:FreeRTOS-Kernel/tasks.c **** 
 662              		.loc 1 2025 13 view .LVU182
2025:FreeRTOS-Kernel/tasks.c **** 
 663              		.loc 1 2025 38 is_stmt 0 view .LVU183
 664 0008 2A4A     		ldr	r2, .L53
 665 000a 1368     		ldr	r3, [r2]
 666 000c 0133     		adds	r3, r3, #1
2025:FreeRTOS-Kernel/tasks.c **** 
 667              		.loc 1 2025 36 view .LVU184
 668 000e 1360     		str	r3, [r2]
2027:FreeRTOS-Kernel/tasks.c ****             {
 669              		.loc 1 2027 13 is_stmt 1 view .LVU185
2027:FreeRTOS-Kernel/tasks.c ****             {
 670              		.loc 1 2027 30 is_stmt 0 view .LVU186
 671 0010 294B     		ldr	r3, .L53+4
 672 0012 1B68     		ldr	r3, [r3]
2027:FreeRTOS-Kernel/tasks.c ****             {
 673              		.loc 1 2027 15 view .LVU187
 674 0014 5BB1     		cbz	r3, .L51
2050:FreeRTOS-Kernel/tasks.c ****                 {
 675              		.loc 1 2050 17 is_stmt 1 view .LVU188
2050:FreeRTOS-Kernel/tasks.c ****                 {
 676              		.loc 1 2050 39 is_stmt 0 view .LVU189
 677 0016 294B     		ldr	r3, .L53+8
 678 0018 1B68     		ldr	r3, [r3]
2050:FreeRTOS-Kernel/tasks.c ****                 {
 679              		.loc 1 2050 19 view .LVU190
 680 001a 6BB9     		cbnz	r3, .L48
2052:FreeRTOS-Kernel/tasks.c ****                     {
 681              		.loc 1 2052 21 is_stmt 1 view .LVU191
2052:FreeRTOS-Kernel/tasks.c ****                     {
 682              		.loc 1 2052 37 is_stmt 0 view .LVU192
 683 001c 264B     		ldr	r3, .L53+4
 684 001e 1B68     		ldr	r3, [r3]
 685 0020 DA6A     		ldr	r2, [r3, #44]
2052:FreeRTOS-Kernel/tasks.c ****                     {
 686              		.loc 1 2052 61 view .LVU193
 687 0022 E36A     		ldr	r3, [r4, #44]
2052:FreeRTOS-Kernel/tasks.c ****                     {
 688              		.loc 1 2052 23 view .LVU194
 689 0024 9A42     		cmp	r2, r3
 690 0026 07D8     		bhi	.L48
2054:FreeRTOS-Kernel/tasks.c ****                     }
 691              		.loc 1 2054 25 is_stmt 1 view .LVU195
ARM GAS  /tmp/ccJw1tyY.s 			page 133


2054:FreeRTOS-Kernel/tasks.c ****                     }
 692              		.loc 1 2054 38 is_stmt 0 view .LVU196
 693 0028 234B     		ldr	r3, .L53+4
 694 002a 1C60     		str	r4, [r3]
 695 002c 04E0     		b	.L48
 696              	.L51:
2031:FreeRTOS-Kernel/tasks.c **** 
 697              		.loc 1 2031 17 is_stmt 1 view .LVU197
2031:FreeRTOS-Kernel/tasks.c **** 
 698              		.loc 1 2031 30 is_stmt 0 view .LVU198
 699 002e 224B     		ldr	r3, .L53+4
 700 0030 1C60     		str	r4, [r3]
2033:FreeRTOS-Kernel/tasks.c ****                 {
 701              		.loc 1 2033 17 is_stmt 1 view .LVU199
2033:FreeRTOS-Kernel/tasks.c ****                 {
 702              		.loc 1 2033 44 is_stmt 0 view .LVU200
 703 0032 1368     		ldr	r3, [r2]
2033:FreeRTOS-Kernel/tasks.c ****                 {
 704              		.loc 1 2033 19 view .LVU201
 705 0034 012B     		cmp	r3, #1
 706 0036 39D0     		beq	.L52
 707              	.L48:
2063:FreeRTOS-Kernel/tasks.c ****                 }
 708              		.loc 1 2063 45 is_stmt 1 view .LVU202
2067:FreeRTOS-Kernel/tasks.c **** 
 709              		.loc 1 2067 13 view .LVU203
2067:FreeRTOS-Kernel/tasks.c **** 
 710              		.loc 1 2067 25 is_stmt 0 view .LVU204
 711 0038 214A     		ldr	r2, .L53+12
 712 003a 1368     		ldr	r3, [r2]
 713 003c 0133     		adds	r3, r3, #1
 714 003e 1360     		str	r3, [r2]
2075:FreeRTOS-Kernel/tasks.c **** 
 715              		.loc 1 2075 41 is_stmt 1 view .LVU205
2077:FreeRTOS-Kernel/tasks.c **** 
 716              		.loc 1 2077 13 view .LVU206
2077:FreeRTOS-Kernel/tasks.c **** 
 717              		.loc 1 2077 13 view .LVU207
2077:FreeRTOS-Kernel/tasks.c **** 
 718              		.loc 1 2077 13 view .LVU208
 719 0040 E36A     		ldr	r3, [r4, #44]
 720 0042 0122     		movs	r2, #1
 721 0044 9A40     		lsls	r2, r2, r3
 722 0046 1F49     		ldr	r1, .L53+16
 723 0048 0868     		ldr	r0, [r1]
 724 004a 0243     		orrs	r2, r2, r0
 725 004c 0A60     		str	r2, [r1]
2077:FreeRTOS-Kernel/tasks.c **** 
 726              		.loc 1 2077 13 view .LVU209
 727              	.LBB187:
2077:FreeRTOS-Kernel/tasks.c **** 
 728              		.loc 1 2077 13 view .LVU210
 729 004e 1E4A     		ldr	r2, .L53+20
 730 0050 03EB8303 		add	r3, r3, r3, lsl #2
 731 0054 02EB8303 		add	r3, r2, r3, lsl #2
 732 0058 5B68     		ldr	r3, [r3, #4]
 733              	.LVL54:
ARM GAS  /tmp/ccJw1tyY.s 			page 134


2077:FreeRTOS-Kernel/tasks.c **** 
 734              		.loc 1 2077 13 view .LVU211
2077:FreeRTOS-Kernel/tasks.c **** 
 735              		.loc 1 2077 13 view .LVU212
2077:FreeRTOS-Kernel/tasks.c **** 
 736              		.loc 1 2077 13 view .LVU213
 737 005a A360     		str	r3, [r4, #8]
2077:FreeRTOS-Kernel/tasks.c **** 
 738              		.loc 1 2077 13 view .LVU214
 739 005c 9868     		ldr	r0, [r3, #8]
 740 005e E060     		str	r0, [r4, #12]
2077:FreeRTOS-Kernel/tasks.c **** 
 741              		.loc 1 2077 13 view .LVU215
 742 0060 211D     		adds	r1, r4, #4
 743 0062 4160     		str	r1, [r0, #4]
2077:FreeRTOS-Kernel/tasks.c **** 
 744              		.loc 1 2077 13 view .LVU216
 745 0064 9960     		str	r1, [r3, #8]
2077:FreeRTOS-Kernel/tasks.c **** 
 746              		.loc 1 2077 13 view .LVU217
 747 0066 E36A     		ldr	r3, [r4, #44]
 748              	.LVL55:
2077:FreeRTOS-Kernel/tasks.c **** 
 749              		.loc 1 2077 13 is_stmt 0 view .LVU218
 750 0068 03EB8301 		add	r1, r3, r3, lsl #2
 751 006c 02EB8100 		add	r0, r2, r1, lsl #2
 752 0070 6061     		str	r0, [r4, #20]
2077:FreeRTOS-Kernel/tasks.c **** 
 753              		.loc 1 2077 13 is_stmt 1 view .LVU219
 754 0072 52F82110 		ldr	r1, [r2, r1, lsl #2]
 755 0076 0131     		adds	r1, r1, #1
 756 0078 03EB8303 		add	r3, r3, r3, lsl #2
 757 007c 42F82310 		str	r1, [r2, r3, lsl #2]
 758              	.LBE187:
2077:FreeRTOS-Kernel/tasks.c **** 
 759              		.loc 1 2077 13 view .LVU220
2077:FreeRTOS-Kernel/tasks.c **** 
 760              		.loc 1 2077 13 view .LVU221
2077:FreeRTOS-Kernel/tasks.c **** 
 761              		.loc 1 2077 13 view .LVU222
2079:FreeRTOS-Kernel/tasks.c ****         }
 762              		.loc 1 2079 13 view .LVU223
2081:FreeRTOS-Kernel/tasks.c **** 
 763              		.loc 1 2081 9 view .LVU224
 764 0080 FFF7FEFF 		bl	vPortExitCritical
 765              	.LVL56:
2083:FreeRTOS-Kernel/tasks.c ****         {
 766              		.loc 1 2083 9 view .LVU225
2083:FreeRTOS-Kernel/tasks.c ****         {
 767              		.loc 1 2083 31 is_stmt 0 view .LVU226
 768 0084 0D4B     		ldr	r3, .L53+8
 769 0086 1B68     		ldr	r3, [r3]
2083:FreeRTOS-Kernel/tasks.c ****         {
 770              		.loc 1 2083 11 view .LVU227
 771 0088 7BB1     		cbz	r3, .L46
2087:FreeRTOS-Kernel/tasks.c ****         }
 772              		.loc 1 2087 13 is_stmt 1 view .LVU228
ARM GAS  /tmp/ccJw1tyY.s 			page 135


2087:FreeRTOS-Kernel/tasks.c ****         }
 773              		.loc 1 2087 13 view .LVU229
 774 008a 0B4B     		ldr	r3, .L53+4
 775 008c 1B68     		ldr	r3, [r3]
 776 008e DA6A     		ldr	r2, [r3, #44]
 777 0090 E36A     		ldr	r3, [r4, #44]
 778 0092 9A42     		cmp	r2, r3
 779 0094 09D2     		bcs	.L46
2087:FreeRTOS-Kernel/tasks.c ****         }
 780              		.loc 1 2087 13 discriminator 1 view .LVU230
 781 0096 4FF0E023 		mov	r3, #-536813568
 782 009a 4FF08052 		mov	r2, #268435456
 783 009e C3F8042D 		str	r2, [r3, #3332]
2087:FreeRTOS-Kernel/tasks.c ****         }
 784              		.loc 1 2087 13 discriminator 1 view .LVU231
 785              		.syntax unified
 786              	@ 2087 "FreeRTOS-Kernel/tasks.c" 1
 787 00a2 BFF34F8F 		dsb
 788              	@ 0 "" 2
2087:FreeRTOS-Kernel/tasks.c ****         }
 789              		.loc 1 2087 13 discriminator 1 view .LVU232
 790              	@ 2087 "FreeRTOS-Kernel/tasks.c" 1
 791 00a6 BFF36F8F 		isb
 792              	@ 0 "" 2
2087:FreeRTOS-Kernel/tasks.c ****         }
 793              		.loc 1 2087 13 discriminator 1 view .LVU233
2091:FreeRTOS-Kernel/tasks.c ****         }
 794              		.loc 1 2091 37 discriminator 1 view .LVU234
 795              		.thumb
 796              		.syntax unified
 797              	.L46:
2093:FreeRTOS-Kernel/tasks.c **** 
 798              		.loc 1 2093 5 is_stmt 0 view .LVU235
 799 00aa 10BD     		pop	{r4, pc}
 800              	.LVL57:
 801              	.L52:
2038:FreeRTOS-Kernel/tasks.c ****                 }
 802              		.loc 1 2038 21 is_stmt 1 view .LVU236
 803 00ac FFF7FEFF 		bl	prvInitialiseTaskLists
 804              	.LVL58:
 805 00b0 C2E7     		b	.L48
 806              	.L54:
 807 00b2 00BF     		.align	2
 808              	.L53:
 809 00b4 00000000 		.word	uxCurrentNumberOfTasks
 810 00b8 00000000 		.word	pxCurrentTCB
 811 00bc 00000000 		.word	xSchedulerRunning
 812 00c0 00000000 		.word	uxTaskNumber
 813 00c4 00000000 		.word	uxTopReadyPriority
 814 00c8 00000000 		.word	pxReadyTasksLists
 815              		.cfi_endproc
 816              	.LFE8:
 818              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 819              		.align	1
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
ARM GAS  /tmp/ccJw1tyY.s 			page 136


 824              	prvCheckTasksWaitingTermination:
 825              	.LFB45:
6044:FreeRTOS-Kernel/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 826              		.loc 1 6044 1 view -0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830 0000 08B5     		push	{r3, lr}
 831              	.LCFI6:
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 3, -8
 834              		.cfi_offset 14, -4
 835              	.LBB188:
6049:FreeRTOS-Kernel/tasks.c **** 
 836              		.loc 1 6049 9 view .LVU238
6053:FreeRTOS-Kernel/tasks.c ****         {
 837              		.loc 1 6053 9 view .LVU239
6053:FreeRTOS-Kernel/tasks.c ****         {
 838              		.loc 1 6053 14 is_stmt 0 view .LVU240
 839 0002 11E0     		b	.L56
 840              	.L57:
6057:FreeRTOS-Kernel/tasks.c ****                 {
 841              		.loc 1 6057 17 is_stmt 1 view .LVU241
 842 0004 FFF7FEFF 		bl	vPortEnterCritical
 843              	.LVL59:
6063:FreeRTOS-Kernel/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 844              		.loc 1 6063 25 view .LVU242
6063:FreeRTOS-Kernel/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 845              		.loc 1 6063 33 is_stmt 0 view .LVU243
 846 0008 0A4B     		ldr	r3, .L59
 847 000a DB68     		ldr	r3, [r3, #12]
6063:FreeRTOS-Kernel/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 848              		.loc 1 6063 31 view .LVU244
 849 000c D868     		ldr	r0, [r3, #12]
 850              	.LVL60:
6064:FreeRTOS-Kernel/tasks.c ****                         --uxCurrentNumberOfTasks;
 851              		.loc 1 6064 25 is_stmt 1 view .LVU245
6064:FreeRTOS-Kernel/tasks.c ****                         --uxCurrentNumberOfTasks;
 852              		.loc 1 6064 34 is_stmt 0 view .LVU246
 853 000e 0430     		adds	r0, r0, #4
 854              	.LVL61:
6064:FreeRTOS-Kernel/tasks.c ****                         --uxCurrentNumberOfTasks;
 855              		.loc 1 6064 34 view .LVU247
 856 0010 FFF7FEFF 		bl	uxListRemove
 857              	.LVL62:
6065:FreeRTOS-Kernel/tasks.c ****                         --uxDeletedTasksWaitingCleanUp;
 858              		.loc 1 6065 25 is_stmt 1 view .LVU248
 859 0014 084A     		ldr	r2, .L59+4
 860 0016 1368     		ldr	r3, [r2]
 861 0018 013B     		subs	r3, r3, #1
 862 001a 1360     		str	r3, [r2]
6066:FreeRTOS-Kernel/tasks.c ****                     }
 863              		.loc 1 6066 25 view .LVU249
 864 001c 074A     		ldr	r2, .L59+8
 865 001e 1368     		ldr	r3, [r2]
 866 0020 013B     		subs	r3, r3, #1
 867 0022 1360     		str	r3, [r2]
ARM GAS  /tmp/ccJw1tyY.s 			page 137


6069:FreeRTOS-Kernel/tasks.c **** 
 868              		.loc 1 6069 17 view .LVU250
 869 0024 FFF7FEFF 		bl	vPortExitCritical
 870              	.LVL63:
6071:FreeRTOS-Kernel/tasks.c ****             }
 871              		.loc 1 6071 17 view .LVU251
 872              	.L56:
6053:FreeRTOS-Kernel/tasks.c ****         {
 873              		.loc 1 6053 45 view .LVU252
 874 0028 044B     		ldr	r3, .L59+8
 875 002a 1B68     		ldr	r3, [r3]
 876 002c 002B     		cmp	r3, #0
 877 002e E9D1     		bne	.L57
 878              	.LBE188:
6116:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 879              		.loc 1 6116 1 is_stmt 0 view .LVU253
 880 0030 08BD     		pop	{r3, pc}
 881              	.L60:
 882 0032 00BF     		.align	2
 883              	.L59:
 884 0034 00000000 		.word	xTasksWaitingTermination
 885 0038 00000000 		.word	uxCurrentNumberOfTasks
 886 003c 00000000 		.word	uxDeletedTasksWaitingCleanUp
 887              		.cfi_endproc
 888              	.LFE45:
 890              		.section	.text.prvIdleTask,"ax",%progbits
 891              		.align	1
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	prvIdleTask:
 897              	.LFB43:
5749:FreeRTOS-Kernel/tasks.c ****     /* Stop warnings. */
 898              		.loc 1 5749 1 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ Volatile: function does not return.
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL64:
5749:FreeRTOS-Kernel/tasks.c ****     /* Stop warnings. */
 904              		.loc 1 5749 1 is_stmt 0 view .LVU255
 905 0000 08B5     		push	{r3, lr}
 906              	.LCFI7:
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 3, -8
 909              		.cfi_offset 14, -4
 910              	.LVL65:
 911              	.L62:
5751:FreeRTOS-Kernel/tasks.c **** 
 912              		.loc 1 5751 5 is_stmt 1 view .LVU256
5759:FreeRTOS-Kernel/tasks.c **** 
 913              		.loc 1 5759 67 view .LVU257
5769:FreeRTOS-Kernel/tasks.c ****     {
 914              		.loc 1 5769 5 view .LVU258
5773:FreeRTOS-Kernel/tasks.c **** 
 915              		.loc 1 5773 9 view .LVU259
 916 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
ARM GAS  /tmp/ccJw1tyY.s 			page 138


 917              	.LVL66:
5797:FreeRTOS-Kernel/tasks.c ****             {
 918              		.loc 1 5797 13 view .LVU260
5797:FreeRTOS-Kernel/tasks.c ****             {
 919              		.loc 1 5797 17 is_stmt 0 view .LVU261
 920 0006 074B     		ldr	r3, .L65
 921 0008 1B68     		ldr	r3, [r3]
5797:FreeRTOS-Kernel/tasks.c ****             {
 922              		.loc 1 5797 15 view .LVU262
 923 000a 012B     		cmp	r3, #1
 924 000c F9D9     		bls	.L62
5799:FreeRTOS-Kernel/tasks.c ****             }
 925              		.loc 1 5799 17 is_stmt 1 view .LVU263
 926 000e 4FF0E023 		mov	r3, #-536813568
 927 0012 4FF08052 		mov	r2, #268435456
 928 0016 C3F8042D 		str	r2, [r3, #3332]
5799:FreeRTOS-Kernel/tasks.c ****             }
 929              		.loc 1 5799 17 view .LVU264
 930              		.syntax unified
 931              	@ 5799 "FreeRTOS-Kernel/tasks.c" 1
 932 001a BFF34F8F 		dsb
 933              	@ 0 "" 2
5799:FreeRTOS-Kernel/tasks.c ****             }
 934              		.loc 1 5799 17 view .LVU265
 935              	@ 5799 "FreeRTOS-Kernel/tasks.c" 1
 936 001e BFF36F8F 		isb
 937              	@ 0 "" 2
5799:FreeRTOS-Kernel/tasks.c ****             }
 938              		.loc 1 5799 28 view .LVU266
 939              		.thumb
 940              		.syntax unified
 941 0022 EEE7     		b	.L62
 942              	.L66:
 943              		.align	2
 944              	.L65:
 945 0024 00000000 		.word	pxReadyTasksLists
 946              		.cfi_endproc
 947              	.LFE43:
 949              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 950              		.align	1
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 955              	prvAddCurrentTaskToDelayedList:
 956              	.LVL67:
 957              	.LFB63:
6475:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6476:FreeRTOS-Kernel/tasks.c **** 
6477:FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_
6478:FreeRTOS-Kernel/tasks.c **** 
6479:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
6480:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xTaskGetCurrentTaskHandle( void )
6481:FreeRTOS-Kernel/tasks.c ****         {
6482:FreeRTOS-Kernel/tasks.c ****             TaskHandle_t xReturn;
6483:FreeRTOS-Kernel/tasks.c **** 
6484:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskGetCurrentTaskHandle();
6485:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 139


6486:FreeRTOS-Kernel/tasks.c ****             /* A critical section is not required as this is not called from
6487:FreeRTOS-Kernel/tasks.c ****              * an interrupt and the current TCB will always be the same for any
6488:FreeRTOS-Kernel/tasks.c ****              * individual execution thread. */
6489:FreeRTOS-Kernel/tasks.c ****             xReturn = pxCurrentTCB;
6490:FreeRTOS-Kernel/tasks.c **** 
6491:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
6492:FreeRTOS-Kernel/tasks.c **** 
6493:FreeRTOS-Kernel/tasks.c ****             return xReturn;
6494:FreeRTOS-Kernel/tasks.c ****         }
6495:FreeRTOS-Kernel/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
6496:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xTaskGetCurrentTaskHandle( void )
6497:FreeRTOS-Kernel/tasks.c ****         {
6498:FreeRTOS-Kernel/tasks.c ****             TaskHandle_t xReturn;
6499:FreeRTOS-Kernel/tasks.c ****             UBaseType_t uxSavedInterruptStatus;
6500:FreeRTOS-Kernel/tasks.c **** 
6501:FreeRTOS-Kernel/tasks.c ****             traceENTER_xTaskGetCurrentTaskHandle();
6502:FreeRTOS-Kernel/tasks.c **** 
6503:FreeRTOS-Kernel/tasks.c ****             uxSavedInterruptStatus = portSET_INTERRUPT_MASK();
6504:FreeRTOS-Kernel/tasks.c ****             {
6505:FreeRTOS-Kernel/tasks.c ****                 xReturn = pxCurrentTCBs[ portGET_CORE_ID() ];
6506:FreeRTOS-Kernel/tasks.c ****             }
6507:FreeRTOS-Kernel/tasks.c ****             portCLEAR_INTERRUPT_MASK( uxSavedInterruptStatus );
6508:FreeRTOS-Kernel/tasks.c **** 
6509:FreeRTOS-Kernel/tasks.c ****             traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
6510:FreeRTOS-Kernel/tasks.c **** 
6511:FreeRTOS-Kernel/tasks.c ****             return xReturn;
6512:FreeRTOS-Kernel/tasks.c ****         }
6513:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
6514:FreeRTOS-Kernel/tasks.c **** 
6515:FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
6516:FreeRTOS-Kernel/tasks.c ****     {
6517:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn = NULL;
6518:FreeRTOS-Kernel/tasks.c **** 
6519:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );
6520:FreeRTOS-Kernel/tasks.c **** 
6521:FreeRTOS-Kernel/tasks.c ****         if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
6522:FreeRTOS-Kernel/tasks.c ****         {
6523:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES == 1 )
6524:FreeRTOS-Kernel/tasks.c ****                 xReturn = pxCurrentTCB;
6525:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
6526:FreeRTOS-Kernel/tasks.c ****                 xReturn = pxCurrentTCBs[ xCoreID ];
6527:FreeRTOS-Kernel/tasks.c ****             #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
6528:FreeRTOS-Kernel/tasks.c ****         }
6529:FreeRTOS-Kernel/tasks.c **** 
6530:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );
6531:FreeRTOS-Kernel/tasks.c **** 
6532:FreeRTOS-Kernel/tasks.c ****         return xReturn;
6533:FreeRTOS-Kernel/tasks.c ****     }
6534:FreeRTOS-Kernel/tasks.c **** 
6535:FreeRTOS-Kernel/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
6536:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6537:FreeRTOS-Kernel/tasks.c **** 
6538:FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
6539:FreeRTOS-Kernel/tasks.c **** 
6540:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
6541:FreeRTOS-Kernel/tasks.c ****     {
6542:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
ARM GAS  /tmp/ccJw1tyY.s 			page 140


6543:FreeRTOS-Kernel/tasks.c **** 
6544:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetSchedulerState();
6545:FreeRTOS-Kernel/tasks.c **** 
6546:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning == pdFALSE )
6547:FreeRTOS-Kernel/tasks.c ****         {
6548:FreeRTOS-Kernel/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
6549:FreeRTOS-Kernel/tasks.c ****         }
6550:FreeRTOS-Kernel/tasks.c ****         else
6551:FreeRTOS-Kernel/tasks.c ****         {
6552:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES > 1 )
6553:FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
6554:FreeRTOS-Kernel/tasks.c ****             #endif
6555:FreeRTOS-Kernel/tasks.c ****             {
6556:FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
6557:FreeRTOS-Kernel/tasks.c ****                 {
6558:FreeRTOS-Kernel/tasks.c ****                     xReturn = taskSCHEDULER_RUNNING;
6559:FreeRTOS-Kernel/tasks.c ****                 }
6560:FreeRTOS-Kernel/tasks.c ****                 else
6561:FreeRTOS-Kernel/tasks.c ****                 {
6562:FreeRTOS-Kernel/tasks.c ****                     xReturn = taskSCHEDULER_SUSPENDED;
6563:FreeRTOS-Kernel/tasks.c ****                 }
6564:FreeRTOS-Kernel/tasks.c ****             }
6565:FreeRTOS-Kernel/tasks.c ****             #if ( configNUMBER_OF_CORES > 1 )
6566:FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
6567:FreeRTOS-Kernel/tasks.c ****             #endif
6568:FreeRTOS-Kernel/tasks.c ****         }
6569:FreeRTOS-Kernel/tasks.c **** 
6570:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetSchedulerState( xReturn );
6571:FreeRTOS-Kernel/tasks.c **** 
6572:FreeRTOS-Kernel/tasks.c ****         return xReturn;
6573:FreeRTOS-Kernel/tasks.c ****     }
6574:FreeRTOS-Kernel/tasks.c **** 
6575:FreeRTOS-Kernel/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
6576:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6577:FreeRTOS-Kernel/tasks.c **** 
6578:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
6579:FreeRTOS-Kernel/tasks.c **** 
6580:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
6581:FreeRTOS-Kernel/tasks.c ****     {
6582:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
6583:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
6584:FreeRTOS-Kernel/tasks.c **** 
6585:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskPriorityInherit( pxMutexHolder );
6586:FreeRTOS-Kernel/tasks.c **** 
6587:FreeRTOS-Kernel/tasks.c ****         /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
6588:FreeRTOS-Kernel/tasks.c ****          * inheritance is not applied in this scenario. */
6589:FreeRTOS-Kernel/tasks.c ****         if( pxMutexHolder != NULL )
6590:FreeRTOS-Kernel/tasks.c ****         {
6591:FreeRTOS-Kernel/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
6592:FreeRTOS-Kernel/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
6593:FreeRTOS-Kernel/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
6594:FreeRTOS-Kernel/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
6595:FreeRTOS-Kernel/tasks.c ****             {
6596:FreeRTOS-Kernel/tasks.c ****                 /* Adjust the mutex holder state to account for its new
6597:FreeRTOS-Kernel/tasks.c ****                  * priority.  Only reset the event list item value if the value is
6598:FreeRTOS-Kernel/tasks.c ****                  * not being used for anything else. */
6599:FreeRTOS-Kernel/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
ARM GAS  /tmp/ccJw1tyY.s 			page 141


6600:FreeRTOS-Kernel/tasks.c ****                 {
6601:FreeRTOS-Kernel/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
6602:FreeRTOS-Kernel/tasks.c ****                 }
6603:FreeRTOS-Kernel/tasks.c ****                 else
6604:FreeRTOS-Kernel/tasks.c ****                 {
6605:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6606:FreeRTOS-Kernel/tasks.c ****                 }
6607:FreeRTOS-Kernel/tasks.c **** 
6608:FreeRTOS-Kernel/tasks.c ****                 /* If the task being modified is in the ready state it will need
6609:FreeRTOS-Kernel/tasks.c ****                  * to be moved into a new list. */
6610:FreeRTOS-Kernel/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
6611:FreeRTOS-Kernel/tasks.c ****                 {
6612:FreeRTOS-Kernel/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
6613:FreeRTOS-Kernel/tasks.c ****                     {
6614:FreeRTOS-Kernel/tasks.c ****                         /* It is known that the task is in its ready list so
6615:FreeRTOS-Kernel/tasks.c ****                          * there is no need to check again and the port level
6616:FreeRTOS-Kernel/tasks.c ****                          * reset macro can be called directly. */
6617:FreeRTOS-Kernel/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
6618:FreeRTOS-Kernel/tasks.c ****                     }
6619:FreeRTOS-Kernel/tasks.c ****                     else
6620:FreeRTOS-Kernel/tasks.c ****                     {
6621:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6622:FreeRTOS-Kernel/tasks.c ****                     }
6623:FreeRTOS-Kernel/tasks.c **** 
6624:FreeRTOS-Kernel/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
6625:FreeRTOS-Kernel/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
6626:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
6627:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
6628:FreeRTOS-Kernel/tasks.c ****                     {
6629:FreeRTOS-Kernel/tasks.c ****                         /* The priority of the task is raised. Yield for this task
6630:FreeRTOS-Kernel/tasks.c ****                          * if it is not running. */
6631:FreeRTOS-Kernel/tasks.c ****                         if( taskTASK_IS_RUNNING( pxMutexHolderTCB ) != pdTRUE )
6632:FreeRTOS-Kernel/tasks.c ****                         {
6633:FreeRTOS-Kernel/tasks.c ****                             prvYieldForTask( pxMutexHolderTCB );
6634:FreeRTOS-Kernel/tasks.c ****                         }
6635:FreeRTOS-Kernel/tasks.c ****                     }
6636:FreeRTOS-Kernel/tasks.c ****                     #endif /* if ( configNUMBER_OF_CORES > 1 ) */
6637:FreeRTOS-Kernel/tasks.c ****                 }
6638:FreeRTOS-Kernel/tasks.c ****                 else
6639:FreeRTOS-Kernel/tasks.c ****                 {
6640:FreeRTOS-Kernel/tasks.c ****                     /* Just inherit the priority. */
6641:FreeRTOS-Kernel/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
6642:FreeRTOS-Kernel/tasks.c ****                 }
6643:FreeRTOS-Kernel/tasks.c **** 
6644:FreeRTOS-Kernel/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
6645:FreeRTOS-Kernel/tasks.c **** 
6646:FreeRTOS-Kernel/tasks.c ****                 /* Inheritance occurred. */
6647:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
6648:FreeRTOS-Kernel/tasks.c ****             }
6649:FreeRTOS-Kernel/tasks.c ****             else
6650:FreeRTOS-Kernel/tasks.c ****             {
6651:FreeRTOS-Kernel/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
6652:FreeRTOS-Kernel/tasks.c ****                 {
6653:FreeRTOS-Kernel/tasks.c ****                     /* The base priority of the mutex holder is lower than the
6654:FreeRTOS-Kernel/tasks.c ****                      * priority of the task attempting to take the mutex, but the
6655:FreeRTOS-Kernel/tasks.c ****                      * current priority of the mutex holder is not lower than the
6656:FreeRTOS-Kernel/tasks.c ****                      * priority of the task attempting to take the mutex.
ARM GAS  /tmp/ccJw1tyY.s 			page 142


6657:FreeRTOS-Kernel/tasks.c ****                      * Therefore the mutex holder must have already inherited a
6658:FreeRTOS-Kernel/tasks.c ****                      * priority, but inheritance would have occurred if that had
6659:FreeRTOS-Kernel/tasks.c ****                      * not been the case. */
6660:FreeRTOS-Kernel/tasks.c ****                     xReturn = pdTRUE;
6661:FreeRTOS-Kernel/tasks.c ****                 }
6662:FreeRTOS-Kernel/tasks.c ****                 else
6663:FreeRTOS-Kernel/tasks.c ****                 {
6664:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6665:FreeRTOS-Kernel/tasks.c ****                 }
6666:FreeRTOS-Kernel/tasks.c ****             }
6667:FreeRTOS-Kernel/tasks.c ****         }
6668:FreeRTOS-Kernel/tasks.c ****         else
6669:FreeRTOS-Kernel/tasks.c ****         {
6670:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6671:FreeRTOS-Kernel/tasks.c ****         }
6672:FreeRTOS-Kernel/tasks.c **** 
6673:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskPriorityInherit( xReturn );
6674:FreeRTOS-Kernel/tasks.c **** 
6675:FreeRTOS-Kernel/tasks.c ****         return xReturn;
6676:FreeRTOS-Kernel/tasks.c ****     }
6677:FreeRTOS-Kernel/tasks.c **** 
6678:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
6679:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6680:FreeRTOS-Kernel/tasks.c **** 
6681:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
6682:FreeRTOS-Kernel/tasks.c **** 
6683:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
6684:FreeRTOS-Kernel/tasks.c ****     {
6685:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
6686:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
6687:FreeRTOS-Kernel/tasks.c **** 
6688:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskPriorityDisinherit( pxMutexHolder );
6689:FreeRTOS-Kernel/tasks.c **** 
6690:FreeRTOS-Kernel/tasks.c ****         if( pxMutexHolder != NULL )
6691:FreeRTOS-Kernel/tasks.c ****         {
6692:FreeRTOS-Kernel/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
6693:FreeRTOS-Kernel/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
6694:FreeRTOS-Kernel/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
6695:FreeRTOS-Kernel/tasks.c ****              * be the running state task. */
6696:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
6697:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
6698:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
6699:FreeRTOS-Kernel/tasks.c **** 
6700:FreeRTOS-Kernel/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
6701:FreeRTOS-Kernel/tasks.c ****              * task? */
6702:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
6703:FreeRTOS-Kernel/tasks.c ****             {
6704:FreeRTOS-Kernel/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
6705:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
6706:FreeRTOS-Kernel/tasks.c ****                 {
6707:FreeRTOS-Kernel/tasks.c ****                     /* A task can only have an inherited priority if it holds
6708:FreeRTOS-Kernel/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
6709:FreeRTOS-Kernel/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
6710:FreeRTOS-Kernel/tasks.c ****                      * holding task then it must be the running state task.  Remove
6711:FreeRTOS-Kernel/tasks.c ****                      * the holding task from the ready list. */
6712:FreeRTOS-Kernel/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
6713:FreeRTOS-Kernel/tasks.c ****                     {
ARM GAS  /tmp/ccJw1tyY.s 			page 143


6714:FreeRTOS-Kernel/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
6715:FreeRTOS-Kernel/tasks.c ****                     }
6716:FreeRTOS-Kernel/tasks.c ****                     else
6717:FreeRTOS-Kernel/tasks.c ****                     {
6718:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6719:FreeRTOS-Kernel/tasks.c ****                     }
6720:FreeRTOS-Kernel/tasks.c **** 
6721:FreeRTOS-Kernel/tasks.c ****                     /* Disinherit the priority before adding the task into the
6722:FreeRTOS-Kernel/tasks.c ****                      * new  ready list. */
6723:FreeRTOS-Kernel/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
6724:FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
6725:FreeRTOS-Kernel/tasks.c **** 
6726:FreeRTOS-Kernel/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
6727:FreeRTOS-Kernel/tasks.c ****                      * any other purpose if this task is running, and it must be
6728:FreeRTOS-Kernel/tasks.c ****                      * running to give back the mutex. */
6729:FreeRTOS-Kernel/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
6730:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
6731:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
6732:FreeRTOS-Kernel/tasks.c ****                     {
6733:FreeRTOS-Kernel/tasks.c ****                         /* The priority of the task is dropped. Yield the core on
6734:FreeRTOS-Kernel/tasks.c ****                          * which the task is running. */
6735:FreeRTOS-Kernel/tasks.c ****                         if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
6736:FreeRTOS-Kernel/tasks.c ****                         {
6737:FreeRTOS-Kernel/tasks.c ****                             prvYieldCore( pxTCB->xTaskRunState );
6738:FreeRTOS-Kernel/tasks.c ****                         }
6739:FreeRTOS-Kernel/tasks.c ****                     }
6740:FreeRTOS-Kernel/tasks.c ****                     #endif /* if ( configNUMBER_OF_CORES > 1 ) */
6741:FreeRTOS-Kernel/tasks.c **** 
6742:FreeRTOS-Kernel/tasks.c ****                     /* Return true to indicate that a context switch is required.
6743:FreeRTOS-Kernel/tasks.c ****                      * This is only actually required in the corner case whereby
6744:FreeRTOS-Kernel/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
6745:FreeRTOS-Kernel/tasks.c ****                      * in an order different to that in which they were taken.
6746:FreeRTOS-Kernel/tasks.c ****                      * If a context switch did not occur when the first mutex was
6747:FreeRTOS-Kernel/tasks.c ****                      * returned, even if a task was waiting on it, then a context
6748:FreeRTOS-Kernel/tasks.c ****                      * switch should occur when the last mutex is returned whether
6749:FreeRTOS-Kernel/tasks.c ****                      * a task is waiting on it or not. */
6750:FreeRTOS-Kernel/tasks.c ****                     xReturn = pdTRUE;
6751:FreeRTOS-Kernel/tasks.c ****                 }
6752:FreeRTOS-Kernel/tasks.c ****                 else
6753:FreeRTOS-Kernel/tasks.c ****                 {
6754:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6755:FreeRTOS-Kernel/tasks.c ****                 }
6756:FreeRTOS-Kernel/tasks.c ****             }
6757:FreeRTOS-Kernel/tasks.c ****             else
6758:FreeRTOS-Kernel/tasks.c ****             {
6759:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
6760:FreeRTOS-Kernel/tasks.c ****             }
6761:FreeRTOS-Kernel/tasks.c ****         }
6762:FreeRTOS-Kernel/tasks.c ****         else
6763:FreeRTOS-Kernel/tasks.c ****         {
6764:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6765:FreeRTOS-Kernel/tasks.c ****         }
6766:FreeRTOS-Kernel/tasks.c **** 
6767:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskPriorityDisinherit( xReturn );
6768:FreeRTOS-Kernel/tasks.c **** 
6769:FreeRTOS-Kernel/tasks.c ****         return xReturn;
6770:FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  /tmp/ccJw1tyY.s 			page 144


6771:FreeRTOS-Kernel/tasks.c **** 
6772:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
6773:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6774:FreeRTOS-Kernel/tasks.c **** 
6775:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
6776:FreeRTOS-Kernel/tasks.c **** 
6777:FreeRTOS-Kernel/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
6778:FreeRTOS-Kernel/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
6779:FreeRTOS-Kernel/tasks.c ****     {
6780:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
6781:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
6782:FreeRTOS-Kernel/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
6783:FreeRTOS-Kernel/tasks.c **** 
6784:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask
6785:FreeRTOS-Kernel/tasks.c **** 
6786:FreeRTOS-Kernel/tasks.c ****         if( pxMutexHolder != NULL )
6787:FreeRTOS-Kernel/tasks.c ****         {
6788:FreeRTOS-Kernel/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
6789:FreeRTOS-Kernel/tasks.c ****              * one mutex. */
6790:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
6791:FreeRTOS-Kernel/tasks.c **** 
6792:FreeRTOS-Kernel/tasks.c ****             /* Determine the priority to which the priority of the task that
6793:FreeRTOS-Kernel/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
6794:FreeRTOS-Kernel/tasks.c ****              * holding task's base priority and the priority of the highest
6795:FreeRTOS-Kernel/tasks.c ****              * priority task that is waiting to obtain the mutex. */
6796:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
6797:FreeRTOS-Kernel/tasks.c ****             {
6798:FreeRTOS-Kernel/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
6799:FreeRTOS-Kernel/tasks.c ****             }
6800:FreeRTOS-Kernel/tasks.c ****             else
6801:FreeRTOS-Kernel/tasks.c ****             {
6802:FreeRTOS-Kernel/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
6803:FreeRTOS-Kernel/tasks.c ****             }
6804:FreeRTOS-Kernel/tasks.c **** 
6805:FreeRTOS-Kernel/tasks.c ****             /* Does the priority need to change? */
6806:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
6807:FreeRTOS-Kernel/tasks.c ****             {
6808:FreeRTOS-Kernel/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
6809:FreeRTOS-Kernel/tasks.c ****                  * simplification in the priority inheritance implementation.  If
6810:FreeRTOS-Kernel/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
6811:FreeRTOS-Kernel/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
6812:FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
6813:FreeRTOS-Kernel/tasks.c ****                 {
6814:FreeRTOS-Kernel/tasks.c ****                     /* If a task has timed out because it already holds the
6815:FreeRTOS-Kernel/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
6816:FreeRTOS-Kernel/tasks.c ****                      * its own priority. */
6817:FreeRTOS-Kernel/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
6818:FreeRTOS-Kernel/tasks.c **** 
6819:FreeRTOS-Kernel/tasks.c ****                     /* Disinherit the priority, remembering the previous
6820:FreeRTOS-Kernel/tasks.c ****                      * priority to facilitate determining the subject task's
6821:FreeRTOS-Kernel/tasks.c ****                      * state. */
6822:FreeRTOS-Kernel/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
6823:FreeRTOS-Kernel/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
6824:FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
6825:FreeRTOS-Kernel/tasks.c **** 
6826:FreeRTOS-Kernel/tasks.c ****                     /* Only reset the event list item value if the value is not
6827:FreeRTOS-Kernel/tasks.c ****                      * being used for anything else. */
ARM GAS  /tmp/ccJw1tyY.s 			page 145


6828:FreeRTOS-Kernel/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
6829:FreeRTOS-Kernel/tasks.c ****                     {
6830:FreeRTOS-Kernel/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
6831:FreeRTOS-Kernel/tasks.c ****                     }
6832:FreeRTOS-Kernel/tasks.c ****                     else
6833:FreeRTOS-Kernel/tasks.c ****                     {
6834:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6835:FreeRTOS-Kernel/tasks.c ****                     }
6836:FreeRTOS-Kernel/tasks.c **** 
6837:FreeRTOS-Kernel/tasks.c ****                     /* If the running task is not the task that holds the mutex
6838:FreeRTOS-Kernel/tasks.c ****                      * then the task that holds the mutex could be in either the
6839:FreeRTOS-Kernel/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
6840:FreeRTOS-Kernel/tasks.c ****                      * from its current state list if it is in the Ready state as
6841:FreeRTOS-Kernel/tasks.c ****                      * the task's priority is going to change and there is one
6842:FreeRTOS-Kernel/tasks.c ****                      * Ready list per priority. */
6843:FreeRTOS-Kernel/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
6844:FreeRTOS-Kernel/tasks.c ****                     {
6845:FreeRTOS-Kernel/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
6846:FreeRTOS-Kernel/tasks.c ****                         {
6847:FreeRTOS-Kernel/tasks.c ****                             /* It is known that the task is in its ready list so
6848:FreeRTOS-Kernel/tasks.c ****                              * there is no need to check again and the port level
6849:FreeRTOS-Kernel/tasks.c ****                              * reset macro can be called directly. */
6850:FreeRTOS-Kernel/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
6851:FreeRTOS-Kernel/tasks.c ****                         }
6852:FreeRTOS-Kernel/tasks.c ****                         else
6853:FreeRTOS-Kernel/tasks.c ****                         {
6854:FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
6855:FreeRTOS-Kernel/tasks.c ****                         }
6856:FreeRTOS-Kernel/tasks.c **** 
6857:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
6858:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
6859:FreeRTOS-Kernel/tasks.c ****                         {
6860:FreeRTOS-Kernel/tasks.c ****                             /* The priority of the task is dropped. Yield the core on
6861:FreeRTOS-Kernel/tasks.c ****                              * which the task is running. */
6862:FreeRTOS-Kernel/tasks.c ****                             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
6863:FreeRTOS-Kernel/tasks.c ****                             {
6864:FreeRTOS-Kernel/tasks.c ****                                 prvYieldCore( pxTCB->xTaskRunState );
6865:FreeRTOS-Kernel/tasks.c ****                             }
6866:FreeRTOS-Kernel/tasks.c ****                         }
6867:FreeRTOS-Kernel/tasks.c ****                         #endif /* if ( configNUMBER_OF_CORES > 1 ) */
6868:FreeRTOS-Kernel/tasks.c ****                     }
6869:FreeRTOS-Kernel/tasks.c ****                     else
6870:FreeRTOS-Kernel/tasks.c ****                     {
6871:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
6872:FreeRTOS-Kernel/tasks.c ****                     }
6873:FreeRTOS-Kernel/tasks.c ****                 }
6874:FreeRTOS-Kernel/tasks.c ****                 else
6875:FreeRTOS-Kernel/tasks.c ****                 {
6876:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
6877:FreeRTOS-Kernel/tasks.c ****                 }
6878:FreeRTOS-Kernel/tasks.c ****             }
6879:FreeRTOS-Kernel/tasks.c ****             else
6880:FreeRTOS-Kernel/tasks.c ****             {
6881:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
6882:FreeRTOS-Kernel/tasks.c ****             }
6883:FreeRTOS-Kernel/tasks.c ****         }
6884:FreeRTOS-Kernel/tasks.c ****         else
ARM GAS  /tmp/ccJw1tyY.s 			page 146


6885:FreeRTOS-Kernel/tasks.c ****         {
6886:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6887:FreeRTOS-Kernel/tasks.c ****         }
6888:FreeRTOS-Kernel/tasks.c **** 
6889:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskPriorityDisinheritAfterTimeout();
6890:FreeRTOS-Kernel/tasks.c ****     }
6891:FreeRTOS-Kernel/tasks.c **** 
6892:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
6893:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6894:FreeRTOS-Kernel/tasks.c **** 
6895:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
6896:FreeRTOS-Kernel/tasks.c **** 
6897:FreeRTOS-Kernel/tasks.c **** /* If not in a critical section then yield immediately.
6898:FreeRTOS-Kernel/tasks.c ****  * Otherwise set xYieldPendings to true to wait to
6899:FreeRTOS-Kernel/tasks.c ****  * yield until exiting the critical section.
6900:FreeRTOS-Kernel/tasks.c ****  */
6901:FreeRTOS-Kernel/tasks.c ****     void vTaskYieldWithinAPI( void )
6902:FreeRTOS-Kernel/tasks.c ****     {
6903:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskYieldWithinAPI();
6904:FreeRTOS-Kernel/tasks.c **** 
6905:FreeRTOS-Kernel/tasks.c ****         if( portGET_CRITICAL_NESTING_COUNT() == 0U )
6906:FreeRTOS-Kernel/tasks.c ****         {
6907:FreeRTOS-Kernel/tasks.c ****             portYIELD();
6908:FreeRTOS-Kernel/tasks.c ****         }
6909:FreeRTOS-Kernel/tasks.c ****         else
6910:FreeRTOS-Kernel/tasks.c ****         {
6911:FreeRTOS-Kernel/tasks.c ****             xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
6912:FreeRTOS-Kernel/tasks.c ****         }
6913:FreeRTOS-Kernel/tasks.c **** 
6914:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskYieldWithinAPI();
6915:FreeRTOS-Kernel/tasks.c ****     }
6916:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
6917:FreeRTOS-Kernel/tasks.c **** 
6918:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6919:FreeRTOS-Kernel/tasks.c **** 
6920:FreeRTOS-Kernel/tasks.c **** #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) )
6921:FreeRTOS-Kernel/tasks.c **** 
6922:FreeRTOS-Kernel/tasks.c ****     void vTaskEnterCritical( void )
6923:FreeRTOS-Kernel/tasks.c ****     {
6924:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskEnterCritical();
6925:FreeRTOS-Kernel/tasks.c **** 
6926:FreeRTOS-Kernel/tasks.c ****         portDISABLE_INTERRUPTS();
6927:FreeRTOS-Kernel/tasks.c **** 
6928:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
6929:FreeRTOS-Kernel/tasks.c ****         {
6930:FreeRTOS-Kernel/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
6931:FreeRTOS-Kernel/tasks.c **** 
6932:FreeRTOS-Kernel/tasks.c ****             /* This is not the interrupt safe version of the enter critical
6933:FreeRTOS-Kernel/tasks.c ****              * function so  assert() if it is being called from an interrupt
6934:FreeRTOS-Kernel/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
6935:FreeRTOS-Kernel/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
6936:FreeRTOS-Kernel/tasks.c ****              * protect against recursive calls if the assert function also uses a
6937:FreeRTOS-Kernel/tasks.c ****              * critical section. */
6938:FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1U )
6939:FreeRTOS-Kernel/tasks.c ****             {
6940:FreeRTOS-Kernel/tasks.c ****                 portASSERT_IF_IN_ISR();
6941:FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  /tmp/ccJw1tyY.s 			page 147


6942:FreeRTOS-Kernel/tasks.c ****         }
6943:FreeRTOS-Kernel/tasks.c ****         else
6944:FreeRTOS-Kernel/tasks.c ****         {
6945:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6946:FreeRTOS-Kernel/tasks.c ****         }
6947:FreeRTOS-Kernel/tasks.c **** 
6948:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskEnterCritical();
6949:FreeRTOS-Kernel/tasks.c ****     }
6950:FreeRTOS-Kernel/tasks.c **** 
6951:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) ) */
6952:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
6953:FreeRTOS-Kernel/tasks.c **** 
6954:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
6955:FreeRTOS-Kernel/tasks.c **** 
6956:FreeRTOS-Kernel/tasks.c ****     void vTaskEnterCritical( void )
6957:FreeRTOS-Kernel/tasks.c ****     {
6958:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskEnterCritical();
6959:FreeRTOS-Kernel/tasks.c **** 
6960:FreeRTOS-Kernel/tasks.c ****         portDISABLE_INTERRUPTS();
6961:FreeRTOS-Kernel/tasks.c **** 
6962:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
6963:FreeRTOS-Kernel/tasks.c ****         {
6964:FreeRTOS-Kernel/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() == 0U )
6965:FreeRTOS-Kernel/tasks.c ****             {
6966:FreeRTOS-Kernel/tasks.c ****                 portGET_TASK_LOCK();
6967:FreeRTOS-Kernel/tasks.c ****                 portGET_ISR_LOCK();
6968:FreeRTOS-Kernel/tasks.c ****             }
6969:FreeRTOS-Kernel/tasks.c **** 
6970:FreeRTOS-Kernel/tasks.c ****             portINCREMENT_CRITICAL_NESTING_COUNT();
6971:FreeRTOS-Kernel/tasks.c **** 
6972:FreeRTOS-Kernel/tasks.c ****             /* This is not the interrupt safe version of the enter critical
6973:FreeRTOS-Kernel/tasks.c ****              * function so  assert() if it is being called from an interrupt
6974:FreeRTOS-Kernel/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
6975:FreeRTOS-Kernel/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
6976:FreeRTOS-Kernel/tasks.c ****              * protect against recursive calls if the assert function also uses a
6977:FreeRTOS-Kernel/tasks.c ****              * critical section. */
6978:FreeRTOS-Kernel/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() == 1U )
6979:FreeRTOS-Kernel/tasks.c ****             {
6980:FreeRTOS-Kernel/tasks.c ****                 portASSERT_IF_IN_ISR();
6981:FreeRTOS-Kernel/tasks.c **** 
6982:FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == 0U )
6983:FreeRTOS-Kernel/tasks.c ****                 {
6984:FreeRTOS-Kernel/tasks.c ****                     /* The only time there would be a problem is if this is called
6985:FreeRTOS-Kernel/tasks.c ****                      * before a context switch and vTaskExitCritical() is called
6986:FreeRTOS-Kernel/tasks.c ****                      * after pxCurrentTCB changes. Therefore this should not be
6987:FreeRTOS-Kernel/tasks.c ****                      * used within vTaskSwitchContext(). */
6988:FreeRTOS-Kernel/tasks.c ****                     prvCheckForRunStateChange();
6989:FreeRTOS-Kernel/tasks.c ****                 }
6990:FreeRTOS-Kernel/tasks.c ****             }
6991:FreeRTOS-Kernel/tasks.c ****         }
6992:FreeRTOS-Kernel/tasks.c ****         else
6993:FreeRTOS-Kernel/tasks.c ****         {
6994:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
6995:FreeRTOS-Kernel/tasks.c ****         }
6996:FreeRTOS-Kernel/tasks.c **** 
6997:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskEnterCritical();
6998:FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  /tmp/ccJw1tyY.s 			page 148


6999:FreeRTOS-Kernel/tasks.c **** 
7000:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7001:FreeRTOS-Kernel/tasks.c **** 
7002:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7003:FreeRTOS-Kernel/tasks.c **** 
7004:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
7005:FreeRTOS-Kernel/tasks.c **** 
7006:FreeRTOS-Kernel/tasks.c ****     UBaseType_t vTaskEnterCriticalFromISR( void )
7007:FreeRTOS-Kernel/tasks.c ****     {
7008:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus = 0;
7009:FreeRTOS-Kernel/tasks.c **** 
7010:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskEnterCriticalFromISR();
7011:FreeRTOS-Kernel/tasks.c **** 
7012:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7013:FreeRTOS-Kernel/tasks.c ****         {
7014:FreeRTOS-Kernel/tasks.c ****             uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
7015:FreeRTOS-Kernel/tasks.c **** 
7016:FreeRTOS-Kernel/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() == 0U )
7017:FreeRTOS-Kernel/tasks.c ****             {
7018:FreeRTOS-Kernel/tasks.c ****                 portGET_ISR_LOCK();
7019:FreeRTOS-Kernel/tasks.c ****             }
7020:FreeRTOS-Kernel/tasks.c **** 
7021:FreeRTOS-Kernel/tasks.c ****             portINCREMENT_CRITICAL_NESTING_COUNT();
7022:FreeRTOS-Kernel/tasks.c ****         }
7023:FreeRTOS-Kernel/tasks.c ****         else
7024:FreeRTOS-Kernel/tasks.c ****         {
7025:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7026:FreeRTOS-Kernel/tasks.c ****         }
7027:FreeRTOS-Kernel/tasks.c **** 
7028:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskEnterCriticalFromISR( uxSavedInterruptStatus );
7029:FreeRTOS-Kernel/tasks.c **** 
7030:FreeRTOS-Kernel/tasks.c ****         return uxSavedInterruptStatus;
7031:FreeRTOS-Kernel/tasks.c ****     }
7032:FreeRTOS-Kernel/tasks.c **** 
7033:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7034:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7035:FreeRTOS-Kernel/tasks.c **** 
7036:FreeRTOS-Kernel/tasks.c **** #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) )
7037:FreeRTOS-Kernel/tasks.c **** 
7038:FreeRTOS-Kernel/tasks.c ****     void vTaskExitCritical( void )
7039:FreeRTOS-Kernel/tasks.c ****     {
7040:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskExitCritical();
7041:FreeRTOS-Kernel/tasks.c **** 
7042:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7043:FreeRTOS-Kernel/tasks.c ****         {
7044:FreeRTOS-Kernel/tasks.c ****             /* If pxCurrentTCB->uxCriticalNesting is zero then this function
7045:FreeRTOS-Kernel/tasks.c ****              * does not match a previous call to vTaskEnterCritical(). */
7046:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxCurrentTCB->uxCriticalNesting > 0U );
7047:FreeRTOS-Kernel/tasks.c **** 
7048:FreeRTOS-Kernel/tasks.c ****             /* This function should not be called in ISR. Use vTaskExitCriticalFromISR
7049:FreeRTOS-Kernel/tasks.c ****              * to exit critical section from ISR. */
7050:FreeRTOS-Kernel/tasks.c ****             portASSERT_IF_IN_ISR();
7051:FreeRTOS-Kernel/tasks.c **** 
7052:FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
7053:FreeRTOS-Kernel/tasks.c ****             {
7054:FreeRTOS-Kernel/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
7055:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 149


7056:FreeRTOS-Kernel/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
7057:FreeRTOS-Kernel/tasks.c ****                 {
7058:FreeRTOS-Kernel/tasks.c ****                     portENABLE_INTERRUPTS();
7059:FreeRTOS-Kernel/tasks.c ****                 }
7060:FreeRTOS-Kernel/tasks.c ****                 else
7061:FreeRTOS-Kernel/tasks.c ****                 {
7062:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7063:FreeRTOS-Kernel/tasks.c ****                 }
7064:FreeRTOS-Kernel/tasks.c ****             }
7065:FreeRTOS-Kernel/tasks.c ****             else
7066:FreeRTOS-Kernel/tasks.c ****             {
7067:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7068:FreeRTOS-Kernel/tasks.c ****             }
7069:FreeRTOS-Kernel/tasks.c ****         }
7070:FreeRTOS-Kernel/tasks.c ****         else
7071:FreeRTOS-Kernel/tasks.c ****         {
7072:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7073:FreeRTOS-Kernel/tasks.c ****         }
7074:FreeRTOS-Kernel/tasks.c **** 
7075:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskExitCritical();
7076:FreeRTOS-Kernel/tasks.c ****     }
7077:FreeRTOS-Kernel/tasks.c **** 
7078:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( portCRITICAL_NESTING_IN_TCB == 1 ) && ( configNUMBER_OF_CORES == 1 ) ) */
7079:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7080:FreeRTOS-Kernel/tasks.c **** 
7081:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
7082:FreeRTOS-Kernel/tasks.c **** 
7083:FreeRTOS-Kernel/tasks.c ****     void vTaskExitCritical( void )
7084:FreeRTOS-Kernel/tasks.c ****     {
7085:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskExitCritical();
7086:FreeRTOS-Kernel/tasks.c **** 
7087:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7088:FreeRTOS-Kernel/tasks.c ****         {
7089:FreeRTOS-Kernel/tasks.c ****             /* If critical nesting count is zero then this function
7090:FreeRTOS-Kernel/tasks.c ****              * does not match a previous call to vTaskEnterCritical(). */
7091:FreeRTOS-Kernel/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() > 0U );
7092:FreeRTOS-Kernel/tasks.c **** 
7093:FreeRTOS-Kernel/tasks.c ****             /* This function should not be called in ISR. Use vTaskExitCriticalFromISR
7094:FreeRTOS-Kernel/tasks.c ****              * to exit critical section from ISR. */
7095:FreeRTOS-Kernel/tasks.c ****             portASSERT_IF_IN_ISR();
7096:FreeRTOS-Kernel/tasks.c **** 
7097:FreeRTOS-Kernel/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() > 0U )
7098:FreeRTOS-Kernel/tasks.c ****             {
7099:FreeRTOS-Kernel/tasks.c ****                 portDECREMENT_CRITICAL_NESTING_COUNT();
7100:FreeRTOS-Kernel/tasks.c **** 
7101:FreeRTOS-Kernel/tasks.c ****                 if( portGET_CRITICAL_NESTING_COUNT() == 0U )
7102:FreeRTOS-Kernel/tasks.c ****                 {
7103:FreeRTOS-Kernel/tasks.c ****                     BaseType_t xYieldCurrentTask;
7104:FreeRTOS-Kernel/tasks.c **** 
7105:FreeRTOS-Kernel/tasks.c ****                     /* Get the xYieldPending stats inside the critical section. */
7106:FreeRTOS-Kernel/tasks.c ****                     xYieldCurrentTask = xYieldPendings[ portGET_CORE_ID() ];
7107:FreeRTOS-Kernel/tasks.c **** 
7108:FreeRTOS-Kernel/tasks.c ****                     portRELEASE_ISR_LOCK();
7109:FreeRTOS-Kernel/tasks.c ****                     portRELEASE_TASK_LOCK();
7110:FreeRTOS-Kernel/tasks.c ****                     portENABLE_INTERRUPTS();
7111:FreeRTOS-Kernel/tasks.c **** 
7112:FreeRTOS-Kernel/tasks.c ****                     /* When a task yields in a critical section it just sets
ARM GAS  /tmp/ccJw1tyY.s 			page 150


7113:FreeRTOS-Kernel/tasks.c ****                      * xYieldPending to true. So now that we have exited the
7114:FreeRTOS-Kernel/tasks.c ****                      * critical section check if xYieldPending is true, and
7115:FreeRTOS-Kernel/tasks.c ****                      * if so yield. */
7116:FreeRTOS-Kernel/tasks.c ****                     if( xYieldCurrentTask != pdFALSE )
7117:FreeRTOS-Kernel/tasks.c ****                     {
7118:FreeRTOS-Kernel/tasks.c ****                         portYIELD();
7119:FreeRTOS-Kernel/tasks.c ****                     }
7120:FreeRTOS-Kernel/tasks.c ****                 }
7121:FreeRTOS-Kernel/tasks.c ****                 else
7122:FreeRTOS-Kernel/tasks.c ****                 {
7123:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7124:FreeRTOS-Kernel/tasks.c ****                 }
7125:FreeRTOS-Kernel/tasks.c ****             }
7126:FreeRTOS-Kernel/tasks.c ****             else
7127:FreeRTOS-Kernel/tasks.c ****             {
7128:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7129:FreeRTOS-Kernel/tasks.c ****             }
7130:FreeRTOS-Kernel/tasks.c ****         }
7131:FreeRTOS-Kernel/tasks.c ****         else
7132:FreeRTOS-Kernel/tasks.c ****         {
7133:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7134:FreeRTOS-Kernel/tasks.c ****         }
7135:FreeRTOS-Kernel/tasks.c **** 
7136:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskExitCritical();
7137:FreeRTOS-Kernel/tasks.c ****     }
7138:FreeRTOS-Kernel/tasks.c **** 
7139:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7140:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7141:FreeRTOS-Kernel/tasks.c **** 
7142:FreeRTOS-Kernel/tasks.c **** #if ( configNUMBER_OF_CORES > 1 )
7143:FreeRTOS-Kernel/tasks.c **** 
7144:FreeRTOS-Kernel/tasks.c ****     void vTaskExitCriticalFromISR( UBaseType_t uxSavedInterruptStatus )
7145:FreeRTOS-Kernel/tasks.c ****     {
7146:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskExitCriticalFromISR( uxSavedInterruptStatus );
7147:FreeRTOS-Kernel/tasks.c **** 
7148:FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
7149:FreeRTOS-Kernel/tasks.c ****         {
7150:FreeRTOS-Kernel/tasks.c ****             /* If critical nesting count is zero then this function
7151:FreeRTOS-Kernel/tasks.c ****              * does not match a previous call to vTaskEnterCritical(). */
7152:FreeRTOS-Kernel/tasks.c ****             configASSERT( portGET_CRITICAL_NESTING_COUNT() > 0U );
7153:FreeRTOS-Kernel/tasks.c **** 
7154:FreeRTOS-Kernel/tasks.c ****             if( portGET_CRITICAL_NESTING_COUNT() > 0U )
7155:FreeRTOS-Kernel/tasks.c ****             {
7156:FreeRTOS-Kernel/tasks.c ****                 portDECREMENT_CRITICAL_NESTING_COUNT();
7157:FreeRTOS-Kernel/tasks.c **** 
7158:FreeRTOS-Kernel/tasks.c ****                 if( portGET_CRITICAL_NESTING_COUNT() == 0U )
7159:FreeRTOS-Kernel/tasks.c ****                 {
7160:FreeRTOS-Kernel/tasks.c ****                     portRELEASE_ISR_LOCK();
7161:FreeRTOS-Kernel/tasks.c ****                     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
7162:FreeRTOS-Kernel/tasks.c ****                 }
7163:FreeRTOS-Kernel/tasks.c ****                 else
7164:FreeRTOS-Kernel/tasks.c ****                 {
7165:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7166:FreeRTOS-Kernel/tasks.c ****                 }
7167:FreeRTOS-Kernel/tasks.c ****             }
7168:FreeRTOS-Kernel/tasks.c ****             else
7169:FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  /tmp/ccJw1tyY.s 			page 151


7170:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7171:FreeRTOS-Kernel/tasks.c ****             }
7172:FreeRTOS-Kernel/tasks.c ****         }
7173:FreeRTOS-Kernel/tasks.c ****         else
7174:FreeRTOS-Kernel/tasks.c ****         {
7175:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7176:FreeRTOS-Kernel/tasks.c ****         }
7177:FreeRTOS-Kernel/tasks.c **** 
7178:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskExitCriticalFromISR();
7179:FreeRTOS-Kernel/tasks.c ****     }
7180:FreeRTOS-Kernel/tasks.c **** 
7181:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
7182:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7183:FreeRTOS-Kernel/tasks.c **** 
7184:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
7185:FreeRTOS-Kernel/tasks.c **** 
7186:FreeRTOS-Kernel/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
7187:FreeRTOS-Kernel/tasks.c ****                                         const char * pcTaskName )
7188:FreeRTOS-Kernel/tasks.c ****     {
7189:FreeRTOS-Kernel/tasks.c ****         size_t x;
7190:FreeRTOS-Kernel/tasks.c **** 
7191:FreeRTOS-Kernel/tasks.c ****         /* Start by copying the entire string. */
7192:FreeRTOS-Kernel/tasks.c ****         ( void ) strcpy( pcBuffer, pcTaskName );
7193:FreeRTOS-Kernel/tasks.c **** 
7194:FreeRTOS-Kernel/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
7195:FreeRTOS-Kernel/tasks.c ****          * printed out. */
7196:FreeRTOS-Kernel/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( ( size_t ) configMAX_TASK_NAME_LEN - 1U ); x+
7197:FreeRTOS-Kernel/tasks.c ****         {
7198:FreeRTOS-Kernel/tasks.c ****             pcBuffer[ x ] = ' ';
7199:FreeRTOS-Kernel/tasks.c ****         }
7200:FreeRTOS-Kernel/tasks.c **** 
7201:FreeRTOS-Kernel/tasks.c ****         /* Terminate. */
7202:FreeRTOS-Kernel/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
7203:FreeRTOS-Kernel/tasks.c **** 
7204:FreeRTOS-Kernel/tasks.c ****         /* Return the new end of string. */
7205:FreeRTOS-Kernel/tasks.c ****         return &( pcBuffer[ x ] );
7206:FreeRTOS-Kernel/tasks.c ****     }
7207:FreeRTOS-Kernel/tasks.c **** 
7208:FreeRTOS-Kernel/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
7209:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7210:FreeRTOS-Kernel/tasks.c **** 
7211:FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
7212:FreeRTOS-Kernel/tasks.c **** 
7213:FreeRTOS-Kernel/tasks.c ****     void vTaskListTasks( char * pcWriteBuffer,
7214:FreeRTOS-Kernel/tasks.c ****                          size_t uxBufferLength )
7215:FreeRTOS-Kernel/tasks.c ****     {
7216:FreeRTOS-Kernel/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
7217:FreeRTOS-Kernel/tasks.c ****         size_t uxConsumedBufferLength = 0;
7218:FreeRTOS-Kernel/tasks.c ****         size_t uxCharsWrittenBySnprintf;
7219:FreeRTOS-Kernel/tasks.c ****         int iSnprintfReturnValue;
7220:FreeRTOS-Kernel/tasks.c ****         BaseType_t xOutputBufferFull = pdFALSE;
7221:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxArraySize, x;
7222:FreeRTOS-Kernel/tasks.c ****         char cStatus;
7223:FreeRTOS-Kernel/tasks.c **** 
7224:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskListTasks( pcWriteBuffer, uxBufferLength );
7225:FreeRTOS-Kernel/tasks.c **** 
7226:FreeRTOS-Kernel/tasks.c ****         /*
ARM GAS  /tmp/ccJw1tyY.s 			page 152


7227:FreeRTOS-Kernel/tasks.c ****          * PLEASE NOTE:
7228:FreeRTOS-Kernel/tasks.c ****          *
7229:FreeRTOS-Kernel/tasks.c ****          * This function is provided for convenience only, and is used by many
7230:FreeRTOS-Kernel/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
7231:FreeRTOS-Kernel/tasks.c ****          * scheduler.
7232:FreeRTOS-Kernel/tasks.c ****          *
7233:FreeRTOS-Kernel/tasks.c ****          * vTaskListTasks() calls uxTaskGetSystemState(), then formats part of the
7234:FreeRTOS-Kernel/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
7235:FreeRTOS-Kernel/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
7236:FreeRTOS-Kernel/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
7237:FreeRTOS-Kernel/tasks.c ****          * on top of stack - not the number of bytes.
7238:FreeRTOS-Kernel/tasks.c ****          *
7239:FreeRTOS-Kernel/tasks.c ****          * vTaskListTasks() has a dependency on the snprintf() C library function that
7240:FreeRTOS-Kernel/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
7241:FreeRTOS-Kernel/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
7242:FreeRTOS-Kernel/tasks.c ****          * and limited functionality implementation of snprintf() is provided in
7243:FreeRTOS-Kernel/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
7244:FreeRTOS-Kernel/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
7245:FreeRTOS-Kernel/tasks.c ****          * snprintf() implementation!).
7246:FreeRTOS-Kernel/tasks.c ****          *
7247:FreeRTOS-Kernel/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
7248:FreeRTOS-Kernel/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
7249:FreeRTOS-Kernel/tasks.c ****          * through a call to vTaskListTasks().
7250:FreeRTOS-Kernel/tasks.c ****          */
7251:FreeRTOS-Kernel/tasks.c **** 
7252:FreeRTOS-Kernel/tasks.c **** 
7253:FreeRTOS-Kernel/tasks.c ****         /* Make sure the write buffer does not contain a string. */
7254:FreeRTOS-Kernel/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
7255:FreeRTOS-Kernel/tasks.c **** 
7256:FreeRTOS-Kernel/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
7257:FreeRTOS-Kernel/tasks.c ****          * function is executing. */
7258:FreeRTOS-Kernel/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
7259:FreeRTOS-Kernel/tasks.c **** 
7260:FreeRTOS-Kernel/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
7261:FreeRTOS-Kernel/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
7262:FreeRTOS-Kernel/tasks.c ****          * equate to NULL. */
7263:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 11.5.1 [Malloc memory assignment] */
7264:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
7265:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
7266:FreeRTOS-Kernel/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
7267:FreeRTOS-Kernel/tasks.c **** 
7268:FreeRTOS-Kernel/tasks.c ****         if( pxTaskStatusArray != NULL )
7269:FreeRTOS-Kernel/tasks.c ****         {
7270:FreeRTOS-Kernel/tasks.c ****             /* Generate the (binary) data. */
7271:FreeRTOS-Kernel/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
7272:FreeRTOS-Kernel/tasks.c **** 
7273:FreeRTOS-Kernel/tasks.c ****             /* Create a human readable table from the binary data. */
7274:FreeRTOS-Kernel/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
7275:FreeRTOS-Kernel/tasks.c ****             {
7276:FreeRTOS-Kernel/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
7277:FreeRTOS-Kernel/tasks.c ****                 {
7278:FreeRTOS-Kernel/tasks.c ****                     case eRunning:
7279:FreeRTOS-Kernel/tasks.c ****                         cStatus = tskRUNNING_CHAR;
7280:FreeRTOS-Kernel/tasks.c ****                         break;
7281:FreeRTOS-Kernel/tasks.c **** 
7282:FreeRTOS-Kernel/tasks.c ****                     case eReady:
7283:FreeRTOS-Kernel/tasks.c ****                         cStatus = tskREADY_CHAR;
ARM GAS  /tmp/ccJw1tyY.s 			page 153


7284:FreeRTOS-Kernel/tasks.c ****                         break;
7285:FreeRTOS-Kernel/tasks.c **** 
7286:FreeRTOS-Kernel/tasks.c ****                     case eBlocked:
7287:FreeRTOS-Kernel/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
7288:FreeRTOS-Kernel/tasks.c ****                         break;
7289:FreeRTOS-Kernel/tasks.c **** 
7290:FreeRTOS-Kernel/tasks.c ****                     case eSuspended:
7291:FreeRTOS-Kernel/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
7292:FreeRTOS-Kernel/tasks.c ****                         break;
7293:FreeRTOS-Kernel/tasks.c **** 
7294:FreeRTOS-Kernel/tasks.c ****                     case eDeleted:
7295:FreeRTOS-Kernel/tasks.c ****                         cStatus = tskDELETED_CHAR;
7296:FreeRTOS-Kernel/tasks.c ****                         break;
7297:FreeRTOS-Kernel/tasks.c **** 
7298:FreeRTOS-Kernel/tasks.c ****                     case eInvalid: /* Fall through. */
7299:FreeRTOS-Kernel/tasks.c ****                     default:       /* Should not get here, but it is included
7300:FreeRTOS-Kernel/tasks.c ****                                     * to prevent static checking errors. */
7301:FreeRTOS-Kernel/tasks.c ****                         cStatus = ( char ) 0x00;
7302:FreeRTOS-Kernel/tasks.c ****                         break;
7303:FreeRTOS-Kernel/tasks.c ****                 }
7304:FreeRTOS-Kernel/tasks.c **** 
7305:FreeRTOS-Kernel/tasks.c ****                 /* Is there enough space in the buffer to hold task name? */
7306:FreeRTOS-Kernel/tasks.c ****                 if( ( uxConsumedBufferLength + configMAX_TASK_NAME_LEN ) <= uxBufferLength )
7307:FreeRTOS-Kernel/tasks.c ****                 {
7308:FreeRTOS-Kernel/tasks.c ****                     /* Write the task name to the string, padding with spaces so it
7309:FreeRTOS-Kernel/tasks.c ****                      * can be printed in tabular form more easily. */
7310:FreeRTOS-Kernel/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
7311:FreeRTOS-Kernel/tasks.c ****                     /* Do not count the terminating null character. */
7312:FreeRTOS-Kernel/tasks.c ****                     uxConsumedBufferLength = uxConsumedBufferLength + ( configMAX_TASK_NAME_LEN - 1
7313:FreeRTOS-Kernel/tasks.c **** 
7314:FreeRTOS-Kernel/tasks.c ****                     /* Is there space left in the buffer? -1 is done because snprintf
7315:FreeRTOS-Kernel/tasks.c ****                      * writes a terminating null character. So we are essentially
7316:FreeRTOS-Kernel/tasks.c ****                      * checking if the buffer has space to write at least one non-null
7317:FreeRTOS-Kernel/tasks.c ****                      * character. */
7318:FreeRTOS-Kernel/tasks.c ****                     if( uxConsumedBufferLength < ( uxBufferLength - 1U ) )
7319:FreeRTOS-Kernel/tasks.c ****                     {
7320:FreeRTOS-Kernel/tasks.c ****                         /* Write the rest of the string. */
7321:FreeRTOS-Kernel/tasks.c ****                         #if ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) )
7322:FreeRTOS-Kernel/tasks.c ****                             /* MISRA Ref 21.6.1 [snprintf for utility] */
7323:FreeRTOS-Kernel/tasks.c ****                             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/ma
7324:FreeRTOS-Kernel/tasks.c ****                             /* coverity[misra_c_2012_rule_21_6_violation] */
7325:FreeRTOS-Kernel/tasks.c ****                             iSnprintfReturnValue = snprintf( pcWriteBuffer,
7326:FreeRTOS-Kernel/tasks.c ****                                                              uxBufferLength - uxConsumedBufferLengt
7327:FreeRTOS-Kernel/tasks.c ****                                                              "\t%c\t%u\t%u\t%u\t0x%x\r\n",
7328:FreeRTOS-Kernel/tasks.c ****                                                              cStatus,
7329:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7330:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7331:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7332:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7333:FreeRTOS-Kernel/tasks.c ****                         #else /* ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 
7334:FreeRTOS-Kernel/tasks.c ****                             /* MISRA Ref 21.6.1 [snprintf for utility] */
7335:FreeRTOS-Kernel/tasks.c ****                             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/ma
7336:FreeRTOS-Kernel/tasks.c ****                             /* coverity[misra_c_2012_rule_21_6_violation] */
7337:FreeRTOS-Kernel/tasks.c ****                             iSnprintfReturnValue = snprintf( pcWriteBuffer,
7338:FreeRTOS-Kernel/tasks.c ****                                                              uxBufferLength - uxConsumedBufferLengt
7339:FreeRTOS-Kernel/tasks.c ****                                                              "\t%c\t%u\t%u\t%u\r\n",
7340:FreeRTOS-Kernel/tasks.c ****                                                              cStatus,
ARM GAS  /tmp/ccJw1tyY.s 			page 154


7341:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7342:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7343:FreeRTOS-Kernel/tasks.c ****                                                              ( unsigned int ) pxTaskStatusArray[ x 
7344:FreeRTOS-Kernel/tasks.c ****                         #endif /* ( ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1
7345:FreeRTOS-Kernel/tasks.c ****                         uxCharsWrittenBySnprintf = prvSnprintfReturnValueToCharsWritten( iSnprintfR
7346:FreeRTOS-Kernel/tasks.c **** 
7347:FreeRTOS-Kernel/tasks.c ****                         uxConsumedBufferLength += uxCharsWrittenBySnprintf;
7348:FreeRTOS-Kernel/tasks.c ****                         pcWriteBuffer += uxCharsWrittenBySnprintf;
7349:FreeRTOS-Kernel/tasks.c ****                     }
7350:FreeRTOS-Kernel/tasks.c ****                     else
7351:FreeRTOS-Kernel/tasks.c ****                     {
7352:FreeRTOS-Kernel/tasks.c ****                         xOutputBufferFull = pdTRUE;
7353:FreeRTOS-Kernel/tasks.c ****                     }
7354:FreeRTOS-Kernel/tasks.c ****                 }
7355:FreeRTOS-Kernel/tasks.c ****                 else
7356:FreeRTOS-Kernel/tasks.c ****                 {
7357:FreeRTOS-Kernel/tasks.c ****                     xOutputBufferFull = pdTRUE;
7358:FreeRTOS-Kernel/tasks.c ****                 }
7359:FreeRTOS-Kernel/tasks.c **** 
7360:FreeRTOS-Kernel/tasks.c ****                 if( xOutputBufferFull == pdTRUE )
7361:FreeRTOS-Kernel/tasks.c ****                 {
7362:FreeRTOS-Kernel/tasks.c ****                     break;
7363:FreeRTOS-Kernel/tasks.c ****                 }
7364:FreeRTOS-Kernel/tasks.c ****             }
7365:FreeRTOS-Kernel/tasks.c **** 
7366:FreeRTOS-Kernel/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
7367:FreeRTOS-Kernel/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
7368:FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTaskStatusArray );
7369:FreeRTOS-Kernel/tasks.c ****         }
7370:FreeRTOS-Kernel/tasks.c ****         else
7371:FreeRTOS-Kernel/tasks.c ****         {
7372:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7373:FreeRTOS-Kernel/tasks.c ****         }
7374:FreeRTOS-Kernel/tasks.c **** 
7375:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskListTasks();
7376:FreeRTOS-Kernel/tasks.c ****     }
7377:FreeRTOS-Kernel/tasks.c **** 
7378:FreeRTOS-Kernel/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
7379:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
7380:FreeRTOS-Kernel/tasks.c **** 
7381:FreeRTOS-Kernel/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
7382:FreeRTOS-Kernel/tasks.c **** 
7383:FreeRTOS-Kernel/tasks.c ****     void vTaskGetRunTimeStatistics( char * pcWriteBuffer,
7384:FreeRTOS-Kernel/tasks.c ****                                     size_t uxBufferLength )
7385:FreeRTOS-Kernel/tasks.c ****     {
7386:FreeRTOS-Kernel/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
7387:FreeRTOS-Kernel/tasks.c ****         size_t uxConsumedBufferLength = 0;
7388:FreeRTOS-Kernel/tasks.c ****         size_t uxCharsWrittenBySnprintf;
7389:FreeRTOS-Kernel/tasks.c ****         int iSnprintfReturnValue;
7390:FreeRTOS-Kernel/tasks.c ****         BaseType_t xOutputBufferFull = pdFALSE;
7391:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxArraySize, x;
7392:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime = 0;
7393:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulStatsAsPercentage;
7394:FreeRTOS-Kernel/tasks.c **** 
7395:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskGetRunTimeStatistics( pcWriteBuffer, uxBufferLength );
7396:FreeRTOS-Kernel/tasks.c **** 
7397:FreeRTOS-Kernel/tasks.c ****         /*
ARM GAS  /tmp/ccJw1tyY.s 			page 155


7398:FreeRTOS-Kernel/tasks.c ****          * PLEASE NOTE:
7399:FreeRTOS-Kernel/tasks.c ****          *
7400:FreeRTOS-Kernel/tasks.c ****          * This function is provided for convenience only, and is used by many
7401:FreeRTOS-Kernel/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
7402:FreeRTOS-Kernel/tasks.c ****          * scheduler.
7403:FreeRTOS-Kernel/tasks.c ****          *
7404:FreeRTOS-Kernel/tasks.c ****          * vTaskGetRunTimeStatistics() calls uxTaskGetSystemState(), then formats part
7405:FreeRTOS-Kernel/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
7406:FreeRTOS-Kernel/tasks.c ****          * displays the amount of time each task has spent in the Running state
7407:FreeRTOS-Kernel/tasks.c ****          * in both absolute and percentage terms.
7408:FreeRTOS-Kernel/tasks.c ****          *
7409:FreeRTOS-Kernel/tasks.c ****          * vTaskGetRunTimeStatistics() has a dependency on the snprintf() C library
7410:FreeRTOS-Kernel/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
7411:FreeRTOS-Kernel/tasks.c ****          * provide different results on different platforms.  An alternative,
7412:FreeRTOS-Kernel/tasks.c ****          * tiny, third party, and limited functionality implementation of
7413:FreeRTOS-Kernel/tasks.c ****          * snprintf() is provided in many of the FreeRTOS/Demo sub-directories in
7414:FreeRTOS-Kernel/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
7415:FreeRTOS-Kernel/tasks.c ****          * a full snprintf() implementation!).
7416:FreeRTOS-Kernel/tasks.c ****          *
7417:FreeRTOS-Kernel/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
7418:FreeRTOS-Kernel/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
7419:FreeRTOS-Kernel/tasks.c ****          * through a call to vTaskGetRunTimeStatistics().
7420:FreeRTOS-Kernel/tasks.c ****          */
7421:FreeRTOS-Kernel/tasks.c **** 
7422:FreeRTOS-Kernel/tasks.c ****         /* Make sure the write buffer does not contain a string. */
7423:FreeRTOS-Kernel/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
7424:FreeRTOS-Kernel/tasks.c **** 
7425:FreeRTOS-Kernel/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
7426:FreeRTOS-Kernel/tasks.c ****          * function is executing. */
7427:FreeRTOS-Kernel/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
7428:FreeRTOS-Kernel/tasks.c **** 
7429:FreeRTOS-Kernel/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
7430:FreeRTOS-Kernel/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
7431:FreeRTOS-Kernel/tasks.c ****          * equate to NULL. */
7432:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 11.5.1 [Malloc memory assignment] */
7433:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115
7434:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_rule_11_5_violation] */
7435:FreeRTOS-Kernel/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
7436:FreeRTOS-Kernel/tasks.c **** 
7437:FreeRTOS-Kernel/tasks.c ****         if( pxTaskStatusArray != NULL )
7438:FreeRTOS-Kernel/tasks.c ****         {
7439:FreeRTOS-Kernel/tasks.c ****             /* Generate the (binary) data. */
7440:FreeRTOS-Kernel/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
7441:FreeRTOS-Kernel/tasks.c **** 
7442:FreeRTOS-Kernel/tasks.c ****             /* For percentage calculations. */
7443:FreeRTOS-Kernel/tasks.c ****             ulTotalTime /= ( ( configRUN_TIME_COUNTER_TYPE ) 100U );
7444:FreeRTOS-Kernel/tasks.c **** 
7445:FreeRTOS-Kernel/tasks.c ****             /* Avoid divide by zero errors. */
7446:FreeRTOS-Kernel/tasks.c ****             if( ulTotalTime > 0U )
7447:FreeRTOS-Kernel/tasks.c ****             {
7448:FreeRTOS-Kernel/tasks.c ****                 /* Create a human readable table from the binary data. */
7449:FreeRTOS-Kernel/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
7450:FreeRTOS-Kernel/tasks.c ****                 {
7451:FreeRTOS-Kernel/tasks.c ****                     /* What percentage of the total run time has the task used?
7452:FreeRTOS-Kernel/tasks.c ****                      * This will always be rounded down to the nearest integer.
7453:FreeRTOS-Kernel/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
7454:FreeRTOS-Kernel/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
ARM GAS  /tmp/ccJw1tyY.s 			page 156


7455:FreeRTOS-Kernel/tasks.c **** 
7456:FreeRTOS-Kernel/tasks.c ****                     /* Is there enough space in the buffer to hold task name? */
7457:FreeRTOS-Kernel/tasks.c ****                     if( ( uxConsumedBufferLength + configMAX_TASK_NAME_LEN ) <= uxBufferLength )
7458:FreeRTOS-Kernel/tasks.c ****                     {
7459:FreeRTOS-Kernel/tasks.c ****                         /* Write the task name to the string, padding with
7460:FreeRTOS-Kernel/tasks.c ****                          * spaces so it can be printed in tabular form more
7461:FreeRTOS-Kernel/tasks.c ****                          * easily. */
7462:FreeRTOS-Kernel/tasks.c ****                         pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ]
7463:FreeRTOS-Kernel/tasks.c ****                         /* Do not count the terminating null character. */
7464:FreeRTOS-Kernel/tasks.c ****                         uxConsumedBufferLength = uxConsumedBufferLength + ( configMAX_TASK_NAME_LEN
7465:FreeRTOS-Kernel/tasks.c **** 
7466:FreeRTOS-Kernel/tasks.c ****                         /* Is there space left in the buffer? -1 is done because snprintf
7467:FreeRTOS-Kernel/tasks.c ****                          * writes a terminating null character. So we are essentially
7468:FreeRTOS-Kernel/tasks.c ****                          * checking if the buffer has space to write at least one non-null
7469:FreeRTOS-Kernel/tasks.c ****                          * character. */
7470:FreeRTOS-Kernel/tasks.c ****                         if( uxConsumedBufferLength < ( uxBufferLength - 1U ) )
7471:FreeRTOS-Kernel/tasks.c ****                         {
7472:FreeRTOS-Kernel/tasks.c ****                             if( ulStatsAsPercentage > 0U )
7473:FreeRTOS-Kernel/tasks.c ****                             {
7474:FreeRTOS-Kernel/tasks.c ****                                 #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
7475:FreeRTOS-Kernel/tasks.c ****                                 {
7476:FreeRTOS-Kernel/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7477:FreeRTOS-Kernel/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7478:FreeRTOS-Kernel/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7479:FreeRTOS-Kernel/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7480:FreeRTOS-Kernel/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7481:FreeRTOS-Kernel/tasks.c ****                                                                      "\t%lu\t\t%lu%%\r\n",
7482:FreeRTOS-Kernel/tasks.c ****                                                                      pxTaskStatusArray[ x ].ulRunTi
7483:FreeRTOS-Kernel/tasks.c ****                                                                      ulStatsAsPercentage );
7484:FreeRTOS-Kernel/tasks.c ****                                 }
7485:FreeRTOS-Kernel/tasks.c ****                                 #else /* ifdef portLU_PRINTF_SPECIFIER_REQUIRED */
7486:FreeRTOS-Kernel/tasks.c ****                                 {
7487:FreeRTOS-Kernel/tasks.c ****                                     /* sizeof( int ) == sizeof( long ) so a smaller
7488:FreeRTOS-Kernel/tasks.c ****                                      * printf() library can be used. */
7489:FreeRTOS-Kernel/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7490:FreeRTOS-Kernel/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7491:FreeRTOS-Kernel/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7492:FreeRTOS-Kernel/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7493:FreeRTOS-Kernel/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7494:FreeRTOS-Kernel/tasks.c ****                                                                      "\t%u\t\t%u%%\r\n",
7495:FreeRTOS-Kernel/tasks.c ****                                                                      ( unsigned int ) pxTaskStatusA
7496:FreeRTOS-Kernel/tasks.c ****                                                                      ( unsigned int ) ulStatsAsPerc
7497:FreeRTOS-Kernel/tasks.c ****                                 }
7498:FreeRTOS-Kernel/tasks.c ****                                 #endif /* ifdef portLU_PRINTF_SPECIFIER_REQUIRED */
7499:FreeRTOS-Kernel/tasks.c ****                             }
7500:FreeRTOS-Kernel/tasks.c ****                             else
7501:FreeRTOS-Kernel/tasks.c ****                             {
7502:FreeRTOS-Kernel/tasks.c ****                                 /* If the percentage is zero here then the task has
7503:FreeRTOS-Kernel/tasks.c ****                                  * consumed less than 1% of the total run time. */
7504:FreeRTOS-Kernel/tasks.c ****                                 #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
7505:FreeRTOS-Kernel/tasks.c ****                                 {
7506:FreeRTOS-Kernel/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7507:FreeRTOS-Kernel/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7508:FreeRTOS-Kernel/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7509:FreeRTOS-Kernel/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7510:FreeRTOS-Kernel/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7511:FreeRTOS-Kernel/tasks.c ****                                                                      "\t%lu\t\t<1%%\r\n",
ARM GAS  /tmp/ccJw1tyY.s 			page 157


7512:FreeRTOS-Kernel/tasks.c ****                                                                      pxTaskStatusArray[ x ].ulRunTi
7513:FreeRTOS-Kernel/tasks.c ****                                 }
7514:FreeRTOS-Kernel/tasks.c ****                                 #else
7515:FreeRTOS-Kernel/tasks.c ****                                 {
7516:FreeRTOS-Kernel/tasks.c ****                                     /* sizeof( int ) == sizeof( long ) so a smaller
7517:FreeRTOS-Kernel/tasks.c ****                                      * printf() library can be used. */
7518:FreeRTOS-Kernel/tasks.c ****                                     /* MISRA Ref 21.6.1 [snprintf for utility] */
7519:FreeRTOS-Kernel/tasks.c ****                                     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel
7520:FreeRTOS-Kernel/tasks.c ****                                     /* coverity[misra_c_2012_rule_21_6_violation] */
7521:FreeRTOS-Kernel/tasks.c ****                                     iSnprintfReturnValue = snprintf( pcWriteBuffer,
7522:FreeRTOS-Kernel/tasks.c ****                                                                      uxBufferLength - uxConsumedBuf
7523:FreeRTOS-Kernel/tasks.c ****                                                                      "\t%u\t\t<1%%\r\n",
7524:FreeRTOS-Kernel/tasks.c ****                                                                      ( unsigned int ) pxTaskStatusA
7525:FreeRTOS-Kernel/tasks.c ****                                 }
7526:FreeRTOS-Kernel/tasks.c ****                                 #endif /* ifdef portLU_PRINTF_SPECIFIER_REQUIRED */
7527:FreeRTOS-Kernel/tasks.c ****                             }
7528:FreeRTOS-Kernel/tasks.c **** 
7529:FreeRTOS-Kernel/tasks.c ****                             uxCharsWrittenBySnprintf = prvSnprintfReturnValueToCharsWritten( iSnpri
7530:FreeRTOS-Kernel/tasks.c ****                             uxConsumedBufferLength += uxCharsWrittenBySnprintf;
7531:FreeRTOS-Kernel/tasks.c ****                             pcWriteBuffer += uxCharsWrittenBySnprintf;
7532:FreeRTOS-Kernel/tasks.c ****                         }
7533:FreeRTOS-Kernel/tasks.c ****                         else
7534:FreeRTOS-Kernel/tasks.c ****                         {
7535:FreeRTOS-Kernel/tasks.c ****                             xOutputBufferFull = pdTRUE;
7536:FreeRTOS-Kernel/tasks.c ****                         }
7537:FreeRTOS-Kernel/tasks.c ****                     }
7538:FreeRTOS-Kernel/tasks.c ****                     else
7539:FreeRTOS-Kernel/tasks.c ****                     {
7540:FreeRTOS-Kernel/tasks.c ****                         xOutputBufferFull = pdTRUE;
7541:FreeRTOS-Kernel/tasks.c ****                     }
7542:FreeRTOS-Kernel/tasks.c **** 
7543:FreeRTOS-Kernel/tasks.c ****                     if( xOutputBufferFull == pdTRUE )
7544:FreeRTOS-Kernel/tasks.c ****                     {
7545:FreeRTOS-Kernel/tasks.c ****                         break;
7546:FreeRTOS-Kernel/tasks.c ****                     }
7547:FreeRTOS-Kernel/tasks.c ****                 }
7548:FreeRTOS-Kernel/tasks.c ****             }
7549:FreeRTOS-Kernel/tasks.c ****             else
7550:FreeRTOS-Kernel/tasks.c ****             {
7551:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7552:FreeRTOS-Kernel/tasks.c ****             }
7553:FreeRTOS-Kernel/tasks.c **** 
7554:FreeRTOS-Kernel/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
7555:FreeRTOS-Kernel/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
7556:FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTaskStatusArray );
7557:FreeRTOS-Kernel/tasks.c ****         }
7558:FreeRTOS-Kernel/tasks.c ****         else
7559:FreeRTOS-Kernel/tasks.c ****         {
7560:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7561:FreeRTOS-Kernel/tasks.c ****         }
7562:FreeRTOS-Kernel/tasks.c **** 
7563:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskGetRunTimeStatistics();
7564:FreeRTOS-Kernel/tasks.c ****     }
7565:FreeRTOS-Kernel/tasks.c **** 
7566:FreeRTOS-Kernel/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
7567:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7568:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 158


7569:FreeRTOS-Kernel/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
7570:FreeRTOS-Kernel/tasks.c **** {
7571:FreeRTOS-Kernel/tasks.c ****     TickType_t uxReturn;
7572:FreeRTOS-Kernel/tasks.c **** 
7573:FreeRTOS-Kernel/tasks.c ****     traceENTER_uxTaskResetEventItemValue();
7574:FreeRTOS-Kernel/tasks.c **** 
7575:FreeRTOS-Kernel/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
7576:FreeRTOS-Kernel/tasks.c **** 
7577:FreeRTOS-Kernel/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
7578:FreeRTOS-Kernel/tasks.c ****      * queues and semaphores. */
7579:FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
7580:FreeRTOS-Kernel/tasks.c **** 
7581:FreeRTOS-Kernel/tasks.c ****     traceRETURN_uxTaskResetEventItemValue( uxReturn );
7582:FreeRTOS-Kernel/tasks.c **** 
7583:FreeRTOS-Kernel/tasks.c ****     return uxReturn;
7584:FreeRTOS-Kernel/tasks.c **** }
7585:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7586:FreeRTOS-Kernel/tasks.c **** 
7587:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
7588:FreeRTOS-Kernel/tasks.c **** 
7589:FreeRTOS-Kernel/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
7590:FreeRTOS-Kernel/tasks.c ****     {
7591:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
7592:FreeRTOS-Kernel/tasks.c **** 
7593:FreeRTOS-Kernel/tasks.c ****         traceENTER_pvTaskIncrementMutexHeldCount();
7594:FreeRTOS-Kernel/tasks.c **** 
7595:FreeRTOS-Kernel/tasks.c ****         pxTCB = pxCurrentTCB;
7596:FreeRTOS-Kernel/tasks.c **** 
7597:FreeRTOS-Kernel/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
7598:FreeRTOS-Kernel/tasks.c ****          * then pxCurrentTCB will be NULL. */
7599:FreeRTOS-Kernel/tasks.c ****         if( pxTCB != NULL )
7600:FreeRTOS-Kernel/tasks.c ****         {
7601:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )++;
7602:FreeRTOS-Kernel/tasks.c ****         }
7603:FreeRTOS-Kernel/tasks.c **** 
7604:FreeRTOS-Kernel/tasks.c ****         traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
7605:FreeRTOS-Kernel/tasks.c **** 
7606:FreeRTOS-Kernel/tasks.c ****         return pxTCB;
7607:FreeRTOS-Kernel/tasks.c ****     }
7608:FreeRTOS-Kernel/tasks.c **** 
7609:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
7610:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7611:FreeRTOS-Kernel/tasks.c **** 
7612:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7613:FreeRTOS-Kernel/tasks.c **** 
7614:FreeRTOS-Kernel/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
7615:FreeRTOS-Kernel/tasks.c ****                                       BaseType_t xClearCountOnExit,
7616:FreeRTOS-Kernel/tasks.c ****                                       TickType_t xTicksToWait )
7617:FreeRTOS-Kernel/tasks.c ****     {
7618:FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
7619:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
7620:FreeRTOS-Kernel/tasks.c **** 
7621:FreeRTOS-Kernel/tasks.c ****         traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
7622:FreeRTOS-Kernel/tasks.c **** 
7623:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
7624:FreeRTOS-Kernel/tasks.c **** 
7625:FreeRTOS-Kernel/tasks.c ****         /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
ARM GAS  /tmp/ccJw1tyY.s 			page 159


7626:FreeRTOS-Kernel/tasks.c ****          * non-deterministic operation. */
7627:FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
7628:FreeRTOS-Kernel/tasks.c ****         {
7629:FreeRTOS-Kernel/tasks.c ****             /* We MUST enter a critical section to atomically check if a notification
7630:FreeRTOS-Kernel/tasks.c ****              * has occurred and set the flag to indicate that we are waiting for
7631:FreeRTOS-Kernel/tasks.c ****              * a notification. If we do not do so, a notification sent from an ISR
7632:FreeRTOS-Kernel/tasks.c ****              * will get lost. */
7633:FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
7634:FreeRTOS-Kernel/tasks.c ****             {
7635:FreeRTOS-Kernel/tasks.c ****                 /* Only block if the notification count is not already non-zero. */
7636:FreeRTOS-Kernel/tasks.c ****                 if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
7637:FreeRTOS-Kernel/tasks.c ****                 {
7638:FreeRTOS-Kernel/tasks.c ****                     /* Mark this task as waiting for a notification. */
7639:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
7640:FreeRTOS-Kernel/tasks.c **** 
7641:FreeRTOS-Kernel/tasks.c ****                     if( xTicksToWait > ( TickType_t ) 0 )
7642:FreeRTOS-Kernel/tasks.c ****                     {
7643:FreeRTOS-Kernel/tasks.c ****                         xShouldBlock = pdTRUE;
7644:FreeRTOS-Kernel/tasks.c ****                     }
7645:FreeRTOS-Kernel/tasks.c ****                     else
7646:FreeRTOS-Kernel/tasks.c ****                     {
7647:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
7648:FreeRTOS-Kernel/tasks.c ****                     }
7649:FreeRTOS-Kernel/tasks.c ****                 }
7650:FreeRTOS-Kernel/tasks.c ****                 else
7651:FreeRTOS-Kernel/tasks.c ****                 {
7652:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7653:FreeRTOS-Kernel/tasks.c ****                 }
7654:FreeRTOS-Kernel/tasks.c ****             }
7655:FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
7656:FreeRTOS-Kernel/tasks.c **** 
7657:FreeRTOS-Kernel/tasks.c ****             /* We are now out of the critical section but the scheduler is still
7658:FreeRTOS-Kernel/tasks.c ****              * suspended, so we are safe to do non-deterministic operations such
7659:FreeRTOS-Kernel/tasks.c ****              * as prvAddCurrentTaskToDelayedList. */
7660:FreeRTOS-Kernel/tasks.c ****             if( xShouldBlock == pdTRUE )
7661:FreeRTOS-Kernel/tasks.c ****             {
7662:FreeRTOS-Kernel/tasks.c ****                 traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
7663:FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
7664:FreeRTOS-Kernel/tasks.c ****             }
7665:FreeRTOS-Kernel/tasks.c ****             else
7666:FreeRTOS-Kernel/tasks.c ****             {
7667:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7668:FreeRTOS-Kernel/tasks.c ****             }
7669:FreeRTOS-Kernel/tasks.c ****         }
7670:FreeRTOS-Kernel/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
7671:FreeRTOS-Kernel/tasks.c **** 
7672:FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so. */
7673:FreeRTOS-Kernel/tasks.c ****         if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
7674:FreeRTOS-Kernel/tasks.c ****         {
7675:FreeRTOS-Kernel/tasks.c ****             taskYIELD_WITHIN_API();
7676:FreeRTOS-Kernel/tasks.c ****         }
7677:FreeRTOS-Kernel/tasks.c ****         else
7678:FreeRTOS-Kernel/tasks.c ****         {
7679:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7680:FreeRTOS-Kernel/tasks.c ****         }
7681:FreeRTOS-Kernel/tasks.c **** 
7682:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
ARM GAS  /tmp/ccJw1tyY.s 			page 160


7683:FreeRTOS-Kernel/tasks.c ****         {
7684:FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
7685:FreeRTOS-Kernel/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
7686:FreeRTOS-Kernel/tasks.c **** 
7687:FreeRTOS-Kernel/tasks.c ****             if( ulReturn != 0U )
7688:FreeRTOS-Kernel/tasks.c ****             {
7689:FreeRTOS-Kernel/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
7690:FreeRTOS-Kernel/tasks.c ****                 {
7691:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
7692:FreeRTOS-Kernel/tasks.c ****                 }
7693:FreeRTOS-Kernel/tasks.c ****                 else
7694:FreeRTOS-Kernel/tasks.c ****                 {
7695:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
7696:FreeRTOS-Kernel/tasks.c ****                 }
7697:FreeRTOS-Kernel/tasks.c ****             }
7698:FreeRTOS-Kernel/tasks.c ****             else
7699:FreeRTOS-Kernel/tasks.c ****             {
7700:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7701:FreeRTOS-Kernel/tasks.c ****             }
7702:FreeRTOS-Kernel/tasks.c **** 
7703:FreeRTOS-Kernel/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
7704:FreeRTOS-Kernel/tasks.c ****         }
7705:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
7706:FreeRTOS-Kernel/tasks.c **** 
7707:FreeRTOS-Kernel/tasks.c ****         traceRETURN_ulTaskGenericNotifyTake( ulReturn );
7708:FreeRTOS-Kernel/tasks.c **** 
7709:FreeRTOS-Kernel/tasks.c ****         return ulReturn;
7710:FreeRTOS-Kernel/tasks.c ****     }
7711:FreeRTOS-Kernel/tasks.c **** 
7712:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
7713:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7714:FreeRTOS-Kernel/tasks.c **** 
7715:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7716:FreeRTOS-Kernel/tasks.c **** 
7717:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
7718:FreeRTOS-Kernel/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
7719:FreeRTOS-Kernel/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
7720:FreeRTOS-Kernel/tasks.c ****                                        uint32_t * pulNotificationValue,
7721:FreeRTOS-Kernel/tasks.c ****                                        TickType_t xTicksToWait )
7722:FreeRTOS-Kernel/tasks.c ****     {
7723:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
7724:FreeRTOS-Kernel/tasks.c **** 
7725:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnEx
7726:FreeRTOS-Kernel/tasks.c **** 
7727:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
7728:FreeRTOS-Kernel/tasks.c **** 
7729:FreeRTOS-Kernel/tasks.c ****         /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
7730:FreeRTOS-Kernel/tasks.c ****          * non-deterministic operation. */
7731:FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
7732:FreeRTOS-Kernel/tasks.c ****         {
7733:FreeRTOS-Kernel/tasks.c ****             /* We MUST enter a critical section to atomically check and update the
7734:FreeRTOS-Kernel/tasks.c ****              * task notification value. If we do not do so, a notification from
7735:FreeRTOS-Kernel/tasks.c ****              * an ISR will get lost. */
7736:FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
7737:FreeRTOS-Kernel/tasks.c ****             {
7738:FreeRTOS-Kernel/tasks.c ****                 /* Only block if a notification is not already pending. */
7739:FreeRTOS-Kernel/tasks.c ****                 if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
ARM GAS  /tmp/ccJw1tyY.s 			page 161


7740:FreeRTOS-Kernel/tasks.c ****                 {
7741:FreeRTOS-Kernel/tasks.c ****                     /* Clear bits in the task's notification value as bits may get
7742:FreeRTOS-Kernel/tasks.c ****                      * set by the notifying task or interrupt. This can be used
7743:FreeRTOS-Kernel/tasks.c ****                      * to clear the value to zero. */
7744:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
7745:FreeRTOS-Kernel/tasks.c **** 
7746:FreeRTOS-Kernel/tasks.c ****                     /* Mark this task as waiting for a notification. */
7747:FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
7748:FreeRTOS-Kernel/tasks.c **** 
7749:FreeRTOS-Kernel/tasks.c ****                     if( xTicksToWait > ( TickType_t ) 0 )
7750:FreeRTOS-Kernel/tasks.c ****                     {
7751:FreeRTOS-Kernel/tasks.c ****                         xShouldBlock = pdTRUE;
7752:FreeRTOS-Kernel/tasks.c ****                     }
7753:FreeRTOS-Kernel/tasks.c ****                     else
7754:FreeRTOS-Kernel/tasks.c ****                     {
7755:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
7756:FreeRTOS-Kernel/tasks.c ****                     }
7757:FreeRTOS-Kernel/tasks.c ****                 }
7758:FreeRTOS-Kernel/tasks.c ****                 else
7759:FreeRTOS-Kernel/tasks.c ****                 {
7760:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
7761:FreeRTOS-Kernel/tasks.c ****                 }
7762:FreeRTOS-Kernel/tasks.c ****             }
7763:FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
7764:FreeRTOS-Kernel/tasks.c **** 
7765:FreeRTOS-Kernel/tasks.c ****             /* We are now out of the critical section but the scheduler is still
7766:FreeRTOS-Kernel/tasks.c ****              * suspended, so we are safe to do non-deterministic operations such
7767:FreeRTOS-Kernel/tasks.c ****              * as prvAddCurrentTaskToDelayedList. */
7768:FreeRTOS-Kernel/tasks.c ****             if( xShouldBlock == pdTRUE )
7769:FreeRTOS-Kernel/tasks.c ****             {
7770:FreeRTOS-Kernel/tasks.c ****                 traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
7771:FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
7772:FreeRTOS-Kernel/tasks.c ****             }
7773:FreeRTOS-Kernel/tasks.c ****             else
7774:FreeRTOS-Kernel/tasks.c ****             {
7775:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7776:FreeRTOS-Kernel/tasks.c ****             }
7777:FreeRTOS-Kernel/tasks.c ****         }
7778:FreeRTOS-Kernel/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
7779:FreeRTOS-Kernel/tasks.c **** 
7780:FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so. */
7781:FreeRTOS-Kernel/tasks.c ****         if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
7782:FreeRTOS-Kernel/tasks.c ****         {
7783:FreeRTOS-Kernel/tasks.c ****             taskYIELD_WITHIN_API();
7784:FreeRTOS-Kernel/tasks.c ****         }
7785:FreeRTOS-Kernel/tasks.c ****         else
7786:FreeRTOS-Kernel/tasks.c ****         {
7787:FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
7788:FreeRTOS-Kernel/tasks.c ****         }
7789:FreeRTOS-Kernel/tasks.c **** 
7790:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
7791:FreeRTOS-Kernel/tasks.c ****         {
7792:FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );
7793:FreeRTOS-Kernel/tasks.c **** 
7794:FreeRTOS-Kernel/tasks.c ****             if( pulNotificationValue != NULL )
7795:FreeRTOS-Kernel/tasks.c ****             {
7796:FreeRTOS-Kernel/tasks.c ****                 /* Output the current notification value, which may or may not
ARM GAS  /tmp/ccJw1tyY.s 			page 162


7797:FreeRTOS-Kernel/tasks.c ****                  * have changed. */
7798:FreeRTOS-Kernel/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
7799:FreeRTOS-Kernel/tasks.c ****             }
7800:FreeRTOS-Kernel/tasks.c **** 
7801:FreeRTOS-Kernel/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
7802:FreeRTOS-Kernel/tasks.c ****              * blocked state (because a notification was already pending) or the
7803:FreeRTOS-Kernel/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
7804:FreeRTOS-Kernel/tasks.c ****              * unblocked because of a timeout. */
7805:FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
7806:FreeRTOS-Kernel/tasks.c ****             {
7807:FreeRTOS-Kernel/tasks.c ****                 /* A notification was not received. */
7808:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFALSE;
7809:FreeRTOS-Kernel/tasks.c ****             }
7810:FreeRTOS-Kernel/tasks.c ****             else
7811:FreeRTOS-Kernel/tasks.c ****             {
7812:FreeRTOS-Kernel/tasks.c ****                 /* A notification was already pending or a notification was
7813:FreeRTOS-Kernel/tasks.c ****                  * received while the task was waiting. */
7814:FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
7815:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
7816:FreeRTOS-Kernel/tasks.c ****             }
7817:FreeRTOS-Kernel/tasks.c **** 
7818:FreeRTOS-Kernel/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
7819:FreeRTOS-Kernel/tasks.c ****         }
7820:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
7821:FreeRTOS-Kernel/tasks.c **** 
7822:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGenericNotifyWait( xReturn );
7823:FreeRTOS-Kernel/tasks.c **** 
7824:FreeRTOS-Kernel/tasks.c ****         return xReturn;
7825:FreeRTOS-Kernel/tasks.c ****     }
7826:FreeRTOS-Kernel/tasks.c **** 
7827:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
7828:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7829:FreeRTOS-Kernel/tasks.c **** 
7830:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7831:FreeRTOS-Kernel/tasks.c **** 
7832:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
7833:FreeRTOS-Kernel/tasks.c ****                                    UBaseType_t uxIndexToNotify,
7834:FreeRTOS-Kernel/tasks.c ****                                    uint32_t ulValue,
7835:FreeRTOS-Kernel/tasks.c ****                                    eNotifyAction eAction,
7836:FreeRTOS-Kernel/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
7837:FreeRTOS-Kernel/tasks.c ****     {
7838:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
7839:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdPASS;
7840:FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
7841:FreeRTOS-Kernel/tasks.c **** 
7842:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviou
7843:FreeRTOS-Kernel/tasks.c **** 
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
7845:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
7846:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
7847:FreeRTOS-Kernel/tasks.c **** 
7848:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
7849:FreeRTOS-Kernel/tasks.c ****         {
7850:FreeRTOS-Kernel/tasks.c ****             if( pulPreviousNotificationValue != NULL )
7851:FreeRTOS-Kernel/tasks.c ****             {
7852:FreeRTOS-Kernel/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
7853:FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  /tmp/ccJw1tyY.s 			page 163


7854:FreeRTOS-Kernel/tasks.c **** 
7855:FreeRTOS-Kernel/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
7856:FreeRTOS-Kernel/tasks.c **** 
7857:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
7858:FreeRTOS-Kernel/tasks.c **** 
7859:FreeRTOS-Kernel/tasks.c ****             switch( eAction )
7860:FreeRTOS-Kernel/tasks.c ****             {
7861:FreeRTOS-Kernel/tasks.c ****                 case eSetBits:
7862:FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
7863:FreeRTOS-Kernel/tasks.c ****                     break;
7864:FreeRTOS-Kernel/tasks.c **** 
7865:FreeRTOS-Kernel/tasks.c ****                 case eIncrement:
7866:FreeRTOS-Kernel/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
7867:FreeRTOS-Kernel/tasks.c ****                     break;
7868:FreeRTOS-Kernel/tasks.c **** 
7869:FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithOverwrite:
7870:FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
7871:FreeRTOS-Kernel/tasks.c ****                     break;
7872:FreeRTOS-Kernel/tasks.c **** 
7873:FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithoutOverwrite:
7874:FreeRTOS-Kernel/tasks.c **** 
7875:FreeRTOS-Kernel/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
7876:FreeRTOS-Kernel/tasks.c ****                     {
7877:FreeRTOS-Kernel/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
7878:FreeRTOS-Kernel/tasks.c ****                     }
7879:FreeRTOS-Kernel/tasks.c ****                     else
7880:FreeRTOS-Kernel/tasks.c ****                     {
7881:FreeRTOS-Kernel/tasks.c ****                         /* The value could not be written to the task. */
7882:FreeRTOS-Kernel/tasks.c ****                         xReturn = pdFAIL;
7883:FreeRTOS-Kernel/tasks.c ****                     }
7884:FreeRTOS-Kernel/tasks.c **** 
7885:FreeRTOS-Kernel/tasks.c ****                     break;
7886:FreeRTOS-Kernel/tasks.c **** 
7887:FreeRTOS-Kernel/tasks.c ****                 case eNoAction:
7888:FreeRTOS-Kernel/tasks.c **** 
7889:FreeRTOS-Kernel/tasks.c ****                     /* The task is being notified without its notify value being
7890:FreeRTOS-Kernel/tasks.c ****                      * updated. */
7891:FreeRTOS-Kernel/tasks.c ****                     break;
7892:FreeRTOS-Kernel/tasks.c **** 
7893:FreeRTOS-Kernel/tasks.c ****                 default:
7894:FreeRTOS-Kernel/tasks.c **** 
7895:FreeRTOS-Kernel/tasks.c ****                     /* Should not get here if all enums are handled.
7896:FreeRTOS-Kernel/tasks.c ****                      * Artificially force an assert by testing a value the
7897:FreeRTOS-Kernel/tasks.c ****                      * compiler can't assume is const. */
7898:FreeRTOS-Kernel/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
7899:FreeRTOS-Kernel/tasks.c **** 
7900:FreeRTOS-Kernel/tasks.c ****                     break;
7901:FreeRTOS-Kernel/tasks.c ****             }
7902:FreeRTOS-Kernel/tasks.c **** 
7903:FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
7904:FreeRTOS-Kernel/tasks.c **** 
7905:FreeRTOS-Kernel/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
7906:FreeRTOS-Kernel/tasks.c ****              * notification then unblock it now. */
7907:FreeRTOS-Kernel/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
7908:FreeRTOS-Kernel/tasks.c ****             {
7909:FreeRTOS-Kernel/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
7910:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccJw1tyY.s 			page 164


7911:FreeRTOS-Kernel/tasks.c **** 
7912:FreeRTOS-Kernel/tasks.c ****                 /* The task should not have been on an event list. */
7913:FreeRTOS-Kernel/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
7914:FreeRTOS-Kernel/tasks.c **** 
7915:FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
7916:FreeRTOS-Kernel/tasks.c ****                 {
7917:FreeRTOS-Kernel/tasks.c ****                     /* If a task is blocked waiting for a notification then
7918:FreeRTOS-Kernel/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
7919:FreeRTOS-Kernel/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
7920:FreeRTOS-Kernel/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
7921:FreeRTOS-Kernel/tasks.c ****                      * because it will automatically get reset to a new value when
7922:FreeRTOS-Kernel/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
7923:FreeRTOS-Kernel/tasks.c ****                      * tickless idling is used it might be more important to enter
7924:FreeRTOS-Kernel/tasks.c ****                      * sleep mode at the earliest possible time - so reset
7925:FreeRTOS-Kernel/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
7926:FreeRTOS-Kernel/tasks.c ****                      * earliest possible time. */
7927:FreeRTOS-Kernel/tasks.c ****                     prvResetNextTaskUnblockTime();
7928:FreeRTOS-Kernel/tasks.c ****                 }
7929:FreeRTOS-Kernel/tasks.c ****                 #endif
7930:FreeRTOS-Kernel/tasks.c **** 
7931:FreeRTOS-Kernel/tasks.c ****                 /* Check if the notified task has a priority above the currently
7932:FreeRTOS-Kernel/tasks.c ****                  * executing task. */
7933:FreeRTOS-Kernel/tasks.c ****                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
7934:FreeRTOS-Kernel/tasks.c ****             }
7935:FreeRTOS-Kernel/tasks.c ****             else
7936:FreeRTOS-Kernel/tasks.c ****             {
7937:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
7938:FreeRTOS-Kernel/tasks.c ****             }
7939:FreeRTOS-Kernel/tasks.c ****         }
7940:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
7941:FreeRTOS-Kernel/tasks.c **** 
7942:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGenericNotify( xReturn );
7943:FreeRTOS-Kernel/tasks.c **** 
7944:FreeRTOS-Kernel/tasks.c ****         return xReturn;
7945:FreeRTOS-Kernel/tasks.c ****     }
7946:FreeRTOS-Kernel/tasks.c **** 
7947:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
7948:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
7949:FreeRTOS-Kernel/tasks.c **** 
7950:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
7951:FreeRTOS-Kernel/tasks.c **** 
7952:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
7953:FreeRTOS-Kernel/tasks.c ****                                           UBaseType_t uxIndexToNotify,
7954:FreeRTOS-Kernel/tasks.c ****                                           uint32_t ulValue,
7955:FreeRTOS-Kernel/tasks.c ****                                           eNotifyAction eAction,
7956:FreeRTOS-Kernel/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
7957:FreeRTOS-Kernel/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
7958:FreeRTOS-Kernel/tasks.c ****     {
7959:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
7960:FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
7961:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdPASS;
7962:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
7963:FreeRTOS-Kernel/tasks.c **** 
7964:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pul
7965:FreeRTOS-Kernel/tasks.c **** 
7966:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
7967:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
ARM GAS  /tmp/ccJw1tyY.s 			page 165


7968:FreeRTOS-Kernel/tasks.c **** 
7969:FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
7970:FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
7971:FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
7972:FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
7973:FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
7974:FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
7975:FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
7976:FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
7977:FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
7978:FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
7979:FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
7980:FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
7981:FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
7982:FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
7983:FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
7984:FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
7985:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
7986:FreeRTOS-Kernel/tasks.c **** 
7987:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
7988:FreeRTOS-Kernel/tasks.c **** 
7989:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
7990:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
7991:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
7992:FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
7993:FreeRTOS-Kernel/tasks.c ****         {
7994:FreeRTOS-Kernel/tasks.c ****             if( pulPreviousNotificationValue != NULL )
7995:FreeRTOS-Kernel/tasks.c ****             {
7996:FreeRTOS-Kernel/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
7997:FreeRTOS-Kernel/tasks.c ****             }
7998:FreeRTOS-Kernel/tasks.c **** 
7999:FreeRTOS-Kernel/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
8000:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
8001:FreeRTOS-Kernel/tasks.c **** 
8002:FreeRTOS-Kernel/tasks.c ****             switch( eAction )
8003:FreeRTOS-Kernel/tasks.c ****             {
8004:FreeRTOS-Kernel/tasks.c ****                 case eSetBits:
8005:FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
8006:FreeRTOS-Kernel/tasks.c ****                     break;
8007:FreeRTOS-Kernel/tasks.c **** 
8008:FreeRTOS-Kernel/tasks.c ****                 case eIncrement:
8009:FreeRTOS-Kernel/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
8010:FreeRTOS-Kernel/tasks.c ****                     break;
8011:FreeRTOS-Kernel/tasks.c **** 
8012:FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithOverwrite:
8013:FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
8014:FreeRTOS-Kernel/tasks.c ****                     break;
8015:FreeRTOS-Kernel/tasks.c **** 
8016:FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithoutOverwrite:
8017:FreeRTOS-Kernel/tasks.c **** 
8018:FreeRTOS-Kernel/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
8019:FreeRTOS-Kernel/tasks.c ****                     {
8020:FreeRTOS-Kernel/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
8021:FreeRTOS-Kernel/tasks.c ****                     }
8022:FreeRTOS-Kernel/tasks.c ****                     else
8023:FreeRTOS-Kernel/tasks.c ****                     {
8024:FreeRTOS-Kernel/tasks.c ****                         /* The value could not be written to the task. */
ARM GAS  /tmp/ccJw1tyY.s 			page 166


8025:FreeRTOS-Kernel/tasks.c ****                         xReturn = pdFAIL;
8026:FreeRTOS-Kernel/tasks.c ****                     }
8027:FreeRTOS-Kernel/tasks.c **** 
8028:FreeRTOS-Kernel/tasks.c ****                     break;
8029:FreeRTOS-Kernel/tasks.c **** 
8030:FreeRTOS-Kernel/tasks.c ****                 case eNoAction:
8031:FreeRTOS-Kernel/tasks.c **** 
8032:FreeRTOS-Kernel/tasks.c ****                     /* The task is being notified without its notify value being
8033:FreeRTOS-Kernel/tasks.c ****                      * updated. */
8034:FreeRTOS-Kernel/tasks.c ****                     break;
8035:FreeRTOS-Kernel/tasks.c **** 
8036:FreeRTOS-Kernel/tasks.c ****                 default:
8037:FreeRTOS-Kernel/tasks.c **** 
8038:FreeRTOS-Kernel/tasks.c ****                     /* Should not get here if all enums are handled.
8039:FreeRTOS-Kernel/tasks.c ****                      * Artificially force an assert by testing a value the
8040:FreeRTOS-Kernel/tasks.c ****                      * compiler can't assume is const. */
8041:FreeRTOS-Kernel/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
8042:FreeRTOS-Kernel/tasks.c ****                     break;
8043:FreeRTOS-Kernel/tasks.c ****             }
8044:FreeRTOS-Kernel/tasks.c **** 
8045:FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
8046:FreeRTOS-Kernel/tasks.c **** 
8047:FreeRTOS-Kernel/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
8048:FreeRTOS-Kernel/tasks.c ****              * notification then unblock it now. */
8049:FreeRTOS-Kernel/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
8050:FreeRTOS-Kernel/tasks.c ****             {
8051:FreeRTOS-Kernel/tasks.c ****                 /* The task should not have been on an event list. */
8052:FreeRTOS-Kernel/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
8053:FreeRTOS-Kernel/tasks.c **** 
8054:FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
8055:FreeRTOS-Kernel/tasks.c ****                 {
8056:FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
8057:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
8058:FreeRTOS-Kernel/tasks.c ****                 }
8059:FreeRTOS-Kernel/tasks.c ****                 else
8060:FreeRTOS-Kernel/tasks.c ****                 {
8061:FreeRTOS-Kernel/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
8062:FreeRTOS-Kernel/tasks.c ****                      * this task pending until the scheduler is resumed. */
8063:FreeRTOS-Kernel/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
8064:FreeRTOS-Kernel/tasks.c ****                 }
8065:FreeRTOS-Kernel/tasks.c **** 
8066:FreeRTOS-Kernel/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
8067:FreeRTOS-Kernel/tasks.c ****                 {
8068:FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
8069:FreeRTOS-Kernel/tasks.c ****                     {
8070:FreeRTOS-Kernel/tasks.c ****                         /* The notified task has a priority above the currently
8071:FreeRTOS-Kernel/tasks.c ****                          * executing task so a yield is required. */
8072:FreeRTOS-Kernel/tasks.c ****                         if( pxHigherPriorityTaskWoken != NULL )
8073:FreeRTOS-Kernel/tasks.c ****                         {
8074:FreeRTOS-Kernel/tasks.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
8075:FreeRTOS-Kernel/tasks.c ****                         }
8076:FreeRTOS-Kernel/tasks.c **** 
8077:FreeRTOS-Kernel/tasks.c ****                         /* Mark that a yield is pending in case the user is not
8078:FreeRTOS-Kernel/tasks.c ****                          * using the "xHigherPriorityTaskWoken" parameter to an ISR
8079:FreeRTOS-Kernel/tasks.c ****                          * safe FreeRTOS function. */
8080:FreeRTOS-Kernel/tasks.c ****                         xYieldPendings[ 0 ] = pdTRUE;
8081:FreeRTOS-Kernel/tasks.c ****                     }
ARM GAS  /tmp/ccJw1tyY.s 			page 167


8082:FreeRTOS-Kernel/tasks.c ****                     else
8083:FreeRTOS-Kernel/tasks.c ****                     {
8084:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
8085:FreeRTOS-Kernel/tasks.c ****                     }
8086:FreeRTOS-Kernel/tasks.c ****                 }
8087:FreeRTOS-Kernel/tasks.c ****                 #else /* #if ( configNUMBER_OF_CORES == 1 ) */
8088:FreeRTOS-Kernel/tasks.c ****                 {
8089:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
8090:FreeRTOS-Kernel/tasks.c ****                     {
8091:FreeRTOS-Kernel/tasks.c ****                         prvYieldForTask( pxTCB );
8092:FreeRTOS-Kernel/tasks.c **** 
8093:FreeRTOS-Kernel/tasks.c ****                         if( xYieldPendings[ portGET_CORE_ID() ] == pdTRUE )
8094:FreeRTOS-Kernel/tasks.c ****                         {
8095:FreeRTOS-Kernel/tasks.c ****                             if( pxHigherPriorityTaskWoken != NULL )
8096:FreeRTOS-Kernel/tasks.c ****                             {
8097:FreeRTOS-Kernel/tasks.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
8098:FreeRTOS-Kernel/tasks.c ****                             }
8099:FreeRTOS-Kernel/tasks.c ****                         }
8100:FreeRTOS-Kernel/tasks.c ****                     }
8101:FreeRTOS-Kernel/tasks.c ****                     #endif /* if ( configUSE_PREEMPTION == 1 ) */
8102:FreeRTOS-Kernel/tasks.c ****                 }
8103:FreeRTOS-Kernel/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
8104:FreeRTOS-Kernel/tasks.c ****             }
8105:FreeRTOS-Kernel/tasks.c ****         }
8106:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
8107:FreeRTOS-Kernel/tasks.c **** 
8108:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGenericNotifyFromISR( xReturn );
8109:FreeRTOS-Kernel/tasks.c **** 
8110:FreeRTOS-Kernel/tasks.c ****         return xReturn;
8111:FreeRTOS-Kernel/tasks.c ****     }
8112:FreeRTOS-Kernel/tasks.c **** 
8113:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8114:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8115:FreeRTOS-Kernel/tasks.c **** 
8116:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
8117:FreeRTOS-Kernel/tasks.c **** 
8118:FreeRTOS-Kernel/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
8119:FreeRTOS-Kernel/tasks.c ****                                         UBaseType_t uxIndexToNotify,
8120:FreeRTOS-Kernel/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
8121:FreeRTOS-Kernel/tasks.c ****     {
8122:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
8123:FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
8124:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
8125:FreeRTOS-Kernel/tasks.c **** 
8126:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityT
8127:FreeRTOS-Kernel/tasks.c **** 
8128:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
8129:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
8130:FreeRTOS-Kernel/tasks.c **** 
8131:FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
8132:FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
8133:FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
8134:FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
8135:FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
8136:FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
8137:FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
8138:FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  /tmp/ccJw1tyY.s 			page 168


8139:FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
8140:FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
8141:FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
8142:FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
8143:FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
8144:FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
8145:FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
8146:FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
8147:FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
8148:FreeRTOS-Kernel/tasks.c **** 
8149:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
8150:FreeRTOS-Kernel/tasks.c **** 
8151:FreeRTOS-Kernel/tasks.c ****         /* MISRA Ref 4.7.1 [Return value shall be checked] */
8152:FreeRTOS-Kernel/tasks.c ****         /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 *
8153:FreeRTOS-Kernel/tasks.c ****         /* coverity[misra_c_2012_directive_4_7_violation] */
8154:FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
8155:FreeRTOS-Kernel/tasks.c ****         {
8156:FreeRTOS-Kernel/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
8157:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
8158:FreeRTOS-Kernel/tasks.c **** 
8159:FreeRTOS-Kernel/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
8160:FreeRTOS-Kernel/tasks.c ****              * semaphore. */
8161:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
8162:FreeRTOS-Kernel/tasks.c **** 
8163:FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
8164:FreeRTOS-Kernel/tasks.c **** 
8165:FreeRTOS-Kernel/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
8166:FreeRTOS-Kernel/tasks.c ****              * notification then unblock it now. */
8167:FreeRTOS-Kernel/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
8168:FreeRTOS-Kernel/tasks.c ****             {
8169:FreeRTOS-Kernel/tasks.c ****                 /* The task should not have been on an event list. */
8170:FreeRTOS-Kernel/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
8171:FreeRTOS-Kernel/tasks.c **** 
8172:FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
8173:FreeRTOS-Kernel/tasks.c ****                 {
8174:FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
8175:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
8176:FreeRTOS-Kernel/tasks.c ****                 }
8177:FreeRTOS-Kernel/tasks.c ****                 else
8178:FreeRTOS-Kernel/tasks.c ****                 {
8179:FreeRTOS-Kernel/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
8180:FreeRTOS-Kernel/tasks.c ****                      * this task pending until the scheduler is resumed. */
8181:FreeRTOS-Kernel/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
8182:FreeRTOS-Kernel/tasks.c ****                 }
8183:FreeRTOS-Kernel/tasks.c **** 
8184:FreeRTOS-Kernel/tasks.c ****                 #if ( configNUMBER_OF_CORES == 1 )
8185:FreeRTOS-Kernel/tasks.c ****                 {
8186:FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
8187:FreeRTOS-Kernel/tasks.c ****                     {
8188:FreeRTOS-Kernel/tasks.c ****                         /* The notified task has a priority above the currently
8189:FreeRTOS-Kernel/tasks.c ****                          * executing task so a yield is required. */
8190:FreeRTOS-Kernel/tasks.c ****                         if( pxHigherPriorityTaskWoken != NULL )
8191:FreeRTOS-Kernel/tasks.c ****                         {
8192:FreeRTOS-Kernel/tasks.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
8193:FreeRTOS-Kernel/tasks.c ****                         }
8194:FreeRTOS-Kernel/tasks.c **** 
8195:FreeRTOS-Kernel/tasks.c ****                         /* Mark that a yield is pending in case the user is not
ARM GAS  /tmp/ccJw1tyY.s 			page 169


8196:FreeRTOS-Kernel/tasks.c ****                          * using the "xHigherPriorityTaskWoken" parameter in an ISR
8197:FreeRTOS-Kernel/tasks.c ****                          * safe FreeRTOS function. */
8198:FreeRTOS-Kernel/tasks.c ****                         xYieldPendings[ 0 ] = pdTRUE;
8199:FreeRTOS-Kernel/tasks.c ****                     }
8200:FreeRTOS-Kernel/tasks.c ****                     else
8201:FreeRTOS-Kernel/tasks.c ****                     {
8202:FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
8203:FreeRTOS-Kernel/tasks.c ****                     }
8204:FreeRTOS-Kernel/tasks.c ****                 }
8205:FreeRTOS-Kernel/tasks.c ****                 #else /* #if ( configNUMBER_OF_CORES == 1 ) */
8206:FreeRTOS-Kernel/tasks.c ****                 {
8207:FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
8208:FreeRTOS-Kernel/tasks.c ****                     {
8209:FreeRTOS-Kernel/tasks.c ****                         prvYieldForTask( pxTCB );
8210:FreeRTOS-Kernel/tasks.c **** 
8211:FreeRTOS-Kernel/tasks.c ****                         if( xYieldPendings[ portGET_CORE_ID() ] == pdTRUE )
8212:FreeRTOS-Kernel/tasks.c ****                         {
8213:FreeRTOS-Kernel/tasks.c ****                             if( pxHigherPriorityTaskWoken != NULL )
8214:FreeRTOS-Kernel/tasks.c ****                             {
8215:FreeRTOS-Kernel/tasks.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
8216:FreeRTOS-Kernel/tasks.c ****                             }
8217:FreeRTOS-Kernel/tasks.c ****                         }
8218:FreeRTOS-Kernel/tasks.c ****                     }
8219:FreeRTOS-Kernel/tasks.c ****                     #endif /* #if ( configUSE_PREEMPTION == 1 ) */
8220:FreeRTOS-Kernel/tasks.c ****                 }
8221:FreeRTOS-Kernel/tasks.c ****                 #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
8222:FreeRTOS-Kernel/tasks.c ****             }
8223:FreeRTOS-Kernel/tasks.c ****         }
8224:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
8225:FreeRTOS-Kernel/tasks.c **** 
8226:FreeRTOS-Kernel/tasks.c ****         traceRETURN_vTaskGenericNotifyGiveFromISR();
8227:FreeRTOS-Kernel/tasks.c ****     }
8228:FreeRTOS-Kernel/tasks.c **** 
8229:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8230:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8231:FreeRTOS-Kernel/tasks.c **** 
8232:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
8233:FreeRTOS-Kernel/tasks.c **** 
8234:FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
8235:FreeRTOS-Kernel/tasks.c ****                                              UBaseType_t uxIndexToClear )
8236:FreeRTOS-Kernel/tasks.c ****     {
8237:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
8238:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
8239:FreeRTOS-Kernel/tasks.c **** 
8240:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
8241:FreeRTOS-Kernel/tasks.c **** 
8242:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
8243:FreeRTOS-Kernel/tasks.c **** 
8244:FreeRTOS-Kernel/tasks.c ****         /* If null is passed in here then it is the calling task that is having
8245:FreeRTOS-Kernel/tasks.c ****          * its notification state cleared. */
8246:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8247:FreeRTOS-Kernel/tasks.c **** 
8248:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
8249:FreeRTOS-Kernel/tasks.c ****         {
8250:FreeRTOS-Kernel/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
8251:FreeRTOS-Kernel/tasks.c ****             {
8252:FreeRTOS-Kernel/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
ARM GAS  /tmp/ccJw1tyY.s 			page 170


8253:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
8254:FreeRTOS-Kernel/tasks.c ****             }
8255:FreeRTOS-Kernel/tasks.c ****             else
8256:FreeRTOS-Kernel/tasks.c ****             {
8257:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFAIL;
8258:FreeRTOS-Kernel/tasks.c ****             }
8259:FreeRTOS-Kernel/tasks.c ****         }
8260:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
8261:FreeRTOS-Kernel/tasks.c **** 
8262:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGenericNotifyStateClear( xReturn );
8263:FreeRTOS-Kernel/tasks.c **** 
8264:FreeRTOS-Kernel/tasks.c ****         return xReturn;
8265:FreeRTOS-Kernel/tasks.c ****     }
8266:FreeRTOS-Kernel/tasks.c **** 
8267:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8268:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8269:FreeRTOS-Kernel/tasks.c **** 
8270:FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
8271:FreeRTOS-Kernel/tasks.c **** 
8272:FreeRTOS-Kernel/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
8273:FreeRTOS-Kernel/tasks.c ****                                             UBaseType_t uxIndexToClear,
8274:FreeRTOS-Kernel/tasks.c ****                                             uint32_t ulBitsToClear )
8275:FreeRTOS-Kernel/tasks.c ****     {
8276:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
8277:FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
8278:FreeRTOS-Kernel/tasks.c **** 
8279:FreeRTOS-Kernel/tasks.c ****         traceENTER_ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
8280:FreeRTOS-Kernel/tasks.c **** 
8281:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
8282:FreeRTOS-Kernel/tasks.c **** 
8283:FreeRTOS-Kernel/tasks.c ****         /* If null is passed in here then it is the calling task that is having
8284:FreeRTOS-Kernel/tasks.c ****          * its notification state cleared. */
8285:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8286:FreeRTOS-Kernel/tasks.c **** 
8287:FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
8288:FreeRTOS-Kernel/tasks.c ****         {
8289:FreeRTOS-Kernel/tasks.c ****             /* Return the notification as it was before the bits were cleared,
8290:FreeRTOS-Kernel/tasks.c ****              * then clear the bit mask. */
8291:FreeRTOS-Kernel/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
8292:FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
8293:FreeRTOS-Kernel/tasks.c ****         }
8294:FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
8295:FreeRTOS-Kernel/tasks.c **** 
8296:FreeRTOS-Kernel/tasks.c ****         traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );
8297:FreeRTOS-Kernel/tasks.c **** 
8298:FreeRTOS-Kernel/tasks.c ****         return ulReturn;
8299:FreeRTOS-Kernel/tasks.c ****     }
8300:FreeRTOS-Kernel/tasks.c **** 
8301:FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
8302:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8303:FreeRTOS-Kernel/tasks.c **** 
8304:FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
8305:FreeRTOS-Kernel/tasks.c **** 
8306:FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimeCounter( const TaskHandle_t xTask )
8307:FreeRTOS-Kernel/tasks.c ****     {
8308:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
8309:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 171


8310:FreeRTOS-Kernel/tasks.c ****         traceENTER_ulTaskGetRunTimeCounter( xTask );
8311:FreeRTOS-Kernel/tasks.c **** 
8312:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8313:FreeRTOS-Kernel/tasks.c **** 
8314:FreeRTOS-Kernel/tasks.c ****         traceRETURN_ulTaskGetRunTimeCounter( pxTCB->ulRunTimeCounter );
8315:FreeRTOS-Kernel/tasks.c **** 
8316:FreeRTOS-Kernel/tasks.c ****         return pxTCB->ulRunTimeCounter;
8317:FreeRTOS-Kernel/tasks.c ****     }
8318:FreeRTOS-Kernel/tasks.c **** 
8319:FreeRTOS-Kernel/tasks.c **** #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
8320:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8321:FreeRTOS-Kernel/tasks.c **** 
8322:FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
8323:FreeRTOS-Kernel/tasks.c **** 
8324:FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimePercent( const TaskHandle_t xTask )
8325:FreeRTOS-Kernel/tasks.c ****     {
8326:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
8327:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
8328:FreeRTOS-Kernel/tasks.c **** 
8329:FreeRTOS-Kernel/tasks.c ****         traceENTER_ulTaskGetRunTimePercent( xTask );
8330:FreeRTOS-Kernel/tasks.c **** 
8331:FreeRTOS-Kernel/tasks.c ****         ulTotalTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
8332:FreeRTOS-Kernel/tasks.c **** 
8333:FreeRTOS-Kernel/tasks.c ****         /* For percentage calculations. */
8334:FreeRTOS-Kernel/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
8335:FreeRTOS-Kernel/tasks.c **** 
8336:FreeRTOS-Kernel/tasks.c ****         /* Avoid divide by zero errors. */
8337:FreeRTOS-Kernel/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
8338:FreeRTOS-Kernel/tasks.c ****         {
8339:FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
8340:FreeRTOS-Kernel/tasks.c ****             ulReturn = pxTCB->ulRunTimeCounter / ulTotalTime;
8341:FreeRTOS-Kernel/tasks.c ****         }
8342:FreeRTOS-Kernel/tasks.c ****         else
8343:FreeRTOS-Kernel/tasks.c ****         {
8344:FreeRTOS-Kernel/tasks.c ****             ulReturn = 0;
8345:FreeRTOS-Kernel/tasks.c ****         }
8346:FreeRTOS-Kernel/tasks.c **** 
8347:FreeRTOS-Kernel/tasks.c ****         traceRETURN_ulTaskGetRunTimePercent( ulReturn );
8348:FreeRTOS-Kernel/tasks.c **** 
8349:FreeRTOS-Kernel/tasks.c ****         return ulReturn;
8350:FreeRTOS-Kernel/tasks.c ****     }
8351:FreeRTOS-Kernel/tasks.c **** 
8352:FreeRTOS-Kernel/tasks.c **** #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
8353:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8354:FreeRTOS-Kernel/tasks.c **** 
8355:FreeRTOS-Kernel/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
8356:FreeRTOS-Kernel/tasks.c **** 
8357:FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
8358:FreeRTOS-Kernel/tasks.c ****     {
8359:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulReturn = 0;
8360:FreeRTOS-Kernel/tasks.c ****         BaseType_t i;
8361:FreeRTOS-Kernel/tasks.c **** 
8362:FreeRTOS-Kernel/tasks.c ****         traceENTER_ulTaskGetIdleRunTimeCounter();
8363:FreeRTOS-Kernel/tasks.c **** 
8364:FreeRTOS-Kernel/tasks.c ****         for( i = 0; i < ( BaseType_t ) configNUMBER_OF_CORES; i++ )
8365:FreeRTOS-Kernel/tasks.c ****         {
8366:FreeRTOS-Kernel/tasks.c ****             ulReturn += xIdleTaskHandles[ i ]->ulRunTimeCounter;
ARM GAS  /tmp/ccJw1tyY.s 			page 172


8367:FreeRTOS-Kernel/tasks.c ****         }
8368:FreeRTOS-Kernel/tasks.c **** 
8369:FreeRTOS-Kernel/tasks.c ****         traceRETURN_ulTaskGetIdleRunTimeCounter( ulReturn );
8370:FreeRTOS-Kernel/tasks.c **** 
8371:FreeRTOS-Kernel/tasks.c ****         return ulReturn;
8372:FreeRTOS-Kernel/tasks.c ****     }
8373:FreeRTOS-Kernel/tasks.c **** 
8374:FreeRTOS-Kernel/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
8375:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8376:FreeRTOS-Kernel/tasks.c **** 
8377:FreeRTOS-Kernel/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
8378:FreeRTOS-Kernel/tasks.c **** 
8379:FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
8380:FreeRTOS-Kernel/tasks.c ****     {
8381:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
8382:FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter = 0;
8383:FreeRTOS-Kernel/tasks.c ****         BaseType_t i;
8384:FreeRTOS-Kernel/tasks.c **** 
8385:FreeRTOS-Kernel/tasks.c ****         traceENTER_ulTaskGetIdleRunTimePercent();
8386:FreeRTOS-Kernel/tasks.c **** 
8387:FreeRTOS-Kernel/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE() * configNUMBER_OF_CORES;
8388:FreeRTOS-Kernel/tasks.c **** 
8389:FreeRTOS-Kernel/tasks.c ****         /* For percentage calculations. */
8390:FreeRTOS-Kernel/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
8391:FreeRTOS-Kernel/tasks.c **** 
8392:FreeRTOS-Kernel/tasks.c ****         /* Avoid divide by zero errors. */
8393:FreeRTOS-Kernel/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
8394:FreeRTOS-Kernel/tasks.c ****         {
8395:FreeRTOS-Kernel/tasks.c ****             for( i = 0; i < ( BaseType_t ) configNUMBER_OF_CORES; i++ )
8396:FreeRTOS-Kernel/tasks.c ****             {
8397:FreeRTOS-Kernel/tasks.c ****                 ulRunTimeCounter += xIdleTaskHandles[ i ]->ulRunTimeCounter;
8398:FreeRTOS-Kernel/tasks.c ****             }
8399:FreeRTOS-Kernel/tasks.c **** 
8400:FreeRTOS-Kernel/tasks.c ****             ulReturn = ulRunTimeCounter / ulTotalTime;
8401:FreeRTOS-Kernel/tasks.c ****         }
8402:FreeRTOS-Kernel/tasks.c ****         else
8403:FreeRTOS-Kernel/tasks.c ****         {
8404:FreeRTOS-Kernel/tasks.c ****             ulReturn = 0;
8405:FreeRTOS-Kernel/tasks.c ****         }
8406:FreeRTOS-Kernel/tasks.c **** 
8407:FreeRTOS-Kernel/tasks.c ****         traceRETURN_ulTaskGetIdleRunTimePercent( ulReturn );
8408:FreeRTOS-Kernel/tasks.c **** 
8409:FreeRTOS-Kernel/tasks.c ****         return ulReturn;
8410:FreeRTOS-Kernel/tasks.c ****     }
8411:FreeRTOS-Kernel/tasks.c **** 
8412:FreeRTOS-Kernel/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
8413:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8414:FreeRTOS-Kernel/tasks.c **** 
8415:FreeRTOS-Kernel/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
8416:FreeRTOS-Kernel/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
8417:FreeRTOS-Kernel/tasks.c **** {
 958              		.loc 1 8417 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              		.loc 1 8417 1 is_stmt 0 view .LVU268
 963 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccJw1tyY.s 			page 173


 964              	.LCFI8:
 965              		.cfi_def_cfa_offset 24
 966              		.cfi_offset 4, -24
 967              		.cfi_offset 5, -20
 968              		.cfi_offset 6, -16
 969              		.cfi_offset 7, -12
 970              		.cfi_offset 8, -8
 971              		.cfi_offset 14, -4
 972 0004 0446     		mov	r4, r0
 973 0006 0D46     		mov	r5, r1
8418:FreeRTOS-Kernel/tasks.c ****     TickType_t xTimeToWake;
 974              		.loc 1 8418 5 is_stmt 1 view .LVU269
8419:FreeRTOS-Kernel/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 975              		.loc 1 8419 5 view .LVU270
 976              		.loc 1 8419 22 is_stmt 0 view .LVU271
 977 0008 254B     		ldr	r3, .L74
 978 000a 1E68     		ldr	r6, [r3]
 979              	.LVL68:
8420:FreeRTOS-Kernel/tasks.c ****     List_t * const pxDelayedList = pxDelayedTaskList;
 980              		.loc 1 8420 5 is_stmt 1 view .LVU272
 981              		.loc 1 8420 20 is_stmt 0 view .LVU273
 982 000c 254B     		ldr	r3, .L74+4
 983 000e 1F68     		ldr	r7, [r3]
 984              	.LVL69:
8421:FreeRTOS-Kernel/tasks.c ****     List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 985              		.loc 1 8421 5 is_stmt 1 view .LVU274
 986              		.loc 1 8421 20 is_stmt 0 view .LVU275
 987 0010 254B     		ldr	r3, .L74+8
 988 0012 D3F80080 		ldr	r8, [r3]
 989              	.LVL70:
8422:FreeRTOS-Kernel/tasks.c **** 
8423:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
8424:FreeRTOS-Kernel/tasks.c ****     {
8425:FreeRTOS-Kernel/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
8426:FreeRTOS-Kernel/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
8427:FreeRTOS-Kernel/tasks.c ****          * when the task leaves the Blocked state. */
8428:FreeRTOS-Kernel/tasks.c ****         pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
8429:FreeRTOS-Kernel/tasks.c ****     }
8430:FreeRTOS-Kernel/tasks.c ****     #endif
8431:FreeRTOS-Kernel/tasks.c **** 
8432:FreeRTOS-Kernel/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
8433:FreeRTOS-Kernel/tasks.c ****      * as the same list item is used for both lists. */
8434:FreeRTOS-Kernel/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 990              		.loc 1 8434 5 is_stmt 1 view .LVU276
 991              		.loc 1 8434 38 is_stmt 0 view .LVU277
 992 0016 254B     		ldr	r3, .L74+12
 993 0018 1868     		ldr	r0, [r3]
 994              	.LVL71:
 995              		.loc 1 8434 9 view .LVU278
 996 001a 0430     		adds	r0, r0, #4
 997 001c FFF7FEFF 		bl	uxListRemove
 998              	.LVL72:
 999              		.loc 1 8434 7 view .LVU279
 1000 0020 48B9     		cbnz	r0, .L68
8435:FreeRTOS-Kernel/tasks.c ****     {
8436:FreeRTOS-Kernel/tasks.c ****         /* The current task must be in a ready list, so there is no need to
8437:FreeRTOS-Kernel/tasks.c ****          * check, and the port reset macro can be called directly. */
ARM GAS  /tmp/ccJw1tyY.s 			page 174


8438:FreeRTOS-Kernel/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 1001              		.loc 1 8438 9 is_stmt 1 view .LVU280
 1002 0022 224B     		ldr	r3, .L74+12
 1003 0024 1B68     		ldr	r3, [r3]
 1004 0026 DB6A     		ldr	r3, [r3, #44]
 1005 0028 0122     		movs	r2, #1
 1006 002a 9A40     		lsls	r2, r2, r3
 1007 002c 2049     		ldr	r1, .L74+16
 1008 002e 0B68     		ldr	r3, [r1]
 1009 0030 23EA0203 		bic	r3, r3, r2
 1010 0034 0B60     		str	r3, [r1]
 1011              	.L68:
8439:FreeRTOS-Kernel/tasks.c ****     }
8440:FreeRTOS-Kernel/tasks.c ****     else
8441:FreeRTOS-Kernel/tasks.c ****     {
8442:FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 1012              		.loc 1 8442 33 view .LVU281
8443:FreeRTOS-Kernel/tasks.c ****     }
8444:FreeRTOS-Kernel/tasks.c **** 
8445:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
8446:FreeRTOS-Kernel/tasks.c ****     {
8447:FreeRTOS-Kernel/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 1013              		.loc 1 8447 9 view .LVU282
 1014              		.loc 1 8447 11 is_stmt 0 view .LVU283
 1015 0036 B4F1FF3F 		cmp	r4, #-1
 1016 003a 0DD0     		beq	.L73
 1017              	.L69:
8448:FreeRTOS-Kernel/tasks.c ****         {
8449:FreeRTOS-Kernel/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
8450:FreeRTOS-Kernel/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
8451:FreeRTOS-Kernel/tasks.c ****              * indefinitely. */
8452:FreeRTOS-Kernel/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
8453:FreeRTOS-Kernel/tasks.c ****         }
8454:FreeRTOS-Kernel/tasks.c ****         else
8455:FreeRTOS-Kernel/tasks.c ****         {
8456:FreeRTOS-Kernel/tasks.c ****             /* Calculate the time at which the task should be woken if the event
8457:FreeRTOS-Kernel/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
8458:FreeRTOS-Kernel/tasks.c ****              * kernel will manage it correctly. */
8459:FreeRTOS-Kernel/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 1018              		.loc 1 8459 13 is_stmt 1 view .LVU284
 1019              		.loc 1 8459 25 is_stmt 0 view .LVU285
 1020 003c 3444     		add	r4, r4, r6
 1021              	.LVL73:
8460:FreeRTOS-Kernel/tasks.c **** 
8461:FreeRTOS-Kernel/tasks.c ****             /* The list item will be inserted in wake time order. */
8462:FreeRTOS-Kernel/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 1022              		.loc 1 8462 13 is_stmt 1 view .LVU286
 1023 003e 1B4B     		ldr	r3, .L74+12
 1024 0040 1B68     		ldr	r3, [r3]
 1025 0042 5C60     		str	r4, [r3, #4]
8463:FreeRTOS-Kernel/tasks.c **** 
8464:FreeRTOS-Kernel/tasks.c ****             if( xTimeToWake < xConstTickCount )
 1026              		.loc 1 8464 13 view .LVU287
 1027              		.loc 1 8464 15 is_stmt 0 view .LVU288
 1028 0044 A642     		cmp	r6, r4
 1029 0046 1DD9     		bls	.L71
8465:FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  /tmp/ccJw1tyY.s 			page 175


8466:FreeRTOS-Kernel/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
8467:FreeRTOS-Kernel/tasks.c ****                  * list. */
8468:FreeRTOS-Kernel/tasks.c ****                 traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 1030              		.loc 1 8468 59 is_stmt 1 view .LVU289
8469:FreeRTOS-Kernel/tasks.c ****                 vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 1031              		.loc 1 8469 17 view .LVU290
 1032              		.loc 1 8469 68 is_stmt 0 view .LVU291
 1033 0048 184B     		ldr	r3, .L74+12
 1034 004a 1968     		ldr	r1, [r3]
 1035              		.loc 1 8469 17 view .LVU292
 1036 004c 0431     		adds	r1, r1, #4
 1037 004e 4046     		mov	r0, r8
 1038 0050 FFF7FEFF 		bl	vListInsert
 1039              	.LVL74:
 1040              	.L67:
8470:FreeRTOS-Kernel/tasks.c ****             }
8471:FreeRTOS-Kernel/tasks.c ****             else
8472:FreeRTOS-Kernel/tasks.c ****             {
8473:FreeRTOS-Kernel/tasks.c ****                 /* The wake time has not overflowed, so the current block list
8474:FreeRTOS-Kernel/tasks.c ****                  * is used. */
8475:FreeRTOS-Kernel/tasks.c ****                 traceMOVED_TASK_TO_DELAYED_LIST();
8476:FreeRTOS-Kernel/tasks.c ****                 vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
8477:FreeRTOS-Kernel/tasks.c **** 
8478:FreeRTOS-Kernel/tasks.c ****                 /* If the task entering the blocked state was placed at the
8479:FreeRTOS-Kernel/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
8480:FreeRTOS-Kernel/tasks.c ****                  * needs to be updated too. */
8481:FreeRTOS-Kernel/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
8482:FreeRTOS-Kernel/tasks.c ****                 {
8483:FreeRTOS-Kernel/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
8484:FreeRTOS-Kernel/tasks.c ****                 }
8485:FreeRTOS-Kernel/tasks.c ****                 else
8486:FreeRTOS-Kernel/tasks.c ****                 {
8487:FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
8488:FreeRTOS-Kernel/tasks.c ****                 }
8489:FreeRTOS-Kernel/tasks.c ****             }
8490:FreeRTOS-Kernel/tasks.c ****         }
8491:FreeRTOS-Kernel/tasks.c ****     }
8492:FreeRTOS-Kernel/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
8493:FreeRTOS-Kernel/tasks.c ****     {
8494:FreeRTOS-Kernel/tasks.c ****         /* Calculate the time at which the task should be woken if the event
8495:FreeRTOS-Kernel/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
8496:FreeRTOS-Kernel/tasks.c ****          * will manage it correctly. */
8497:FreeRTOS-Kernel/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
8498:FreeRTOS-Kernel/tasks.c **** 
8499:FreeRTOS-Kernel/tasks.c ****         /* The list item will be inserted in wake time order. */
8500:FreeRTOS-Kernel/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
8501:FreeRTOS-Kernel/tasks.c **** 
8502:FreeRTOS-Kernel/tasks.c ****         if( xTimeToWake < xConstTickCount )
8503:FreeRTOS-Kernel/tasks.c ****         {
8504:FreeRTOS-Kernel/tasks.c ****             traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
8505:FreeRTOS-Kernel/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
8506:FreeRTOS-Kernel/tasks.c ****             vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
8507:FreeRTOS-Kernel/tasks.c ****         }
8508:FreeRTOS-Kernel/tasks.c ****         else
8509:FreeRTOS-Kernel/tasks.c ****         {
8510:FreeRTOS-Kernel/tasks.c ****             traceMOVED_TASK_TO_DELAYED_LIST();
8511:FreeRTOS-Kernel/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
ARM GAS  /tmp/ccJw1tyY.s 			page 176


8512:FreeRTOS-Kernel/tasks.c ****             vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
8513:FreeRTOS-Kernel/tasks.c **** 
8514:FreeRTOS-Kernel/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
8515:FreeRTOS-Kernel/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
8516:FreeRTOS-Kernel/tasks.c ****              * too. */
8517:FreeRTOS-Kernel/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
8518:FreeRTOS-Kernel/tasks.c ****             {
8519:FreeRTOS-Kernel/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
8520:FreeRTOS-Kernel/tasks.c ****             }
8521:FreeRTOS-Kernel/tasks.c ****             else
8522:FreeRTOS-Kernel/tasks.c ****             {
8523:FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
8524:FreeRTOS-Kernel/tasks.c ****             }
8525:FreeRTOS-Kernel/tasks.c ****         }
8526:FreeRTOS-Kernel/tasks.c **** 
8527:FreeRTOS-Kernel/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
8528:FreeRTOS-Kernel/tasks.c ****         ( void ) xCanBlockIndefinitely;
8529:FreeRTOS-Kernel/tasks.c ****     }
8530:FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
8531:FreeRTOS-Kernel/tasks.c **** }
 1041              		.loc 1 8531 1 view .LVU293
 1042 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1043              	.LVL75:
 1044              	.L73:
8447:FreeRTOS-Kernel/tasks.c ****         {
 1045              		.loc 1 8447 47 discriminator 1 view .LVU294
 1046 0058 002D     		cmp	r5, #0
 1047 005a EFD0     		beq	.L69
8452:FreeRTOS-Kernel/tasks.c ****         }
 1048              		.loc 1 8452 13 is_stmt 1 view .LVU295
 1049              	.LBB189:
8452:FreeRTOS-Kernel/tasks.c ****         }
 1050              		.loc 1 8452 13 view .LVU296
 1051 005c 154A     		ldr	r2, .L74+20
 1052 005e 5168     		ldr	r1, [r2, #4]
 1053              	.LVL76:
8452:FreeRTOS-Kernel/tasks.c ****         }
 1054              		.loc 1 8452 13 view .LVU297
8452:FreeRTOS-Kernel/tasks.c ****         }
 1055              		.loc 1 8452 13 view .LVU298
8452:FreeRTOS-Kernel/tasks.c ****         }
 1056              		.loc 1 8452 13 view .LVU299
 1057 0060 124B     		ldr	r3, .L74+12
 1058 0062 1868     		ldr	r0, [r3]
 1059 0064 8160     		str	r1, [r0, #8]
8452:FreeRTOS-Kernel/tasks.c ****         }
 1060              		.loc 1 8452 13 view .LVU300
 1061 0066 1868     		ldr	r0, [r3]
 1062 0068 8C68     		ldr	r4, [r1, #8]
 1063              	.LVL77:
8452:FreeRTOS-Kernel/tasks.c ****         }
 1064              		.loc 1 8452 13 is_stmt 0 view .LVU301
 1065 006a C460     		str	r4, [r0, #12]
8452:FreeRTOS-Kernel/tasks.c ****         }
 1066              		.loc 1 8452 13 is_stmt 1 view .LVU302
 1067 006c 1868     		ldr	r0, [r3]
 1068 006e 0430     		adds	r0, r0, #4
ARM GAS  /tmp/ccJw1tyY.s 			page 177


 1069 0070 6060     		str	r0, [r4, #4]
8452:FreeRTOS-Kernel/tasks.c ****         }
 1070              		.loc 1 8452 13 view .LVU303
 1071 0072 1868     		ldr	r0, [r3]
 1072 0074 0430     		adds	r0, r0, #4
 1073 0076 8860     		str	r0, [r1, #8]
8452:FreeRTOS-Kernel/tasks.c ****         }
 1074              		.loc 1 8452 13 view .LVU304
 1075 0078 1B68     		ldr	r3, [r3]
 1076 007a 5A61     		str	r2, [r3, #20]
8452:FreeRTOS-Kernel/tasks.c ****         }
 1077              		.loc 1 8452 13 view .LVU305
 1078 007c 1368     		ldr	r3, [r2]
 1079 007e 0133     		adds	r3, r3, #1
 1080 0080 1360     		str	r3, [r2]
 1081              	.LBE189:
8452:FreeRTOS-Kernel/tasks.c ****         }
 1082              		.loc 1 8452 13 view .LVU306
 1083 0082 E7E7     		b	.L67
 1084              	.LVL78:
 1085              	.L71:
8475:FreeRTOS-Kernel/tasks.c ****                 vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 1086              		.loc 1 8475 50 view .LVU307
8476:FreeRTOS-Kernel/tasks.c **** 
 1087              		.loc 1 8476 17 view .LVU308
8476:FreeRTOS-Kernel/tasks.c **** 
 1088              		.loc 1 8476 60 is_stmt 0 view .LVU309
 1089 0084 094B     		ldr	r3, .L74+12
 1090 0086 1968     		ldr	r1, [r3]
8476:FreeRTOS-Kernel/tasks.c **** 
 1091              		.loc 1 8476 17 view .LVU310
 1092 0088 0431     		adds	r1, r1, #4
 1093 008a 3846     		mov	r0, r7
 1094 008c FFF7FEFF 		bl	vListInsert
 1095              	.LVL79:
8481:FreeRTOS-Kernel/tasks.c ****                 {
 1096              		.loc 1 8481 17 is_stmt 1 view .LVU311
8481:FreeRTOS-Kernel/tasks.c ****                 {
 1097              		.loc 1 8481 33 is_stmt 0 view .LVU312
 1098 0090 094B     		ldr	r3, .L74+24
 1099 0092 1B68     		ldr	r3, [r3]
8481:FreeRTOS-Kernel/tasks.c ****                 {
 1100              		.loc 1 8481 19 view .LVU313
 1101 0094 A342     		cmp	r3, r4
 1102 0096 DDD9     		bls	.L67
8483:FreeRTOS-Kernel/tasks.c ****                 }
 1103              		.loc 1 8483 21 is_stmt 1 view .LVU314
8483:FreeRTOS-Kernel/tasks.c ****                 }
 1104              		.loc 1 8483 42 is_stmt 0 view .LVU315
 1105 0098 074B     		ldr	r3, .L74+24
 1106 009a 1C60     		str	r4, [r3]
8487:FreeRTOS-Kernel/tasks.c ****                 }
 1107              		.loc 1 8487 45 is_stmt 1 view .LVU316
 1108              		.loc 1 8531 1 is_stmt 0 view .LVU317
 1109 009c DAE7     		b	.L67
 1110              	.L75:
 1111 009e 00BF     		.align	2
ARM GAS  /tmp/ccJw1tyY.s 			page 178


 1112              	.L74:
 1113 00a0 00000000 		.word	xTickCount
 1114 00a4 00000000 		.word	pxDelayedTaskList
 1115 00a8 00000000 		.word	pxOverflowDelayedTaskList
 1116 00ac 00000000 		.word	pxCurrentTCB
 1117 00b0 00000000 		.word	uxTopReadyPriority
 1118 00b4 00000000 		.word	xSuspendedTaskList
 1119 00b8 00000000 		.word	xNextTaskUnblockTime
 1120              		.cfi_endproc
 1121              	.LFE63:
 1123              		.section	.text.xTaskCreateStatic,"ax",%progbits
 1124              		.align	1
 1125              		.global	xTaskCreateStatic
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1130              	xTaskCreateStatic:
 1131              	.LVL80:
 1132              	.LFB6:
1316:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn = NULL;
 1133              		.loc 1 1316 5 is_stmt 1 view -0
 1134              		.cfi_startproc
 1135              		@ args = 12, pretend = 0, frame = 8
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
1316:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn = NULL;
 1137              		.loc 1 1316 5 is_stmt 0 view .LVU319
 1138 0000 10B5     		push	{r4, lr}
 1139              	.LCFI9:
 1140              		.cfi_def_cfa_offset 8
 1141              		.cfi_offset 4, -8
 1142              		.cfi_offset 14, -4
 1143 0002 86B0     		sub	sp, sp, #24
 1144              	.LCFI10:
 1145              		.cfi_def_cfa_offset 32
1317:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 1146              		.loc 1 1317 9 is_stmt 1 view .LVU320
1317:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 1147              		.loc 1 1317 22 is_stmt 0 view .LVU321
 1148 0004 0024     		movs	r4, #0
 1149 0006 0594     		str	r4, [sp, #20]
1318:FreeRTOS-Kernel/tasks.c **** 
 1150              		.loc 1 1318 9 is_stmt 1 view .LVU322
1320:FreeRTOS-Kernel/tasks.c **** 
 1151              		.loc 1 1320 129 view .LVU323
1322:FreeRTOS-Kernel/tasks.c **** 
 1152              		.loc 1 1322 9 view .LVU324
1322:FreeRTOS-Kernel/tasks.c **** 
 1153              		.loc 1 1322 20 is_stmt 0 view .LVU325
 1154 0008 05AC     		add	r4, sp, #20
 1155 000a 0394     		str	r4, [sp, #12]
 1156 000c 0A9C     		ldr	r4, [sp, #40]
 1157 000e 0294     		str	r4, [sp, #8]
 1158 0010 099C     		ldr	r4, [sp, #36]
 1159 0012 0194     		str	r4, [sp, #4]
 1160 0014 089C     		ldr	r4, [sp, #32]
 1161 0016 0094     		str	r4, [sp]
 1162 0018 FFF7FEFF 		bl	prvCreateStaticTask
ARM GAS  /tmp/ccJw1tyY.s 			page 179


 1163              	.LVL81:
1324:FreeRTOS-Kernel/tasks.c ****         {
 1164              		.loc 1 1324 9 is_stmt 1 view .LVU326
1324:FreeRTOS-Kernel/tasks.c ****         {
 1165              		.loc 1 1324 11 is_stmt 0 view .LVU327
 1166 001c 08B1     		cbz	r0, .L77
1333:FreeRTOS-Kernel/tasks.c ****         }
 1167              		.loc 1 1333 13 is_stmt 1 view .LVU328
 1168 001e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1169              	.LVL82:
 1170              	.L77:
1337:FreeRTOS-Kernel/tasks.c ****         }
 1171              		.loc 1 1337 37 view .LVU329
1340:FreeRTOS-Kernel/tasks.c **** 
 1172              		.loc 1 1340 49 view .LVU330
1342:FreeRTOS-Kernel/tasks.c ****     }
 1173              		.loc 1 1342 9 view .LVU331
1343:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1174              		.loc 1 1343 5 is_stmt 0 view .LVU332
 1175 0022 0598     		ldr	r0, [sp, #20]
 1176 0024 06B0     		add	sp, sp, #24
 1177              	.LCFI11:
 1178              		.cfi_def_cfa_offset 8
 1179              		@ sp needed
 1180 0026 10BD     		pop	{r4, pc}
1343:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1181              		.loc 1 1343 5 view .LVU333
 1182              		.cfi_endproc
 1183              	.LFE6:
 1185              		.section	.rodata.prvCreateIdleTasks.str1.4,"aMS",%progbits,1
 1186              		.align	2
 1187              	.LC0:
 1188 0000 49444C45 		.ascii	"IDLE\000"
 1188      00
 1189              		.section	.text.prvCreateIdleTasks,"ax",%progbits
 1190              		.align	1
 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1195              	prvCreateIdleTasks:
 1196              	.LFB21:
3512:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn = pdPASS;
 1197              		.loc 1 3512 1 is_stmt 1 view -0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 32
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201 0000 30B5     		push	{r4, r5, lr}
 1202              	.LCFI12:
 1203              		.cfi_def_cfa_offset 12
 1204              		.cfi_offset 4, -12
 1205              		.cfi_offset 5, -8
 1206              		.cfi_offset 14, -4
 1207 0002 8DB0     		sub	sp, sp, #52
 1208              	.LCFI13:
 1209              		.cfi_def_cfa_offset 64
3513:FreeRTOS-Kernel/tasks.c ****     BaseType_t xCoreID;
 1210              		.loc 1 3513 5 view .LVU335
ARM GAS  /tmp/ccJw1tyY.s 			page 180


 1211              	.LVL83:
3514:FreeRTOS-Kernel/tasks.c ****     char cIdleName[ configMAX_TASK_NAME_LEN ];
 1212              		.loc 1 3514 5 view .LVU336
3515:FreeRTOS-Kernel/tasks.c ****     TaskFunction_t pxIdleTaskFunction = NULL;
 1213              		.loc 1 3515 5 view .LVU337
3516:FreeRTOS-Kernel/tasks.c ****     BaseType_t xIdleTaskNameIndex;
 1214              		.loc 1 3516 5 view .LVU338
3517:FreeRTOS-Kernel/tasks.c **** 
 1215              		.loc 1 3517 5 view .LVU339
3519:FreeRTOS-Kernel/tasks.c ****     {
 1216              		.loc 1 3519 5 view .LVU340
3519:FreeRTOS-Kernel/tasks.c ****     {
 1217              		.loc 1 3519 29 is_stmt 0 view .LVU341
 1218 0004 0023     		movs	r3, #0
 1219              	.LVL84:
 1220              	.L80:
3519:FreeRTOS-Kernel/tasks.c ****     {
 1221              		.loc 1 3519 68 is_stmt 1 discriminator 1 view .LVU342
 1222 0006 0F2B     		cmp	r3, #15
 1223 0008 09DC     		bgt	.L81
3521:FreeRTOS-Kernel/tasks.c **** 
 1224              		.loc 1 3521 9 view .LVU343
3521:FreeRTOS-Kernel/tasks.c **** 
 1225              		.loc 1 3521 63 is_stmt 0 view .LVU344
 1226 000a 154A     		ldr	r2, .L88
 1227 000c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
3521:FreeRTOS-Kernel/tasks.c **** 
 1228              		.loc 1 3521 41 view .LVU345
 1229 000e 03F13001 		add	r1, r3, #48
 1230 0012 6944     		add	r1, sp, r1
 1231 0014 01F8102C 		strb	r2, [r1, #-16]
3526:FreeRTOS-Kernel/tasks.c ****         {
 1232              		.loc 1 3526 9 is_stmt 1 view .LVU346
3526:FreeRTOS-Kernel/tasks.c ****         {
 1233              		.loc 1 3526 11 is_stmt 0 view .LVU347
 1234 0018 0AB1     		cbz	r2, .L81
3532:FreeRTOS-Kernel/tasks.c ****         }
 1235              		.loc 1 3532 37 is_stmt 1 discriminator 2 view .LVU348
3519:FreeRTOS-Kernel/tasks.c ****     {
 1236              		.loc 1 3519 128 discriminator 2 view .LVU349
 1237 001a 0133     		adds	r3, r3, #1
 1238              	.LVL85:
3519:FreeRTOS-Kernel/tasks.c ****     {
 1239              		.loc 1 3519 128 is_stmt 0 discriminator 2 view .LVU350
 1240 001c F3E7     		b	.L80
 1241              	.L81:
3519:FreeRTOS-Kernel/tasks.c ****     {
 1242              		.loc 1 3519 29 discriminator 1 view .LVU351
 1243 001e 0024     		movs	r4, #0
 1244              	.LVL86:
 1245              	.L83:
3537:FreeRTOS-Kernel/tasks.c ****     {
 1246              		.loc 1 3537 46 is_stmt 1 discriminator 1 view .LVU352
 1247 0020 002C     		cmp	r4, #0
 1248 0022 02DD     		ble	.L86
 1249 0024 0120     		movs	r0, #1
3660:FreeRTOS-Kernel/tasks.c **** }
ARM GAS  /tmp/ccJw1tyY.s 			page 181


 1250              		.loc 1 3660 5 view .LVU353
 1251              	.LVL87:
 1252              	.L79:
3661:FreeRTOS-Kernel/tasks.c **** 
 1253              		.loc 1 3661 1 is_stmt 0 view .LVU354
 1254 0026 0DB0     		add	sp, sp, #52
 1255              	.LCFI14:
 1256              		.cfi_remember_state
 1257              		.cfi_def_cfa_offset 12
 1258              		@ sp needed
 1259 0028 30BD     		pop	{r4, r5, pc}
 1260              	.LVL88:
 1261              	.L86:
 1262              	.LCFI15:
 1263              		.cfi_restore_state
3541:FreeRTOS-Kernel/tasks.c ****         }
 1264              		.loc 1 3541 13 is_stmt 1 view .LVU355
 1265              	.LBB190:
3588:FreeRTOS-Kernel/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 1266              		.loc 1 3588 13 view .LVU356
3588:FreeRTOS-Kernel/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 1267              		.loc 1 3588 28 is_stmt 0 view .LVU357
 1268 002a 0025     		movs	r5, #0
 1269 002c 0595     		str	r5, [sp, #20]
3589:FreeRTOS-Kernel/tasks.c ****             configSTACK_DEPTH_TYPE uxIdleTaskStackSize;
 1270              		.loc 1 3589 13 is_stmt 1 view .LVU358
3589:FreeRTOS-Kernel/tasks.c ****             configSTACK_DEPTH_TYPE uxIdleTaskStackSize;
 1271              		.loc 1 3589 27 is_stmt 0 view .LVU359
 1272 002e 0695     		str	r5, [sp, #24]
3590:FreeRTOS-Kernel/tasks.c **** 
 1273              		.loc 1 3590 13 is_stmt 1 view .LVU360
3596:FreeRTOS-Kernel/tasks.c ****             }
 1274              		.loc 1 3596 17 view .LVU361
 1275 0030 07AA     		add	r2, sp, #28
 1276 0032 06A9     		add	r1, sp, #24
 1277 0034 05A8     		add	r0, sp, #20
 1278 0036 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1279              	.LVL89:
3610:FreeRTOS-Kernel/tasks.c ****                                                              cIdleName,
 1280              		.loc 1 3610 13 view .LVU362
3610:FreeRTOS-Kernel/tasks.c ****                                                              cIdleName,
 1281              		.loc 1 3610 43 is_stmt 0 view .LVU363
 1282 003a 059B     		ldr	r3, [sp, #20]
 1283 003c 0293     		str	r3, [sp, #8]
 1284 003e 069B     		ldr	r3, [sp, #24]
 1285 0040 0193     		str	r3, [sp, #4]
 1286 0042 0095     		str	r5, [sp]
 1287 0044 2B46     		mov	r3, r5
 1288 0046 079A     		ldr	r2, [sp, #28]
 1289 0048 08A9     		add	r1, sp, #32
 1290 004a 0648     		ldr	r0, .L88+4
 1291 004c FFF7FEFF 		bl	xTaskCreateStatic
 1292              	.LVL90:
3610:FreeRTOS-Kernel/tasks.c ****                                                              cIdleName,
 1293              		.loc 1 3610 41 view .LVU364
 1294 0050 054B     		ldr	r3, .L88+8
 1295 0052 43F82400 		str	r0, [r3, r4, lsl #2]
ARM GAS  /tmp/ccJw1tyY.s 			page 182


3618:FreeRTOS-Kernel/tasks.c ****             {
 1296              		.loc 1 3618 13 is_stmt 1 view .LVU365
3618:FreeRTOS-Kernel/tasks.c ****             {
 1297              		.loc 1 3618 15 is_stmt 0 view .LVU366
 1298 0056 08B1     		cbz	r0, .L84
3618:FreeRTOS-Kernel/tasks.c ****             {
 1299              		.loc 1 3618 15 view .LVU367
 1300              	.LBE190:
3640:FreeRTOS-Kernel/tasks.c ****         {
 1301              		.loc 1 3640 9 is_stmt 1 view .LVU368
3648:FreeRTOS-Kernel/tasks.c ****             }
 1302              		.loc 1 3648 41 view .LVU369
3537:FreeRTOS-Kernel/tasks.c ****     {
 1303              		.loc 1 3537 93 view .LVU370
 1304 0058 0134     		adds	r4, r4, #1
 1305              	.LVL91:
3537:FreeRTOS-Kernel/tasks.c ****     {
 1306              		.loc 1 3537 93 is_stmt 0 view .LVU371
 1307 005a E1E7     		b	.L83
 1308              	.L84:
 1309              	.LBB191:
3624:FreeRTOS-Kernel/tasks.c ****             }
 1310              		.loc 1 3624 17 is_stmt 1 view .LVU372
 1311              	.LVL92:
3624:FreeRTOS-Kernel/tasks.c ****             }
 1312              		.loc 1 3624 17 is_stmt 0 view .LVU373
 1313              	.LBE191:
3640:FreeRTOS-Kernel/tasks.c ****         {
 1314              		.loc 1 3640 9 is_stmt 1 view .LVU374
 1315              	.LBB192:
3624:FreeRTOS-Kernel/tasks.c ****             }
 1316              		.loc 1 3624 25 is_stmt 0 view .LVU375
 1317 005c 0020     		movs	r0, #0
 1318 005e E2E7     		b	.L79
 1319              	.L89:
 1320              		.align	2
 1321              	.L88:
 1322 0060 00000000 		.word	.LC0
 1323 0064 00000000 		.word	prvIdleTask
 1324 0068 00000000 		.word	xIdleTaskHandles
 1325              	.LBE192:
 1326              		.cfi_endproc
 1327              	.LFE21:
 1329              		.section	.text.vTaskDelete,"ax",%progbits
 1330              		.align	1
 1331              		.global	vTaskDelete
 1332              		.syntax unified
 1333              		.thumb
 1334              		.thumb_func
 1336              	vTaskDelete:
 1337              	.LVL93:
 1338              	.LFB9:
2192:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 1339              		.loc 1 2192 5 is_stmt 1 view -0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 0
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccJw1tyY.s 			page 183


2192:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 1343              		.loc 1 2192 5 is_stmt 0 view .LVU377
 1344 0000 38B5     		push	{r3, r4, r5, lr}
 1345              	.LCFI16:
 1346              		.cfi_def_cfa_offset 16
 1347              		.cfi_offset 3, -16
 1348              		.cfi_offset 4, -12
 1349              		.cfi_offset 5, -8
 1350              		.cfi_offset 14, -4
 1351 0002 0446     		mov	r4, r0
2193:FreeRTOS-Kernel/tasks.c ****         BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 1352              		.loc 1 2193 9 is_stmt 1 view .LVU378
2194:FreeRTOS-Kernel/tasks.c ****         BaseType_t xTaskIsRunningOrYielding;
 1353              		.loc 1 2194 9 view .LVU379
 1354              	.LVL94:
2195:FreeRTOS-Kernel/tasks.c **** 
 1355              		.loc 1 2195 9 view .LVU380
2197:FreeRTOS-Kernel/tasks.c **** 
 1356              		.loc 1 2197 48 view .LVU381
2199:FreeRTOS-Kernel/tasks.c ****         {
 1357              		.loc 1 2199 9 view .LVU382
 1358 0004 FFF7FEFF 		bl	vPortEnterCritical
 1359              	.LVL95:
2203:FreeRTOS-Kernel/tasks.c **** 
 1360              		.loc 1 2203 13 view .LVU383
2203:FreeRTOS-Kernel/tasks.c **** 
 1361              		.loc 1 2203 21 is_stmt 0 view .LVU384
 1362 0008 002C     		cmp	r4, #0
 1363 000a 35D0     		beq	.L102
 1364              	.LVL96:
 1365              	.L91:
2206:FreeRTOS-Kernel/tasks.c ****             {
 1366              		.loc 1 2206 13 is_stmt 1 discriminator 4 view .LVU385
2206:FreeRTOS-Kernel/tasks.c ****             {
 1367              		.loc 1 2206 17 is_stmt 0 discriminator 4 view .LVU386
 1368 000c 251D     		adds	r5, r4, #4
 1369 000e 2846     		mov	r0, r5
 1370 0010 FFF7FEFF 		bl	uxListRemove
 1371              	.LVL97:
2206:FreeRTOS-Kernel/tasks.c ****             {
 1372              		.loc 1 2206 15 discriminator 4 view .LVU387
 1373 0014 68B9     		cbnz	r0, .L92
2208:FreeRTOS-Kernel/tasks.c ****             }
 1374              		.loc 1 2208 17 is_stmt 1 view .LVU388
2208:FreeRTOS-Kernel/tasks.c ****             }
 1375              		.loc 1 2208 17 view .LVU389
 1376 0016 E36A     		ldr	r3, [r4, #44]
 1377 0018 03EB8301 		add	r1, r3, r3, lsl #2
 1378 001c 2A4A     		ldr	r2, .L106
 1379 001e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 1380 0022 32B9     		cbnz	r2, .L92
2208:FreeRTOS-Kernel/tasks.c ****             }
 1381              		.loc 1 2208 17 discriminator 1 view .LVU390
 1382 0024 0122     		movs	r2, #1
 1383 0026 9A40     		lsls	r2, r2, r3
 1384 0028 2849     		ldr	r1, .L106+4
 1385 002a 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccJw1tyY.s 			page 184


 1386 002c 23EA0203 		bic	r3, r3, r2
 1387 0030 0B60     		str	r3, [r1]
 1388              	.L92:
2212:FreeRTOS-Kernel/tasks.c ****             }
 1389              		.loc 1 2212 41 view .LVU391
2216:FreeRTOS-Kernel/tasks.c ****             {
 1390              		.loc 1 2216 13 view .LVU392
2216:FreeRTOS-Kernel/tasks.c ****             {
 1391              		.loc 1 2216 17 is_stmt 0 view .LVU393
 1392 0032 A36A     		ldr	r3, [r4, #40]
2216:FreeRTOS-Kernel/tasks.c ****             {
 1393              		.loc 1 2216 15 view .LVU394
 1394 0034 1BB1     		cbz	r3, .L93
2218:FreeRTOS-Kernel/tasks.c ****             }
 1395              		.loc 1 2218 17 is_stmt 1 view .LVU395
2218:FreeRTOS-Kernel/tasks.c ****             }
 1396              		.loc 1 2218 26 is_stmt 0 view .LVU396
 1397 0036 04F11800 		add	r0, r4, #24
 1398 003a FFF7FEFF 		bl	uxListRemove
 1399              	.LVL98:
 1400              	.L93:
2222:FreeRTOS-Kernel/tasks.c ****             }
 1401              		.loc 1 2222 41 is_stmt 1 view .LVU397
2229:FreeRTOS-Kernel/tasks.c **** 
 1402              		.loc 1 2229 13 view .LVU398
2229:FreeRTOS-Kernel/tasks.c **** 
 1403              		.loc 1 2229 25 is_stmt 0 view .LVU399
 1404 003e 244A     		ldr	r2, .L106+8
 1405 0040 1368     		ldr	r3, [r2]
 1406 0042 0133     		adds	r3, r3, #1
 1407 0044 1360     		str	r3, [r2]
2234:FreeRTOS-Kernel/tasks.c **** 
 1408              		.loc 1 2234 13 is_stmt 1 view .LVU400
2234:FreeRTOS-Kernel/tasks.c **** 
 1409              		.loc 1 2234 40 is_stmt 0 view .LVU401
 1410 0046 234B     		ldr	r3, .L106+12
 1411 0048 1B68     		ldr	r3, [r3]
 1412 004a A342     		cmp	r3, r4
 1413 004c 17D0     		beq	.L103
 1414 004e 0022     		movs	r2, #0
 1415              	.L94:
 1416              	.LVL99:
2239:FreeRTOS-Kernel/tasks.c ****             {
 1417              		.loc 1 2239 13 is_stmt 1 discriminator 4 view .LVU402
2239:FreeRTOS-Kernel/tasks.c ****             {
 1418              		.loc 1 2239 37 is_stmt 0 discriminator 4 view .LVU403
 1419 0050 214B     		ldr	r3, .L106+16
 1420 0052 1B68     		ldr	r3, [r3]
2239:FreeRTOS-Kernel/tasks.c ****             {
 1421              		.loc 1 2239 15 discriminator 4 view .LVU404
 1422 0054 03B1     		cbz	r3, .L95
2239:FreeRTOS-Kernel/tasks.c ****             {
 1423              		.loc 1 2239 50 discriminator 1 view .LVU405
 1424 0056 A2B9     		cbnz	r2, .L104
 1425              	.L95:
2298:FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1426              		.loc 1 2298 17 is_stmt 1 view .LVU406
ARM GAS  /tmp/ccJw1tyY.s 			page 185


 1427 0058 204A     		ldr	r2, .L106+20
 1428              	.LVL100:
2298:FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1429              		.loc 1 2298 17 is_stmt 0 view .LVU407
 1430 005a 1368     		ldr	r3, [r2]
 1431 005c 013B     		subs	r3, r3, #1
 1432 005e 1360     		str	r3, [r2]
2299:FreeRTOS-Kernel/tasks.c **** 
 1433              		.loc 1 2299 42 is_stmt 1 view .LVU408
2303:FreeRTOS-Kernel/tasks.c ****             }
 1434              		.loc 1 2303 17 view .LVU409
 1435 0060 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1436              	.LVL101:
2306:FreeRTOS-Kernel/tasks.c **** 
 1437              		.loc 1 2306 9 view .LVU410
 1438 0064 FFF7FEFF 		bl	vPortExitCritical
 1439              	.LVL102:
2311:FreeRTOS-Kernel/tasks.c ****         {
 1440              		.loc 1 2311 9 view .LVU411
2313:FreeRTOS-Kernel/tasks.c ****         }
 1441              		.loc 1 2313 13 view .LVU412
 1442              	.L96:
2320:FreeRTOS-Kernel/tasks.c ****             {
 1443              		.loc 1 2320 13 view .LVU413
2320:FreeRTOS-Kernel/tasks.c ****             {
 1444              		.loc 1 2320 35 is_stmt 0 view .LVU414
 1445 0068 1B4B     		ldr	r3, .L106+16
 1446 006a 1B68     		ldr	r3, [r3]
2320:FreeRTOS-Kernel/tasks.c ****             {
 1447              		.loc 1 2320 15 view .LVU415
 1448 006c 1BB1     		cbz	r3, .L90
2322:FreeRTOS-Kernel/tasks.c ****                 {
 1449              		.loc 1 2322 17 is_stmt 1 view .LVU416
2322:FreeRTOS-Kernel/tasks.c ****                 {
 1450              		.loc 1 2322 27 is_stmt 0 view .LVU417
 1451 006e 194B     		ldr	r3, .L106+12
 1452 0070 1B68     		ldr	r3, [r3]
2322:FreeRTOS-Kernel/tasks.c ****                 {
 1453              		.loc 1 2322 19 view .LVU418
 1454 0072 A342     		cmp	r3, r4
 1455 0074 10D0     		beq	.L105
 1456              	.L90:
2336:FreeRTOS-Kernel/tasks.c **** 
 1457              		.loc 1 2336 5 view .LVU419
 1458 0076 38BD     		pop	{r3, r4, r5, pc}
 1459              	.LVL103:
 1460              	.L102:
2203:FreeRTOS-Kernel/tasks.c **** 
 1461              		.loc 1 2203 21 discriminator 1 view .LVU420
 1462 0078 164B     		ldr	r3, .L106+12
 1463 007a 1C68     		ldr	r4, [r3]
 1464              	.LVL104:
2203:FreeRTOS-Kernel/tasks.c **** 
 1465              		.loc 1 2203 21 discriminator 1 view .LVU421
 1466 007c C6E7     		b	.L91
 1467              	.LVL105:
 1468              	.L103:
ARM GAS  /tmp/ccJw1tyY.s 			page 186


2234:FreeRTOS-Kernel/tasks.c **** 
 1469              		.loc 1 2234 40 view .LVU422
 1470 007e 0122     		movs	r2, #1
 1471 0080 E6E7     		b	.L94
 1472              	.LVL106:
 1473              	.L104:
2247:FreeRTOS-Kernel/tasks.c **** 
 1474              		.loc 1 2247 17 is_stmt 1 view .LVU423
 1475 0082 2946     		mov	r1, r5
 1476 0084 1648     		ldr	r0, .L106+24
 1477 0086 FFF7FEFF 		bl	vListInsertEnd
 1478              	.LVL107:
2252:FreeRTOS-Kernel/tasks.c **** 
 1479              		.loc 1 2252 17 view .LVU424
 1480 008a 164A     		ldr	r2, .L106+28
 1481 008c 1368     		ldr	r3, [r2]
 1482 008e 0133     		adds	r3, r3, #1
 1483 0090 1360     		str	r3, [r2]
2256:FreeRTOS-Kernel/tasks.c **** 
 1484              		.loc 1 2256 42 view .LVU425
2259:FreeRTOS-Kernel/tasks.c **** 
 1485              		.loc 1 2259 17 view .LVU426
 1486              	.LVL108:
2267:FreeRTOS-Kernel/tasks.c ****                 #else
 1487              		.loc 1 2267 80 view .LVU427
2306:FreeRTOS-Kernel/tasks.c **** 
 1488              		.loc 1 2306 9 view .LVU428
 1489 0092 FFF7FEFF 		bl	vPortExitCritical
 1490              	.LVL109:
2311:FreeRTOS-Kernel/tasks.c ****         {
 1491              		.loc 1 2311 9 view .LVU429
 1492 0096 E7E7     		b	.L96
 1493              	.LVL110:
 1494              	.L105:
2324:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_WITHIN_API();
 1495              		.loc 1 2324 21 view .LVU430
 1496 0098 134B     		ldr	r3, .L106+32
 1497 009a 1B68     		ldr	r3, [r3]
 1498 009c 43B1     		cbz	r3, .L98
2324:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_WITHIN_API();
 1499              		.loc 1 2324 21 view .LVU431
 1500              	.LBB193:
 1501              	.LBI193:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1502              		.loc 2 213 30 view .LVU432
 1503              	.LBB194:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1504              		.loc 2 215 5 view .LVU433
 1505              		.loc 2 217 5 view .LVU434
 1506              		.syntax unified
 1507              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1508 009e 4FF05003 		   mov r3, #80                                              
 1509 00a2 83F31188 	   msr basepri, r3                                         
 1510 00a6 BFF36F8F 	   isb                                                     
 1511 00aa BFF34F8F 	   dsb                                                     
 1512              	
 1513              	@ 0 "" 2
ARM GAS  /tmp/ccJw1tyY.s 			page 187


 1514              	.LVL111:
 1515              		.thumb
 1516              		.syntax unified
 1517              	.L99:
 1518              		.loc 2 217 5 is_stmt 0 view .LVU435
 1519              	.LBE194:
 1520              	.LBE193:
2324:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_WITHIN_API();
 1521              		.loc 1 2324 21 is_stmt 1 discriminator 1 view .LVU436
2324:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_WITHIN_API();
 1522              		.loc 1 2324 21 discriminator 1 view .LVU437
 1523 00ae FEE7     		b	.L99
 1524              	.L98:
2324:FreeRTOS-Kernel/tasks.c ****                     taskYIELD_WITHIN_API();
 1525              		.loc 1 2324 62 discriminator 2 view .LVU438
2325:FreeRTOS-Kernel/tasks.c ****                 }
 1526              		.loc 1 2325 21 discriminator 2 view .LVU439
 1527 00b0 4FF0E023 		mov	r3, #-536813568
 1528 00b4 4FF08052 		mov	r2, #268435456
 1529 00b8 C3F8042D 		str	r2, [r3, #3332]
2325:FreeRTOS-Kernel/tasks.c ****                 }
 1530              		.loc 1 2325 21 discriminator 2 view .LVU440
 1531              		.syntax unified
 1532              	@ 2325 "FreeRTOS-Kernel/tasks.c" 1
 1533 00bc BFF34F8F 		dsb
 1534              	@ 0 "" 2
2325:FreeRTOS-Kernel/tasks.c ****                 }
 1535              		.loc 1 2325 21 discriminator 2 view .LVU441
 1536              	@ 2325 "FreeRTOS-Kernel/tasks.c" 1
 1537 00c0 BFF36F8F 		isb
 1538              	@ 0 "" 2
2325:FreeRTOS-Kernel/tasks.c ****                 }
 1539              		.loc 1 2325 43 discriminator 2 view .LVU442
2329:FreeRTOS-Kernel/tasks.c ****                 }
 1540              		.loc 1 2329 45 discriminator 2 view .LVU443
2335:FreeRTOS-Kernel/tasks.c ****     }
 1541              		.loc 1 2335 34 discriminator 2 view .LVU444
2336:FreeRTOS-Kernel/tasks.c **** 
 1542              		.loc 1 2336 5 is_stmt 0 discriminator 2 view .LVU445
 1543              		.thumb
 1544              		.syntax unified
 1545 00c4 D7E7     		b	.L90
 1546              	.L107:
 1547 00c6 00BF     		.align	2
 1548              	.L106:
 1549 00c8 00000000 		.word	pxReadyTasksLists
 1550 00cc 00000000 		.word	uxTopReadyPriority
 1551 00d0 00000000 		.word	uxTaskNumber
 1552 00d4 00000000 		.word	pxCurrentTCB
 1553 00d8 00000000 		.word	xSchedulerRunning
 1554 00dc 00000000 		.word	uxCurrentNumberOfTasks
 1555 00e0 00000000 		.word	xTasksWaitingTermination
 1556 00e4 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1557 00e8 00000000 		.word	uxSchedulerSuspended
 1558              		.cfi_endproc
 1559              	.LFE9:
 1561              		.section	.text.uxTaskPriorityGet,"ax",%progbits
ARM GAS  /tmp/ccJw1tyY.s 			page 188


 1562              		.align	1
 1563              		.global	uxTaskPriorityGet
 1564              		.syntax unified
 1565              		.thumb
 1566              		.thumb_func
 1568              	uxTaskPriorityGet:
 1569              	.LVL112:
 1570              	.LFB12:
2618:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1571              		.loc 1 2618 5 is_stmt 1 view -0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 0
 1574              		@ frame_needed = 0, uses_anonymous_args = 0
2618:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1575              		.loc 1 2618 5 is_stmt 0 view .LVU447
 1576 0000 10B5     		push	{r4, lr}
 1577              	.LCFI17:
 1578              		.cfi_def_cfa_offset 8
 1579              		.cfi_offset 4, -8
 1580              		.cfi_offset 14, -4
 1581 0002 0446     		mov	r4, r0
2619:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
 1582              		.loc 1 2619 9 is_stmt 1 view .LVU448
2620:FreeRTOS-Kernel/tasks.c **** 
 1583              		.loc 1 2620 9 view .LVU449
2622:FreeRTOS-Kernel/tasks.c **** 
 1584              		.loc 1 2622 46 view .LVU450
2624:FreeRTOS-Kernel/tasks.c ****         {
 1585              		.loc 1 2624 9 view .LVU451
 1586 0004 FFF7FEFF 		bl	vPortEnterCritical
 1587              	.LVL113:
2628:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1588              		.loc 1 2628 13 view .LVU452
2628:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1589              		.loc 1 2628 21 is_stmt 0 view .LVU453
 1590 0008 24B1     		cbz	r4, .L111
 1591              	.LVL114:
 1592              	.L109:
2629:FreeRTOS-Kernel/tasks.c ****         }
 1593              		.loc 1 2629 13 is_stmt 1 discriminator 4 view .LVU454
2629:FreeRTOS-Kernel/tasks.c ****         }
 1594              		.loc 1 2629 22 is_stmt 0 discriminator 4 view .LVU455
 1595 000a E46A     		ldr	r4, [r4, #44]
 1596              	.LVL115:
2631:FreeRTOS-Kernel/tasks.c **** 
 1597              		.loc 1 2631 9 is_stmt 1 discriminator 4 view .LVU456
 1598 000c FFF7FEFF 		bl	vPortExitCritical
 1599              	.LVL116:
2633:FreeRTOS-Kernel/tasks.c **** 
 1600              		.loc 1 2633 50 discriminator 4 view .LVU457
2635:FreeRTOS-Kernel/tasks.c ****     }
 1601              		.loc 1 2635 9 discriminator 4 view .LVU458
2636:FreeRTOS-Kernel/tasks.c **** 
 1602              		.loc 1 2636 5 is_stmt 0 discriminator 4 view .LVU459
 1603 0010 2046     		mov	r0, r4
 1604 0012 10BD     		pop	{r4, pc}
 1605              	.LVL117:
ARM GAS  /tmp/ccJw1tyY.s 			page 189


 1606              	.L111:
2628:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1607              		.loc 1 2628 21 discriminator 1 view .LVU460
 1608 0014 014B     		ldr	r3, .L112
 1609 0016 1C68     		ldr	r4, [r3]
 1610              	.LVL118:
2628:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1611              		.loc 1 2628 21 discriminator 1 view .LVU461
 1612 0018 F7E7     		b	.L109
 1613              	.L113:
 1614 001a 00BF     		.align	2
 1615              	.L112:
 1616 001c 00000000 		.word	pxCurrentTCB
 1617              		.cfi_endproc
 1618              	.LFE12:
 1620              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1621              		.align	1
 1622              		.global	uxTaskPriorityGetFromISR
 1623              		.syntax unified
 1624              		.thumb
 1625              		.thumb_func
 1627              	uxTaskPriorityGetFromISR:
 1628              	.LVL119:
 1629              	.LFB13:
2644:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1630              		.loc 1 2644 5 is_stmt 1 view -0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
2644:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1634              		.loc 1 2644 5 is_stmt 0 view .LVU463
 1635 0000 10B5     		push	{r4, lr}
 1636              	.LCFI18:
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 4, -8
 1639              		.cfi_offset 14, -4
 1640 0002 0446     		mov	r4, r0
2645:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
 1641              		.loc 1 2645 9 is_stmt 1 view .LVU464
2646:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1642              		.loc 1 2646 9 view .LVU465
2647:FreeRTOS-Kernel/tasks.c **** 
 1643              		.loc 1 2647 9 view .LVU466
2649:FreeRTOS-Kernel/tasks.c **** 
 1644              		.loc 1 2649 53 view .LVU467
2667:FreeRTOS-Kernel/tasks.c **** 
 1645              		.loc 1 2667 9 view .LVU468
 1646 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1647              	.LVL120:
2672:FreeRTOS-Kernel/tasks.c ****         {
 1648              		.loc 1 2672 9 view .LVU469
 1649              	.LBB195:
 1650              	.LBI195:
 218:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
ARM GAS  /tmp/ccJw1tyY.s 			page 190


 222:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1651              		.loc 2 229 34 view .LVU470
 1652              	.LBB196:
 230:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1653              		.loc 2 231 5 view .LVU471
 232:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1654              		.loc 2 233 5 view .LVU472
 1655              		.syntax unified
 1656              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1657 0008 EFF31183 		   mrs r3, basepri                                         
 1658 000c 4FF05002 	   mov r2, #80                                              
 1659 0010 82F31188 	   msr basepri, r2                                         
 1660 0014 BFF36F8F 	   isb                                                     
 1661 0018 BFF34F8F 	   dsb                                                     
 1662              	
 1663              	@ 0 "" 2
 1664              	.LVL121:
 234:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 1665              		.loc 2 245 5 view .LVU473
 1666              		.loc 2 245 5 is_stmt 0 view .LVU474
 1667              		.thumb
 1668              		.syntax unified
 1669              	.LBE196:
 1670              	.LBE195:
2676:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1671              		.loc 1 2676 13 is_stmt 1 view .LVU475
2676:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1672              		.loc 1 2676 21 is_stmt 0 view .LVU476
 1673 001c 1CB1     		cbz	r4, .L117
 1674              	.LVL122:
 1675              	.L115:
2677:FreeRTOS-Kernel/tasks.c ****         }
 1676              		.loc 1 2677 13 is_stmt 1 discriminator 4 view .LVU477
2677:FreeRTOS-Kernel/tasks.c ****         }
 1677              		.loc 1 2677 22 is_stmt 0 discriminator 4 view .LVU478
 1678 001e E06A     		ldr	r0, [r4, #44]
 1679              	.LVL123:
ARM GAS  /tmp/ccJw1tyY.s 			page 191


2679:FreeRTOS-Kernel/tasks.c **** 
 1680              		.loc 1 2679 9 is_stmt 1 discriminator 4 view .LVU479
 1681              	.LBB197:
 1682              	.LBI197:
 246:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1683              		.loc 2 249 30 discriminator 4 view .LVU480
 1684              	.LBB198:
 250:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1685              		.loc 2 251 5 discriminator 4 view .LVU481
 1686              		.syntax unified
 1687              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1688 0020 83F31188 		   msr basepri, r3 
 1689              	@ 0 "" 2
 1690              		.thumb
 1691              		.syntax unified
 1692              	.LBE198:
 1693              	.LBE197:
2681:FreeRTOS-Kernel/tasks.c **** 
 1694              		.loc 1 2681 57 discriminator 4 view .LVU482
2683:FreeRTOS-Kernel/tasks.c ****     }
 1695              		.loc 1 2683 9 discriminator 4 view .LVU483
2684:FreeRTOS-Kernel/tasks.c **** 
 1696              		.loc 1 2684 5 is_stmt 0 discriminator 4 view .LVU484
 1697 0024 10BD     		pop	{r4, pc}
 1698              	.LVL124:
 1699              	.L117:
2676:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1700              		.loc 1 2676 21 discriminator 1 view .LVU485
 1701 0026 014A     		ldr	r2, .L118
 1702 0028 1468     		ldr	r4, [r2]
 1703              	.LVL125:
2676:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1704              		.loc 1 2676 21 discriminator 1 view .LVU486
 1705 002a F8E7     		b	.L115
 1706              	.L119:
 1707              		.align	2
 1708              	.L118:
 1709 002c 00000000 		.word	pxCurrentTCB
 1710              		.cfi_endproc
 1711              	.LFE13:
 1713              		.section	.text.uxTaskBasePriorityGet,"ax",%progbits
 1714              		.align	1
 1715              		.global	uxTaskBasePriorityGet
 1716              		.syntax unified
 1717              		.thumb
 1718              		.thumb_func
 1720              	uxTaskBasePriorityGet:
 1721              	.LVL126:
 1722              	.LFB14:
2692:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1723              		.loc 1 2692 5 is_stmt 1 view -0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJw1tyY.s 			page 192


 1726              		@ frame_needed = 0, uses_anonymous_args = 0
2692:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1727              		.loc 1 2692 5 is_stmt 0 view .LVU488
 1728 0000 10B5     		push	{r4, lr}
 1729              	.LCFI19:
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733 0002 0446     		mov	r4, r0
2693:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
 1734              		.loc 1 2693 9 is_stmt 1 view .LVU489
2694:FreeRTOS-Kernel/tasks.c **** 
 1735              		.loc 1 2694 9 view .LVU490
2696:FreeRTOS-Kernel/tasks.c **** 
 1736              		.loc 1 2696 50 view .LVU491
2698:FreeRTOS-Kernel/tasks.c ****         {
 1737              		.loc 1 2698 9 view .LVU492
 1738 0004 FFF7FEFF 		bl	vPortEnterCritical
 1739              	.LVL127:
2702:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1740              		.loc 1 2702 13 view .LVU493
2702:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1741              		.loc 1 2702 21 is_stmt 0 view .LVU494
 1742 0008 24B1     		cbz	r4, .L123
 1743              	.LVL128:
 1744              	.L121:
2703:FreeRTOS-Kernel/tasks.c ****         }
 1745              		.loc 1 2703 13 is_stmt 1 discriminator 4 view .LVU495
2703:FreeRTOS-Kernel/tasks.c ****         }
 1746              		.loc 1 2703 22 is_stmt 0 discriminator 4 view .LVU496
 1747 000a 646C     		ldr	r4, [r4, #68]
 1748              	.LVL129:
2705:FreeRTOS-Kernel/tasks.c **** 
 1749              		.loc 1 2705 9 is_stmt 1 discriminator 4 view .LVU497
 1750 000c FFF7FEFF 		bl	vPortExitCritical
 1751              	.LVL130:
2707:FreeRTOS-Kernel/tasks.c **** 
 1752              		.loc 1 2707 54 discriminator 4 view .LVU498
2709:FreeRTOS-Kernel/tasks.c ****     }
 1753              		.loc 1 2709 9 discriminator 4 view .LVU499
2710:FreeRTOS-Kernel/tasks.c **** 
 1754              		.loc 1 2710 5 is_stmt 0 discriminator 4 view .LVU500
 1755 0010 2046     		mov	r0, r4
 1756 0012 10BD     		pop	{r4, pc}
 1757              	.LVL131:
 1758              	.L123:
2702:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1759              		.loc 1 2702 21 discriminator 1 view .LVU501
 1760 0014 014B     		ldr	r3, .L124
 1761 0016 1C68     		ldr	r4, [r3]
 1762              	.LVL132:
2702:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1763              		.loc 1 2702 21 discriminator 1 view .LVU502
 1764 0018 F7E7     		b	.L121
 1765              	.L125:
 1766 001a 00BF     		.align	2
 1767              	.L124:
ARM GAS  /tmp/ccJw1tyY.s 			page 193


 1768 001c 00000000 		.word	pxCurrentTCB
 1769              		.cfi_endproc
 1770              	.LFE14:
 1772              		.section	.text.uxTaskBasePriorityGetFromISR,"ax",%progbits
 1773              		.align	1
 1774              		.global	uxTaskBasePriorityGetFromISR
 1775              		.syntax unified
 1776              		.thumb
 1777              		.thumb_func
 1779              	uxTaskBasePriorityGetFromISR:
 1780              	.LVL133:
 1781              	.LFB15:
2718:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1782              		.loc 1 2718 5 is_stmt 1 view -0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
2718:FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1786              		.loc 1 2718 5 is_stmt 0 view .LVU504
 1787 0000 10B5     		push	{r4, lr}
 1788              	.LCFI20:
 1789              		.cfi_def_cfa_offset 8
 1790              		.cfi_offset 4, -8
 1791              		.cfi_offset 14, -4
 1792 0002 0446     		mov	r4, r0
2719:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
 1793              		.loc 1 2719 9 is_stmt 1 view .LVU505
2720:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1794              		.loc 1 2720 9 view .LVU506
2721:FreeRTOS-Kernel/tasks.c **** 
 1795              		.loc 1 2721 9 view .LVU507
2723:FreeRTOS-Kernel/tasks.c **** 
 1796              		.loc 1 2723 57 view .LVU508
2741:FreeRTOS-Kernel/tasks.c **** 
 1797              		.loc 1 2741 9 view .LVU509
 1798 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1799              	.LVL134:
2746:FreeRTOS-Kernel/tasks.c ****         {
 1800              		.loc 1 2746 9 view .LVU510
 1801              	.LBB199:
 1802              	.LBI199:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1803              		.loc 2 229 34 view .LVU511
 1804              	.LBB200:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1805              		.loc 2 231 5 view .LVU512
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1806              		.loc 2 233 5 view .LVU513
 1807              		.syntax unified
 1808              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1809 0008 EFF31183 		   mrs r3, basepri                                         
 1810 000c 4FF05002 	   mov r2, #80                                              
 1811 0010 82F31188 	   msr basepri, r2                                         
 1812 0014 BFF36F8F 	   isb                                                     
 1813 0018 BFF34F8F 	   dsb                                                     
 1814              	
 1815              	@ 0 "" 2
ARM GAS  /tmp/ccJw1tyY.s 			page 194


 1816              	.LVL135:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 1817              		.loc 2 245 5 view .LVU514
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 1818              		.loc 2 245 5 is_stmt 0 view .LVU515
 1819              		.thumb
 1820              		.syntax unified
 1821              	.LBE200:
 1822              	.LBE199:
2750:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1823              		.loc 1 2750 13 is_stmt 1 view .LVU516
2750:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1824              		.loc 1 2750 21 is_stmt 0 view .LVU517
 1825 001c 1CB1     		cbz	r4, .L129
 1826              	.LVL136:
 1827              	.L127:
2751:FreeRTOS-Kernel/tasks.c ****         }
 1828              		.loc 1 2751 13 is_stmt 1 discriminator 4 view .LVU518
2751:FreeRTOS-Kernel/tasks.c ****         }
 1829              		.loc 1 2751 22 is_stmt 0 discriminator 4 view .LVU519
 1830 001e 606C     		ldr	r0, [r4, #68]
 1831              	.LVL137:
2753:FreeRTOS-Kernel/tasks.c **** 
 1832              		.loc 1 2753 9 is_stmt 1 discriminator 4 view .LVU520
 1833              	.LBB201:
 1834              	.LBI201:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1835              		.loc 2 249 30 discriminator 4 view .LVU521
 1836              	.LBB202:
 1837              		.loc 2 251 5 discriminator 4 view .LVU522
 1838              		.syntax unified
 1839              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1840 0020 83F31188 		   msr basepri, r3 
 1841              	@ 0 "" 2
 1842              		.thumb
 1843              		.syntax unified
 1844              	.LBE202:
 1845              	.LBE201:
2755:FreeRTOS-Kernel/tasks.c **** 
 1846              		.loc 1 2755 61 discriminator 4 view .LVU523
2757:FreeRTOS-Kernel/tasks.c ****     }
 1847              		.loc 1 2757 9 discriminator 4 view .LVU524
2758:FreeRTOS-Kernel/tasks.c **** 
 1848              		.loc 1 2758 5 is_stmt 0 discriminator 4 view .LVU525
 1849 0024 10BD     		pop	{r4, pc}
 1850              	.LVL138:
 1851              	.L129:
2750:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1852              		.loc 1 2750 21 discriminator 1 view .LVU526
 1853 0026 014A     		ldr	r2, .L130
 1854 0028 1468     		ldr	r4, [r2]
 1855              	.LVL139:
2750:FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxBasePriority;
 1856              		.loc 1 2750 21 discriminator 1 view .LVU527
 1857 002a F8E7     		b	.L127
 1858              	.L131:
 1859              		.align	2
ARM GAS  /tmp/ccJw1tyY.s 			page 195


 1860              	.L130:
 1861 002c 00000000 		.word	pxCurrentTCB
 1862              		.cfi_endproc
 1863              	.LFE15:
 1865              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1866              		.align	1
 1867              		.global	vTaskPrioritySet
 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1872              	vTaskPrioritySet:
 1873              	.LVL140:
 1874              	.LFB16:
2767:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 1875              		.loc 1 2767 5 is_stmt 1 view -0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
2767:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 1879              		.loc 1 2767 5 is_stmt 0 view .LVU529
 1880 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1881              	.LCFI21:
 1882              		.cfi_def_cfa_offset 24
 1883              		.cfi_offset 3, -24
 1884              		.cfi_offset 4, -20
 1885              		.cfi_offset 5, -16
 1886              		.cfi_offset 6, -12
 1887              		.cfi_offset 7, -8
 1888              		.cfi_offset 14, -4
2768:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1889              		.loc 1 2768 9 is_stmt 1 view .LVU530
2769:FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1890              		.loc 1 2769 9 view .LVU531
2770:FreeRTOS-Kernel/tasks.c **** 
 1891              		.loc 1 2770 9 view .LVU532
 1892              	.LVL141:
2776:FreeRTOS-Kernel/tasks.c **** 
 1893              		.loc 1 2776 60 view .LVU533
2778:FreeRTOS-Kernel/tasks.c **** 
 1894              		.loc 1 2778 9 view .LVU534
 1895 0002 0629     		cmp	r1, #6
 1896 0004 08D9     		bls	.L133
2778:FreeRTOS-Kernel/tasks.c **** 
 1897              		.loc 1 2778 9 view .LVU535
 1898              	.LBB203:
 1899              	.LBI203:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1900              		.loc 2 213 30 view .LVU536
 1901              	.LBB204:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1902              		.loc 2 215 5 view .LVU537
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1903              		.loc 2 217 5 view .LVU538
 1904              		.syntax unified
 1905              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1906 0006 4FF05003 		   mov r3, #80                                              
 1907 000a 83F31188 	   msr basepri, r3                                         
ARM GAS  /tmp/ccJw1tyY.s 			page 196


 1908 000e BFF36F8F 	   isb                                                     
 1909 0012 BFF34F8F 	   dsb                                                     
 1910              	
 1911              	@ 0 "" 2
 1912              	.LVL142:
 1913              		.thumb
 1914              		.syntax unified
 1915              	.L134:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1916              		.loc 2 217 5 is_stmt 0 view .LVU539
 1917              	.LBE204:
 1918              	.LBE203:
2778:FreeRTOS-Kernel/tasks.c **** 
 1919              		.loc 1 2778 9 is_stmt 1 discriminator 1 view .LVU540
2778:FreeRTOS-Kernel/tasks.c **** 
 1920              		.loc 1 2778 9 discriminator 1 view .LVU541
 1921 0016 FEE7     		b	.L134
 1922              	.L133:
 1923 0018 0446     		mov	r4, r0
 1924 001a 0D46     		mov	r5, r1
2778:FreeRTOS-Kernel/tasks.c **** 
 1925              		.loc 1 2778 61 view .LVU542
2781:FreeRTOS-Kernel/tasks.c ****         {
 1926              		.loc 1 2781 9 view .LVU543
 1927              	.LVL143:
2787:FreeRTOS-Kernel/tasks.c ****         }
 1928              		.loc 1 2787 37 view .LVU544
2790:FreeRTOS-Kernel/tasks.c ****         {
 1929              		.loc 1 2790 9 view .LVU545
 1930 001c FFF7FEFF 		bl	vPortEnterCritical
 1931              	.LVL144:
2794:FreeRTOS-Kernel/tasks.c **** 
 1932              		.loc 1 2794 13 view .LVU546
2794:FreeRTOS-Kernel/tasks.c **** 
 1933              		.loc 1 2794 21 is_stmt 0 view .LVU547
 1934 0020 74B1     		cbz	r4, .L148
 1935              	.LVL145:
 1936              	.L135:
2796:FreeRTOS-Kernel/tasks.c **** 
 1937              		.loc 1 2796 59 is_stmt 1 discriminator 4 view .LVU548
2800:FreeRTOS-Kernel/tasks.c ****             }
 1938              		.loc 1 2800 17 discriminator 4 view .LVU549
2800:FreeRTOS-Kernel/tasks.c ****             }
 1939              		.loc 1 2800 39 is_stmt 0 discriminator 4 view .LVU550
 1940 0022 636C     		ldr	r3, [r4, #68]
 1941              	.LVL146:
2808:FreeRTOS-Kernel/tasks.c ****             {
 1942              		.loc 1 2808 13 is_stmt 1 discriminator 4 view .LVU551
2808:FreeRTOS-Kernel/tasks.c ****             {
 1943              		.loc 1 2808 15 is_stmt 0 discriminator 4 view .LVU552
 1944 0024 9D42     		cmp	r5, r3
 1945 0026 33D0     		beq	.L136
2812:FreeRTOS-Kernel/tasks.c ****                 {
 1946              		.loc 1 2812 17 is_stmt 1 view .LVU553
2812:FreeRTOS-Kernel/tasks.c ****                 {
 1947              		.loc 1 2812 19 is_stmt 0 view .LVU554
 1948 0028 0DD9     		bls	.L137
ARM GAS  /tmp/ccJw1tyY.s 			page 197


2816:FreeRTOS-Kernel/tasks.c ****                         {
 1949              		.loc 1 2816 25 is_stmt 1 view .LVU555
2816:FreeRTOS-Kernel/tasks.c ****                         {
 1950              		.loc 1 2816 35 is_stmt 0 view .LVU556
 1951 002a 344A     		ldr	r2, .L150
 1952 002c 1268     		ldr	r2, [r2]
2816:FreeRTOS-Kernel/tasks.c ****                         {
 1953              		.loc 1 2816 27 view .LVU557
 1954 002e A242     		cmp	r2, r4
 1955 0030 31D0     		beq	.L144
2821:FreeRTOS-Kernel/tasks.c ****                             {
 1956              		.loc 1 2821 29 is_stmt 1 view .LVU558
2821:FreeRTOS-Kernel/tasks.c ****                             {
 1957              		.loc 1 2821 61 is_stmt 0 view .LVU559
 1958 0032 324A     		ldr	r2, .L150
 1959 0034 1268     		ldr	r2, [r2]
 1960 0036 D26A     		ldr	r2, [r2, #44]
2821:FreeRTOS-Kernel/tasks.c ****                             {
 1961              		.loc 1 2821 31 view .LVU560
 1962 0038 AA42     		cmp	r2, r5
 1963 003a 2ED3     		bcc	.L145
2770:FreeRTOS-Kernel/tasks.c **** 
 1964              		.loc 1 2770 20 view .LVU561
 1965 003c 0027     		movs	r7, #0
 1966 003e 07E0     		b	.L138
 1967              	.LVL147:
 1968              	.L148:
2794:FreeRTOS-Kernel/tasks.c **** 
 1969              		.loc 1 2794 21 discriminator 1 view .LVU562
 1970 0040 2E4B     		ldr	r3, .L150
 1971 0042 1C68     		ldr	r4, [r3]
 1972              	.LVL148:
2794:FreeRTOS-Kernel/tasks.c **** 
 1973              		.loc 1 2794 21 discriminator 1 view .LVU563
 1974 0044 EDE7     		b	.L135
 1975              	.LVL149:
 1976              	.L137:
2845:FreeRTOS-Kernel/tasks.c ****                 {
 1977              		.loc 1 2845 22 is_stmt 1 view .LVU564
2845:FreeRTOS-Kernel/tasks.c ****                 {
 1978              		.loc 1 2845 55 is_stmt 0 view .LVU565
 1979 0046 2D4A     		ldr	r2, .L150
 1980 0048 1268     		ldr	r2, [r2]
2845:FreeRTOS-Kernel/tasks.c ****                 {
 1981              		.loc 1 2845 24 view .LVU566
 1982 004a A242     		cmp	r2, r4
 1983 004c 27D0     		beq	.L146
2770:FreeRTOS-Kernel/tasks.c **** 
 1984              		.loc 1 2770 20 view .LVU567
 1985 004e 0027     		movs	r7, #0
 1986              	.L138:
 1987              	.LVL150:
2862:FreeRTOS-Kernel/tasks.c **** 
 1988              		.loc 1 2862 17 is_stmt 1 view .LVU568
2867:FreeRTOS-Kernel/tasks.c **** 
 1989              		.loc 1 2867 17 view .LVU569
2867:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 198


 1990              		.loc 1 2867 39 is_stmt 0 view .LVU570
 1991 0050 E66A     		ldr	r6, [r4, #44]
 1992              	.LVL151:
2874:FreeRTOS-Kernel/tasks.c ****                     {
 1993              		.loc 1 2874 21 is_stmt 1 view .LVU571
2874:FreeRTOS-Kernel/tasks.c ****                     {
 1994              		.loc 1 2874 23 is_stmt 0 view .LVU572
 1995 0052 B342     		cmp	r3, r6
 1996 0054 01D0     		beq	.L139
2874:FreeRTOS-Kernel/tasks.c ****                     {
 1997              		.loc 1 2874 72 discriminator 1 view .LVU573
 1998 0056 B542     		cmp	r5, r6
 1999 0058 00D9     		bls	.L140
 2000              	.L139:
2876:FreeRTOS-Kernel/tasks.c ****                     }
 2001              		.loc 1 2876 25 is_stmt 1 view .LVU574
2876:FreeRTOS-Kernel/tasks.c ****                     }
 2002              		.loc 1 2876 43 is_stmt 0 view .LVU575
 2003 005a E562     		str	r5, [r4, #44]
 2004              	.L140:
2884:FreeRTOS-Kernel/tasks.c ****                 }
 2005              		.loc 1 2884 21 is_stmt 1 view .LVU576
2884:FreeRTOS-Kernel/tasks.c ****                 }
 2006              		.loc 1 2884 43 is_stmt 0 view .LVU577
 2007 005c 6564     		str	r5, [r4, #68]
2894:FreeRTOS-Kernel/tasks.c ****                 {
 2008              		.loc 1 2894 17 is_stmt 1 view .LVU578
2894:FreeRTOS-Kernel/tasks.c ****                 {
 2009              		.loc 1 2894 23 is_stmt 0 view .LVU579
 2010 005e A369     		ldr	r3, [r4, #24]
 2011              	.LVL152:
2894:FreeRTOS-Kernel/tasks.c ****                 {
 2012              		.loc 1 2894 19 view .LVU580
 2013 0060 002B     		cmp	r3, #0
 2014 0062 02DB     		blt	.L141
2896:FreeRTOS-Kernel/tasks.c ****                 }
 2015              		.loc 1 2896 21 is_stmt 1 view .LVU581
 2016 0064 C5F10705 		rsb	r5, r5, #7
 2017              	.LVL153:
2896:FreeRTOS-Kernel/tasks.c ****                 }
 2018              		.loc 1 2896 21 is_stmt 0 view .LVU582
 2019 0068 A561     		str	r5, [r4, #24]
 2020              	.L141:
2900:FreeRTOS-Kernel/tasks.c ****                 }
 2021              		.loc 1 2900 45 is_stmt 1 view .LVU583
2907:FreeRTOS-Kernel/tasks.c ****                 {
 2022              		.loc 1 2907 17 view .LVU584
2907:FreeRTOS-Kernel/tasks.c ****                 {
 2023              		.loc 1 2907 21 is_stmt 0 view .LVU585
 2024 006a 6169     		ldr	r1, [r4, #20]
 2025 006c 06EB8602 		add	r2, r6, r6, lsl #2
 2026 0070 234B     		ldr	r3, .L150+4
 2027 0072 03EB8203 		add	r3, r3, r2, lsl #2
2907:FreeRTOS-Kernel/tasks.c ****                 {
 2028              		.loc 1 2907 19 view .LVU586
 2029 0076 9942     		cmp	r1, r3
 2030 0078 13D0     		beq	.L149
ARM GAS  /tmp/ccJw1tyY.s 			page 199


 2031              	.LVL154:
 2032              	.L142:
2930:FreeRTOS-Kernel/tasks.c ****                     }
 2033              		.loc 1 2930 49 is_stmt 1 view .LVU587
2942:FreeRTOS-Kernel/tasks.c ****                 {
 2034              		.loc 1 2942 17 view .LVU588
2942:FreeRTOS-Kernel/tasks.c ****                 {
 2035              		.loc 1 2942 19 is_stmt 0 view .LVU589
 2036 007a 4FB1     		cbz	r7, .L136
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2037              		.loc 1 2945 21 is_stmt 1 view .LVU590
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2038              		.loc 1 2945 21 view .LVU591
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2039              		.loc 1 2945 21 view .LVU592
 2040 007c 4FF0E023 		mov	r3, #-536813568
 2041 0080 4FF08052 		mov	r2, #268435456
 2042 0084 C3F8042D 		str	r2, [r3, #3332]
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2043              		.loc 1 2945 21 view .LVU593
 2044              		.syntax unified
 2045              	@ 2945 "FreeRTOS-Kernel/tasks.c" 1
 2046 0088 BFF34F8F 		dsb
 2047              	@ 0 "" 2
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2048              		.loc 1 2945 21 view .LVU594
 2049              	@ 2945 "FreeRTOS-Kernel/tasks.c" 1
 2050 008c BFF36F8F 		isb
 2051              	@ 0 "" 2
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2052              		.loc 1 2945 21 view .LVU595
2945:FreeRTOS-Kernel/tasks.c ****                 }
 2053              		.loc 1 2945 21 view .LVU596
 2054              	.LVL155:
 2055              		.thumb
 2056              		.syntax unified
 2057              	.L136:
2960:FreeRTOS-Kernel/tasks.c ****                     }
 2058              		.loc 1 2960 49 view .LVU597
2966:FreeRTOS-Kernel/tasks.c ****             }
 2059              		.loc 1 2966 17 view .LVU598
2969:FreeRTOS-Kernel/tasks.c **** 
 2060              		.loc 1 2969 9 view .LVU599
 2061 0090 FFF7FEFF 		bl	vPortExitCritical
 2062              	.LVL156:
2971:FreeRTOS-Kernel/tasks.c ****     }
 2063              		.loc 1 2971 39 view .LVU600
2972:FreeRTOS-Kernel/tasks.c **** 
 2064              		.loc 1 2972 5 is_stmt 0 view .LVU601
 2065 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2066              	.LVL157:
 2067              	.L144:
2770:FreeRTOS-Kernel/tasks.c **** 
 2068              		.loc 1 2770 20 view .LVU602
 2069 0096 0027     		movs	r7, #0
 2070 0098 DAE7     		b	.L138
 2071              	.L145:
ARM GAS  /tmp/ccJw1tyY.s 			page 200


2823:FreeRTOS-Kernel/tasks.c ****                             }
 2072              		.loc 1 2823 48 view .LVU603
 2073 009a 0127     		movs	r7, #1
 2074 009c D8E7     		b	.L138
 2075              	.L146:
2854:FreeRTOS-Kernel/tasks.c ****                     }
 2076              		.loc 1 2854 40 view .LVU604
 2077 009e 0127     		movs	r7, #1
 2078 00a0 D6E7     		b	.L138
 2079              	.LVL158:
 2080              	.L149:
2912:FreeRTOS-Kernel/tasks.c ****                     {
 2081              		.loc 1 2912 21 is_stmt 1 view .LVU605
2912:FreeRTOS-Kernel/tasks.c ****                     {
 2082              		.loc 1 2912 25 is_stmt 0 view .LVU606
 2083 00a2 251D     		adds	r5, r4, #4
 2084 00a4 2846     		mov	r0, r5
 2085 00a6 FFF7FEFF 		bl	uxListRemove
 2086              	.LVL159:
2912:FreeRTOS-Kernel/tasks.c ****                     {
 2087              		.loc 1 2912 23 view .LVU607
 2088 00aa 30B9     		cbnz	r0, .L143
2917:FreeRTOS-Kernel/tasks.c ****                     }
 2089              		.loc 1 2917 25 is_stmt 1 view .LVU608
 2090 00ac 0122     		movs	r2, #1
 2091 00ae B240     		lsls	r2, r2, r6
 2092 00b0 1449     		ldr	r1, .L150+8
 2093 00b2 0B68     		ldr	r3, [r1]
 2094 00b4 23EA0203 		bic	r3, r3, r2
 2095 00b8 0B60     		str	r3, [r1]
 2096              	.L143:
2921:FreeRTOS-Kernel/tasks.c ****                     }
 2097              		.loc 1 2921 49 view .LVU609
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2098              		.loc 1 2924 21 view .LVU610
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2099              		.loc 1 2924 21 view .LVU611
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2100              		.loc 1 2924 21 view .LVU612
 2101 00ba E36A     		ldr	r3, [r4, #44]
 2102 00bc 0122     		movs	r2, #1
 2103 00be 9A40     		lsls	r2, r2, r3
 2104 00c0 1049     		ldr	r1, .L150+8
 2105 00c2 0868     		ldr	r0, [r1]
 2106 00c4 0243     		orrs	r2, r2, r0
 2107 00c6 0A60     		str	r2, [r1]
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2108              		.loc 1 2924 21 view .LVU613
 2109              	.LBB205:
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2110              		.loc 1 2924 21 view .LVU614
 2111 00c8 0D4A     		ldr	r2, .L150+4
 2112 00ca 03EB8303 		add	r3, r3, r3, lsl #2
 2113 00ce 02EB8303 		add	r3, r2, r3, lsl #2
 2114 00d2 5B68     		ldr	r3, [r3, #4]
 2115              	.LVL160:
2924:FreeRTOS-Kernel/tasks.c ****                 }
ARM GAS  /tmp/ccJw1tyY.s 			page 201


 2116              		.loc 1 2924 21 view .LVU615
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2117              		.loc 1 2924 21 view .LVU616
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2118              		.loc 1 2924 21 view .LVU617
 2119 00d4 A360     		str	r3, [r4, #8]
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2120              		.loc 1 2924 21 view .LVU618
 2121 00d6 9968     		ldr	r1, [r3, #8]
 2122 00d8 E160     		str	r1, [r4, #12]
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2123              		.loc 1 2924 21 view .LVU619
 2124 00da 4D60     		str	r5, [r1, #4]
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2125              		.loc 1 2924 21 view .LVU620
 2126 00dc 9D60     		str	r5, [r3, #8]
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2127              		.loc 1 2924 21 view .LVU621
 2128 00de E36A     		ldr	r3, [r4, #44]
 2129              	.LVL161:
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2130              		.loc 1 2924 21 is_stmt 0 view .LVU622
 2131 00e0 03EB8301 		add	r1, r3, r3, lsl #2
 2132 00e4 02EB8100 		add	r0, r2, r1, lsl #2
 2133 00e8 6061     		str	r0, [r4, #20]
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2134              		.loc 1 2924 21 is_stmt 1 view .LVU623
 2135 00ea 52F82110 		ldr	r1, [r2, r1, lsl #2]
 2136 00ee 0131     		adds	r1, r1, #1
 2137 00f0 03EB8303 		add	r3, r3, r3, lsl #2
 2138 00f4 42F82310 		str	r1, [r2, r3, lsl #2]
 2139              	.LBE205:
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2140              		.loc 1 2924 21 view .LVU624
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2141              		.loc 1 2924 21 view .LVU625
2924:FreeRTOS-Kernel/tasks.c ****                 }
 2142              		.loc 1 2924 21 view .LVU626
 2143 00f8 BFE7     		b	.L142
 2144              	.L151:
 2145 00fa 00BF     		.align	2
 2146              	.L150:
 2147 00fc 00000000 		.word	pxCurrentTCB
 2148 0100 00000000 		.word	pxReadyTasksLists
 2149 0104 00000000 		.word	uxTopReadyPriority
 2150              		.cfi_endproc
 2151              	.LFE16:
 2153              		.section	.text.vTaskResume,"ax",%progbits
 2154              		.align	1
 2155              		.global	vTaskResume
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
 2160              	vTaskResume:
 2161              	.LVL162:
 2162              	.LFB19:
3354:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
ARM GAS  /tmp/ccJw1tyY.s 			page 202


 2163              		.loc 1 3354 5 view -0
 2164              		.cfi_startproc
 2165              		@ args = 0, pretend = 0, frame = 0
 2166              		@ frame_needed = 0, uses_anonymous_args = 0
3354:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2167              		.loc 1 3354 5 is_stmt 0 view .LVU628
 2168 0000 38B5     		push	{r3, r4, r5, lr}
 2169              	.LCFI22:
 2170              		.cfi_def_cfa_offset 16
 2171              		.cfi_offset 3, -16
 2172              		.cfi_offset 4, -12
 2173              		.cfi_offset 5, -8
 2174              		.cfi_offset 14, -4
3355:FreeRTOS-Kernel/tasks.c **** 
 2175              		.loc 1 3355 9 is_stmt 1 view .LVU629
 2176              	.LVL163:
3357:FreeRTOS-Kernel/tasks.c **** 
 2177              		.loc 1 3357 48 view .LVU630
3360:FreeRTOS-Kernel/tasks.c **** 
 2178              		.loc 1 3360 9 view .LVU631
 2179 0002 68B1     		cbz	r0, .L158
 2180 0004 0446     		mov	r4, r0
3360:FreeRTOS-Kernel/tasks.c **** 
 2181              		.loc 1 3360 38 discriminator 2 view .LVU632
3366:FreeRTOS-Kernel/tasks.c ****         #else
 2182              		.loc 1 3366 13 discriminator 2 view .LVU633
3366:FreeRTOS-Kernel/tasks.c ****         #else
 2183              		.loc 1 3366 25 is_stmt 0 discriminator 2 view .LVU634
 2184 0006 254B     		ldr	r3, .L160
 2185 0008 1B68     		ldr	r3, [r3]
3366:FreeRTOS-Kernel/tasks.c ****         #else
 2186              		.loc 1 3366 15 discriminator 2 view .LVU635
 2187 000a 8342     		cmp	r3, r0
 2188 000c 07D0     		beq	.L152
3377:FreeRTOS-Kernel/tasks.c ****             {
 2189              		.loc 1 3377 13 is_stmt 1 view .LVU636
 2190 000e FFF7FEFF 		bl	vPortEnterCritical
 2191              	.LVL164:
3379:FreeRTOS-Kernel/tasks.c ****                 {
 2192              		.loc 1 3379 17 view .LVU637
3379:FreeRTOS-Kernel/tasks.c ****                 {
 2193              		.loc 1 3379 21 is_stmt 0 view .LVU638
 2194 0012 2046     		mov	r0, r4
 2195 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2196              	.LVL165:
3379:FreeRTOS-Kernel/tasks.c ****                 {
 2197              		.loc 1 3379 19 view .LVU639
 2198 0018 58B9     		cbnz	r0, .L159
 2199              	.L156:
3395:FreeRTOS-Kernel/tasks.c ****                 }
 2200              		.loc 1 3395 45 is_stmt 1 view .LVU640
3398:FreeRTOS-Kernel/tasks.c ****         }
 2201              		.loc 1 3398 13 view .LVU641
 2202 001a FFF7FEFF 		bl	vPortExitCritical
 2203              	.LVL166:
3402:FreeRTOS-Kernel/tasks.c ****         }
 2204              		.loc 1 3402 37 view .LVU642
ARM GAS  /tmp/ccJw1tyY.s 			page 203


3405:FreeRTOS-Kernel/tasks.c ****     }
 2205              		.loc 1 3405 34 view .LVU643
 2206              	.L152:
3406:FreeRTOS-Kernel/tasks.c **** 
 2207              		.loc 1 3406 5 is_stmt 0 view .LVU644
 2208 001e 38BD     		pop	{r3, r4, r5, pc}
 2209              	.LVL167:
 2210              	.L158:
3360:FreeRTOS-Kernel/tasks.c **** 
 2211              		.loc 1 3360 9 is_stmt 1 view .LVU645
 2212              	.LBB206:
 2213              	.LBI206:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2214              		.loc 2 213 30 view .LVU646
 2215              	.LBB207:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2216              		.loc 2 215 5 view .LVU647
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2217              		.loc 2 217 5 view .LVU648
 2218              		.syntax unified
 2219              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2220 0020 4FF05003 		   mov r3, #80                                              
 2221 0024 83F31188 	   msr basepri, r3                                         
 2222 0028 BFF36F8F 	   isb                                                     
 2223 002c BFF34F8F 	   dsb                                                     
 2224              	
 2225              	@ 0 "" 2
 2226              	.LVL168:
 2227              		.thumb
 2228              		.syntax unified
 2229              	.L154:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2230              		.loc 2 217 5 is_stmt 0 view .LVU649
 2231              	.LBE207:
 2232              	.LBE206:
3360:FreeRTOS-Kernel/tasks.c **** 
 2233              		.loc 1 3360 9 is_stmt 1 discriminator 1 view .LVU650
3360:FreeRTOS-Kernel/tasks.c **** 
 2234              		.loc 1 3360 9 discriminator 1 view .LVU651
 2235 0030 FEE7     		b	.L154
 2236              	.LVL169:
 2237              	.L159:
3381:FreeRTOS-Kernel/tasks.c **** 
 2238              		.loc 1 3381 46 view .LVU652
3385:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2239              		.loc 1 3385 21 view .LVU653
3385:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2240              		.loc 1 3385 30 is_stmt 0 view .LVU654
 2241 0032 251D     		adds	r5, r4, #4
 2242 0034 2846     		mov	r0, r5
 2243 0036 FFF7FEFF 		bl	uxListRemove
 2244              	.LVL170:
3386:FreeRTOS-Kernel/tasks.c **** 
 2245              		.loc 1 3386 21 is_stmt 1 view .LVU655
3386:FreeRTOS-Kernel/tasks.c **** 
 2246              		.loc 1 3386 21 view .LVU656
3386:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 204


 2247              		.loc 1 3386 21 view .LVU657
 2248 003a E36A     		ldr	r3, [r4, #44]
 2249 003c 0122     		movs	r2, #1
 2250 003e 9A40     		lsls	r2, r2, r3
 2251 0040 1749     		ldr	r1, .L160+4
 2252 0042 0868     		ldr	r0, [r1]
 2253 0044 0243     		orrs	r2, r2, r0
 2254 0046 0A60     		str	r2, [r1]
3386:FreeRTOS-Kernel/tasks.c **** 
 2255              		.loc 1 3386 21 view .LVU658
 2256              	.LBB208:
3386:FreeRTOS-Kernel/tasks.c **** 
 2257              		.loc 1 3386 21 view .LVU659
 2258 0048 164A     		ldr	r2, .L160+8
 2259 004a 03EB8303 		add	r3, r3, r3, lsl #2
 2260 004e 02EB8303 		add	r3, r2, r3, lsl #2
 2261 0052 5B68     		ldr	r3, [r3, #4]
 2262              	.LVL171:
3386:FreeRTOS-Kernel/tasks.c **** 
 2263              		.loc 1 3386 21 view .LVU660
3386:FreeRTOS-Kernel/tasks.c **** 
 2264              		.loc 1 3386 21 view .LVU661
3386:FreeRTOS-Kernel/tasks.c **** 
 2265              		.loc 1 3386 21 view .LVU662
 2266 0054 A360     		str	r3, [r4, #8]
3386:FreeRTOS-Kernel/tasks.c **** 
 2267              		.loc 1 3386 21 view .LVU663
 2268 0056 9968     		ldr	r1, [r3, #8]
 2269 0058 E160     		str	r1, [r4, #12]
3386:FreeRTOS-Kernel/tasks.c **** 
 2270              		.loc 1 3386 21 view .LVU664
 2271 005a 4D60     		str	r5, [r1, #4]
3386:FreeRTOS-Kernel/tasks.c **** 
 2272              		.loc 1 3386 21 view .LVU665
 2273 005c 9D60     		str	r5, [r3, #8]
3386:FreeRTOS-Kernel/tasks.c **** 
 2274              		.loc 1 3386 21 view .LVU666
 2275 005e E36A     		ldr	r3, [r4, #44]
 2276              	.LVL172:
3386:FreeRTOS-Kernel/tasks.c **** 
 2277              		.loc 1 3386 21 is_stmt 0 view .LVU667
 2278 0060 03EB8301 		add	r1, r3, r3, lsl #2
 2279 0064 02EB8100 		add	r0, r2, r1, lsl #2
 2280 0068 6061     		str	r0, [r4, #20]
3386:FreeRTOS-Kernel/tasks.c **** 
 2281              		.loc 1 3386 21 is_stmt 1 view .LVU668
 2282 006a 52F82110 		ldr	r1, [r2, r1, lsl #2]
 2283 006e 0131     		adds	r1, r1, #1
 2284 0070 03EB8303 		add	r3, r3, r3, lsl #2
 2285 0074 42F82310 		str	r1, [r2, r3, lsl #2]
 2286              	.LBE208:
3386:FreeRTOS-Kernel/tasks.c **** 
 2287              		.loc 1 3386 21 view .LVU669
3386:FreeRTOS-Kernel/tasks.c **** 
 2288              		.loc 1 3386 21 view .LVU670
3386:FreeRTOS-Kernel/tasks.c **** 
 2289              		.loc 1 3386 21 view .LVU671
ARM GAS  /tmp/ccJw1tyY.s 			page 205


3391:FreeRTOS-Kernel/tasks.c ****                 }
 2290              		.loc 1 3391 21 view .LVU672
3391:FreeRTOS-Kernel/tasks.c ****                 }
 2291              		.loc 1 3391 21 view .LVU673
 2292 0078 084B     		ldr	r3, .L160
 2293 007a 1B68     		ldr	r3, [r3]
 2294 007c DA6A     		ldr	r2, [r3, #44]
 2295 007e E36A     		ldr	r3, [r4, #44]
 2296 0080 9A42     		cmp	r2, r3
 2297 0082 CAD2     		bcs	.L156
3391:FreeRTOS-Kernel/tasks.c ****                 }
 2298              		.loc 1 3391 21 discriminator 1 view .LVU674
 2299 0084 4FF0E023 		mov	r3, #-536813568
 2300 0088 4FF08052 		mov	r2, #268435456
 2301 008c C3F8042D 		str	r2, [r3, #3332]
3391:FreeRTOS-Kernel/tasks.c ****                 }
 2302              		.loc 1 3391 21 discriminator 1 view .LVU675
 2303              		.syntax unified
 2304              	@ 3391 "FreeRTOS-Kernel/tasks.c" 1
 2305 0090 BFF34F8F 		dsb
 2306              	@ 0 "" 2
3391:FreeRTOS-Kernel/tasks.c ****                 }
 2307              		.loc 1 3391 21 discriminator 1 view .LVU676
 2308              	@ 3391 "FreeRTOS-Kernel/tasks.c" 1
 2309 0094 BFF36F8F 		isb
 2310              	@ 0 "" 2
3391:FreeRTOS-Kernel/tasks.c ****                 }
 2311              		.loc 1 3391 21 discriminator 1 view .LVU677
 2312              		.thumb
 2313              		.syntax unified
 2314 0098 BFE7     		b	.L156
 2315              	.L161:
 2316 009a 00BF     		.align	2
 2317              	.L160:
 2318 009c 00000000 		.word	pxCurrentTCB
 2319 00a0 00000000 		.word	uxTopReadyPriority
 2320 00a4 00000000 		.word	pxReadyTasksLists
 2321              		.cfi_endproc
 2322              	.LFE19:
 2324              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2325              		.align	1
 2326              		.global	xTaskResumeFromISR
 2327              		.syntax unified
 2328              		.thumb
 2329              		.thumb_func
 2331              	xTaskResumeFromISR:
 2332              	.LVL173:
 2333              	.LFB20:
3415:FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2334              		.loc 1 3415 5 view -0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
3415:FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2338              		.loc 1 3415 5 is_stmt 0 view .LVU679
 2339 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2340              	.LCFI23:
ARM GAS  /tmp/ccJw1tyY.s 			page 206


 2341              		.cfi_def_cfa_offset 24
 2342              		.cfi_offset 3, -24
 2343              		.cfi_offset 4, -20
 2344              		.cfi_offset 5, -16
 2345              		.cfi_offset 6, -12
 2346              		.cfi_offset 7, -8
 2347              		.cfi_offset 14, -4
3416:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2348              		.loc 1 3416 9 is_stmt 1 view .LVU680
 2349              	.LVL174:
3417:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 2350              		.loc 1 3417 9 view .LVU681
3418:FreeRTOS-Kernel/tasks.c **** 
 2351              		.loc 1 3418 9 view .LVU682
3420:FreeRTOS-Kernel/tasks.c **** 
 2352              		.loc 1 3420 55 view .LVU683
3422:FreeRTOS-Kernel/tasks.c **** 
 2353              		.loc 1 3422 9 view .LVU684
 2354 0002 0028     		cmp	r0, #0
 2355 0004 46D0     		beq	.L170
 2356 0006 0446     		mov	r4, r0
3422:FreeRTOS-Kernel/tasks.c **** 
 2357              		.loc 1 3422 38 discriminator 2 view .LVU685
3440:FreeRTOS-Kernel/tasks.c **** 
 2358              		.loc 1 3440 9 discriminator 2 view .LVU686
 2359 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2360              	.LVL175:
3445:FreeRTOS-Kernel/tasks.c ****         {
 2361              		.loc 1 3445 9 discriminator 2 view .LVU687
 2362              	.LBB209:
 2363              	.LBI209:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2364              		.loc 2 229 34 discriminator 2 view .LVU688
 2365              	.LBB210:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2366              		.loc 2 231 5 discriminator 2 view .LVU689
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2367              		.loc 2 233 5 discriminator 2 view .LVU690
 2368              		.syntax unified
 2369              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2370 000c EFF31185 		   mrs r5, basepri                                         
 2371 0010 4FF05003 	   mov r3, #80                                              
 2372 0014 83F31188 	   msr basepri, r3                                         
 2373 0018 BFF36F8F 	   isb                                                     
 2374 001c BFF34F8F 	   dsb                                                     
 2375              	
 2376              	@ 0 "" 2
 2377              	.LVL176:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 2378              		.loc 2 245 5 discriminator 2 view .LVU691
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 2379              		.loc 2 245 5 is_stmt 0 discriminator 2 view .LVU692
 2380              		.thumb
 2381              		.syntax unified
 2382              	.LBE210:
 2383              	.LBE209:
3447:FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  /tmp/ccJw1tyY.s 			page 207


 2384              		.loc 1 3447 13 is_stmt 1 discriminator 2 view .LVU693
3447:FreeRTOS-Kernel/tasks.c ****             {
 2385              		.loc 1 3447 17 is_stmt 0 discriminator 2 view .LVU694
 2386 0020 2046     		mov	r0, r4
 2387 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2388              	.LVL177:
3447:FreeRTOS-Kernel/tasks.c ****             {
 2389              		.loc 1 3447 15 discriminator 2 view .LVU695
 2390 0026 0646     		mov	r6, r0
 2391 0028 0028     		cmp	r0, #0
 2392 002a 2FD0     		beq	.L165
3449:FreeRTOS-Kernel/tasks.c **** 
 2393              		.loc 1 3449 51 is_stmt 1 view .LVU696
3452:FreeRTOS-Kernel/tasks.c ****                 {
 2394              		.loc 1 3452 17 view .LVU697
3452:FreeRTOS-Kernel/tasks.c ****                 {
 2395              		.loc 1 3452 42 is_stmt 0 view .LVU698
 2396 002c 224B     		ldr	r3, .L171
 2397 002e 1B68     		ldr	r3, [r3]
3452:FreeRTOS-Kernel/tasks.c ****                 {
 2398              		.loc 1 3452 19 view .LVU699
 2399 0030 002B     		cmp	r3, #0
 2400 0032 3AD1     		bne	.L166
3458:FreeRTOS-Kernel/tasks.c ****                         {
 2401              		.loc 1 3458 25 is_stmt 1 view .LVU700
3458:FreeRTOS-Kernel/tasks.c ****                         {
 2402              		.loc 1 3458 34 is_stmt 0 view .LVU701
 2403 0034 E26A     		ldr	r2, [r4, #44]
3458:FreeRTOS-Kernel/tasks.c ****                         {
 2404              		.loc 1 3458 61 view .LVU702
 2405 0036 214B     		ldr	r3, .L171+4
 2406 0038 1B68     		ldr	r3, [r3]
 2407 003a DB6A     		ldr	r3, [r3, #44]
3458:FreeRTOS-Kernel/tasks.c ****                         {
 2408              		.loc 1 3458 27 view .LVU703
 2409 003c 9A42     		cmp	r2, r3
 2410 003e 32D9     		bls	.L168
3460:FreeRTOS-Kernel/tasks.c **** 
 2411              		.loc 1 3460 29 is_stmt 1 view .LVU704
 2412              	.LVL178:
3465:FreeRTOS-Kernel/tasks.c ****                         }
 2413              		.loc 1 3465 29 view .LVU705
3465:FreeRTOS-Kernel/tasks.c ****                         }
 2414              		.loc 1 3465 49 is_stmt 0 view .LVU706
 2415 0040 0126     		movs	r6, #1
 2416 0042 1F4B     		ldr	r3, .L171+8
 2417 0044 1E60     		str	r6, [r3]
 2418              	.LVL179:
 2419              	.L167:
3469:FreeRTOS-Kernel/tasks.c ****                         }
 2420              		.loc 1 3469 53 is_stmt 1 view .LVU707
3474:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2421              		.loc 1 3474 21 view .LVU708
3474:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2422              		.loc 1 3474 30 is_stmt 0 view .LVU709
 2423 0046 271D     		adds	r7, r4, #4
 2424 0048 3846     		mov	r0, r7
ARM GAS  /tmp/ccJw1tyY.s 			page 208


 2425 004a FFF7FEFF 		bl	uxListRemove
 2426              	.LVL180:
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2427              		.loc 1 3475 21 is_stmt 1 view .LVU710
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2428              		.loc 1 3475 21 view .LVU711
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2429              		.loc 1 3475 21 view .LVU712
 2430 004e E36A     		ldr	r3, [r4, #44]
 2431 0050 0122     		movs	r2, #1
 2432 0052 9A40     		lsls	r2, r2, r3
 2433 0054 1B49     		ldr	r1, .L171+12
 2434 0056 0868     		ldr	r0, [r1]
 2435 0058 0243     		orrs	r2, r2, r0
 2436 005a 0A60     		str	r2, [r1]
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2437              		.loc 1 3475 21 view .LVU713
 2438              	.LBB211:
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2439              		.loc 1 3475 21 view .LVU714
 2440 005c 1A4A     		ldr	r2, .L171+16
 2441 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2442 0062 02EB8303 		add	r3, r2, r3, lsl #2
 2443 0066 5B68     		ldr	r3, [r3, #4]
 2444              	.LVL181:
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2445              		.loc 1 3475 21 view .LVU715
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2446              		.loc 1 3475 21 view .LVU716
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2447              		.loc 1 3475 21 view .LVU717
 2448 0068 A360     		str	r3, [r4, #8]
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2449              		.loc 1 3475 21 view .LVU718
 2450 006a 9968     		ldr	r1, [r3, #8]
 2451 006c E160     		str	r1, [r4, #12]
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2452              		.loc 1 3475 21 view .LVU719
 2453 006e 4F60     		str	r7, [r1, #4]
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2454              		.loc 1 3475 21 view .LVU720
 2455 0070 9F60     		str	r7, [r3, #8]
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2456              		.loc 1 3475 21 view .LVU721
 2457 0072 E36A     		ldr	r3, [r4, #44]
 2458              	.LVL182:
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2459              		.loc 1 3475 21 is_stmt 0 view .LVU722
 2460 0074 03EB8301 		add	r1, r3, r3, lsl #2
 2461 0078 02EB8100 		add	r0, r2, r1, lsl #2
 2462 007c 6061     		str	r0, [r4, #20]
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2463              		.loc 1 3475 21 is_stmt 1 view .LVU723
 2464 007e 52F82110 		ldr	r1, [r2, r1, lsl #2]
 2465 0082 0131     		adds	r1, r1, #1
 2466 0084 03EB8303 		add	r3, r3, r3, lsl #2
 2467 0088 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  /tmp/ccJw1tyY.s 			page 209


 2468              	.LBE211:
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2469              		.loc 1 3475 21 view .LVU724
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2470              		.loc 1 3475 21 view .LVU725
3475:FreeRTOS-Kernel/tasks.c ****                 }
 2471              		.loc 1 3475 21 view .LVU726
 2472              	.LVL183:
 2473              	.L165:
3498:FreeRTOS-Kernel/tasks.c ****             }
 2474              		.loc 1 3498 41 view .LVU727
3501:FreeRTOS-Kernel/tasks.c **** 
 2475              		.loc 1 3501 9 view .LVU728
 2476              	.LBB212:
 2477              	.LBI212:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2478              		.loc 2 249 30 view .LVU729
 2479              	.LBB213:
 2480              		.loc 2 251 5 view .LVU730
 2481              		.syntax unified
 2482              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2483 008c 85F31188 		   msr basepri, r5 
 2484              	@ 0 "" 2
 2485              		.thumb
 2486              		.syntax unified
 2487              	.LBE213:
 2488              	.LBE212:
3503:FreeRTOS-Kernel/tasks.c **** 
 2489              		.loc 1 3503 57 view .LVU731
3505:FreeRTOS-Kernel/tasks.c ****     }
 2490              		.loc 1 3505 9 view .LVU732
3506:FreeRTOS-Kernel/tasks.c **** 
 2491              		.loc 1 3506 5 is_stmt 0 view .LVU733
 2492 0090 3046     		mov	r0, r6
 2493 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2494              	.LVL184:
 2495              	.L170:
3422:FreeRTOS-Kernel/tasks.c **** 
 2496              		.loc 1 3422 9 is_stmt 1 view .LVU734
 2497              	.LBB214:
 2498              	.LBI214:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2499              		.loc 2 213 30 view .LVU735
 2500              	.LBB215:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2501              		.loc 2 215 5 view .LVU736
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2502              		.loc 2 217 5 view .LVU737
 2503              		.syntax unified
 2504              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2505 0094 4FF05003 		   mov r3, #80                                              
 2506 0098 83F31188 	   msr basepri, r3                                         
 2507 009c BFF36F8F 	   isb                                                     
 2508 00a0 BFF34F8F 	   dsb                                                     
 2509              	
 2510              	@ 0 "" 2
 2511              	.LVL185:
ARM GAS  /tmp/ccJw1tyY.s 			page 210


 2512              		.thumb
 2513              		.syntax unified
 2514              	.L164:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2515              		.loc 2 217 5 is_stmt 0 view .LVU738
 2516              	.LBE215:
 2517              	.LBE214:
3422:FreeRTOS-Kernel/tasks.c **** 
 2518              		.loc 1 3422 9 is_stmt 1 discriminator 1 view .LVU739
3422:FreeRTOS-Kernel/tasks.c **** 
 2519              		.loc 1 3422 9 discriminator 1 view .LVU740
 2520 00a4 FEE7     		b	.L164
 2521              	.LVL186:
 2522              	.L168:
3416:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2523              		.loc 1 3416 20 is_stmt 0 view .LVU741
 2524 00a6 0026     		movs	r6, #0
 2525 00a8 CDE7     		b	.L167
 2526              	.L166:
3482:FreeRTOS-Kernel/tasks.c ****                 }
 2527              		.loc 1 3482 21 is_stmt 1 view .LVU742
 2528 00aa 04F11801 		add	r1, r4, #24
 2529 00ae 0748     		ldr	r0, .L171+20
 2530 00b0 FFF7FEFF 		bl	vListInsertEnd
 2531              	.LVL187:
3416:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2532              		.loc 1 3416 20 is_stmt 0 view .LVU743
 2533 00b4 0026     		movs	r6, #0
 2534 00b6 E9E7     		b	.L165
 2535              	.L172:
 2536              		.align	2
 2537              	.L171:
 2538 00b8 00000000 		.word	uxSchedulerSuspended
 2539 00bc 00000000 		.word	pxCurrentTCB
 2540 00c0 00000000 		.word	xYieldPendings
 2541 00c4 00000000 		.word	uxTopReadyPriority
 2542 00c8 00000000 		.word	pxReadyTasksLists
 2543 00cc 00000000 		.word	xPendingReadyList
 2544              		.cfi_endproc
 2545              	.LFE20:
 2547              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2548              		.align	1
 2549              		.global	vTaskStartScheduler
 2550              		.syntax unified
 2551              		.thumb
 2552              		.thumb_func
 2554              	vTaskStartScheduler:
 2555              	.LFB22:
3666:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
 2556              		.loc 1 3666 1 is_stmt 1 view -0
 2557              		.cfi_startproc
 2558              		@ args = 0, pretend = 0, frame = 0
 2559              		@ frame_needed = 0, uses_anonymous_args = 0
 2560 0000 08B5     		push	{r3, lr}
 2561              	.LCFI24:
 2562              		.cfi_def_cfa_offset 8
 2563              		.cfi_offset 3, -8
ARM GAS  /tmp/ccJw1tyY.s 			page 211


 2564              		.cfi_offset 14, -4
3667:FreeRTOS-Kernel/tasks.c **** 
 2565              		.loc 1 3667 5 view .LVU745
3669:FreeRTOS-Kernel/tasks.c **** 
 2566              		.loc 1 3669 37 view .LVU746
3679:FreeRTOS-Kernel/tasks.c **** 
 2567              		.loc 1 3679 5 view .LVU747
3679:FreeRTOS-Kernel/tasks.c **** 
 2568              		.loc 1 3679 15 is_stmt 0 view .LVU748
 2569 0002 FFF7FEFF 		bl	prvCreateIdleTasks
 2570              	.LVL188:
3683:FreeRTOS-Kernel/tasks.c ****         {
 2571              		.loc 1 3683 9 is_stmt 1 view .LVU749
3683:FreeRTOS-Kernel/tasks.c ****         {
 2572              		.loc 1 3683 11 is_stmt 0 view .LVU750
 2573 0006 0128     		cmp	r0, #1
 2574 0008 05D0     		beq	.L178
 2575              	.L174:
 2576              	.LVL189:
3753:FreeRTOS-Kernel/tasks.c ****     }
 2577              		.loc 1 3753 9 is_stmt 1 view .LVU751
 2578 000a B0F1FF3F 		cmp	r0, #-1
 2579 000e 1BD0     		beq	.L179
 2580              	.L175:
3753:FreeRTOS-Kernel/tasks.c ****     }
 2581              		.loc 1 3753 73 discriminator 2 view .LVU752
3758:FreeRTOS-Kernel/tasks.c **** 
 2582              		.loc 1 3758 5 discriminator 2 view .LVU753
3762:FreeRTOS-Kernel/tasks.c **** 
 2583              		.loc 1 3762 5 discriminator 2 view .LVU754
 2584 0010 124B     		ldr	r3, .L180
 2585 0012 1B68     		ldr	r3, [r3]
3764:FreeRTOS-Kernel/tasks.c **** }
 2586              		.loc 1 3764 38 discriminator 2 view .LVU755
3765:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2587              		.loc 1 3765 1 is_stmt 0 discriminator 2 view .LVU756
 2588 0014 08BD     		pop	{r3, pc}
 2589              	.LVL190:
 2590              	.L178:
3685:FreeRTOS-Kernel/tasks.c ****         }
 2591              		.loc 1 3685 13 is_stmt 1 view .LVU757
3685:FreeRTOS-Kernel/tasks.c ****         }
 2592              		.loc 1 3685 23 is_stmt 0 view .LVU758
 2593 0016 FFF7FEFF 		bl	xTimerCreateTimerTask
 2594              	.LVL191:
3689:FreeRTOS-Kernel/tasks.c ****         }
 2595              		.loc 1 3689 37 is_stmt 1 view .LVU759
3694:FreeRTOS-Kernel/tasks.c ****     {
 2596              		.loc 1 3694 5 view .LVU760
3694:FreeRTOS-Kernel/tasks.c ****     {
 2597              		.loc 1 3694 7 is_stmt 0 view .LVU761
 2598 001a 0128     		cmp	r0, #1
 2599 001c F5D1     		bne	.L174
3710:FreeRTOS-Kernel/tasks.c **** 
 2600              		.loc 1 3710 9 is_stmt 1 view .LVU762
 2601              	.LBB216:
 2602              	.LBI216:
ARM GAS  /tmp/ccJw1tyY.s 			page 212


 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2603              		.loc 2 213 30 view .LVU763
 2604              	.LBB217:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2605              		.loc 2 215 5 view .LVU764
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2606              		.loc 2 217 5 view .LVU765
 2607              		.syntax unified
 2608              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2609 001e 4FF05003 		   mov r3, #80                                              
 2610 0022 83F31188 	   msr basepri, r3                                         
 2611 0026 BFF36F8F 	   isb                                                     
 2612 002a BFF34F8F 	   dsb                                                     
 2613              	
 2614              	@ 0 "" 2
 2615              		.thumb
 2616              		.syntax unified
 2617              	.LBE217:
 2618              	.LBE216:
3720:FreeRTOS-Kernel/tasks.c ****         xSchedulerRunning = pdTRUE;
 2619              		.loc 1 3720 9 view .LVU766
3720:FreeRTOS-Kernel/tasks.c ****         xSchedulerRunning = pdTRUE;
 2620              		.loc 1 3720 30 is_stmt 0 view .LVU767
 2621 002e 0C4B     		ldr	r3, .L180+4
 2622 0030 4FF0FF32 		mov	r2, #-1
 2623 0034 1A60     		str	r2, [r3]
3721:FreeRTOS-Kernel/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2624              		.loc 1 3721 9 is_stmt 1 view .LVU768
3721:FreeRTOS-Kernel/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2625              		.loc 1 3721 27 is_stmt 0 view .LVU769
 2626 0036 0B4B     		ldr	r3, .L180+8
 2627 0038 0122     		movs	r2, #1
 2628 003a 1A60     		str	r2, [r3]
3722:FreeRTOS-Kernel/tasks.c **** 
 2629              		.loc 1 3722 9 is_stmt 1 view .LVU770
3722:FreeRTOS-Kernel/tasks.c **** 
 2630              		.loc 1 3722 20 is_stmt 0 view .LVU771
 2631 003c 0A4B     		ldr	r3, .L180+12
 2632 003e 0022     		movs	r2, #0
 2633 0040 1A60     		str	r2, [r3]
3730:FreeRTOS-Kernel/tasks.c **** 
 2634              		.loc 1 3730 49 is_stmt 1 view .LVU772
3732:FreeRTOS-Kernel/tasks.c **** 
 2635              		.loc 1 3732 32 view .LVU773
3739:FreeRTOS-Kernel/tasks.c **** 
 2636              		.loc 1 3739 9 view .LVU774
3739:FreeRTOS-Kernel/tasks.c **** 
 2637              		.loc 1 3739 18 is_stmt 0 view .LVU775
 2638 0042 FFF7FEFF 		bl	xPortStartScheduler
 2639              	.LVL192:
3739:FreeRTOS-Kernel/tasks.c **** 
 2640              		.loc 1 3739 18 view .LVU776
 2641 0046 E3E7     		b	.L175
 2642              	.LVL193:
 2643              	.L179:
3753:FreeRTOS-Kernel/tasks.c ****     }
 2644              		.loc 1 3753 9 is_stmt 1 view .LVU777
ARM GAS  /tmp/ccJw1tyY.s 			page 213


 2645              	.LBB218:
 2646              	.LBI218:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2647              		.loc 2 213 30 view .LVU778
 2648              	.LBB219:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2649              		.loc 2 215 5 view .LVU779
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2650              		.loc 2 217 5 view .LVU780
 2651              		.syntax unified
 2652              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2653 0048 4FF05003 		   mov r3, #80                                              
 2654 004c 83F31188 	   msr basepri, r3                                         
 2655 0050 BFF36F8F 	   isb                                                     
 2656 0054 BFF34F8F 	   dsb                                                     
 2657              	
 2658              	@ 0 "" 2
 2659              	.LVL194:
 2660              		.thumb
 2661              		.syntax unified
 2662              	.L176:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2663              		.loc 2 217 5 is_stmt 0 view .LVU781
 2664              	.LBE219:
 2665              	.LBE218:
3753:FreeRTOS-Kernel/tasks.c ****     }
 2666              		.loc 1 3753 9 is_stmt 1 discriminator 1 view .LVU782
3753:FreeRTOS-Kernel/tasks.c ****     }
 2667              		.loc 1 3753 9 discriminator 1 view .LVU783
 2668 0058 FEE7     		b	.L176
 2669              	.L181:
 2670 005a 00BF     		.align	2
 2671              	.L180:
 2672 005c 00000000 		.word	uxTopUsedPriority
 2673 0060 00000000 		.word	xNextTaskUnblockTime
 2674 0064 00000000 		.word	xSchedulerRunning
 2675 0068 00000000 		.word	xTickCount
 2676              		.cfi_endproc
 2677              	.LFE22:
 2679              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2680              		.align	1
 2681              		.global	vTaskEndScheduler
 2682              		.syntax unified
 2683              		.thumb
 2684              		.thumb_func
 2686              	vTaskEndScheduler:
 2687              	.LFB23:
3769:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskEndScheduler();
 2688              		.loc 1 3769 1 view -0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 0
 2691              		@ frame_needed = 0, uses_anonymous_args = 0
 2692 0000 10B5     		push	{r4, lr}
 2693              	.LCFI25:
 2694              		.cfi_def_cfa_offset 8
 2695              		.cfi_offset 4, -8
 2696              		.cfi_offset 14, -4
ARM GAS  /tmp/ccJw1tyY.s 			page 214


3770:FreeRTOS-Kernel/tasks.c **** 
 2697              		.loc 1 3770 35 view .LVU785
 2698              	.LBB220:
3774:FreeRTOS-Kernel/tasks.c **** 
 2699              		.loc 1 3774 9 view .LVU786
3779:FreeRTOS-Kernel/tasks.c ****         }
 2700              		.loc 1 3779 13 view .LVU787
 2701 0002 FFF7FEFF 		bl	xTimerGetTimerDaemonTaskHandle
 2702              	.LVL195:
 2703 0006 FFF7FEFF 		bl	vTaskDelete
 2704              	.LVL196:
3784:FreeRTOS-Kernel/tasks.c ****         {
 2705              		.loc 1 3784 9 view .LVU788
3784:FreeRTOS-Kernel/tasks.c ****         {
 2706              		.loc 1 3784 22 is_stmt 0 view .LVU789
 2707 000a 0024     		movs	r4, #0
 2708              	.LVL197:
 2709              	.L183:
3784:FreeRTOS-Kernel/tasks.c ****         {
 2710              		.loc 1 3784 35 is_stmt 1 discriminator 1 view .LVU790
 2711 000c 002C     		cmp	r4, #0
 2712 000e 0FDD     		ble	.L184
3793:FreeRTOS-Kernel/tasks.c ****     }
 2713              		.loc 1 3793 9 view .LVU791
 2714 0010 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2715              	.LVL198:
 2716              	.LBE220:
3800:FreeRTOS-Kernel/tasks.c ****     xSchedulerRunning = pdFALSE;
 2717              		.loc 1 3800 5 view .LVU792
 2718              	.LBB221:
 2719              	.LBI221:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2720              		.loc 2 213 30 view .LVU793
 2721              	.LBB222:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2722              		.loc 2 215 5 view .LVU794
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2723              		.loc 2 217 5 view .LVU795
 2724              		.syntax unified
 2725              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2726 0014 4FF05003 		   mov r3, #80                                              
 2727 0018 83F31188 	   msr basepri, r3                                         
 2728 001c BFF36F8F 	   isb                                                     
 2729 0020 BFF34F8F 	   dsb                                                     
 2730              	
 2731              	@ 0 "" 2
 2732              		.thumb
 2733              		.syntax unified
 2734              	.LBE222:
 2735              	.LBE221:
3801:FreeRTOS-Kernel/tasks.c **** 
 2736              		.loc 1 3801 5 view .LVU796
3801:FreeRTOS-Kernel/tasks.c **** 
 2737              		.loc 1 3801 23 is_stmt 0 view .LVU797
 2738 0024 064B     		ldr	r3, .L186
 2739 0026 0022     		movs	r2, #0
 2740 0028 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccJw1tyY.s 			page 215


3805:FreeRTOS-Kernel/tasks.c **** 
 2741              		.loc 1 3805 5 is_stmt 1 view .LVU798
 2742 002a FFF7FEFF 		bl	vPortEndScheduler
 2743              	.LVL199:
3807:FreeRTOS-Kernel/tasks.c **** }
 2744              		.loc 1 3807 36 view .LVU799
3808:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
 2745              		.loc 1 3808 1 is_stmt 0 view .LVU800
 2746 002e 10BD     		pop	{r4, pc}
 2747              	.LVL200:
 2748              	.L184:
 2749              	.LBB223:
3786:FreeRTOS-Kernel/tasks.c ****         }
 2750              		.loc 1 3786 13 is_stmt 1 discriminator 3 view .LVU801
 2751 0030 044B     		ldr	r3, .L186+4
 2752 0032 53F82400 		ldr	r0, [r3, r4, lsl #2]
 2753 0036 FFF7FEFF 		bl	vTaskDelete
 2754              	.LVL201:
3784:FreeRTOS-Kernel/tasks.c ****         {
 2755              		.loc 1 3784 82 discriminator 3 view .LVU802
 2756 003a 0134     		adds	r4, r4, #1
 2757              	.LVL202:
3784:FreeRTOS-Kernel/tasks.c ****         {
 2758              		.loc 1 3784 82 is_stmt 0 discriminator 3 view .LVU803
 2759 003c E6E7     		b	.L183
 2760              	.L187:
 2761 003e 00BF     		.align	2
 2762              	.L186:
 2763 0040 00000000 		.word	xSchedulerRunning
 2764 0044 00000000 		.word	xIdleTaskHandles
 2765              	.LBE223:
 2766              		.cfi_endproc
 2767              	.LFE23:
 2769              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2770              		.align	1
 2771              		.global	vTaskSuspendAll
 2772              		.syntax unified
 2773              		.thumb
 2774              		.thumb_func
 2776              	vTaskSuspendAll:
 2777              	.LFB24:
3812:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskSuspendAll();
 2778              		.loc 1 3812 1 is_stmt 1 view -0
 2779              		.cfi_startproc
 2780              		@ args = 0, pretend = 0, frame = 0
 2781              		@ frame_needed = 0, uses_anonymous_args = 0
 2782              		@ link register save eliminated.
3813:FreeRTOS-Kernel/tasks.c **** 
 2783              		.loc 1 3813 33 view .LVU805
3824:FreeRTOS-Kernel/tasks.c **** 
 2784              		.loc 1 3824 31 view .LVU806
3828:FreeRTOS-Kernel/tasks.c **** 
 2785              		.loc 1 3828 9 view .LVU807
3828:FreeRTOS-Kernel/tasks.c **** 
 2786              		.loc 1 3828 32 is_stmt 0 view .LVU808
 2787 0000 024A     		ldr	r2, .L189
 2788 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccJw1tyY.s 			page 216


 2789 0004 0133     		adds	r3, r3, #1
3828:FreeRTOS-Kernel/tasks.c **** 
 2790              		.loc 1 3828 30 view .LVU809
 2791 0006 1360     		str	r3, [r2]
3832:FreeRTOS-Kernel/tasks.c ****     }
 2792              		.loc 1 3832 9 is_stmt 1 view .LVU810
3887:FreeRTOS-Kernel/tasks.c **** }
 2793              		.loc 1 3887 34 view .LVU811
3888:FreeRTOS-Kernel/tasks.c **** 
 2794              		.loc 1 3888 1 is_stmt 0 view .LVU812
 2795 0008 7047     		bx	lr
 2796              	.L190:
 2797 000a 00BF     		.align	2
 2798              	.L189:
 2799 000c 00000000 		.word	uxSchedulerSuspended
 2800              		.cfi_endproc
 2801              	.LFE24:
 2803              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2804              		.align	1
 2805              		.global	xTaskGetTickCount
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2810              	xTaskGetTickCount:
 2811              	.LFB26:
4107:FreeRTOS-Kernel/tasks.c ****     TickType_t xTicks;
 2812              		.loc 1 4107 1 is_stmt 1 view -0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 0
 2815              		@ frame_needed = 0, uses_anonymous_args = 0
 2816              		@ link register save eliminated.
4108:FreeRTOS-Kernel/tasks.c **** 
 2817              		.loc 1 4108 5 view .LVU814
4110:FreeRTOS-Kernel/tasks.c **** 
 2818              		.loc 1 4110 35 view .LVU815
4113:FreeRTOS-Kernel/tasks.c ****     {
 2819              		.loc 1 4113 35 view .LVU816
4115:FreeRTOS-Kernel/tasks.c ****     }
 2820              		.loc 1 4115 9 view .LVU817
4115:FreeRTOS-Kernel/tasks.c ****     }
 2821              		.loc 1 4115 16 is_stmt 0 view .LVU818
 2822 0000 014B     		ldr	r3, .L192
 2823 0002 1868     		ldr	r0, [r3]
 2824              	.LVL203:
4117:FreeRTOS-Kernel/tasks.c **** 
 2825              		.loc 1 4117 34 is_stmt 1 view .LVU819
4119:FreeRTOS-Kernel/tasks.c **** 
 2826              		.loc 1 4119 44 view .LVU820
4121:FreeRTOS-Kernel/tasks.c **** }
 2827              		.loc 1 4121 5 view .LVU821
4122:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2828              		.loc 1 4122 1 is_stmt 0 view .LVU822
 2829 0004 7047     		bx	lr
 2830              	.L193:
 2831 0006 00BF     		.align	2
 2832              	.L192:
 2833 0008 00000000 		.word	xTickCount
ARM GAS  /tmp/ccJw1tyY.s 			page 217


 2834              		.cfi_endproc
 2835              	.LFE26:
 2837              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2838              		.align	1
 2839              		.global	xTaskGetTickCountFromISR
 2840              		.syntax unified
 2841              		.thumb
 2842              		.thumb_func
 2844              	xTaskGetTickCountFromISR:
 2845              	.LFB27:
4126:FreeRTOS-Kernel/tasks.c ****     TickType_t xReturn;
 2846              		.loc 1 4126 1 is_stmt 1 view -0
 2847              		.cfi_startproc
 2848              		@ args = 0, pretend = 0, frame = 0
 2849              		@ frame_needed = 0, uses_anonymous_args = 0
 2850 0000 08B5     		push	{r3, lr}
 2851              	.LCFI26:
 2852              		.cfi_def_cfa_offset 8
 2853              		.cfi_offset 3, -8
 2854              		.cfi_offset 14, -4
4127:FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2855              		.loc 1 4127 5 view .LVU824
4128:FreeRTOS-Kernel/tasks.c **** 
 2856              		.loc 1 4128 5 view .LVU825
4130:FreeRTOS-Kernel/tasks.c **** 
 2857              		.loc 1 4130 42 view .LVU826
4146:FreeRTOS-Kernel/tasks.c **** 
 2858              		.loc 1 4146 5 view .LVU827
 2859 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2860              	.LVL204:
4148:FreeRTOS-Kernel/tasks.c ****     {
 2861              		.loc 1 4148 5 view .LVU828
4150:FreeRTOS-Kernel/tasks.c ****     }
 2862              		.loc 1 4150 9 view .LVU829
4150:FreeRTOS-Kernel/tasks.c ****     }
 2863              		.loc 1 4150 17 is_stmt 0 view .LVU830
 2864 0006 014B     		ldr	r3, .L196
 2865 0008 1868     		ldr	r0, [r3]
 2866              	.LVL205:
4152:FreeRTOS-Kernel/tasks.c **** 
 2867              		.loc 1 4152 5 is_stmt 1 view .LVU831
4154:FreeRTOS-Kernel/tasks.c **** 
 2868              		.loc 1 4154 52 view .LVU832
4156:FreeRTOS-Kernel/tasks.c **** }
 2869              		.loc 1 4156 5 view .LVU833
4157:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2870              		.loc 1 4157 1 is_stmt 0 view .LVU834
 2871 000a 08BD     		pop	{r3, pc}
 2872              	.L197:
 2873              		.align	2
 2874              	.L196:
 2875 000c 00000000 		.word	xTickCount
 2876              		.cfi_endproc
 2877              	.LFE27:
 2879              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2880              		.align	1
 2881              		.global	uxTaskGetNumberOfTasks
ARM GAS  /tmp/ccJw1tyY.s 			page 218


 2882              		.syntax unified
 2883              		.thumb
 2884              		.thumb_func
 2886              	uxTaskGetNumberOfTasks:
 2887              	.LFB28:
4161:FreeRTOS-Kernel/tasks.c ****     traceENTER_uxTaskGetNumberOfTasks();
 2888              		.loc 1 4161 1 is_stmt 1 view -0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 0
 2891              		@ frame_needed = 0, uses_anonymous_args = 0
 2892              		@ link register save eliminated.
4162:FreeRTOS-Kernel/tasks.c **** 
 2893              		.loc 1 4162 40 view .LVU836
4166:FreeRTOS-Kernel/tasks.c **** 
 2894              		.loc 1 4166 65 view .LVU837
4168:FreeRTOS-Kernel/tasks.c **** }
 2895              		.loc 1 4168 5 view .LVU838
4168:FreeRTOS-Kernel/tasks.c **** }
 2896              		.loc 1 4168 12 is_stmt 0 view .LVU839
 2897 0000 014B     		ldr	r3, .L199
 2898 0002 1868     		ldr	r0, [r3]
4169:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2899              		.loc 1 4169 1 view .LVU840
 2900 0004 7047     		bx	lr
 2901              	.L200:
 2902 0006 00BF     		.align	2
 2903              	.L199:
 2904 0008 00000000 		.word	uxCurrentNumberOfTasks
 2905              		.cfi_endproc
 2906              	.LFE28:
 2908              		.section	.text.pcTaskGetName,"ax",%progbits
 2909              		.align	1
 2910              		.global	pcTaskGetName
 2911              		.syntax unified
 2912              		.thumb
 2913              		.thumb_func
 2915              	pcTaskGetName:
 2916              	.LVL206:
 2917              	.LFB29:
4173:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
 2918              		.loc 1 4173 1 is_stmt 1 view -0
 2919              		.cfi_startproc
 2920              		@ args = 0, pretend = 0, frame = 0
 2921              		@ frame_needed = 0, uses_anonymous_args = 0
 2922              		@ link register save eliminated.
4174:FreeRTOS-Kernel/tasks.c **** 
 2923              		.loc 1 4174 5 view .LVU842
4176:FreeRTOS-Kernel/tasks.c **** 
 2924              		.loc 1 4176 45 view .LVU843
4180:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
 2925              		.loc 1 4180 5 view .LVU844
4180:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
 2926              		.loc 1 4180 13 is_stmt 0 view .LVU845
 2927 0000 0346     		mov	r3, r0
 2928 0002 10B1     		cbz	r0, .L204
 2929              	.LVL207:
 2930              	.L202:
ARM GAS  /tmp/ccJw1tyY.s 			page 219


4181:FreeRTOS-Kernel/tasks.c **** 
 2931              		.loc 1 4181 26 is_stmt 1 discriminator 2 view .LVU846
4183:FreeRTOS-Kernel/tasks.c **** 
 2932              		.loc 1 4183 61 discriminator 2 view .LVU847
4185:FreeRTOS-Kernel/tasks.c **** }
 2933              		.loc 1 4185 5 discriminator 2 view .LVU848
4186:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2934              		.loc 1 4186 1 is_stmt 0 discriminator 2 view .LVU849
 2935 0004 03F13400 		add	r0, r3, #52
 2936 0008 7047     		bx	lr
 2937              	.LVL208:
 2938              	.L204:
4180:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
 2939              		.loc 1 4180 13 discriminator 1 view .LVU850
 2940 000a 064B     		ldr	r3, .L205
 2941 000c 1B68     		ldr	r3, [r3]
 2942              	.LVL209:
4181:FreeRTOS-Kernel/tasks.c **** 
 2943              		.loc 1 4181 5 is_stmt 1 discriminator 1 view .LVU851
 2944 000e 002B     		cmp	r3, #0
 2945 0010 F8D1     		bne	.L202
4181:FreeRTOS-Kernel/tasks.c **** 
 2946              		.loc 1 4181 5 view .LVU852
 2947              	.LBB224:
 2948              	.LBI224:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2949              		.loc 2 213 30 view .LVU853
 2950              	.LBB225:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2951              		.loc 2 215 5 view .LVU854
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2952              		.loc 2 217 5 view .LVU855
 2953              		.syntax unified
 2954              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2955 0012 4FF05003 		   mov r3, #80                                              
 2956 0016 83F31188 	   msr basepri, r3                                         
 2957 001a BFF36F8F 	   isb                                                     
 2958 001e BFF34F8F 	   dsb                                                     
 2959              	
 2960              	@ 0 "" 2
 2961              	.LVL210:
 2962              		.thumb
 2963              		.syntax unified
 2964              	.L203:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2965              		.loc 2 217 5 is_stmt 0 view .LVU856
 2966              	.LBE225:
 2967              	.LBE224:
4181:FreeRTOS-Kernel/tasks.c **** 
 2968              		.loc 1 4181 5 is_stmt 1 discriminator 1 view .LVU857
4181:FreeRTOS-Kernel/tasks.c **** 
 2969              		.loc 1 4181 5 discriminator 1 view .LVU858
 2970 0022 FEE7     		b	.L203
 2971              	.L206:
 2972              		.align	2
 2973              	.L205:
 2974 0024 00000000 		.word	pxCurrentTCB
ARM GAS  /tmp/ccJw1tyY.s 			page 220


 2975              		.cfi_endproc
 2976              	.LFE29:
 2978              		.section	.text.xTaskGetStaticBuffers,"ax",%progbits
 2979              		.align	1
 2980              		.global	xTaskGetStaticBuffers
 2981              		.syntax unified
 2982              		.thumb
 2983              		.thumb_func
 2985              	xTaskGetStaticBuffers:
 2986              	.LVL211:
 2987              	.LFB30:
4334:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
 2988              		.loc 1 4334 5 view -0
 2989              		.cfi_startproc
 2990              		@ args = 0, pretend = 0, frame = 0
 2991              		@ frame_needed = 0, uses_anonymous_args = 0
 2992              		@ link register save eliminated.
4335:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 2993              		.loc 1 4335 9 view .LVU860
4336:FreeRTOS-Kernel/tasks.c **** 
 2994              		.loc 1 4336 9 view .LVU861
4338:FreeRTOS-Kernel/tasks.c **** 
 2995              		.loc 1 4338 82 view .LVU862
4340:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2996              		.loc 1 4340 9 view .LVU863
 2997 0000 0B46     		mov	r3, r1
 2998 0002 31B1     		cbz	r1, .L213
4340:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2999              		.loc 1 4340 48 discriminator 2 view .LVU864
4341:FreeRTOS-Kernel/tasks.c **** 
 3000              		.loc 1 4341 9 discriminator 2 view .LVU865
 3001 0004 72B1     		cbz	r2, .L214
4341:FreeRTOS-Kernel/tasks.c **** 
 3002              		.loc 1 4341 46 discriminator 2 view .LVU866
4343:FreeRTOS-Kernel/tasks.c **** 
 3003              		.loc 1 4343 9 discriminator 2 view .LVU867
4343:FreeRTOS-Kernel/tasks.c **** 
 3004              		.loc 1 4343 17 is_stmt 0 discriminator 2 view .LVU868
 3005 0006 B0B1     		cbz	r0, .L215
 3006              	.LVL212:
 3007              	.L212:
4369:FreeRTOS-Kernel/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 3008              		.loc 1 4369 13 is_stmt 1 discriminator 4 view .LVU869
4369:FreeRTOS-Kernel/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 3009              		.loc 1 4369 37 is_stmt 0 discriminator 4 view .LVU870
 3010 0008 016B     		ldr	r1, [r0, #48]
4369:FreeRTOS-Kernel/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 3011              		.loc 1 4369 30 discriminator 4 view .LVU871
 3012 000a 1960     		str	r1, [r3]
4370:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
 3013              		.loc 1 4370 13 is_stmt 1 discriminator 4 view .LVU872
4370:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
 3014              		.loc 1 4370 28 is_stmt 0 discriminator 4 view .LVU873
 3015 000c 1060     		str	r0, [r2]
4371:FreeRTOS-Kernel/tasks.c ****         }
 3016              		.loc 1 4371 13 is_stmt 1 discriminator 4 view .LVU874
 3017              	.LVL213:
ARM GAS  /tmp/ccJw1tyY.s 			page 221


4375:FreeRTOS-Kernel/tasks.c **** 
 3018              		.loc 1 4375 53 discriminator 4 view .LVU875
4377:FreeRTOS-Kernel/tasks.c ****     }
 3019              		.loc 1 4377 9 discriminator 4 view .LVU876
4378:FreeRTOS-Kernel/tasks.c **** 
 3020              		.loc 1 4378 5 is_stmt 0 discriminator 4 view .LVU877
 3021 000e 0120     		movs	r0, #1
 3022              	.LVL214:
4378:FreeRTOS-Kernel/tasks.c **** 
 3023              		.loc 1 4378 5 discriminator 4 view .LVU878
 3024 0010 7047     		bx	lr
 3025              	.LVL215:
 3026              	.L213:
4340:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 3027              		.loc 1 4340 9 is_stmt 1 view .LVU879
 3028              	.LBB226:
 3029              	.LBI226:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3030              		.loc 2 213 30 view .LVU880
 3031              	.LBB227:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3032              		.loc 2 215 5 view .LVU881
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3033              		.loc 2 217 5 view .LVU882
 3034              		.syntax unified
 3035              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3036 0012 4FF05003 		   mov r3, #80                                              
 3037 0016 83F31188 	   msr basepri, r3                                         
 3038 001a BFF36F8F 	   isb                                                     
 3039 001e BFF34F8F 	   dsb                                                     
 3040              	
 3041              	@ 0 "" 2
 3042              	.LVL216:
 3043              		.thumb
 3044              		.syntax unified
 3045              	.L209:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3046              		.loc 2 217 5 is_stmt 0 view .LVU883
 3047              	.LBE227:
 3048              	.LBE226:
4340:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 3049              		.loc 1 4340 9 is_stmt 1 discriminator 1 view .LVU884
4340:FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 3050              		.loc 1 4340 9 discriminator 1 view .LVU885
 3051 0022 FEE7     		b	.L209
 3052              	.L214:
4341:FreeRTOS-Kernel/tasks.c **** 
 3053              		.loc 1 4341 9 view .LVU886
 3054              	.LBB228:
 3055              	.LBI228:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3056              		.loc 2 213 30 view .LVU887
 3057              	.LBB229:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3058              		.loc 2 215 5 view .LVU888
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3059              		.loc 2 217 5 view .LVU889
ARM GAS  /tmp/ccJw1tyY.s 			page 222


 3060              		.syntax unified
 3061              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3062 0024 4FF05003 		   mov r3, #80                                              
 3063 0028 83F31188 	   msr basepri, r3                                         
 3064 002c BFF36F8F 	   isb                                                     
 3065 0030 BFF34F8F 	   dsb                                                     
 3066              	
 3067              	@ 0 "" 2
 3068              	.LVL217:
 3069              		.thumb
 3070              		.syntax unified
 3071              	.L211:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3072              		.loc 2 217 5 is_stmt 0 view .LVU890
 3073              	.LBE229:
 3074              	.LBE228:
4341:FreeRTOS-Kernel/tasks.c **** 
 3075              		.loc 1 4341 9 is_stmt 1 discriminator 2 view .LVU891
4341:FreeRTOS-Kernel/tasks.c **** 
 3076              		.loc 1 4341 9 discriminator 2 view .LVU892
 3077 0034 FEE7     		b	.L211
 3078              	.L215:
4343:FreeRTOS-Kernel/tasks.c **** 
 3079              		.loc 1 4343 17 is_stmt 0 discriminator 1 view .LVU893
 3080 0036 0149     		ldr	r1, .L216
 3081              	.LVL218:
4343:FreeRTOS-Kernel/tasks.c **** 
 3082              		.loc 1 4343 17 discriminator 1 view .LVU894
 3083 0038 0868     		ldr	r0, [r1]
 3084              	.LVL219:
4343:FreeRTOS-Kernel/tasks.c **** 
 3085              		.loc 1 4343 17 discriminator 1 view .LVU895
 3086 003a E5E7     		b	.L212
 3087              	.L217:
 3088              		.align	2
 3089              	.L216:
 3090 003c 00000000 		.word	pxCurrentTCB
 3091              		.cfi_endproc
 3092              	.LFE30:
 3094              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3095              		.align	1
 3096              		.global	xTaskIncrementTick
 3097              		.syntax unified
 3098              		.thumb
 3099              		.thumb_func
 3101              	xTaskIncrementTick:
 3102              	.LFB32:
4671:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
 3103              		.loc 1 4671 1 is_stmt 1 view -0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 0
 3106              		@ frame_needed = 0, uses_anonymous_args = 0
 3107 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3108              	.LCFI27:
 3109              		.cfi_def_cfa_offset 24
 3110              		.cfi_offset 3, -24
 3111              		.cfi_offset 4, -20
ARM GAS  /tmp/ccJw1tyY.s 			page 223


 3112              		.cfi_offset 5, -16
 3113              		.cfi_offset 6, -12
 3114              		.cfi_offset 7, -8
 3115              		.cfi_offset 14, -4
4672:FreeRTOS-Kernel/tasks.c ****     TickType_t xItemValue;
 3116              		.loc 1 4672 5 view .LVU897
4673:FreeRTOS-Kernel/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3117              		.loc 1 4673 5 view .LVU898
4674:FreeRTOS-Kernel/tasks.c **** 
 3118              		.loc 1 4674 5 view .LVU899
 3119              	.LVL220:
4680:FreeRTOS-Kernel/tasks.c **** 
 3120              		.loc 1 4680 36 view .LVU900
4685:FreeRTOS-Kernel/tasks.c **** 
 3121              		.loc 1 4685 43 view .LVU901
4691:FreeRTOS-Kernel/tasks.c ****     {
 3122              		.loc 1 4691 5 view .LVU902
4691:FreeRTOS-Kernel/tasks.c ****     {
 3123              		.loc 1 4691 30 is_stmt 0 view .LVU903
 3124 0002 524B     		ldr	r3, .L242
 3125 0004 1B68     		ldr	r3, [r3]
4691:FreeRTOS-Kernel/tasks.c ****     {
 3126              		.loc 1 4691 7 view .LVU904
 3127 0006 002B     		cmp	r3, #0
 3128 0008 40F09980 		bne	.L219
 3129              	.LBB230:
4695:FreeRTOS-Kernel/tasks.c **** 
 3130              		.loc 1 4695 9 is_stmt 1 view .LVU905
4695:FreeRTOS-Kernel/tasks.c **** 
 3131              		.loc 1 4695 55 is_stmt 0 view .LVU906
 3132 000c 504B     		ldr	r3, .L242+4
 3133 000e 1C68     		ldr	r4, [r3]
4695:FreeRTOS-Kernel/tasks.c **** 
 3134              		.loc 1 4695 26 view .LVU907
 3135 0010 0134     		adds	r4, r4, #1
 3136              	.LVL221:
4699:FreeRTOS-Kernel/tasks.c **** 
 3137              		.loc 1 4699 9 is_stmt 1 view .LVU908
4699:FreeRTOS-Kernel/tasks.c **** 
 3138              		.loc 1 4699 20 is_stmt 0 view .LVU909
 3139 0012 1C60     		str	r4, [r3]
4701:FreeRTOS-Kernel/tasks.c ****         {
 3140              		.loc 1 4701 9 is_stmt 1 view .LVU910
4701:FreeRTOS-Kernel/tasks.c ****         {
 3141              		.loc 1 4701 11 is_stmt 0 view .LVU911
 3142 0014 C4B9     		cbnz	r4, .L220
4703:FreeRTOS-Kernel/tasks.c ****         }
 3143              		.loc 1 4703 13 is_stmt 1 view .LVU912
 3144              	.LBB231:
4703:FreeRTOS-Kernel/tasks.c ****         }
 3145              		.loc 1 4703 13 view .LVU913
4703:FreeRTOS-Kernel/tasks.c ****         }
 3146              		.loc 1 4703 13 view .LVU914
 3147 0016 4F4B     		ldr	r3, .L242+8
 3148 0018 1B68     		ldr	r3, [r3]
 3149 001a 1B68     		ldr	r3, [r3]
 3150 001c 43B1     		cbz	r3, .L221
ARM GAS  /tmp/ccJw1tyY.s 			page 224


4703:FreeRTOS-Kernel/tasks.c ****         }
 3151              		.loc 1 4703 13 view .LVU915
 3152              	.LBB232:
 3153              	.LBI232:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3154              		.loc 2 213 30 view .LVU916
 3155              	.LBB233:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3156              		.loc 2 215 5 view .LVU917
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3157              		.loc 2 217 5 view .LVU918
 3158              		.syntax unified
 3159              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3160 001e 4FF05003 		   mov r3, #80                                              
 3161 0022 83F31188 	   msr basepri, r3                                         
 3162 0026 BFF36F8F 	   isb                                                     
 3163 002a BFF34F8F 	   dsb                                                     
 3164              	
 3165              	@ 0 "" 2
 3166              	.LVL222:
 3167              		.thumb
 3168              		.syntax unified
 3169              	.L222:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3170              		.loc 2 217 5 is_stmt 0 view .LVU919
 3171              	.LBE233:
 3172              	.LBE232:
4703:FreeRTOS-Kernel/tasks.c ****         }
 3173              		.loc 1 4703 13 is_stmt 1 discriminator 1 view .LVU920
4703:FreeRTOS-Kernel/tasks.c ****         }
 3174              		.loc 1 4703 13 discriminator 1 view .LVU921
 3175 002e FEE7     		b	.L222
 3176              	.L221:
4703:FreeRTOS-Kernel/tasks.c ****         }
 3177              		.loc 1 4703 13 discriminator 2 view .LVU922
4703:FreeRTOS-Kernel/tasks.c ****         }
 3178              		.loc 1 4703 13 discriminator 2 view .LVU923
 3179 0030 484A     		ldr	r2, .L242+8
 3180 0032 1168     		ldr	r1, [r2]
 3181              	.LVL223:
4703:FreeRTOS-Kernel/tasks.c ****         }
 3182              		.loc 1 4703 13 discriminator 2 view .LVU924
 3183 0034 484B     		ldr	r3, .L242+12
 3184 0036 1868     		ldr	r0, [r3]
 3185 0038 1060     		str	r0, [r2]
4703:FreeRTOS-Kernel/tasks.c ****         }
 3186              		.loc 1 4703 13 discriminator 2 view .LVU925
 3187 003a 1960     		str	r1, [r3]
4703:FreeRTOS-Kernel/tasks.c ****         }
 3188              		.loc 1 4703 13 discriminator 2 view .LVU926
 3189 003c 474A     		ldr	r2, .L242+16
 3190 003e 1368     		ldr	r3, [r2]
 3191 0040 0133     		adds	r3, r3, #1
 3192 0042 1360     		str	r3, [r2]
4703:FreeRTOS-Kernel/tasks.c ****         }
 3193              		.loc 1 4703 13 discriminator 2 view .LVU927
 3194 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
ARM GAS  /tmp/ccJw1tyY.s 			page 225


 3195              	.LVL224:
4703:FreeRTOS-Kernel/tasks.c ****         }
 3196              		.loc 1 4703 13 is_stmt 0 discriminator 2 view .LVU928
 3197              	.LBE231:
4703:FreeRTOS-Kernel/tasks.c ****         }
 3198              		.loc 1 4703 13 is_stmt 1 discriminator 2 view .LVU929
 3199              	.L220:
4707:FreeRTOS-Kernel/tasks.c ****         }
 3200              		.loc 1 4707 37 view .LVU930
4714:FreeRTOS-Kernel/tasks.c ****         {
 3201              		.loc 1 4714 9 view .LVU931
4714:FreeRTOS-Kernel/tasks.c ****         {
 3202              		.loc 1 4714 29 is_stmt 0 view .LVU932
 3203 0048 454B     		ldr	r3, .L242+20
 3204 004a 1B68     		ldr	r3, [r3]
4714:FreeRTOS-Kernel/tasks.c ****         {
 3205              		.loc 1 4714 11 view .LVU933
 3206 004c A342     		cmp	r3, r4
 3207 004e 11D9     		bls	.L234
 3208              	.LBE230:
4674:FreeRTOS-Kernel/tasks.c **** 
 3209              		.loc 1 4674 16 view .LVU934
 3210 0050 0020     		movs	r0, #0
 3211              	.LVL225:
 3212              	.L224:
 3213              	.LBB239:
4814:FreeRTOS-Kernel/tasks.c ****                 {
 3214              		.loc 1 4814 17 is_stmt 1 view .LVU935
4814:FreeRTOS-Kernel/tasks.c ****                 {
 3215              		.loc 1 4814 21 is_stmt 0 view .LVU936
 3216 0052 444B     		ldr	r3, .L242+24
 3217 0054 1B68     		ldr	r3, [r3]
 3218 0056 DB6A     		ldr	r3, [r3, #44]
 3219 0058 03EB8303 		add	r3, r3, r3, lsl #2
 3220 005c 9A00     		lsls	r2, r3, #2
 3221 005e 424B     		ldr	r3, .L242+28
 3222 0060 9B58     		ldr	r3, [r3, r2]
4814:FreeRTOS-Kernel/tasks.c ****                 {
 3223              		.loc 1 4814 19 view .LVU937
 3224 0062 012B     		cmp	r3, #1
 3225 0064 00D9     		bls	.L232
4816:FreeRTOS-Kernel/tasks.c ****                 }
 3226              		.loc 1 4816 37 view .LVU938
 3227 0066 0120     		movs	r0, #1
 3228              	.LVL226:
 3229              	.L232:
4820:FreeRTOS-Kernel/tasks.c ****                 }
 3230              		.loc 1 4820 45 is_stmt 1 view .LVU939
4863:FreeRTOS-Kernel/tasks.c ****                 {
 3231              		.loc 1 4863 17 view .LVU940
4863:FreeRTOS-Kernel/tasks.c ****                 {
 3232              		.loc 1 4863 35 is_stmt 0 view .LVU941
 3233 0068 404B     		ldr	r3, .L242+32
 3234 006a 1B68     		ldr	r3, [r3]
4863:FreeRTOS-Kernel/tasks.c ****                 {
 3235              		.loc 1 4863 19 view .LVU942
 3236 006c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccJw1tyY.s 			page 226


 3237 006e 6BD0     		beq	.L218
4865:FreeRTOS-Kernel/tasks.c ****                 }
 3238              		.loc 1 4865 37 view .LVU943
 3239 0070 0120     		movs	r0, #1
 3240              	.LVL227:
4865:FreeRTOS-Kernel/tasks.c ****                 }
 3241              		.loc 1 4865 37 view .LVU944
 3242              	.LBE239:
4918:FreeRTOS-Kernel/tasks.c **** 
 3243              		.loc 1 4918 54 is_stmt 1 view .LVU945
4920:FreeRTOS-Kernel/tasks.c **** }
 3244              		.loc 1 4920 5 view .LVU946
4920:FreeRTOS-Kernel/tasks.c **** }
 3245              		.loc 1 4920 12 is_stmt 0 view .LVU947
 3246 0072 69E0     		b	.L218
 3247              	.LVL228:
 3248              	.L234:
4674:FreeRTOS-Kernel/tasks.c **** 
 3249              		.loc 1 4674 16 view .LVU948
 3250 0074 0020     		movs	r0, #0
 3251 0076 37E0     		b	.L223
 3252              	.LVL229:
 3253              	.L239:
 3254              	.LBB240:
4725:FreeRTOS-Kernel/tasks.c ****                     break;
 3255              		.loc 1 4725 21 is_stmt 1 view .LVU949
4725:FreeRTOS-Kernel/tasks.c ****                     break;
 3256              		.loc 1 4725 42 is_stmt 0 view .LVU950
 3257 0078 394B     		ldr	r3, .L242+20
 3258 007a 4FF0FF32 		mov	r2, #-1
 3259 007e 1A60     		str	r2, [r3]
4726:FreeRTOS-Kernel/tasks.c ****                 }
 3260              		.loc 1 4726 21 is_stmt 1 view .LVU951
 3261 0080 E7E7     		b	.L224
 3262              	.LVL230:
 3263              	.L240:
4747:FreeRTOS-Kernel/tasks.c ****                         break;
 3264              		.loc 1 4747 25 view .LVU952
4747:FreeRTOS-Kernel/tasks.c ****                         break;
 3265              		.loc 1 4747 46 is_stmt 0 view .LVU953
 3266 0082 374B     		ldr	r3, .L242+20
 3267              	.LVL231:
4747:FreeRTOS-Kernel/tasks.c ****                         break;
 3268              		.loc 1 4747 46 view .LVU954
 3269 0084 1A60     		str	r2, [r3]
4748:FreeRTOS-Kernel/tasks.c ****                     }
 3270              		.loc 1 4748 25 is_stmt 1 view .LVU955
 3271 0086 E4E7     		b	.L224
 3272              	.LVL232:
 3273              	.L241:
 3274              	.LBB234:
4756:FreeRTOS-Kernel/tasks.c **** 
 3275              		.loc 1 4756 21 discriminator 1 view .LVU956
 3276 0088 D968     		ldr	r1, [r3, #12]
 3277 008a 5160     		str	r1, [r2, #4]
 3278 008c 42E0     		b	.L227
 3279              	.LVL233:
ARM GAS  /tmp/ccJw1tyY.s 			page 227


 3280              	.L229:
4756:FreeRTOS-Kernel/tasks.c **** 
 3281              		.loc 1 4756 21 is_stmt 0 discriminator 1 view .LVU957
 3282              	.LBE234:
 3283              	.LBB235:
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3284              		.loc 1 4762 25 is_stmt 1 discriminator 3 view .LVU958
 3285 008e 0021     		movs	r1, #0
 3286 0090 9962     		str	r1, [r3, #40]
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3287              		.loc 1 4762 25 discriminator 3 view .LVU959
 3288 0092 1168     		ldr	r1, [r2]
 3289 0094 0139     		subs	r1, r1, #1
 3290 0096 1160     		str	r1, [r2]
 3291              	.LBE235:
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3292              		.loc 1 4762 25 discriminator 3 view .LVU960
 3293              	.LVL234:
 3294              	.L228:
4766:FreeRTOS-Kernel/tasks.c ****                     }
 3295              		.loc 1 4766 49 view .LVU961
4771:FreeRTOS-Kernel/tasks.c **** 
 3296              		.loc 1 4771 21 view .LVU962
4771:FreeRTOS-Kernel/tasks.c **** 
 3297              		.loc 1 4771 21 view .LVU963
4771:FreeRTOS-Kernel/tasks.c **** 
 3298              		.loc 1 4771 21 view .LVU964
 3299 0098 DA6A     		ldr	r2, [r3, #44]
 3300 009a 0121     		movs	r1, #1
 3301 009c 9140     		lsls	r1, r1, r2
 3302 009e 344E     		ldr	r6, .L242+36
 3303 00a0 3768     		ldr	r7, [r6]
 3304 00a2 3943     		orrs	r1, r1, r7
 3305 00a4 3160     		str	r1, [r6]
4771:FreeRTOS-Kernel/tasks.c **** 
 3306              		.loc 1 4771 21 view .LVU965
 3307              	.LBB236:
4771:FreeRTOS-Kernel/tasks.c **** 
 3308              		.loc 1 4771 21 view .LVU966
 3309 00a6 3049     		ldr	r1, .L242+28
 3310 00a8 02EB8202 		add	r2, r2, r2, lsl #2
 3311 00ac 4FEA820C 		lsl	ip, r2, #2
 3312 00b0 8C44     		add	ip, ip, r1
 3313 00b2 DCF80420 		ldr	r2, [ip, #4]
 3314              	.LVL235:
4771:FreeRTOS-Kernel/tasks.c **** 
 3315              		.loc 1 4771 21 view .LVU967
4771:FreeRTOS-Kernel/tasks.c **** 
 3316              		.loc 1 4771 21 view .LVU968
4771:FreeRTOS-Kernel/tasks.c **** 
 3317              		.loc 1 4771 21 view .LVU969
 3318 00b6 9A60     		str	r2, [r3, #8]
4771:FreeRTOS-Kernel/tasks.c **** 
 3319              		.loc 1 4771 21 view .LVU970
 3320 00b8 9668     		ldr	r6, [r2, #8]
 3321 00ba DE60     		str	r6, [r3, #12]
4771:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 228


 3322              		.loc 1 4771 21 view .LVU971
 3323 00bc 7560     		str	r5, [r6, #4]
4771:FreeRTOS-Kernel/tasks.c **** 
 3324              		.loc 1 4771 21 view .LVU972
 3325 00be 9560     		str	r5, [r2, #8]
4771:FreeRTOS-Kernel/tasks.c **** 
 3326              		.loc 1 4771 21 view .LVU973
 3327 00c0 DA6A     		ldr	r2, [r3, #44]
 3328              	.LVL236:
4771:FreeRTOS-Kernel/tasks.c **** 
 3329              		.loc 1 4771 21 is_stmt 0 view .LVU974
 3330 00c2 02EB820C 		add	ip, r2, r2, lsl #2
 3331 00c6 4FEA8C05 		lsl	r5, ip, #2
 3332 00ca 6E18     		adds	r6, r5, r1
 3333 00cc 5E61     		str	r6, [r3, #20]
4771:FreeRTOS-Kernel/tasks.c **** 
 3334              		.loc 1 4771 21 is_stmt 1 view .LVU975
 3335 00ce 4D59     		ldr	r5, [r1, r5]
 3336 00d0 0135     		adds	r5, r5, #1
 3337 00d2 4FEA8C0C 		lsl	ip, ip, #2
 3338 00d6 41F80C50 		str	r5, [r1, ip]
 3339              	.LBE236:
4771:FreeRTOS-Kernel/tasks.c **** 
 3340              		.loc 1 4771 21 view .LVU976
4771:FreeRTOS-Kernel/tasks.c **** 
 3341              		.loc 1 4771 21 view .LVU977
4771:FreeRTOS-Kernel/tasks.c **** 
 3342              		.loc 1 4771 21 view .LVU978
4787:FreeRTOS-Kernel/tasks.c ****                             {
 3343              		.loc 1 4787 29 view .LVU979
4787:FreeRTOS-Kernel/tasks.c ****                             {
 3344              		.loc 1 4787 38 is_stmt 0 view .LVU980
 3345 00da DA6A     		ldr	r2, [r3, #44]
4787:FreeRTOS-Kernel/tasks.c ****                             {
 3346              		.loc 1 4787 65 view .LVU981
 3347 00dc 214B     		ldr	r3, .L242+24
 3348              	.LVL237:
4787:FreeRTOS-Kernel/tasks.c ****                             {
 3349              		.loc 1 4787 65 view .LVU982
 3350 00de 1B68     		ldr	r3, [r3]
 3351 00e0 DB6A     		ldr	r3, [r3, #44]
4787:FreeRTOS-Kernel/tasks.c ****                             {
 3352              		.loc 1 4787 31 view .LVU983
 3353 00e2 9A42     		cmp	r2, r3
 3354 00e4 00D9     		bls	.L223
4789:FreeRTOS-Kernel/tasks.c ****                             }
 3355              		.loc 1 4789 49 view .LVU984
 3356 00e6 0120     		movs	r0, #1
 3357              	.LVL238:
 3358              	.L223:
4716:FreeRTOS-Kernel/tasks.c ****             {
 3359              		.loc 1 4716 13 is_stmt 1 view .LVU985
4718:FreeRTOS-Kernel/tasks.c ****                 {
 3360              		.loc 1 4718 17 view .LVU986
4718:FreeRTOS-Kernel/tasks.c ****                 {
 3361              		.loc 1 4718 21 is_stmt 0 view .LVU987
 3362 00e8 1A4B     		ldr	r3, .L242+8
ARM GAS  /tmp/ccJw1tyY.s 			page 229


 3363 00ea 1B68     		ldr	r3, [r3]
 3364 00ec 1B68     		ldr	r3, [r3]
4718:FreeRTOS-Kernel/tasks.c ****                 {
 3365              		.loc 1 4718 19 view .LVU988
 3366 00ee 002B     		cmp	r3, #0
 3367 00f0 C2D0     		beq	.L239
4737:FreeRTOS-Kernel/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3368              		.loc 1 4737 21 is_stmt 1 view .LVU989
4737:FreeRTOS-Kernel/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3369              		.loc 1 4737 29 is_stmt 0 view .LVU990
 3370 00f2 184B     		ldr	r3, .L242+8
 3371 00f4 1B68     		ldr	r3, [r3]
 3372 00f6 DB68     		ldr	r3, [r3, #12]
4737:FreeRTOS-Kernel/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3373              		.loc 1 4737 27 view .LVU991
 3374 00f8 DB68     		ldr	r3, [r3, #12]
 3375              	.LVL239:
4738:FreeRTOS-Kernel/tasks.c **** 
 3376              		.loc 1 4738 21 is_stmt 1 view .LVU992
4738:FreeRTOS-Kernel/tasks.c **** 
 3377              		.loc 1 4738 32 is_stmt 0 view .LVU993
 3378 00fa 5A68     		ldr	r2, [r3, #4]
 3379              	.LVL240:
4740:FreeRTOS-Kernel/tasks.c ****                     {
 3380              		.loc 1 4740 21 is_stmt 1 view .LVU994
4740:FreeRTOS-Kernel/tasks.c ****                     {
 3381              		.loc 1 4740 23 is_stmt 0 view .LVU995
 3382 00fc 9442     		cmp	r4, r2
 3383 00fe C0D3     		bcc	.L240
4752:FreeRTOS-Kernel/tasks.c ****                     }
 3384              		.loc 1 4752 49 is_stmt 1 view .LVU996
4756:FreeRTOS-Kernel/tasks.c **** 
 3385              		.loc 1 4756 21 view .LVU997
 3386              	.LBB237:
4756:FreeRTOS-Kernel/tasks.c **** 
 3387              		.loc 1 4756 21 view .LVU998
 3388 0100 5A69     		ldr	r2, [r3, #20]
 3389              	.LVL241:
4756:FreeRTOS-Kernel/tasks.c **** 
 3390              		.loc 1 4756 21 view .LVU999
 3391 0102 9D68     		ldr	r5, [r3, #8]
 3392 0104 D968     		ldr	r1, [r3, #12]
 3393 0106 A960     		str	r1, [r5, #8]
 3394              	.LVL242:
4756:FreeRTOS-Kernel/tasks.c **** 
 3395              		.loc 1 4756 21 view .LVU1000
 3396 0108 9D68     		ldr	r5, [r3, #8]
 3397 010a 4D60     		str	r5, [r1, #4]
4756:FreeRTOS-Kernel/tasks.c **** 
 3398              		.loc 1 4756 21 view .LVU1001
 3399 010c 5168     		ldr	r1, [r2, #4]
 3400 010e 1D1D     		adds	r5, r3, #4
 3401 0110 A942     		cmp	r1, r5
 3402 0112 B9D0     		beq	.L241
 3403              	.L227:
4756:FreeRTOS-Kernel/tasks.c **** 
 3404              		.loc 1 4756 21 discriminator 3 view .LVU1002
ARM GAS  /tmp/ccJw1tyY.s 			page 230


 3405 0114 0021     		movs	r1, #0
 3406 0116 5961     		str	r1, [r3, #20]
4756:FreeRTOS-Kernel/tasks.c **** 
 3407              		.loc 1 4756 21 discriminator 3 view .LVU1003
 3408 0118 1168     		ldr	r1, [r2]
 3409 011a 0139     		subs	r1, r1, #1
 3410 011c 1160     		str	r1, [r2]
 3411              	.LBE237:
4756:FreeRTOS-Kernel/tasks.c **** 
 3412              		.loc 1 4756 21 discriminator 3 view .LVU1004
4760:FreeRTOS-Kernel/tasks.c ****                     {
 3413              		.loc 1 4760 21 discriminator 3 view .LVU1005
4760:FreeRTOS-Kernel/tasks.c ****                     {
 3414              		.loc 1 4760 25 is_stmt 0 discriminator 3 view .LVU1006
 3415 011e 9A6A     		ldr	r2, [r3, #40]
 3416              	.LVL243:
4760:FreeRTOS-Kernel/tasks.c ****                     {
 3417              		.loc 1 4760 23 discriminator 3 view .LVU1007
 3418 0120 002A     		cmp	r2, #0
 3419 0122 B9D0     		beq	.L228
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3420              		.loc 1 4762 25 is_stmt 1 view .LVU1008
 3421              	.LBB238:
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3422              		.loc 1 4762 25 view .LVU1009
 3423              	.LVL244:
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3424              		.loc 1 4762 25 view .LVU1010
 3425 0124 DE69     		ldr	r6, [r3, #28]
 3426 0126 196A     		ldr	r1, [r3, #32]
 3427 0128 B160     		str	r1, [r6, #8]
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3428              		.loc 1 4762 25 view .LVU1011
 3429 012a DE69     		ldr	r6, [r3, #28]
 3430 012c 4E60     		str	r6, [r1, #4]
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3431              		.loc 1 4762 25 view .LVU1012
 3432 012e 5668     		ldr	r6, [r2, #4]
 3433 0130 03F11801 		add	r1, r3, #24
 3434 0134 8E42     		cmp	r6, r1
 3435 0136 AAD1     		bne	.L229
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3436              		.loc 1 4762 25 discriminator 1 view .LVU1013
 3437 0138 196A     		ldr	r1, [r3, #32]
 3438 013a 5160     		str	r1, [r2, #4]
 3439 013c A7E7     		b	.L229
 3440              	.LVL245:
 3441              	.L219:
4762:FreeRTOS-Kernel/tasks.c ****                     }
 3442              		.loc 1 4762 25 is_stmt 0 discriminator 1 view .LVU1014
 3443              	.LBE238:
 3444              	.LBE240:
4907:FreeRTOS-Kernel/tasks.c **** 
 3445              		.loc 1 4907 9 is_stmt 1 view .LVU1015
4907:FreeRTOS-Kernel/tasks.c **** 
 3446              		.loc 1 4907 22 is_stmt 0 view .LVU1016
 3447 013e 0D4A     		ldr	r2, .L242+40
ARM GAS  /tmp/ccJw1tyY.s 			page 231


 3448 0140 1368     		ldr	r3, [r2]
 3449 0142 0133     		adds	r3, r3, #1
 3450 0144 1360     		str	r3, [r2]
4674:FreeRTOS-Kernel/tasks.c **** 
 3451              		.loc 1 4674 16 view .LVU1017
 3452 0146 0020     		movs	r0, #0
 3453              	.LVL246:
 3454              	.L218:
4921:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 3455              		.loc 1 4921 1 view .LVU1018
 3456 0148 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3457              	.L243:
 3458 014a 00BF     		.align	2
 3459              	.L242:
 3460 014c 00000000 		.word	uxSchedulerSuspended
 3461 0150 00000000 		.word	xTickCount
 3462 0154 00000000 		.word	pxDelayedTaskList
 3463 0158 00000000 		.word	pxOverflowDelayedTaskList
 3464 015c 00000000 		.word	xNumOfOverflows
 3465 0160 00000000 		.word	xNextTaskUnblockTime
 3466 0164 00000000 		.word	pxCurrentTCB
 3467 0168 00000000 		.word	pxReadyTasksLists
 3468 016c 00000000 		.word	xYieldPendings
 3469 0170 00000000 		.word	uxTopReadyPriority
 3470 0174 00000000 		.word	xPendedTicks
 3471              		.cfi_endproc
 3472              	.LFE32:
 3474              		.section	.text.xTaskResumeAll,"ax",%progbits
 3475              		.align	1
 3476              		.global	xTaskResumeAll
 3477              		.syntax unified
 3478              		.thumb
 3479              		.thumb_func
 3481              	xTaskResumeAll:
 3482              	.LFB25:
3957:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB = NULL;
 3483              		.loc 1 3957 1 is_stmt 1 view -0
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 0
 3486              		@ frame_needed = 0, uses_anonymous_args = 0
 3487 0000 38B5     		push	{r3, r4, r5, lr}
 3488              	.LCFI28:
 3489              		.cfi_def_cfa_offset 16
 3490              		.cfi_offset 3, -16
 3491              		.cfi_offset 4, -12
 3492              		.cfi_offset 5, -8
 3493              		.cfi_offset 14, -4
3958:FreeRTOS-Kernel/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3494              		.loc 1 3958 5 view .LVU1020
 3495              	.LVL247:
3959:FreeRTOS-Kernel/tasks.c **** 
 3496              		.loc 1 3959 5 view .LVU1021
3961:FreeRTOS-Kernel/tasks.c **** 
 3497              		.loc 1 3961 32 view .LVU1022
3972:FreeRTOS-Kernel/tasks.c ****         {
 3498              		.loc 1 3972 9 view .LVU1023
 3499 0002 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccJw1tyY.s 			page 232


 3500              	.LVL248:
 3501              	.LBB241:
3974:FreeRTOS-Kernel/tasks.c ****             xCoreID = ( BaseType_t ) portGET_CORE_ID();
 3502              		.loc 1 3974 13 view .LVU1024
3975:FreeRTOS-Kernel/tasks.c **** 
 3503              		.loc 1 3975 13 view .LVU1025
3979:FreeRTOS-Kernel/tasks.c **** 
 3504              		.loc 1 3979 13 view .LVU1026
 3505 0006 4C4B     		ldr	r3, .L264
 3506 0008 1B68     		ldr	r3, [r3]
 3507 000a 43B9     		cbnz	r3, .L245
3979:FreeRTOS-Kernel/tasks.c **** 
 3508              		.loc 1 3979 13 view .LVU1027
 3509              	.LBB242:
 3510              	.LBI242:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3511              		.loc 2 213 30 view .LVU1028
 3512              	.LBB243:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3513              		.loc 2 215 5 view .LVU1029
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3514              		.loc 2 217 5 view .LVU1030
 3515              		.syntax unified
 3516              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3517 000c 4FF05003 		   mov r3, #80                                              
 3518 0010 83F31188 	   msr basepri, r3                                         
 3519 0014 BFF36F8F 	   isb                                                     
 3520 0018 BFF34F8F 	   dsb                                                     
 3521              	
 3522              	@ 0 "" 2
 3523              	.LVL249:
 3524              		.thumb
 3525              		.syntax unified
 3526              	.L246:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3527              		.loc 2 217 5 is_stmt 0 view .LVU1031
 3528              	.LBE243:
 3529              	.LBE242:
3979:FreeRTOS-Kernel/tasks.c **** 
 3530              		.loc 1 3979 13 is_stmt 1 discriminator 1 view .LVU1032
3979:FreeRTOS-Kernel/tasks.c **** 
 3531              		.loc 1 3979 13 discriminator 1 view .LVU1033
 3532 001c FEE7     		b	.L246
 3533              	.L245:
3979:FreeRTOS-Kernel/tasks.c **** 
 3534              		.loc 1 3979 55 discriminator 2 view .LVU1034
3981:FreeRTOS-Kernel/tasks.c ****             portRELEASE_TASK_LOCK();
 3535              		.loc 1 3981 13 discriminator 2 view .LVU1035
3981:FreeRTOS-Kernel/tasks.c ****             portRELEASE_TASK_LOCK();
 3536              		.loc 1 3981 36 is_stmt 0 discriminator 2 view .LVU1036
 3537 001e 464B     		ldr	r3, .L264
 3538 0020 1A68     		ldr	r2, [r3]
 3539 0022 013A     		subs	r2, r2, #1
3981:FreeRTOS-Kernel/tasks.c ****             portRELEASE_TASK_LOCK();
 3540              		.loc 1 3981 34 discriminator 2 view .LVU1037
 3541 0024 1A60     		str	r2, [r3]
3982:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 233


 3542              		.loc 1 3982 36 is_stmt 1 discriminator 2 view .LVU1038
3984:FreeRTOS-Kernel/tasks.c ****             {
 3543              		.loc 1 3984 13 discriminator 2 view .LVU1039
3984:FreeRTOS-Kernel/tasks.c ****             {
 3544              		.loc 1 3984 38 is_stmt 0 discriminator 2 view .LVU1040
 3545 0026 1B68     		ldr	r3, [r3]
3984:FreeRTOS-Kernel/tasks.c ****             {
 3546              		.loc 1 3984 15 discriminator 2 view .LVU1041
 3547 0028 002B     		cmp	r3, #0
 3548 002a 7FD1     		bne	.L257
3986:FreeRTOS-Kernel/tasks.c ****                 {
 3549              		.loc 1 3986 17 is_stmt 1 view .LVU1042
3986:FreeRTOS-Kernel/tasks.c ****                 {
 3550              		.loc 1 3986 44 is_stmt 0 view .LVU1043
 3551 002c 434B     		ldr	r3, .L264+4
 3552 002e 1B68     		ldr	r3, [r3]
3986:FreeRTOS-Kernel/tasks.c ****                 {
 3553              		.loc 1 3986 19 view .LVU1044
 3554 0030 3BB9     		cbnz	r3, .L258
 3555              	.LBE241:
3959:FreeRTOS-Kernel/tasks.c **** 
 3556              		.loc 1 3959 16 view .LVU1045
 3557 0032 0024     		movs	r4, #0
 3558 0034 7BE0     		b	.L247
 3559              	.LVL250:
 3560              	.L261:
 3561              	.LBB251:
 3562              	.LBB244:
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3563              		.loc 1 3996 25 is_stmt 1 discriminator 1 view .LVU1046
 3564 0036 196A     		ldr	r1, [r3, #32]
 3565 0038 5160     		str	r1, [r2, #4]
 3566 003a 15E0     		b	.L249
 3567              	.LVL251:
 3568              	.L262:
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3569              		.loc 1 3996 25 is_stmt 0 discriminator 1 view .LVU1047
 3570              	.LBE244:
 3571              	.LBB245:
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3572              		.loc 1 3998 25 is_stmt 1 discriminator 1 view .LVU1048
 3573 003c D968     		ldr	r1, [r3, #12]
 3574 003e 5160     		str	r1, [r2, #4]
 3575 0040 21E0     		b	.L250
 3576              	.LVL252:
 3577              	.L258:
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3578              		.loc 1 3998 25 is_stmt 0 discriminator 1 view .LVU1049
 3579              	.LBE245:
 3580              	.LBE251:
3958:FreeRTOS-Kernel/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3581              		.loc 1 3958 13 view .LVU1050
 3582 0042 0023     		movs	r3, #0
 3583              	.LVL253:
 3584              	.L248:
 3585              	.LBB252:
4011:FreeRTOS-Kernel/tasks.c ****                             }
ARM GAS  /tmp/ccJw1tyY.s 			page 234


 3586              		.loc 1 4011 57 is_stmt 1 view .LVU1051
3990:FreeRTOS-Kernel/tasks.c ****                     {
 3587              		.loc 1 3990 68 view .LVU1052
3990:FreeRTOS-Kernel/tasks.c ****                     {
 3588              		.loc 1 3990 28 is_stmt 0 view .LVU1053
 3589 0044 3E4A     		ldr	r2, .L264+8
 3590 0046 1268     		ldr	r2, [r2]
3990:FreeRTOS-Kernel/tasks.c ****                     {
 3591              		.loc 1 3990 68 view .LVU1054
 3592 0048 002A     		cmp	r2, #0
 3593 004a 4AD0     		beq	.L260
3995:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3594              		.loc 1 3995 25 is_stmt 1 view .LVU1055
3995:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3595              		.loc 1 3995 33 is_stmt 0 view .LVU1056
 3596 004c 3C4B     		ldr	r3, .L264+8
 3597              	.LVL254:
3995:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3598              		.loc 1 3995 33 view .LVU1057
 3599 004e DB68     		ldr	r3, [r3, #12]
3995:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3600              		.loc 1 3995 31 view .LVU1058
 3601 0050 DB68     		ldr	r3, [r3, #12]
 3602              	.LVL255:
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3603              		.loc 1 3996 25 is_stmt 1 view .LVU1059
 3604              	.LBB246:
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3605              		.loc 1 3996 25 view .LVU1060
 3606 0052 9A6A     		ldr	r2, [r3, #40]
 3607              	.LVL256:
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3608              		.loc 1 3996 25 view .LVU1061
 3609 0054 D869     		ldr	r0, [r3, #28]
 3610 0056 196A     		ldr	r1, [r3, #32]
 3611 0058 8160     		str	r1, [r0, #8]
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3612              		.loc 1 3996 25 view .LVU1062
 3613 005a D869     		ldr	r0, [r3, #28]
 3614 005c 4860     		str	r0, [r1, #4]
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3615              		.loc 1 3996 25 view .LVU1063
 3616 005e 5068     		ldr	r0, [r2, #4]
 3617 0060 03F11801 		add	r1, r3, #24
 3618 0064 8842     		cmp	r0, r1
 3619 0066 E6D0     		beq	.L261
 3620              	.L249:
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3621              		.loc 1 3996 25 discriminator 3 view .LVU1064
 3622 0068 0021     		movs	r1, #0
 3623 006a 9962     		str	r1, [r3, #40]
3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3624              		.loc 1 3996 25 discriminator 3 view .LVU1065
 3625 006c 1168     		ldr	r1, [r2]
 3626 006e 0139     		subs	r1, r1, #1
 3627 0070 1160     		str	r1, [r2]
 3628              	.LBE246:
ARM GAS  /tmp/ccJw1tyY.s 			page 235


3996:FreeRTOS-Kernel/tasks.c ****                         portMEMORY_BARRIER();
 3629              		.loc 1 3996 25 discriminator 3 view .LVU1066
3997:FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 3630              		.loc 1 3997 25 discriminator 3 view .LVU1067
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3631              		.loc 1 3998 25 discriminator 3 view .LVU1068
 3632              	.LBB247:
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3633              		.loc 1 3998 25 discriminator 3 view .LVU1069
 3634 0072 5A69     		ldr	r2, [r3, #20]
 3635              	.LVL257:
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3636              		.loc 1 3998 25 discriminator 3 view .LVU1070
 3637 0074 9868     		ldr	r0, [r3, #8]
 3638 0076 D968     		ldr	r1, [r3, #12]
 3639 0078 8160     		str	r1, [r0, #8]
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3640              		.loc 1 3998 25 discriminator 3 view .LVU1071
 3641 007a 9868     		ldr	r0, [r3, #8]
 3642 007c 4860     		str	r0, [r1, #4]
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3643              		.loc 1 3998 25 discriminator 3 view .LVU1072
 3644 007e 5168     		ldr	r1, [r2, #4]
 3645 0080 181D     		adds	r0, r3, #4
 3646 0082 8142     		cmp	r1, r0
 3647 0084 DAD0     		beq	.L262
 3648              	.L250:
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3649              		.loc 1 3998 25 discriminator 3 view .LVU1073
 3650 0086 0021     		movs	r1, #0
 3651 0088 5961     		str	r1, [r3, #20]
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3652              		.loc 1 3998 25 discriminator 3 view .LVU1074
 3653 008a 1168     		ldr	r1, [r2]
 3654 008c 0139     		subs	r1, r1, #1
 3655 008e 1160     		str	r1, [r2]
 3656              	.LBE247:
3998:FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 3657              		.loc 1 3998 25 discriminator 3 view .LVU1075
3999:FreeRTOS-Kernel/tasks.c **** 
 3658              		.loc 1 3999 25 discriminator 3 view .LVU1076
3999:FreeRTOS-Kernel/tasks.c **** 
 3659              		.loc 1 3999 25 discriminator 3 view .LVU1077
3999:FreeRTOS-Kernel/tasks.c **** 
 3660              		.loc 1 3999 25 discriminator 3 view .LVU1078
 3661 0090 DA6A     		ldr	r2, [r3, #44]
 3662              	.LVL258:
3999:FreeRTOS-Kernel/tasks.c **** 
 3663              		.loc 1 3999 25 is_stmt 0 discriminator 3 view .LVU1079
 3664 0092 0121     		movs	r1, #1
 3665 0094 9140     		lsls	r1, r1, r2
 3666 0096 2B4C     		ldr	r4, .L264+12
 3667 0098 2568     		ldr	r5, [r4]
 3668 009a 2943     		orrs	r1, r1, r5
 3669 009c 2160     		str	r1, [r4]
3999:FreeRTOS-Kernel/tasks.c **** 
 3670              		.loc 1 3999 25 is_stmt 1 discriminator 3 view .LVU1080
ARM GAS  /tmp/ccJw1tyY.s 			page 236


 3671              	.LBB248:
3999:FreeRTOS-Kernel/tasks.c **** 
 3672              		.loc 1 3999 25 discriminator 3 view .LVU1081
 3673 009e 2A49     		ldr	r1, .L264+16
 3674 00a0 02EB8202 		add	r2, r2, r2, lsl #2
 3675 00a4 01EB8202 		add	r2, r1, r2, lsl #2
 3676 00a8 5268     		ldr	r2, [r2, #4]
 3677              	.LVL259:
3999:FreeRTOS-Kernel/tasks.c **** 
 3678              		.loc 1 3999 25 discriminator 3 view .LVU1082
3999:FreeRTOS-Kernel/tasks.c **** 
 3679              		.loc 1 3999 25 discriminator 3 view .LVU1083
3999:FreeRTOS-Kernel/tasks.c **** 
 3680              		.loc 1 3999 25 discriminator 3 view .LVU1084
 3681 00aa 9A60     		str	r2, [r3, #8]
3999:FreeRTOS-Kernel/tasks.c **** 
 3682              		.loc 1 3999 25 discriminator 3 view .LVU1085
 3683 00ac 9468     		ldr	r4, [r2, #8]
 3684 00ae DC60     		str	r4, [r3, #12]
3999:FreeRTOS-Kernel/tasks.c **** 
 3685              		.loc 1 3999 25 discriminator 3 view .LVU1086
 3686 00b0 6060     		str	r0, [r4, #4]
3999:FreeRTOS-Kernel/tasks.c **** 
 3687              		.loc 1 3999 25 discriminator 3 view .LVU1087
 3688 00b2 9060     		str	r0, [r2, #8]
3999:FreeRTOS-Kernel/tasks.c **** 
 3689              		.loc 1 3999 25 discriminator 3 view .LVU1088
 3690 00b4 DA6A     		ldr	r2, [r3, #44]
 3691              	.LVL260:
3999:FreeRTOS-Kernel/tasks.c **** 
 3692              		.loc 1 3999 25 is_stmt 0 discriminator 3 view .LVU1089
 3693 00b6 02EB8200 		add	r0, r2, r2, lsl #2
 3694 00ba 01EB8004 		add	r4, r1, r0, lsl #2
 3695 00be 5C61     		str	r4, [r3, #20]
3999:FreeRTOS-Kernel/tasks.c **** 
 3696              		.loc 1 3999 25 is_stmt 1 discriminator 3 view .LVU1090
 3697 00c0 51F82000 		ldr	r0, [r1, r0, lsl #2]
 3698 00c4 0130     		adds	r0, r0, #1
 3699 00c6 02EB8202 		add	r2, r2, r2, lsl #2
 3700 00ca 41F82200 		str	r0, [r1, r2, lsl #2]
 3701              	.LBE248:
3999:FreeRTOS-Kernel/tasks.c **** 
 3702              		.loc 1 3999 25 discriminator 3 view .LVU1091
3999:FreeRTOS-Kernel/tasks.c **** 
 3703              		.loc 1 3999 25 discriminator 3 view .LVU1092
3999:FreeRTOS-Kernel/tasks.c **** 
 3704              		.loc 1 3999 25 discriminator 3 view .LVU1093
4005:FreeRTOS-Kernel/tasks.c ****                             {
 3705              		.loc 1 4005 29 discriminator 3 view .LVU1094
4005:FreeRTOS-Kernel/tasks.c ****                             {
 3706              		.loc 1 4005 38 is_stmt 0 discriminator 3 view .LVU1095
 3707 00ce D96A     		ldr	r1, [r3, #44]
4005:FreeRTOS-Kernel/tasks.c ****                             {
 3708              		.loc 1 4005 65 discriminator 3 view .LVU1096
 3709 00d0 1E4A     		ldr	r2, .L264+20
 3710 00d2 1268     		ldr	r2, [r2]
 3711 00d4 D26A     		ldr	r2, [r2, #44]
ARM GAS  /tmp/ccJw1tyY.s 			page 237


4005:FreeRTOS-Kernel/tasks.c ****                             {
 3712              		.loc 1 4005 31 discriminator 3 view .LVU1097
 3713 00d6 9142     		cmp	r1, r2
 3714 00d8 B4D9     		bls	.L248
4007:FreeRTOS-Kernel/tasks.c ****                             }
 3715              		.loc 1 4007 33 is_stmt 1 view .LVU1098
4007:FreeRTOS-Kernel/tasks.c ****                             }
 3716              		.loc 1 4007 59 is_stmt 0 view .LVU1099
 3717 00da 1D4A     		ldr	r2, .L264+24
 3718 00dc 0121     		movs	r1, #1
 3719 00de 1160     		str	r1, [r2]
 3720 00e0 B0E7     		b	.L248
 3721              	.LVL261:
 3722              	.L260:
4023:FreeRTOS-Kernel/tasks.c ****                     {
 3723              		.loc 1 4023 21 is_stmt 1 view .LVU1100
4023:FreeRTOS-Kernel/tasks.c ****                     {
 3724              		.loc 1 4023 23 is_stmt 0 view .LVU1101
 3725 00e2 0BB1     		cbz	r3, .L253
4031:FreeRTOS-Kernel/tasks.c ****                     }
 3726              		.loc 1 4031 25 is_stmt 1 view .LVU1102
 3727 00e4 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3728              	.LVL262:
 3729              	.L253:
 3730              	.LBB249:
4044:FreeRTOS-Kernel/tasks.c **** 
 3731              		.loc 1 4044 25 view .LVU1103
4044:FreeRTOS-Kernel/tasks.c **** 
 3732              		.loc 1 4044 36 is_stmt 0 view .LVU1104
 3733 00e8 1A4B     		ldr	r3, .L264+28
 3734 00ea 1C68     		ldr	r4, [r3]
 3735              	.LVL263:
4046:FreeRTOS-Kernel/tasks.c ****                         {
 3736              		.loc 1 4046 25 is_stmt 1 view .LVU1105
4046:FreeRTOS-Kernel/tasks.c ****                         {
 3737              		.loc 1 4046 27 is_stmt 0 view .LVU1106
 3738 00ec 94B9     		cbnz	r4, .L256
 3739              	.L254:
4068:FreeRTOS-Kernel/tasks.c ****                         }
 3740              		.loc 1 4068 53 is_stmt 1 view .LVU1107
 3741              	.LBE249:
4072:FreeRTOS-Kernel/tasks.c ****                     {
 3742              		.loc 1 4072 21 view .LVU1108
4072:FreeRTOS-Kernel/tasks.c ****                     {
 3743              		.loc 1 4072 39 is_stmt 0 view .LVU1109
 3744 00ee 184B     		ldr	r3, .L264+24
 3745 00f0 1C68     		ldr	r4, [r3]
 3746              	.LVL264:
4072:FreeRTOS-Kernel/tasks.c ****                     {
 3747              		.loc 1 4072 23 view .LVU1110
 3748 00f2 E4B1     		cbz	r4, .L247
4076:FreeRTOS-Kernel/tasks.c ****                         }
 3749              		.loc 1 4076 29 is_stmt 1 view .LVU1111
 3750              	.LVL265:
4082:FreeRTOS-Kernel/tasks.c ****                         }
 3751              		.loc 1 4082 29 view .LVU1112
4082:FreeRTOS-Kernel/tasks.c ****                         }
ARM GAS  /tmp/ccJw1tyY.s 			page 238


 3752              		.loc 1 4082 29 view .LVU1113
 3753 00f4 154B     		ldr	r3, .L264+20
 3754 00f6 1B68     		ldr	r3, [r3]
4082:FreeRTOS-Kernel/tasks.c ****                         }
 3755              		.loc 1 4082 29 view .LVU1114
 3756 00f8 4FF0E023 		mov	r3, #-536813568
 3757 00fc 4FF08052 		mov	r2, #268435456
 3758 0100 C3F8042D 		str	r2, [r3, #3332]
4082:FreeRTOS-Kernel/tasks.c ****                         }
 3759              		.loc 1 4082 29 view .LVU1115
 3760              		.syntax unified
 3761              	@ 4082 "FreeRTOS-Kernel/tasks.c" 1
 3762 0104 BFF34F8F 		dsb
 3763              	@ 0 "" 2
4082:FreeRTOS-Kernel/tasks.c ****                         }
 3764              		.loc 1 4082 29 view .LVU1116
 3765              	@ 4082 "FreeRTOS-Kernel/tasks.c" 1
 3766 0108 BFF36F8F 		isb
 3767              	@ 0 "" 2
4082:FreeRTOS-Kernel/tasks.c ****                         }
 3768              		.loc 1 4082 29 view .LVU1117
4082:FreeRTOS-Kernel/tasks.c ****                         }
 3769              		.loc 1 4082 29 view .LVU1118
4076:FreeRTOS-Kernel/tasks.c ****                         }
 3770              		.loc 1 4076 45 is_stmt 0 view .LVU1119
 3771              		.thumb
 3772              		.syntax unified
 3773 010c 0124     		movs	r4, #1
 3774 010e 0EE0     		b	.L247
 3775              	.LVL266:
 3776              	.L255:
 3777              	.LBB250:
4058:FreeRTOS-Kernel/tasks.c ****                                 }
 3778              		.loc 1 4058 61 is_stmt 1 view .LVU1120
4061:FreeRTOS-Kernel/tasks.c ****                             } while( xPendedCounts > ( TickType_t ) 0U );
 3779              		.loc 1 4061 33 view .LVU1121
4062:FreeRTOS-Kernel/tasks.c **** 
 3780              		.loc 1 4062 52 view .LVU1122
 3781 0110 013C     		subs	r4, r4, #1
 3782              	.LVL267:
4062:FreeRTOS-Kernel/tasks.c **** 
 3783              		.loc 1 4062 52 is_stmt 0 view .LVU1123
 3784 0112 07D0     		beq	.L263
 3785              	.L256:
4048:FreeRTOS-Kernel/tasks.c ****                             {
 3786              		.loc 1 4048 29 is_stmt 1 view .LVU1124
4050:FreeRTOS-Kernel/tasks.c ****                                 {
 3787              		.loc 1 4050 33 view .LVU1125
4050:FreeRTOS-Kernel/tasks.c ****                                 {
 3788              		.loc 1 4050 37 is_stmt 0 view .LVU1126
 3789 0114 FFF7FEFF 		bl	xTaskIncrementTick
 3790              	.LVL268:
4050:FreeRTOS-Kernel/tasks.c ****                                 {
 3791              		.loc 1 4050 35 view .LVU1127
 3792 0118 0028     		cmp	r0, #0
 3793 011a F9D0     		beq	.L255
4054:FreeRTOS-Kernel/tasks.c ****                                 }
ARM GAS  /tmp/ccJw1tyY.s 			page 239


 3794              		.loc 1 4054 37 is_stmt 1 view .LVU1128
4054:FreeRTOS-Kernel/tasks.c ****                                 }
 3795              		.loc 1 4054 63 is_stmt 0 view .LVU1129
 3796 011c 0C4B     		ldr	r3, .L264+24
 3797 011e 0122     		movs	r2, #1
 3798 0120 1A60     		str	r2, [r3]
 3799 0122 F5E7     		b	.L255
 3800              	.L263:
4064:FreeRTOS-Kernel/tasks.c ****                         }
 3801              		.loc 1 4064 29 is_stmt 1 view .LVU1130
4064:FreeRTOS-Kernel/tasks.c ****                         }
 3802              		.loc 1 4064 42 is_stmt 0 view .LVU1131
 3803 0124 0B4B     		ldr	r3, .L264+28
 3804 0126 0022     		movs	r2, #0
 3805 0128 1A60     		str	r2, [r3]
 3806 012a E0E7     		b	.L254
 3807              	.LVL269:
 3808              	.L257:
4064:FreeRTOS-Kernel/tasks.c ****                         }
 3809              		.loc 1 4064 42 view .LVU1132
 3810              	.LBE250:
 3811              	.LBE252:
3959:FreeRTOS-Kernel/tasks.c **** 
 3812              		.loc 1 3959 16 view .LVU1133
 3813 012c 0024     		movs	r4, #0
 3814              	.LVL270:
 3815              	.L247:
 3816              	.LBB253:
4094:FreeRTOS-Kernel/tasks.c ****             }
 3817              		.loc 1 4094 41 is_stmt 1 view .LVU1134
 3818              	.LBE253:
4097:FreeRTOS-Kernel/tasks.c ****     }
 3819              		.loc 1 4097 9 view .LVU1135
 3820 012e FFF7FEFF 		bl	vPortExitCritical
 3821              	.LVL271:
4100:FreeRTOS-Kernel/tasks.c **** 
 3822              		.loc 1 4100 50 view .LVU1136
4102:FreeRTOS-Kernel/tasks.c **** }
 3823              		.loc 1 4102 5 view .LVU1137
4103:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 3824              		.loc 1 4103 1 is_stmt 0 view .LVU1138
 3825 0132 2046     		mov	r0, r4
 3826 0134 38BD     		pop	{r3, r4, r5, pc}
 3827              	.LVL272:
 3828              	.L265:
4103:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 3829              		.loc 1 4103 1 view .LVU1139
 3830 0136 00BF     		.align	2
 3831              	.L264:
 3832 0138 00000000 		.word	uxSchedulerSuspended
 3833 013c 00000000 		.word	uxCurrentNumberOfTasks
 3834 0140 00000000 		.word	xPendingReadyList
 3835 0144 00000000 		.word	uxTopReadyPriority
 3836 0148 00000000 		.word	pxReadyTasksLists
 3837 014c 00000000 		.word	pxCurrentTCB
 3838 0150 00000000 		.word	xYieldPendings
 3839 0154 00000000 		.word	xPendedTicks
ARM GAS  /tmp/ccJw1tyY.s 			page 240


 3840              		.cfi_endproc
 3841              	.LFE25:
 3843              		.section	.text.xTaskDelayUntil,"ax",%progbits
 3844              		.align	1
 3845              		.global	xTaskDelayUntil
 3846              		.syntax unified
 3847              		.thumb
 3848              		.thumb_func
 3850              	xTaskDelayUntil:
 3851              	.LVL273:
 3852              	.LFB10:
2345:FreeRTOS-Kernel/tasks.c ****         TickType_t xTimeToWake;
 3853              		.loc 1 2345 5 is_stmt 1 view -0
 3854              		.cfi_startproc
 3855              		@ args = 0, pretend = 0, frame = 0
 3856              		@ frame_needed = 0, uses_anonymous_args = 0
2345:FreeRTOS-Kernel/tasks.c ****         TickType_t xTimeToWake;
 3857              		.loc 1 2345 5 is_stmt 0 view .LVU1141
 3858 0000 38B5     		push	{r3, r4, r5, lr}
 3859              	.LCFI29:
 3860              		.cfi_def_cfa_offset 16
 3861              		.cfi_offset 3, -16
 3862              		.cfi_offset 4, -12
 3863              		.cfi_offset 5, -8
 3864              		.cfi_offset 14, -4
2346:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3865              		.loc 1 2346 9 is_stmt 1 view .LVU1142
2347:FreeRTOS-Kernel/tasks.c **** 
 3866              		.loc 1 2347 9 view .LVU1143
 3867              	.LVL274:
2349:FreeRTOS-Kernel/tasks.c **** 
 3868              		.loc 1 2349 73 view .LVU1144
2351:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3869              		.loc 1 2351 9 view .LVU1145
 3870 0002 58B1     		cbz	r0, .L282
 3871 0004 0C46     		mov	r4, r1
 3872 0006 0546     		mov	r5, r0
2351:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3873              		.loc 1 2351 43 discriminator 2 view .LVU1146
2352:FreeRTOS-Kernel/tasks.c **** 
 3874              		.loc 1 2352 9 discriminator 2 view .LVU1147
 3875 0008 89B9     		cbnz	r1, .L269
2352:FreeRTOS-Kernel/tasks.c **** 
 3876              		.loc 1 2352 9 view .LVU1148
 3877              	.LBB254:
 3878              	.LBI254:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3879              		.loc 2 213 30 view .LVU1149
 3880              	.LBB255:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3881              		.loc 2 215 5 view .LVU1150
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3882              		.loc 2 217 5 view .LVU1151
 3883              		.syntax unified
 3884              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3885 000a 4FF05003 		   mov r3, #80                                              
 3886 000e 83F31188 	   msr basepri, r3                                         
ARM GAS  /tmp/ccJw1tyY.s 			page 241


 3887 0012 BFF36F8F 	   isb                                                     
 3888 0016 BFF34F8F 	   dsb                                                     
 3889              	
 3890              	@ 0 "" 2
 3891              	.LVL275:
 3892              		.thumb
 3893              		.syntax unified
 3894              	.L270:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3895              		.loc 2 217 5 is_stmt 0 view .LVU1152
 3896              	.LBE255:
 3897              	.LBE254:
2352:FreeRTOS-Kernel/tasks.c **** 
 3898              		.loc 1 2352 9 is_stmt 1 discriminator 2 view .LVU1153
2352:FreeRTOS-Kernel/tasks.c **** 
 3899              		.loc 1 2352 9 discriminator 2 view .LVU1154
 3900 001a FEE7     		b	.L270
 3901              	.L282:
2351:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3902              		.loc 1 2351 9 view .LVU1155
 3903              	.LBB256:
 3904              	.LBI256:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3905              		.loc 2 213 30 view .LVU1156
 3906              	.LBB257:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3907              		.loc 2 215 5 view .LVU1157
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3908              		.loc 2 217 5 view .LVU1158
 3909              		.syntax unified
 3910              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3911 001c 4FF05003 		   mov r3, #80                                              
 3912 0020 83F31188 	   msr basepri, r3                                         
 3913 0024 BFF36F8F 	   isb                                                     
 3914 0028 BFF34F8F 	   dsb                                                     
 3915              	
 3916              	@ 0 "" 2
 3917              	.LVL276:
 3918              		.thumb
 3919              		.syntax unified
 3920              	.L268:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3921              		.loc 2 217 5 is_stmt 0 view .LVU1159
 3922              	.LBE257:
 3923              	.LBE256:
2351:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3924              		.loc 1 2351 9 is_stmt 1 discriminator 1 view .LVU1160
2351:FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3925              		.loc 1 2351 9 discriminator 1 view .LVU1161
 3926 002c FEE7     		b	.L268
 3927              	.L269:
2352:FreeRTOS-Kernel/tasks.c **** 
 3928              		.loc 1 2352 48 discriminator 2 view .LVU1162
2354:FreeRTOS-Kernel/tasks.c ****         {
 3929              		.loc 1 2354 9 discriminator 2 view .LVU1163
 3930 002e FFF7FEFF 		bl	vTaskSuspendAll
 3931              	.LVL277:
ARM GAS  /tmp/ccJw1tyY.s 			page 242


 3932              	.LBB258:
2358:FreeRTOS-Kernel/tasks.c **** 
 3933              		.loc 1 2358 13 discriminator 2 view .LVU1164
2358:FreeRTOS-Kernel/tasks.c **** 
 3934              		.loc 1 2358 30 is_stmt 0 discriminator 2 view .LVU1165
 3935 0032 1D4B     		ldr	r3, .L283
 3936 0034 1868     		ldr	r0, [r3]
 3937              	.LVL278:
2360:FreeRTOS-Kernel/tasks.c **** 
 3938              		.loc 1 2360 13 is_stmt 1 discriminator 2 view .LVU1166
 3939 0036 1D4B     		ldr	r3, .L283+4
 3940 0038 1B68     		ldr	r3, [r3]
 3941 003a 012B     		cmp	r3, #1
 3942 003c 08D0     		beq	.L271
2360:FreeRTOS-Kernel/tasks.c **** 
 3943              		.loc 1 2360 13 view .LVU1167
 3944              	.LBB259:
 3945              	.LBI259:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3946              		.loc 2 213 30 view .LVU1168
 3947              	.LBB260:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3948              		.loc 2 215 5 view .LVU1169
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3949              		.loc 2 217 5 view .LVU1170
 3950              		.syntax unified
 3951              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3952 003e 4FF05003 		   mov r3, #80                                              
 3953 0042 83F31188 	   msr basepri, r3                                         
 3954 0046 BFF36F8F 	   isb                                                     
 3955 004a BFF34F8F 	   dsb                                                     
 3956              	
 3957              	@ 0 "" 2
 3958              	.LVL279:
 3959              		.thumb
 3960              		.syntax unified
 3961              	.L272:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3962              		.loc 2 217 5 is_stmt 0 view .LVU1171
 3963              	.LBE260:
 3964              	.LBE259:
2360:FreeRTOS-Kernel/tasks.c **** 
 3965              		.loc 1 2360 13 is_stmt 1 discriminator 3 view .LVU1172
2360:FreeRTOS-Kernel/tasks.c **** 
 3966              		.loc 1 2360 13 discriminator 3 view .LVU1173
 3967 004e FEE7     		b	.L272
 3968              	.L271:
2360:FreeRTOS-Kernel/tasks.c **** 
 3969              		.loc 1 2360 55 discriminator 2 view .LVU1174
2363:FreeRTOS-Kernel/tasks.c **** 
 3970              		.loc 1 2363 13 discriminator 2 view .LVU1175
2363:FreeRTOS-Kernel/tasks.c **** 
 3971              		.loc 1 2363 27 is_stmt 0 discriminator 2 view .LVU1176
 3972 0050 2B68     		ldr	r3, [r5]
2363:FreeRTOS-Kernel/tasks.c **** 
 3973              		.loc 1 2363 25 discriminator 2 view .LVU1177
 3974 0052 1C44     		add	r4, r4, r3
ARM GAS  /tmp/ccJw1tyY.s 			page 243


 3975              	.LVL280:
2365:FreeRTOS-Kernel/tasks.c ****             {
 3976              		.loc 1 2365 13 is_stmt 1 discriminator 2 view .LVU1178
2365:FreeRTOS-Kernel/tasks.c ****             {
 3977              		.loc 1 2365 15 is_stmt 0 discriminator 2 view .LVU1179
 3978 0054 8342     		cmp	r3, r0
 3979 0056 0BD9     		bls	.L273
2372:FreeRTOS-Kernel/tasks.c ****                 {
 3980              		.loc 1 2372 17 is_stmt 1 view .LVU1180
2372:FreeRTOS-Kernel/tasks.c ****                 {
 3981              		.loc 1 2372 19 is_stmt 0 view .LVU1181
 3982 0058 A342     		cmp	r3, r4
 3983 005a 02D8     		bhi	.L274
2397:FreeRTOS-Kernel/tasks.c **** 
 3984              		.loc 1 2397 13 is_stmt 1 view .LVU1182
2397:FreeRTOS-Kernel/tasks.c **** 
 3985              		.loc 1 2397 33 is_stmt 0 view .LVU1183
 3986 005c 2C60     		str	r4, [r5]
2399:FreeRTOS-Kernel/tasks.c ****             {
 3987              		.loc 1 2399 13 is_stmt 1 view .LVU1184
 3988              	.LBE258:
2347:FreeRTOS-Kernel/tasks.c **** 
 3989              		.loc 1 2347 37 is_stmt 0 view .LVU1185
 3990 005e 0024     		movs	r4, #0
 3991              	.LVL281:
2347:FreeRTOS-Kernel/tasks.c **** 
 3992              		.loc 1 2347 37 view .LVU1186
 3993 0060 10E0     		b	.L275
 3994              	.LVL282:
 3995              	.L274:
 3996              	.LBB261:
2372:FreeRTOS-Kernel/tasks.c ****                 {
 3997              		.loc 1 2372 59 discriminator 1 view .LVU1187
 3998 0062 A042     		cmp	r0, r4
 3999 0064 02D3     		bcc	.L276
2397:FreeRTOS-Kernel/tasks.c **** 
 4000              		.loc 1 2397 13 is_stmt 1 view .LVU1188
2397:FreeRTOS-Kernel/tasks.c **** 
 4001              		.loc 1 2397 33 is_stmt 0 view .LVU1189
 4002 0066 2C60     		str	r4, [r5]
2399:FreeRTOS-Kernel/tasks.c ****             {
 4003              		.loc 1 2399 13 is_stmt 1 view .LVU1190
 4004              	.LBE261:
2347:FreeRTOS-Kernel/tasks.c **** 
 4005              		.loc 1 2347 37 is_stmt 0 view .LVU1191
 4006 0068 0024     		movs	r4, #0
 4007              	.LVL283:
2347:FreeRTOS-Kernel/tasks.c **** 
 4008              		.loc 1 2347 37 view .LVU1192
 4009 006a 0BE0     		b	.L275
 4010              	.LVL284:
 4011              	.L276:
 4012              	.LBB262:
2374:FreeRTOS-Kernel/tasks.c ****                 }
 4013              		.loc 1 2374 21 is_stmt 1 view .LVU1193
2397:FreeRTOS-Kernel/tasks.c **** 
 4014              		.loc 1 2397 13 view .LVU1194
ARM GAS  /tmp/ccJw1tyY.s 			page 244


2397:FreeRTOS-Kernel/tasks.c **** 
 4015              		.loc 1 2397 33 is_stmt 0 view .LVU1195
 4016 006c 2C60     		str	r4, [r5]
2399:FreeRTOS-Kernel/tasks.c ****             {
 4017              		.loc 1 2399 13 is_stmt 1 view .LVU1196
 4018 006e 04E0     		b	.L277
 4019              	.LVL285:
 4020              	.L273:
2386:FreeRTOS-Kernel/tasks.c ****                 {
 4021              		.loc 1 2386 17 view .LVU1197
2386:FreeRTOS-Kernel/tasks.c ****                 {
 4022              		.loc 1 2386 19 is_stmt 0 view .LVU1198
 4023 0070 A342     		cmp	r3, r4
 4024 0072 01D8     		bhi	.L278
2386:FreeRTOS-Kernel/tasks.c ****                 {
 4025              		.loc 1 2386 59 discriminator 1 view .LVU1199
 4026 0074 A042     		cmp	r0, r4
 4027 0076 14D2     		bcs	.L279
 4028              	.L278:
2388:FreeRTOS-Kernel/tasks.c ****                 }
 4029              		.loc 1 2388 21 is_stmt 1 view .LVU1200
 4030              	.LVL286:
2397:FreeRTOS-Kernel/tasks.c **** 
 4031              		.loc 1 2397 13 view .LVU1201
2397:FreeRTOS-Kernel/tasks.c **** 
 4032              		.loc 1 2397 33 is_stmt 0 view .LVU1202
 4033 0078 2C60     		str	r4, [r5]
2399:FreeRTOS-Kernel/tasks.c ****             {
 4034              		.loc 1 2399 13 is_stmt 1 view .LVU1203
 4035              	.L277:
2401:FreeRTOS-Kernel/tasks.c **** 
 4036              		.loc 1 2401 53 view .LVU1204
2405:FreeRTOS-Kernel/tasks.c ****             }
 4037              		.loc 1 2405 17 view .LVU1205
 4038 007a 0021     		movs	r1, #0
 4039 007c 201A     		subs	r0, r4, r0
 4040              	.LVL287:
2405:FreeRTOS-Kernel/tasks.c ****             }
 4041              		.loc 1 2405 17 is_stmt 0 view .LVU1206
 4042 007e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4043              	.LVL288:
 4044 0082 0124     		movs	r4, #1
 4045              	.LVL289:
 4046              	.L275:
2409:FreeRTOS-Kernel/tasks.c ****             }
 4047              		.loc 1 2409 41 is_stmt 1 view .LVU1207
 4048              	.LBE262:
2412:FreeRTOS-Kernel/tasks.c **** 
 4049              		.loc 1 2412 9 view .LVU1208
2412:FreeRTOS-Kernel/tasks.c **** 
 4050              		.loc 1 2412 27 is_stmt 0 view .LVU1209
 4051 0084 FFF7FEFF 		bl	xTaskResumeAll
 4052              	.LVL290:
2416:FreeRTOS-Kernel/tasks.c ****         {
 4053              		.loc 1 2416 9 is_stmt 1 view .LVU1210
2416:FreeRTOS-Kernel/tasks.c ****         {
 4054              		.loc 1 2416 11 is_stmt 0 view .LVU1211
ARM GAS  /tmp/ccJw1tyY.s 			page 245


 4055 0088 48B9     		cbnz	r0, .L266
2418:FreeRTOS-Kernel/tasks.c ****         }
 4056              		.loc 1 2418 13 is_stmt 1 view .LVU1212
 4057 008a 4FF0E023 		mov	r3, #-536813568
 4058 008e 4FF08052 		mov	r2, #268435456
 4059 0092 C3F8042D 		str	r2, [r3, #3332]
2418:FreeRTOS-Kernel/tasks.c ****         }
 4060              		.loc 1 2418 13 view .LVU1213
 4061              		.syntax unified
 4062              	@ 2418 "FreeRTOS-Kernel/tasks.c" 1
 4063 0096 BFF34F8F 		dsb
 4064              	@ 0 "" 2
2418:FreeRTOS-Kernel/tasks.c ****         }
 4065              		.loc 1 2418 13 view .LVU1214
 4066              	@ 2418 "FreeRTOS-Kernel/tasks.c" 1
 4067 009a BFF36F8F 		isb
 4068              	@ 0 "" 2
2418:FreeRTOS-Kernel/tasks.c ****         }
 4069              		.loc 1 2418 35 view .LVU1215
2422:FreeRTOS-Kernel/tasks.c ****         }
 4070              		.loc 1 2422 37 view .LVU1216
2425:FreeRTOS-Kernel/tasks.c **** 
 4071              		.loc 1 2425 52 view .LVU1217
2427:FreeRTOS-Kernel/tasks.c ****     }
 4072              		.loc 1 2427 9 view .LVU1218
 4073              		.thumb
 4074              		.syntax unified
 4075              	.L266:
2428:FreeRTOS-Kernel/tasks.c **** 
 4076              		.loc 1 2428 5 is_stmt 0 view .LVU1219
 4077 009e 2046     		mov	r0, r4
 4078              	.LVL291:
2428:FreeRTOS-Kernel/tasks.c **** 
 4079              		.loc 1 2428 5 view .LVU1220
 4080 00a0 38BD     		pop	{r3, r4, r5, pc}
 4081              	.LVL292:
 4082              	.L279:
 4083              	.LBB263:
2397:FreeRTOS-Kernel/tasks.c **** 
 4084              		.loc 1 2397 13 is_stmt 1 view .LVU1221
2397:FreeRTOS-Kernel/tasks.c **** 
 4085              		.loc 1 2397 33 is_stmt 0 view .LVU1222
 4086 00a2 2C60     		str	r4, [r5]
2399:FreeRTOS-Kernel/tasks.c ****             {
 4087              		.loc 1 2399 13 is_stmt 1 view .LVU1223
 4088              	.LBE263:
2347:FreeRTOS-Kernel/tasks.c **** 
 4089              		.loc 1 2347 37 is_stmt 0 view .LVU1224
 4090 00a4 0024     		movs	r4, #0
 4091              	.LVL293:
2347:FreeRTOS-Kernel/tasks.c **** 
 4092              		.loc 1 2347 37 view .LVU1225
 4093 00a6 EDE7     		b	.L275
 4094              	.L284:
 4095              		.align	2
 4096              	.L283:
 4097 00a8 00000000 		.word	xTickCount
ARM GAS  /tmp/ccJw1tyY.s 			page 246


 4098 00ac 00000000 		.word	uxSchedulerSuspended
 4099              		.cfi_endproc
 4100              	.LFE10:
 4102              		.section	.text.vTaskDelay,"ax",%progbits
 4103              		.align	1
 4104              		.global	vTaskDelay
 4105              		.syntax unified
 4106              		.thumb
 4107              		.thumb_func
 4109              	vTaskDelay:
 4110              	.LVL294:
 4111              	.LFB11:
2436:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 4112              		.loc 1 2436 5 is_stmt 1 view -0
 4113              		.cfi_startproc
 4114              		@ args = 0, pretend = 0, frame = 0
 4115              		@ frame_needed = 0, uses_anonymous_args = 0
2436:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 4116              		.loc 1 2436 5 is_stmt 0 view .LVU1227
 4117 0000 10B5     		push	{r4, lr}
 4118              	.LCFI30:
 4119              		.cfi_def_cfa_offset 8
 4120              		.cfi_offset 4, -8
 4121              		.cfi_offset 14, -4
2437:FreeRTOS-Kernel/tasks.c **** 
 4122              		.loc 1 2437 9 is_stmt 1 view .LVU1228
 4123              	.LVL295:
2439:FreeRTOS-Kernel/tasks.c **** 
 4124              		.loc 1 2439 47 view .LVU1229
2442:FreeRTOS-Kernel/tasks.c ****         {
 4125              		.loc 1 2442 9 view .LVU1230
2442:FreeRTOS-Kernel/tasks.c ****         {
 4126              		.loc 1 2442 11 is_stmt 0 view .LVU1231
 4127 0002 50B9     		cbnz	r0, .L291
 4128              	.LVL296:
 4129              	.L286:
2470:FreeRTOS-Kernel/tasks.c ****         }
 4130              		.loc 1 2470 13 is_stmt 1 view .LVU1232
 4131 0004 4FF0E023 		mov	r3, #-536813568
 4132 0008 4FF08052 		mov	r2, #268435456
 4133 000c C3F8042D 		str	r2, [r3, #3332]
2470:FreeRTOS-Kernel/tasks.c ****         }
 4134              		.loc 1 2470 13 view .LVU1233
 4135              		.syntax unified
 4136              	@ 2470 "FreeRTOS-Kernel/tasks.c" 1
 4137 0010 BFF34F8F 		dsb
 4138              	@ 0 "" 2
2470:FreeRTOS-Kernel/tasks.c ****         }
 4139              		.loc 1 2470 13 view .LVU1234
 4140              	@ 2470 "FreeRTOS-Kernel/tasks.c" 1
 4141 0014 BFF36F8F 		isb
 4142              	@ 0 "" 2
2470:FreeRTOS-Kernel/tasks.c ****         }
 4143              		.loc 1 2470 35 view .LVU1235
2474:FreeRTOS-Kernel/tasks.c ****         }
 4144              		.loc 1 2474 37 view .LVU1236
2477:FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  /tmp/ccJw1tyY.s 			page 247


 4145              		.loc 1 2477 33 view .LVU1237
 4146              		.thumb
 4147              		.syntax unified
 4148              	.L285:
2478:FreeRTOS-Kernel/tasks.c **** 
 4149              		.loc 1 2478 5 is_stmt 0 view .LVU1238
 4150 0018 10BD     		pop	{r4, pc}
 4151              	.LVL297:
 4152              	.L291:
2478:FreeRTOS-Kernel/tasks.c **** 
 4153              		.loc 1 2478 5 view .LVU1239
 4154 001a 0446     		mov	r4, r0
2444:FreeRTOS-Kernel/tasks.c ****             {
 4155              		.loc 1 2444 13 is_stmt 1 view .LVU1240
 4156 001c FFF7FEFF 		bl	vTaskSuspendAll
 4157              	.LVL298:
2446:FreeRTOS-Kernel/tasks.c **** 
 4158              		.loc 1 2446 17 view .LVU1241
 4159 0020 0A4B     		ldr	r3, .L292
 4160 0022 1B68     		ldr	r3, [r3]
 4161 0024 012B     		cmp	r3, #1
 4162 0026 08D0     		beq	.L287
2446:FreeRTOS-Kernel/tasks.c **** 
 4163              		.loc 1 2446 17 view .LVU1242
 4164              	.LBB264:
 4165              	.LBI264:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4166              		.loc 2 213 30 view .LVU1243
 4167              	.LBB265:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4168              		.loc 2 215 5 view .LVU1244
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4169              		.loc 2 217 5 view .LVU1245
 4170              		.syntax unified
 4171              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4172 0028 4FF05003 		   mov r3, #80                                              
 4173 002c 83F31188 	   msr basepri, r3                                         
 4174 0030 BFF36F8F 	   isb                                                     
 4175 0034 BFF34F8F 	   dsb                                                     
 4176              	
 4177              	@ 0 "" 2
 4178              	.LVL299:
 4179              		.thumb
 4180              		.syntax unified
 4181              	.L288:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4182              		.loc 2 217 5 is_stmt 0 view .LVU1246
 4183              	.LBE265:
 4184              	.LBE264:
2446:FreeRTOS-Kernel/tasks.c **** 
 4185              		.loc 1 2446 17 is_stmt 1 discriminator 1 view .LVU1247
2446:FreeRTOS-Kernel/tasks.c **** 
 4186              		.loc 1 2446 17 discriminator 1 view .LVU1248
 4187 0038 FEE7     		b	.L288
 4188              	.L287:
2446:FreeRTOS-Kernel/tasks.c **** 
 4189              		.loc 1 2446 59 discriminator 2 view .LVU1249
ARM GAS  /tmp/ccJw1tyY.s 			page 248


2448:FreeRTOS-Kernel/tasks.c **** 
 4190              		.loc 1 2448 34 discriminator 2 view .LVU1250
2457:FreeRTOS-Kernel/tasks.c ****             }
 4191              		.loc 1 2457 17 discriminator 2 view .LVU1251
 4192 003a 0021     		movs	r1, #0
 4193 003c 2046     		mov	r0, r4
 4194 003e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4195              	.LVL300:
2459:FreeRTOS-Kernel/tasks.c ****         }
 4196              		.loc 1 2459 13 discriminator 2 view .LVU1252
2459:FreeRTOS-Kernel/tasks.c ****         }
 4197              		.loc 1 2459 31 is_stmt 0 discriminator 2 view .LVU1253
 4198 0042 FFF7FEFF 		bl	xTaskResumeAll
 4199              	.LVL301:
2463:FreeRTOS-Kernel/tasks.c ****         }
 4200              		.loc 1 2463 37 is_stmt 1 discriminator 2 view .LVU1254
2468:FreeRTOS-Kernel/tasks.c ****         {
 4201              		.loc 1 2468 9 discriminator 2 view .LVU1255
2468:FreeRTOS-Kernel/tasks.c ****         {
 4202              		.loc 1 2468 11 is_stmt 0 discriminator 2 view .LVU1256
 4203 0046 0028     		cmp	r0, #0
 4204 0048 E6D1     		bne	.L285
 4205 004a DBE7     		b	.L286
 4206              	.L293:
 4207              		.align	2
 4208              	.L292:
 4209 004c 00000000 		.word	uxSchedulerSuspended
 4210              		.cfi_endproc
 4211              	.LFE11:
 4213              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 4214              		.align	1
 4215              		.global	xTaskCatchUpTicks
 4216              		.syntax unified
 4217              		.thumb
 4218              		.thumb_func
 4220              	xTaskCatchUpTicks:
 4221              	.LVL302:
 4222              	.LFB31:
4547:FreeRTOS-Kernel/tasks.c ****     BaseType_t xYieldOccurred;
 4223              		.loc 1 4547 1 is_stmt 1 view -0
 4224              		.cfi_startproc
 4225              		@ args = 0, pretend = 0, frame = 0
 4226              		@ frame_needed = 0, uses_anonymous_args = 0
4548:FreeRTOS-Kernel/tasks.c **** 
 4227              		.loc 1 4548 5 view .LVU1258
4550:FreeRTOS-Kernel/tasks.c **** 
 4228              		.loc 1 4550 52 view .LVU1259
4554:FreeRTOS-Kernel/tasks.c **** 
 4229              		.loc 1 4554 5 view .LVU1260
 4230 0000 0D4B     		ldr	r3, .L299
 4231 0002 1B68     		ldr	r3, [r3]
 4232 0004 43B1     		cbz	r3, .L295
4554:FreeRTOS-Kernel/tasks.c **** 
 4233              		.loc 1 4554 5 view .LVU1261
 4234              	.LBB266:
 4235              	.LBI266:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /tmp/ccJw1tyY.s 			page 249


 4236              		.loc 2 213 30 view .LVU1262
 4237              	.LBB267:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4238              		.loc 2 215 5 view .LVU1263
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4239              		.loc 2 217 5 view .LVU1264
 4240              		.syntax unified
 4241              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4242 0006 4FF05003 		   mov r3, #80                                              
 4243 000a 83F31188 	   msr basepri, r3                                         
 4244 000e BFF36F8F 	   isb                                                     
 4245 0012 BFF34F8F 	   dsb                                                     
 4246              	
 4247              	@ 0 "" 2
 4248              	.LVL303:
 4249              		.thumb
 4250              		.syntax unified
 4251              	.L296:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4252              		.loc 2 217 5 is_stmt 0 view .LVU1265
 4253              	.LBE267:
 4254              	.LBE266:
4554:FreeRTOS-Kernel/tasks.c **** 
 4255              		.loc 1 4554 5 is_stmt 1 discriminator 1 view .LVU1266
4554:FreeRTOS-Kernel/tasks.c **** 
 4256              		.loc 1 4554 5 discriminator 1 view .LVU1267
 4257 0016 FEE7     		b	.L296
 4258              	.L295:
4547:FreeRTOS-Kernel/tasks.c ****     BaseType_t xYieldOccurred;
 4259              		.loc 1 4547 1 is_stmt 0 discriminator 2 view .LVU1268
 4260 0018 10B5     		push	{r4, lr}
 4261              	.LCFI31:
 4262              		.cfi_def_cfa_offset 8
 4263              		.cfi_offset 4, -8
 4264              		.cfi_offset 14, -4
 4265 001a 0446     		mov	r4, r0
4554:FreeRTOS-Kernel/tasks.c **** 
 4266              		.loc 1 4554 63 is_stmt 1 discriminator 2 view .LVU1269
4558:FreeRTOS-Kernel/tasks.c **** 
 4267              		.loc 1 4558 5 discriminator 2 view .LVU1270
 4268 001c FFF7FEFF 		bl	vTaskSuspendAll
 4269              	.LVL304:
4561:FreeRTOS-Kernel/tasks.c ****     {
 4270              		.loc 1 4561 5 discriminator 2 view .LVU1271
 4271 0020 FFF7FEFF 		bl	vPortEnterCritical
 4272              	.LVL305:
4563:FreeRTOS-Kernel/tasks.c ****     }
 4273              		.loc 1 4563 9 discriminator 2 view .LVU1272
4563:FreeRTOS-Kernel/tasks.c ****     }
 4274              		.loc 1 4563 22 is_stmt 0 discriminator 2 view .LVU1273
 4275 0024 054A     		ldr	r2, .L299+4
 4276 0026 1368     		ldr	r3, [r2]
 4277 0028 2344     		add	r3, r3, r4
 4278 002a 1360     		str	r3, [r2]
4565:FreeRTOS-Kernel/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 4279              		.loc 1 4565 5 is_stmt 1 discriminator 2 view .LVU1274
 4280 002c FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccJw1tyY.s 			page 250


 4281              	.LVL306:
4566:FreeRTOS-Kernel/tasks.c **** 
 4282              		.loc 1 4566 5 discriminator 2 view .LVU1275
4566:FreeRTOS-Kernel/tasks.c **** 
 4283              		.loc 1 4566 22 is_stmt 0 discriminator 2 view .LVU1276
 4284 0030 FFF7FEFF 		bl	xTaskResumeAll
 4285              	.LVL307:
4568:FreeRTOS-Kernel/tasks.c **** 
 4286              		.loc 1 4568 52 is_stmt 1 discriminator 2 view .LVU1277
4570:FreeRTOS-Kernel/tasks.c **** }
 4287              		.loc 1 4570 5 discriminator 2 view .LVU1278
4571:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
 4288              		.loc 1 4571 1 is_stmt 0 discriminator 2 view .LVU1279
 4289 0034 10BD     		pop	{r4, pc}
 4290              	.LVL308:
 4291              	.L300:
4571:FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
 4292              		.loc 1 4571 1 discriminator 2 view .LVU1280
 4293 0036 00BF     		.align	2
 4294              	.L299:
 4295 0038 00000000 		.word	uxSchedulerSuspended
 4296 003c 00000000 		.word	xPendedTicks
 4297              		.cfi_endproc
 4298              	.LFE31:
 4300              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4301              		.align	1
 4302              		.global	vTaskSwitchContext
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4307              	vTaskSwitchContext:
 4308              	.LFB33:
5057:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskSwitchContext();
 4309              		.loc 1 5057 5 is_stmt 1 view -0
 4310              		.cfi_startproc
 4311              		@ args = 0, pretend = 0, frame = 0
 4312              		@ frame_needed = 0, uses_anonymous_args = 0
 4313              		@ link register save eliminated.
5058:FreeRTOS-Kernel/tasks.c **** 
 4314              		.loc 1 5058 40 view .LVU1282
5060:FreeRTOS-Kernel/tasks.c ****         {
 4315              		.loc 1 5060 9 view .LVU1283
5060:FreeRTOS-Kernel/tasks.c ****         {
 4316              		.loc 1 5060 34 is_stmt 0 view .LVU1284
 4317 0000 204B     		ldr	r3, .L308
 4318 0002 1B68     		ldr	r3, [r3]
5060:FreeRTOS-Kernel/tasks.c ****         {
 4319              		.loc 1 5060 11 view .LVU1285
 4320 0004 1BB1     		cbz	r3, .L302
5064:FreeRTOS-Kernel/tasks.c ****         }
 4321              		.loc 1 5064 13 is_stmt 1 view .LVU1286
5064:FreeRTOS-Kernel/tasks.c ****         }
 4322              		.loc 1 5064 33 is_stmt 0 view .LVU1287
 4323 0006 204B     		ldr	r3, .L308+4
 4324 0008 0122     		movs	r2, #1
 4325 000a 1A60     		str	r2, [r3]
 4326 000c 7047     		bx	lr
ARM GAS  /tmp/ccJw1tyY.s 			page 251


 4327              	.L302:
5068:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_OUT();
 4328              		.loc 1 5068 13 is_stmt 1 view .LVU1288
5068:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_OUT();
 4329              		.loc 1 5068 33 is_stmt 0 view .LVU1289
 4330 000e 1E4B     		ldr	r3, .L308+4
 4331 0010 0022     		movs	r2, #0
 4332 0012 1A60     		str	r2, [r3]
5069:FreeRTOS-Kernel/tasks.c **** 
 4333              		.loc 1 5069 37 is_stmt 1 view .LVU1290
5100:FreeRTOS-Kernel/tasks.c **** 
 4334              		.loc 1 5100 43 view .LVU1291
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4335              		.loc 1 5114 13 view .LVU1292
 4336              	.LBB268:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4337              		.loc 1 5114 13 view .LVU1293
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4338              		.loc 1 5114 13 view .LVU1294
 4339 0014 1D4B     		ldr	r3, .L308+8
 4340 0016 1B68     		ldr	r3, [r3]
 4341              	.LVL309:
 4342              	.LBB269:
 4343              	.LBI269:
 151:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4344              		.loc 2 151 62 view .LVU1295
 4345              	.LBB270:
 153:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4346              		.loc 2 153 9 view .LVU1296
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4347              		.loc 2 155 9 view .LVU1297
 4348              		.syntax unified
 4349              	@ 155 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4350 0018 B3FA83F3 		clz r3, r3
 4351              	@ 0 "" 2
 4352              	.LVL310:
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4353              		.loc 2 155 9 is_stmt 0 view .LVU1298
 4354              		.thumb
 4355              		.syntax unified
 4356 001c DBB2     		uxtb	r3, r3
 4357              	.LVL311:
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 4358              		.loc 2 157 9 is_stmt 1 view .LVU1299
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 4359              		.loc 2 157 9 is_stmt 0 view .LVU1300
 4360              	.LBE270:
 4361              	.LBE269:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4362              		.loc 1 5114 13 view .LVU1301
 4363 001e C3F11F03 		rsb	r3, r3, #31
 4364              	.LVL312:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4365              		.loc 1 5114 13 is_stmt 1 view .LVU1302
 4366 0022 03EB8301 		add	r1, r3, r3, lsl #2
 4367 0026 8A00     		lsls	r2, r1, #2
 4368 0028 1949     		ldr	r1, .L308+12
ARM GAS  /tmp/ccJw1tyY.s 			page 252


 4369 002a 8A58     		ldr	r2, [r1, r2]
 4370 002c 42B9     		cbnz	r2, .L304
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4371              		.loc 1 5114 13 view .LVU1303
 4372              	.LBB271:
 4373              	.LBI271:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4374              		.loc 2 213 30 view .LVU1304
 4375              	.LBB272:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4376              		.loc 2 215 5 view .LVU1305
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4377              		.loc 2 217 5 view .LVU1306
 4378              		.syntax unified
 4379              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4380 002e 4FF05003 		   mov r3, #80                                              
 4381 0032 83F31188 	   msr basepri, r3                                         
 4382 0036 BFF36F8F 	   isb                                                     
 4383 003a BFF34F8F 	   dsb                                                     
 4384              	
 4385              	@ 0 "" 2
 4386              	.LVL313:
 4387              		.thumb
 4388              		.syntax unified
 4389              	.L305:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4390              		.loc 2 217 5 is_stmt 0 view .LVU1307
 4391              	.LBE272:
 4392              	.LBE271:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4393              		.loc 1 5114 13 is_stmt 1 discriminator 1 view .LVU1308
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4394              		.loc 1 5114 13 discriminator 1 view .LVU1309
 4395 003e FEE7     		b	.L305
 4396              	.LVL314:
 4397              	.L304:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4398              		.loc 1 5114 13 discriminator 2 view .LVU1310
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4399              		.loc 1 5114 13 discriminator 2 view .LVU1311
 4400              	.LBB273:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4401              		.loc 1 5114 13 discriminator 2 view .LVU1312
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4402              		.loc 1 5114 13 discriminator 2 view .LVU1313
 4403 0040 1348     		ldr	r0, .L308+12
 4404 0042 03EB8301 		add	r1, r3, r3, lsl #2
 4405 0046 8A00     		lsls	r2, r1, #2
 4406 0048 0244     		add	r2, r2, r0
 4407 004a 5168     		ldr	r1, [r2, #4]
 4408 004c 4968     		ldr	r1, [r1, #4]
 4409 004e 5160     		str	r1, [r2, #4]
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4410              		.loc 1 5114 13 discriminator 2 view .LVU1314
 4411 0050 03EB830C 		add	ip, r3, r3, lsl #2
 4412 0054 4FEA8C02 		lsl	r2, ip, #2
 4413 0058 0832     		adds	r2, r2, #8
ARM GAS  /tmp/ccJw1tyY.s 			page 253


 4414 005a 0244     		add	r2, r2, r0
 4415 005c 9142     		cmp	r1, r2
 4416 005e 0AD0     		beq	.L307
 4417              	.L306:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4418              		.loc 1 5114 13 discriminator 6 view .LVU1315
 4419 0060 03EB8303 		add	r3, r3, r3, lsl #2
 4420              	.LVL315:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4421              		.loc 1 5114 13 is_stmt 0 discriminator 6 view .LVU1316
 4422 0064 9A00     		lsls	r2, r3, #2
 4423 0066 0A4B     		ldr	r3, .L308+12
 4424 0068 1344     		add	r3, r3, r2
 4425 006a 5B68     		ldr	r3, [r3, #4]
 4426 006c DA68     		ldr	r2, [r3, #12]
 4427 006e 094B     		ldr	r3, .L308+16
 4428 0070 1A60     		str	r2, [r3]
 4429              	.LBE273:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4430              		.loc 1 5114 13 is_stmt 1 discriminator 6 view .LVU1317
 4431              	.LBE268:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4432              		.loc 1 5114 13 discriminator 6 view .LVU1318
5115:FreeRTOS-Kernel/tasks.c **** 
 4433              		.loc 1 5115 36 discriminator 6 view .LVU1319
5120:FreeRTOS-Kernel/tasks.c **** 
 4434              		.loc 1 5120 13 discriminator 6 view .LVU1320
 4435 0072 1B68     		ldr	r3, [r3]
5138:FreeRTOS-Kernel/tasks.c ****     }
 4436              		.loc 1 5138 41 discriminator 6 view .LVU1321
5139:FreeRTOS-Kernel/tasks.c **** #else /* if ( configNUMBER_OF_CORES == 1 ) */
 4437              		.loc 1 5139 5 is_stmt 0 discriminator 6 view .LVU1322
 4438 0074 7047     		bx	lr
 4439              	.LVL316:
 4440              	.L307:
 4441              	.LBB275:
 4442              	.LBB274:
5114:FreeRTOS-Kernel/tasks.c ****             traceTASK_SWITCHED_IN();
 4443              		.loc 1 5114 13 is_stmt 1 discriminator 4 view .LVU1323
 4444 0076 6246     		mov	r2, ip
 4445 0078 9100     		lsls	r1, r2, #2
 4446 007a 0246     		mov	r2, r0
 4447 007c 0A44     		add	r2, r2, r1
 4448 007e D168     		ldr	r1, [r2, #12]
 4449 0080 5160     		str	r1, [r2, #4]
 4450 0082 EDE7     		b	.L306
 4451              	.L309:
 4452              		.align	2
 4453              	.L308:
 4454 0084 00000000 		.word	uxSchedulerSuspended
 4455 0088 00000000 		.word	xYieldPendings
 4456 008c 00000000 		.word	uxTopReadyPriority
 4457 0090 00000000 		.word	pxReadyTasksLists
 4458 0094 00000000 		.word	pxCurrentTCB
 4459              	.LBE274:
 4460              	.LBE275:
 4461              		.cfi_endproc
ARM GAS  /tmp/ccJw1tyY.s 			page 254


 4462              	.LFE33:
 4464              		.section	.text.vTaskSuspend,"ax",%progbits
 4465              		.align	1
 4466              		.global	vTaskSuspend
 4467              		.syntax unified
 4468              		.thumb
 4469              		.thumb_func
 4471              	vTaskSuspend:
 4472              	.LVL317:
 4473              	.LFB17:
3122:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 4474              		.loc 1 3122 5 view -0
 4475              		.cfi_startproc
 4476              		@ args = 0, pretend = 0, frame = 0
 4477              		@ frame_needed = 0, uses_anonymous_args = 0
3122:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 4478              		.loc 1 3122 5 is_stmt 0 view .LVU1325
 4479 0000 38B5     		push	{r3, r4, r5, lr}
 4480              	.LCFI32:
 4481              		.cfi_def_cfa_offset 16
 4482              		.cfi_offset 3, -16
 4483              		.cfi_offset 4, -12
 4484              		.cfi_offset 5, -8
 4485              		.cfi_offset 14, -4
 4486 0002 0446     		mov	r4, r0
3123:FreeRTOS-Kernel/tasks.c **** 
 4487              		.loc 1 3123 9 is_stmt 1 view .LVU1326
3125:FreeRTOS-Kernel/tasks.c **** 
 4488              		.loc 1 3125 50 view .LVU1327
3127:FreeRTOS-Kernel/tasks.c ****         {
 4489              		.loc 1 3127 9 view .LVU1328
 4490 0004 FFF7FEFF 		bl	vPortEnterCritical
 4491              	.LVL318:
3131:FreeRTOS-Kernel/tasks.c **** 
 4492              		.loc 1 3131 13 view .LVU1329
3131:FreeRTOS-Kernel/tasks.c **** 
 4493              		.loc 1 3131 21 is_stmt 0 view .LVU1330
 4494 0008 4CB3     		cbz	r4, .L324
 4495              	.LVL319:
 4496              	.L311:
3133:FreeRTOS-Kernel/tasks.c **** 
 4497              		.loc 1 3133 39 is_stmt 1 discriminator 4 view .LVU1331
3137:FreeRTOS-Kernel/tasks.c ****             {
 4498              		.loc 1 3137 13 discriminator 4 view .LVU1332
3137:FreeRTOS-Kernel/tasks.c ****             {
 4499              		.loc 1 3137 17 is_stmt 0 discriminator 4 view .LVU1333
 4500 000a 251D     		adds	r5, r4, #4
 4501 000c 2846     		mov	r0, r5
 4502 000e FFF7FEFF 		bl	uxListRemove
 4503              	.LVL320:
3137:FreeRTOS-Kernel/tasks.c ****             {
 4504              		.loc 1 3137 15 discriminator 4 view .LVU1334
 4505 0012 68B9     		cbnz	r0, .L312
3139:FreeRTOS-Kernel/tasks.c ****             }
 4506              		.loc 1 3139 17 is_stmt 1 view .LVU1335
3139:FreeRTOS-Kernel/tasks.c ****             }
 4507              		.loc 1 3139 17 view .LVU1336
ARM GAS  /tmp/ccJw1tyY.s 			page 255


 4508 0014 E36A     		ldr	r3, [r4, #44]
 4509 0016 03EB8301 		add	r1, r3, r3, lsl #2
 4510 001a 304A     		ldr	r2, .L328
 4511 001c 52F82120 		ldr	r2, [r2, r1, lsl #2]
 4512 0020 32B9     		cbnz	r2, .L312
3139:FreeRTOS-Kernel/tasks.c ****             }
 4513              		.loc 1 3139 17 discriminator 1 view .LVU1337
 4514 0022 0122     		movs	r2, #1
 4515 0024 9A40     		lsls	r2, r2, r3
 4516 0026 2E49     		ldr	r1, .L328+4
 4517 0028 0B68     		ldr	r3, [r1]
 4518 002a 23EA0203 		bic	r3, r3, r2
 4519 002e 0B60     		str	r3, [r1]
 4520              	.L312:
3143:FreeRTOS-Kernel/tasks.c ****             }
 4521              		.loc 1 3143 41 view .LVU1338
3147:FreeRTOS-Kernel/tasks.c ****             {
 4522              		.loc 1 3147 13 view .LVU1339
3147:FreeRTOS-Kernel/tasks.c ****             {
 4523              		.loc 1 3147 17 is_stmt 0 view .LVU1340
 4524 0030 A36A     		ldr	r3, [r4, #40]
3147:FreeRTOS-Kernel/tasks.c ****             {
 4525              		.loc 1 3147 15 view .LVU1341
 4526 0032 1BB1     		cbz	r3, .L313
3149:FreeRTOS-Kernel/tasks.c ****             }
 4527              		.loc 1 3149 17 is_stmt 1 view .LVU1342
3149:FreeRTOS-Kernel/tasks.c ****             }
 4528              		.loc 1 3149 26 is_stmt 0 view .LVU1343
 4529 0034 04F11800 		add	r0, r4, #24
 4530 0038 FFF7FEFF 		bl	uxListRemove
 4531              	.LVL321:
 4532              	.L313:
3153:FreeRTOS-Kernel/tasks.c ****             }
 4533              		.loc 1 3153 41 is_stmt 1 view .LVU1344
3156:FreeRTOS-Kernel/tasks.c **** 
 4534              		.loc 1 3156 13 view .LVU1345
 4535 003c 2946     		mov	r1, r5
 4536 003e 2948     		ldr	r0, .L328+8
 4537 0040 FFF7FEFF 		bl	vListInsertEnd
 4538              	.LVL322:
 4539              	.LBB276:
3160:FreeRTOS-Kernel/tasks.c **** 
 4540              		.loc 1 3160 17 view .LVU1346
3162:FreeRTOS-Kernel/tasks.c ****                 {
 4541              		.loc 1 3162 17 view .LVU1347
3162:FreeRTOS-Kernel/tasks.c ****                 {
 4542              		.loc 1 3162 24 is_stmt 0 view .LVU1348
 4543 0044 0023     		movs	r3, #0
 4544              	.LVL323:
 4545              	.L314:
3162:FreeRTOS-Kernel/tasks.c ****                 {
 4546              		.loc 1 3162 46 is_stmt 1 discriminator 1 view .LVU1349
 4547 0046 002B     		cmp	r3, #0
 4548 0048 0CDD     		ble	.L316
 4549              	.LBE276:
3214:FreeRTOS-Kernel/tasks.c **** 
 4550              		.loc 1 3214 9 view .LVU1350
ARM GAS  /tmp/ccJw1tyY.s 			page 256


 4551 004a FFF7FEFF 		bl	vPortExitCritical
 4552              	.LVL324:
 4553              	.LBB277:
3218:FreeRTOS-Kernel/tasks.c **** 
 4554              		.loc 1 3218 13 view .LVU1351
3220:FreeRTOS-Kernel/tasks.c ****             {
 4555              		.loc 1 3220 13 view .LVU1352
3220:FreeRTOS-Kernel/tasks.c ****             {
 4556              		.loc 1 3220 35 is_stmt 0 view .LVU1353
 4557 004e 264B     		ldr	r3, .L328+12
 4558 0050 1B68     		ldr	r3, [r3]
3220:FreeRTOS-Kernel/tasks.c ****             {
 4559              		.loc 1 3220 15 view .LVU1354
 4560 0052 A3B9     		cbnz	r3, .L325
 4561              	.L317:
3232:FreeRTOS-Kernel/tasks.c ****             }
 4562              		.loc 1 3232 41 is_stmt 1 view .LVU1355
3235:FreeRTOS-Kernel/tasks.c ****             {
 4563              		.loc 1 3235 13 view .LVU1356
3235:FreeRTOS-Kernel/tasks.c ****             {
 4564              		.loc 1 3235 23 is_stmt 0 view .LVU1357
 4565 0054 254B     		ldr	r3, .L328+16
 4566 0056 1B68     		ldr	r3, [r3]
3235:FreeRTOS-Kernel/tasks.c ****             {
 4567              		.loc 1 3235 15 view .LVU1358
 4568 0058 A342     		cmp	r3, r4
 4569 005a 17D0     		beq	.L326
 4570              	.L310:
 4571              	.LBE277:
3276:FreeRTOS-Kernel/tasks.c **** 
 4572              		.loc 1 3276 5 view .LVU1359
 4573 005c 38BD     		pop	{r3, r4, r5, pc}
 4574              	.LVL325:
 4575              	.L324:
3131:FreeRTOS-Kernel/tasks.c **** 
 4576              		.loc 1 3131 21 discriminator 1 view .LVU1360
 4577 005e 234B     		ldr	r3, .L328+16
 4578 0060 1C68     		ldr	r4, [r3]
 4579              	.LVL326:
3131:FreeRTOS-Kernel/tasks.c **** 
 4580              		.loc 1 3131 21 discriminator 1 view .LVU1361
 4581 0062 D2E7     		b	.L311
 4582              	.LVL327:
 4583              	.L316:
 4584              	.LBB280:
3164:FreeRTOS-Kernel/tasks.c ****                     {
 4585              		.loc 1 3164 21 is_stmt 1 view .LVU1362
3164:FreeRTOS-Kernel/tasks.c ****                     {
 4586              		.loc 1 3164 45 is_stmt 0 view .LVU1363
 4587 0064 E218     		adds	r2, r4, r3
 4588 0066 92F85020 		ldrb	r2, [r2, #80]	@ zero_extendqisi2
 4589 006a D2B2     		uxtb	r2, r2
3164:FreeRTOS-Kernel/tasks.c ****                     {
 4590              		.loc 1 3164 23 view .LVU1364
 4591 006c 012A     		cmp	r2, #1
 4592 006e 01D0     		beq	.L327
 4593              	.L315:
ARM GAS  /tmp/ccJw1tyY.s 			page 257


3162:FreeRTOS-Kernel/tasks.c ****                 {
 4594              		.loc 1 3162 103 is_stmt 1 discriminator 2 view .LVU1365
 4595 0070 0133     		adds	r3, r3, #1
 4596              	.LVL328:
3162:FreeRTOS-Kernel/tasks.c ****                 {
 4597              		.loc 1 3162 103 is_stmt 0 discriminator 2 view .LVU1366
 4598 0072 E8E7     		b	.L314
 4599              	.L327:
3168:FreeRTOS-Kernel/tasks.c ****                     }
 4600              		.loc 1 3168 25 is_stmt 1 view .LVU1367
3168:FreeRTOS-Kernel/tasks.c ****                     }
 4601              		.loc 1 3168 51 is_stmt 0 view .LVU1368
 4602 0074 E218     		adds	r2, r4, r3
 4603 0076 0021     		movs	r1, #0
 4604 0078 82F85010 		strb	r1, [r2, #80]
 4605 007c F8E7     		b	.L315
 4606              	.LVL329:
 4607              	.L325:
3168:FreeRTOS-Kernel/tasks.c ****                     }
 4608              		.loc 1 3168 51 view .LVU1369
 4609              	.LBE280:
 4610              	.LBB281:
3224:FreeRTOS-Kernel/tasks.c ****                 {
 4611              		.loc 1 3224 17 is_stmt 1 view .LVU1370
 4612 007e FFF7FEFF 		bl	vPortEnterCritical
 4613              	.LVL330:
3226:FreeRTOS-Kernel/tasks.c ****                 }
 4614              		.loc 1 3226 21 view .LVU1371
 4615 0082 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 4616              	.LVL331:
3228:FreeRTOS-Kernel/tasks.c ****             }
 4617              		.loc 1 3228 17 view .LVU1372
 4618 0086 FFF7FEFF 		bl	vPortExitCritical
 4619              	.LVL332:
 4620 008a E3E7     		b	.L317
 4621              	.L326:
3237:FreeRTOS-Kernel/tasks.c ****                 {
 4622              		.loc 1 3237 17 view .LVU1373
3237:FreeRTOS-Kernel/tasks.c ****                 {
 4623              		.loc 1 3237 39 is_stmt 0 view .LVU1374
 4624 008c 164B     		ldr	r3, .L328+12
 4625 008e 1B68     		ldr	r3, [r3]
3237:FreeRTOS-Kernel/tasks.c ****                 {
 4626              		.loc 1 3237 19 view .LVU1375
 4627 0090 B3B1     		cbz	r3, .L319
3240:FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
 4628              		.loc 1 3240 21 is_stmt 1 view .LVU1376
 4629 0092 174B     		ldr	r3, .L328+20
 4630 0094 1B68     		ldr	r3, [r3]
 4631 0096 43B1     		cbz	r3, .L320
3240:FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
 4632              		.loc 1 3240 21 view .LVU1377
 4633              	.LBB278:
 4634              	.LBI278:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4635              		.loc 2 213 30 view .LVU1378
 4636              	.LBB279:
ARM GAS  /tmp/ccJw1tyY.s 			page 258


 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4637              		.loc 2 215 5 view .LVU1379
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4638              		.loc 2 217 5 view .LVU1380
 4639              		.syntax unified
 4640              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4641 0098 4FF05003 		   mov r3, #80                                              
 4642 009c 83F31188 	   msr basepri, r3                                         
 4643 00a0 BFF36F8F 	   isb                                                     
 4644 00a4 BFF34F8F 	   dsb                                                     
 4645              	
 4646              	@ 0 "" 2
 4647              	.LVL333:
 4648              		.thumb
 4649              		.syntax unified
 4650              	.L321:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4651              		.loc 2 217 5 is_stmt 0 view .LVU1381
 4652              	.LBE279:
 4653              	.LBE278:
3240:FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
 4654              		.loc 1 3240 21 is_stmt 1 discriminator 1 view .LVU1382
3240:FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
 4655              		.loc 1 3240 21 discriminator 1 view .LVU1383
 4656 00a8 FEE7     		b	.L321
 4657              	.L320:
3240:FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
 4658              		.loc 1 3240 62 discriminator 2 view .LVU1384
3241:FreeRTOS-Kernel/tasks.c ****                 }
 4659              		.loc 1 3241 21 discriminator 2 view .LVU1385
 4660 00aa 4FF0E023 		mov	r3, #-536813568
 4661 00ae 4FF08052 		mov	r2, #268435456
 4662 00b2 C3F8042D 		str	r2, [r3, #3332]
3241:FreeRTOS-Kernel/tasks.c ****                 }
 4663              		.loc 1 3241 21 discriminator 2 view .LVU1386
 4664              		.syntax unified
 4665              	@ 3241 "FreeRTOS-Kernel/tasks.c" 1
 4666 00b6 BFF34F8F 		dsb
 4667              	@ 0 "" 2
3241:FreeRTOS-Kernel/tasks.c ****                 }
 4668              		.loc 1 3241 21 discriminator 2 view .LVU1387
 4669              	@ 3241 "FreeRTOS-Kernel/tasks.c" 1
 4670 00ba BFF36F8F 		isb
 4671              	@ 0 "" 2
3241:FreeRTOS-Kernel/tasks.c ****                 }
 4672              		.loc 1 3241 43 discriminator 2 view .LVU1388
 4673              		.thumb
 4674              		.syntax unified
 4675 00be CDE7     		b	.L310
 4676              	.L319:
3252:FreeRTOS-Kernel/tasks.c **** 
 4677              		.loc 1 3252 21 view .LVU1389
3252:FreeRTOS-Kernel/tasks.c **** 
 4678              		.loc 1 3252 41 is_stmt 0 view .LVU1390
 4679 00c0 084B     		ldr	r3, .L328+8
 4680 00c2 1B68     		ldr	r3, [r3]
 4681              	.LVL334:
ARM GAS  /tmp/ccJw1tyY.s 			page 259


3254:FreeRTOS-Kernel/tasks.c ****                     {
 4682              		.loc 1 3254 21 is_stmt 1 view .LVU1391
3254:FreeRTOS-Kernel/tasks.c ****                     {
 4683              		.loc 1 3254 45 is_stmt 0 view .LVU1392
 4684 00c4 0B4A     		ldr	r2, .L328+24
 4685 00c6 1268     		ldr	r2, [r2]
3254:FreeRTOS-Kernel/tasks.c ****                     {
 4686              		.loc 1 3254 23 view .LVU1393
 4687 00c8 9A42     		cmp	r2, r3
 4688 00ca 03D1     		bne	.L322
3260:FreeRTOS-Kernel/tasks.c ****                     }
 4689              		.loc 1 3260 25 is_stmt 1 view .LVU1394
3260:FreeRTOS-Kernel/tasks.c ****                     }
 4690              		.loc 1 3260 38 is_stmt 0 view .LVU1395
 4691 00cc 074B     		ldr	r3, .L328+16
 4692              	.LVL335:
3260:FreeRTOS-Kernel/tasks.c ****                     }
 4693              		.loc 1 3260 38 view .LVU1396
 4694 00ce 0022     		movs	r2, #0
 4695 00d0 1A60     		str	r2, [r3]
 4696 00d2 C3E7     		b	.L310
 4697              	.LVL336:
 4698              	.L322:
3264:FreeRTOS-Kernel/tasks.c ****                     }
 4699              		.loc 1 3264 25 is_stmt 1 view .LVU1397
 4700 00d4 FFF7FEFF 		bl	vTaskSwitchContext
 4701              	.LVL337:
3270:FreeRTOS-Kernel/tasks.c ****             }
 4702              		.loc 1 3270 41 view .LVU1398
 4703              	.LBE281:
3275:FreeRTOS-Kernel/tasks.c ****     }
 4704              		.loc 1 3275 35 view .LVU1399
3276:FreeRTOS-Kernel/tasks.c **** 
 4705              		.loc 1 3276 5 is_stmt 0 view .LVU1400
 4706 00d8 C0E7     		b	.L310
 4707              	.L329:
 4708 00da 00BF     		.align	2
 4709              	.L328:
 4710 00dc 00000000 		.word	pxReadyTasksLists
 4711 00e0 00000000 		.word	uxTopReadyPriority
 4712 00e4 00000000 		.word	xSuspendedTaskList
 4713 00e8 00000000 		.word	xSchedulerRunning
 4714 00ec 00000000 		.word	pxCurrentTCB
 4715 00f0 00000000 		.word	uxSchedulerSuspended
 4716 00f4 00000000 		.word	uxCurrentNumberOfTasks
 4717              		.cfi_endproc
 4718              	.LFE17:
 4720              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4721              		.align	1
 4722              		.global	vTaskPlaceOnEventList
 4723              		.syntax unified
 4724              		.thumb
 4725              		.thumb_func
 4727              	vTaskPlaceOnEventList:
 4728              	.LVL338:
 4729              	.LFB34:
5245:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );
ARM GAS  /tmp/ccJw1tyY.s 			page 260


 4730              		.loc 1 5245 1 is_stmt 1 view -0
 4731              		.cfi_startproc
 4732              		@ args = 0, pretend = 0, frame = 0
 4733              		@ frame_needed = 0, uses_anonymous_args = 0
5246:FreeRTOS-Kernel/tasks.c **** 
 4734              		.loc 1 5246 66 view .LVU1402
5248:FreeRTOS-Kernel/tasks.c **** 
 4735              		.loc 1 5248 5 view .LVU1403
 4736 0000 58B1     		cbz	r0, .L335
5245:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );
 4737              		.loc 1 5245 1 is_stmt 0 discriminator 2 view .LVU1404
 4738 0002 10B5     		push	{r4, lr}
 4739              	.LCFI33:
 4740              		.cfi_def_cfa_offset 8
 4741              		.cfi_offset 4, -8
 4742              		.cfi_offset 14, -4
 4743 0004 0C46     		mov	r4, r1
5248:FreeRTOS-Kernel/tasks.c **** 
 4744              		.loc 1 5248 32 is_stmt 1 discriminator 2 view .LVU1405
5264:FreeRTOS-Kernel/tasks.c **** 
 4745              		.loc 1 5264 5 discriminator 2 view .LVU1406
5264:FreeRTOS-Kernel/tasks.c **** 
 4746              		.loc 1 5264 46 is_stmt 0 discriminator 2 view .LVU1407
 4747 0006 094A     		ldr	r2, .L336
 4748 0008 1168     		ldr	r1, [r2]
 4749              	.LVL339:
5264:FreeRTOS-Kernel/tasks.c **** 
 4750              		.loc 1 5264 5 discriminator 2 view .LVU1408
 4751 000a 1831     		adds	r1, r1, #24
 4752 000c FFF7FEFF 		bl	vListInsert
 4753              	.LVL340:
5266:FreeRTOS-Kernel/tasks.c **** 
 4754              		.loc 1 5266 5 is_stmt 1 discriminator 2 view .LVU1409
 4755 0010 0121     		movs	r1, #1
 4756 0012 2046     		mov	r0, r4
 4757 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4758              	.LVL341:
5268:FreeRTOS-Kernel/tasks.c **** }
 4759              		.loc 1 5268 40 discriminator 2 view .LVU1410
5269:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 4760              		.loc 1 5269 1 is_stmt 0 discriminator 2 view .LVU1411
 4761 0018 10BD     		pop	{r4, pc}
 4762              	.LVL342:
 4763              	.L335:
 4764              	.LCFI34:
 4765              		.cfi_def_cfa_offset 0
 4766              		.cfi_restore 4
 4767              		.cfi_restore 14
5248:FreeRTOS-Kernel/tasks.c **** 
 4768              		.loc 1 5248 5 is_stmt 1 view .LVU1412
 4769              	.LBB282:
 4770              	.LBI282:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4771              		.loc 2 213 30 view .LVU1413
 4772              	.LBB283:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4773              		.loc 2 215 5 view .LVU1414
ARM GAS  /tmp/ccJw1tyY.s 			page 261


 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4774              		.loc 2 217 5 view .LVU1415
 4775              		.syntax unified
 4776              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4777 001a 4FF05003 		   mov r3, #80                                              
 4778 001e 83F31188 	   msr basepri, r3                                         
 4779 0022 BFF36F8F 	   isb                                                     
 4780 0026 BFF34F8F 	   dsb                                                     
 4781              	
 4782              	@ 0 "" 2
 4783              	.LVL343:
 4784              		.thumb
 4785              		.syntax unified
 4786              	.L332:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4787              		.loc 2 217 5 is_stmt 0 view .LVU1416
 4788              	.LBE283:
 4789              	.LBE282:
5248:FreeRTOS-Kernel/tasks.c **** 
 4790              		.loc 1 5248 5 is_stmt 1 discriminator 1 view .LVU1417
5248:FreeRTOS-Kernel/tasks.c **** 
 4791              		.loc 1 5248 5 discriminator 1 view .LVU1418
 4792 002a FEE7     		b	.L332
 4793              	.L337:
 4794              		.align	2
 4795              	.L336:
 4796 002c 00000000 		.word	pxCurrentTCB
 4797              		.cfi_endproc
 4798              	.LFE34:
 4800              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4801              		.align	1
 4802              		.global	vTaskPlaceOnUnorderedEventList
 4803              		.syntax unified
 4804              		.thumb
 4805              		.thumb_func
 4807              	vTaskPlaceOnUnorderedEventList:
 4808              	.LVL344:
 4809              	.LFB35:
5275:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );
 4810              		.loc 1 5275 1 view -0
 4811              		.cfi_startproc
 4812              		@ args = 0, pretend = 0, frame = 0
 4813              		@ frame_needed = 0, uses_anonymous_args = 0
5275:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );
 4814              		.loc 1 5275 1 is_stmt 0 view .LVU1420
 4815 0000 38B5     		push	{r3, r4, r5, lr}
 4816              	.LCFI35:
 4817              		.cfi_def_cfa_offset 16
 4818              		.cfi_offset 3, -16
 4819              		.cfi_offset 4, -12
 4820              		.cfi_offset 5, -8
 4821              		.cfi_offset 14, -4
5276:FreeRTOS-Kernel/tasks.c **** 
 4822              		.loc 1 5276 87 is_stmt 1 view .LVU1421
5278:FreeRTOS-Kernel/tasks.c **** 
 4823              		.loc 1 5278 5 view .LVU1422
 4824 0002 60B1     		cbz	r0, .L344
ARM GAS  /tmp/ccJw1tyY.s 			page 262


 4825 0004 0346     		mov	r3, r0
5278:FreeRTOS-Kernel/tasks.c **** 
 4826              		.loc 1 5278 32 discriminator 2 view .LVU1423
5282:FreeRTOS-Kernel/tasks.c **** 
 4827              		.loc 1 5282 5 discriminator 2 view .LVU1424
 4828 0006 1848     		ldr	r0, .L345
 4829              	.LVL345:
5282:FreeRTOS-Kernel/tasks.c **** 
 4830              		.loc 1 5282 5 is_stmt 0 discriminator 2 view .LVU1425
 4831 0008 0068     		ldr	r0, [r0]
 4832 000a 88B9     		cbnz	r0, .L341
5282:FreeRTOS-Kernel/tasks.c **** 
 4833              		.loc 1 5282 5 is_stmt 1 view .LVU1426
 4834              	.LBB284:
 4835              	.LBI284:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4836              		.loc 2 213 30 view .LVU1427
 4837              	.LBB285:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4838              		.loc 2 215 5 view .LVU1428
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4839              		.loc 2 217 5 view .LVU1429
 4840              		.syntax unified
 4841              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4842 000c 4FF05003 		   mov r3, #80                                              
 4843 0010 83F31188 	   msr basepri, r3                                         
 4844 0014 BFF36F8F 	   isb                                                     
 4845 0018 BFF34F8F 	   dsb                                                     
 4846              	
 4847              	@ 0 "" 2
 4848              	.LVL346:
 4849              		.thumb
 4850              		.syntax unified
 4851              	.L342:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4852              		.loc 2 217 5 is_stmt 0 view .LVU1430
 4853              	.LBE285:
 4854              	.LBE284:
5282:FreeRTOS-Kernel/tasks.c **** 
 4855              		.loc 1 5282 5 is_stmt 1 discriminator 2 view .LVU1431
5282:FreeRTOS-Kernel/tasks.c **** 
 4856              		.loc 1 5282 5 discriminator 2 view .LVU1432
 4857 001c FEE7     		b	.L342
 4858              	.LVL347:
 4859              	.L344:
5278:FreeRTOS-Kernel/tasks.c **** 
 4860              		.loc 1 5278 5 view .LVU1433
 4861              	.LBB286:
 4862              	.LBI286:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4863              		.loc 2 213 30 view .LVU1434
 4864              	.LBB287:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4865              		.loc 2 215 5 view .LVU1435
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4866              		.loc 2 217 5 view .LVU1436
 4867              		.syntax unified
ARM GAS  /tmp/ccJw1tyY.s 			page 263


 4868              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4869 001e 4FF05003 		   mov r3, #80                                              
 4870 0022 83F31188 	   msr basepri, r3                                         
 4871 0026 BFF36F8F 	   isb                                                     
 4872 002a BFF34F8F 	   dsb                                                     
 4873              	
 4874              	@ 0 "" 2
 4875              	.LVL348:
 4876              		.thumb
 4877              		.syntax unified
 4878              	.L340:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4879              		.loc 2 217 5 is_stmt 0 view .LVU1437
 4880              	.LBE287:
 4881              	.LBE286:
5278:FreeRTOS-Kernel/tasks.c **** 
 4882              		.loc 1 5278 5 is_stmt 1 discriminator 1 view .LVU1438
5278:FreeRTOS-Kernel/tasks.c **** 
 4883              		.loc 1 5278 5 discriminator 1 view .LVU1439
 4884 002e FEE7     		b	.L340
 4885              	.LVL349:
 4886              	.L341:
5282:FreeRTOS-Kernel/tasks.c **** 
 4887              		.loc 1 5282 63 discriminator 2 view .LVU1440
5287:FreeRTOS-Kernel/tasks.c **** 
 4888              		.loc 1 5287 5 discriminator 2 view .LVU1441
 4889 0030 0E48     		ldr	r0, .L345+4
 4890 0032 0468     		ldr	r4, [r0]
 4891 0034 41F00041 		orr	r1, r1, #-2147483648
 4892              	.LVL350:
5287:FreeRTOS-Kernel/tasks.c **** 
 4893              		.loc 1 5287 5 is_stmt 0 discriminator 2 view .LVU1442
 4894 0038 A161     		str	r1, [r4, #24]
5294:FreeRTOS-Kernel/tasks.c **** 
 4895              		.loc 1 5294 5 is_stmt 1 discriminator 2 view .LVU1443
 4896              	.LBB288:
5294:FreeRTOS-Kernel/tasks.c **** 
 4897              		.loc 1 5294 5 discriminator 2 view .LVU1444
 4898 003a 5968     		ldr	r1, [r3, #4]
 4899              	.LVL351:
5294:FreeRTOS-Kernel/tasks.c **** 
 4900              		.loc 1 5294 5 discriminator 2 view .LVU1445
5294:FreeRTOS-Kernel/tasks.c **** 
 4901              		.loc 1 5294 5 discriminator 2 view .LVU1446
5294:FreeRTOS-Kernel/tasks.c **** 
 4902              		.loc 1 5294 5 discriminator 2 view .LVU1447
 4903 003c 0468     		ldr	r4, [r0]
 4904 003e E161     		str	r1, [r4, #28]
5294:FreeRTOS-Kernel/tasks.c **** 
 4905              		.loc 1 5294 5 discriminator 2 view .LVU1448
 4906 0040 0568     		ldr	r5, [r0]
 4907 0042 8C68     		ldr	r4, [r1, #8]
 4908 0044 2C62     		str	r4, [r5, #32]
5294:FreeRTOS-Kernel/tasks.c **** 
 4909              		.loc 1 5294 5 discriminator 2 view .LVU1449
 4910 0046 0568     		ldr	r5, [r0]
 4911 0048 1835     		adds	r5, r5, #24
ARM GAS  /tmp/ccJw1tyY.s 			page 264


 4912 004a 6560     		str	r5, [r4, #4]
5294:FreeRTOS-Kernel/tasks.c **** 
 4913              		.loc 1 5294 5 discriminator 2 view .LVU1450
 4914 004c 0468     		ldr	r4, [r0]
 4915 004e 1834     		adds	r4, r4, #24
 4916 0050 8C60     		str	r4, [r1, #8]
5294:FreeRTOS-Kernel/tasks.c **** 
 4917              		.loc 1 5294 5 discriminator 2 view .LVU1451
 4918 0052 0168     		ldr	r1, [r0]
 4919              	.LVL352:
5294:FreeRTOS-Kernel/tasks.c **** 
 4920              		.loc 1 5294 5 is_stmt 0 discriminator 2 view .LVU1452
 4921 0054 8B62     		str	r3, [r1, #40]
5294:FreeRTOS-Kernel/tasks.c **** 
 4922              		.loc 1 5294 5 is_stmt 1 discriminator 2 view .LVU1453
 4923 0056 1968     		ldr	r1, [r3]
 4924 0058 0131     		adds	r1, r1, #1
 4925 005a 1960     		str	r1, [r3]
 4926              	.LBE288:
5294:FreeRTOS-Kernel/tasks.c **** 
 4927              		.loc 1 5294 5 discriminator 2 view .LVU1454
5296:FreeRTOS-Kernel/tasks.c **** 
 4928              		.loc 1 5296 5 discriminator 2 view .LVU1455
 4929 005c 0121     		movs	r1, #1
 4930 005e 1046     		mov	r0, r2
 4931 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4932              	.LVL353:
5298:FreeRTOS-Kernel/tasks.c **** }
 4933              		.loc 1 5298 49 discriminator 2 view .LVU1456
5299:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 4934              		.loc 1 5299 1 is_stmt 0 discriminator 2 view .LVU1457
 4935 0064 38BD     		pop	{r3, r4, r5, pc}
 4936              	.L346:
 4937 0066 00BF     		.align	2
 4938              	.L345:
 4939 0068 00000000 		.word	uxSchedulerSuspended
 4940 006c 00000000 		.word	pxCurrentTCB
 4941              		.cfi_endproc
 4942              	.LFE35:
 4944              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4945              		.align	1
 4946              		.global	vTaskPlaceOnEventListRestricted
 4947              		.syntax unified
 4948              		.thumb
 4949              		.thumb_func
 4951              	vTaskPlaceOnEventListRestricted:
 4952              	.LVL354:
 4953              	.LFB36:
5307:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );
 4954              		.loc 1 5307 5 is_stmt 1 view -0
 4955              		.cfi_startproc
 4956              		@ args = 0, pretend = 0, frame = 0
 4957              		@ frame_needed = 0, uses_anonymous_args = 0
5307:FreeRTOS-Kernel/tasks.c ****         traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );
 4958              		.loc 1 5307 5 is_stmt 0 view .LVU1459
 4959 0000 38B5     		push	{r3, r4, r5, lr}
 4960              	.LCFI36:
ARM GAS  /tmp/ccJw1tyY.s 			page 265


 4961              		.cfi_def_cfa_offset 16
 4962              		.cfi_offset 3, -16
 4963              		.cfi_offset 4, -12
 4964              		.cfi_offset 5, -8
 4965              		.cfi_offset 14, -4
5308:FreeRTOS-Kernel/tasks.c **** 
 4966              		.loc 1 5308 99 is_stmt 1 view .LVU1460
5310:FreeRTOS-Kernel/tasks.c **** 
 4967              		.loc 1 5310 9 view .LVU1461
 4968 0002 D8B1     		cbz	r0, .L353
 4969 0004 8C46     		mov	ip, r1
 4970 0006 1146     		mov	r1, r2
 4971              	.LVL355:
5310:FreeRTOS-Kernel/tasks.c **** 
 4972              		.loc 1 5310 9 is_stmt 0 view .LVU1462
 4973 0008 0546     		mov	r5, r0
5310:FreeRTOS-Kernel/tasks.c **** 
 4974              		.loc 1 5310 36 is_stmt 1 discriminator 2 view .LVU1463
5322:FreeRTOS-Kernel/tasks.c **** 
 4975              		.loc 1 5322 9 discriminator 2 view .LVU1464
 4976              	.LBB289:
5322:FreeRTOS-Kernel/tasks.c **** 
 4977              		.loc 1 5322 9 discriminator 2 view .LVU1465
 4978 000a 4268     		ldr	r2, [r0, #4]
 4979              	.LVL356:
5322:FreeRTOS-Kernel/tasks.c **** 
 4980              		.loc 1 5322 9 discriminator 2 view .LVU1466
5322:FreeRTOS-Kernel/tasks.c **** 
 4981              		.loc 1 5322 9 discriminator 2 view .LVU1467
5322:FreeRTOS-Kernel/tasks.c **** 
 4982              		.loc 1 5322 9 discriminator 2 view .LVU1468
 4983 000c 104B     		ldr	r3, .L354
 4984 000e 1868     		ldr	r0, [r3]
 4985              	.LVL357:
5322:FreeRTOS-Kernel/tasks.c **** 
 4986              		.loc 1 5322 9 is_stmt 0 discriminator 2 view .LVU1469
 4987 0010 C261     		str	r2, [r0, #28]
5322:FreeRTOS-Kernel/tasks.c **** 
 4988              		.loc 1 5322 9 is_stmt 1 discriminator 2 view .LVU1470
 4989 0012 1868     		ldr	r0, [r3]
 4990 0014 9468     		ldr	r4, [r2, #8]
 4991 0016 0462     		str	r4, [r0, #32]
5322:FreeRTOS-Kernel/tasks.c **** 
 4992              		.loc 1 5322 9 discriminator 2 view .LVU1471
 4993 0018 1868     		ldr	r0, [r3]
 4994 001a 1830     		adds	r0, r0, #24
 4995 001c 6060     		str	r0, [r4, #4]
5322:FreeRTOS-Kernel/tasks.c **** 
 4996              		.loc 1 5322 9 discriminator 2 view .LVU1472
 4997 001e 1868     		ldr	r0, [r3]
 4998 0020 1830     		adds	r0, r0, #24
 4999 0022 9060     		str	r0, [r2, #8]
5322:FreeRTOS-Kernel/tasks.c **** 
 5000              		.loc 1 5322 9 discriminator 2 view .LVU1473
 5001 0024 1B68     		ldr	r3, [r3]
 5002 0026 9D62     		str	r5, [r3, #40]
5322:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 266


 5003              		.loc 1 5322 9 discriminator 2 view .LVU1474
 5004 0028 2B68     		ldr	r3, [r5]
 5005 002a 0133     		adds	r3, r3, #1
 5006 002c 2B60     		str	r3, [r5]
 5007              	.LBE289:
5322:FreeRTOS-Kernel/tasks.c **** 
 5008              		.loc 1 5322 9 discriminator 2 view .LVU1475
5327:FreeRTOS-Kernel/tasks.c ****         {
 5009              		.loc 1 5327 9 discriminator 2 view .LVU1476
5327:FreeRTOS-Kernel/tasks.c ****         {
 5010              		.loc 1 5327 11 is_stmt 0 discriminator 2 view .LVU1477
 5011 002e 09B1     		cbz	r1, .L350
5329:FreeRTOS-Kernel/tasks.c ****         }
 5012              		.loc 1 5329 26 view .LVU1478
 5013 0030 4FF0FF3C 		mov	ip, #-1
 5014              	.LVL358:
 5015              	.L350:
5332:FreeRTOS-Kernel/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 5016              		.loc 1 5332 63 is_stmt 1 view .LVU1479
5333:FreeRTOS-Kernel/tasks.c **** 
 5017              		.loc 1 5333 9 view .LVU1480
 5018 0034 6046     		mov	r0, ip
 5019 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5020              	.LVL359:
5335:FreeRTOS-Kernel/tasks.c ****     }
 5021              		.loc 1 5335 54 view .LVU1481
5336:FreeRTOS-Kernel/tasks.c **** 
 5022              		.loc 1 5336 5 is_stmt 0 view .LVU1482
 5023 003a 38BD     		pop	{r3, r4, r5, pc}
 5024              	.LVL360:
 5025              	.L353:
5310:FreeRTOS-Kernel/tasks.c **** 
 5026              		.loc 1 5310 9 is_stmt 1 view .LVU1483
 5027              	.LBB290:
 5028              	.LBI290:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5029              		.loc 2 213 30 view .LVU1484
 5030              	.LBB291:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5031              		.loc 2 215 5 view .LVU1485
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5032              		.loc 2 217 5 view .LVU1486
 5033              		.syntax unified
 5034              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5035 003c 4FF05003 		   mov r3, #80                                              
 5036 0040 83F31188 	   msr basepri, r3                                         
 5037 0044 BFF36F8F 	   isb                                                     
 5038 0048 BFF34F8F 	   dsb                                                     
 5039              	
 5040              	@ 0 "" 2
 5041              	.LVL361:
 5042              		.thumb
 5043              		.syntax unified
 5044              	.L349:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5045              		.loc 2 217 5 is_stmt 0 view .LVU1487
 5046              	.LBE291:
ARM GAS  /tmp/ccJw1tyY.s 			page 267


 5047              	.LBE290:
5310:FreeRTOS-Kernel/tasks.c **** 
 5048              		.loc 1 5310 9 is_stmt 1 discriminator 1 view .LVU1488
5310:FreeRTOS-Kernel/tasks.c **** 
 5049              		.loc 1 5310 9 discriminator 1 view .LVU1489
 5050 004c FEE7     		b	.L349
 5051              	.L355:
 5052 004e 00BF     		.align	2
 5053              	.L354:
 5054 0050 00000000 		.word	pxCurrentTCB
 5055              		.cfi_endproc
 5056              	.LFE36:
 5058              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 5059              		.align	1
 5060              		.global	xTaskRemoveFromEventList
 5061              		.syntax unified
 5062              		.thumb
 5063              		.thumb_func
 5065              	xTaskRemoveFromEventList:
 5066              	.LVL362:
 5067              	.LFB37:
5342:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
 5068              		.loc 1 5342 1 view -0
 5069              		.cfi_startproc
 5070              		@ args = 0, pretend = 0, frame = 0
 5071              		@ frame_needed = 0, uses_anonymous_args = 0
 5072              		@ link register save eliminated.
5343:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
 5073              		.loc 1 5343 5 view .LVU1491
5344:FreeRTOS-Kernel/tasks.c **** 
 5074              		.loc 1 5344 5 view .LVU1492
5346:FreeRTOS-Kernel/tasks.c **** 
 5075              		.loc 1 5346 55 view .LVU1493
5364:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 5076              		.loc 1 5364 5 view .LVU1494
5364:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 5077              		.loc 1 5364 22 is_stmt 0 view .LVU1495
 5078 0000 C368     		ldr	r3, [r0, #12]
5364:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 5079              		.loc 1 5364 20 view .LVU1496
 5080 0002 DB68     		ldr	r3, [r3, #12]
 5081              	.LVL363:
5365:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5082              		.loc 1 5365 5 is_stmt 1 view .LVU1497
 5083 0004 002B     		cmp	r3, #0
 5084 0006 4DD0     		beq	.L367
5342:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
 5085              		.loc 1 5342 1 is_stmt 0 discriminator 2 view .LVU1498
 5086 0008 30B4     		push	{r4, r5}
 5087              	.LCFI37:
 5088              		.cfi_def_cfa_offset 8
 5089              		.cfi_offset 4, -8
 5090              		.cfi_offset 5, -4
5365:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5091              		.loc 1 5365 35 is_stmt 1 discriminator 2 view .LVU1499
5366:FreeRTOS-Kernel/tasks.c **** 
 5092              		.loc 1 5366 5 discriminator 2 view .LVU1500
ARM GAS  /tmp/ccJw1tyY.s 			page 268


 5093              	.LBB292:
5366:FreeRTOS-Kernel/tasks.c **** 
 5094              		.loc 1 5366 5 discriminator 2 view .LVU1501
 5095 000a 9A6A     		ldr	r2, [r3, #40]
 5096              	.LVL364:
5366:FreeRTOS-Kernel/tasks.c **** 
 5097              		.loc 1 5366 5 discriminator 2 view .LVU1502
 5098 000c D869     		ldr	r0, [r3, #28]
 5099              	.LVL365:
5366:FreeRTOS-Kernel/tasks.c **** 
 5100              		.loc 1 5366 5 is_stmt 0 discriminator 2 view .LVU1503
 5101 000e 196A     		ldr	r1, [r3, #32]
 5102 0010 8160     		str	r1, [r0, #8]
5366:FreeRTOS-Kernel/tasks.c **** 
 5103              		.loc 1 5366 5 is_stmt 1 discriminator 2 view .LVU1504
 5104 0012 D869     		ldr	r0, [r3, #28]
 5105 0014 4860     		str	r0, [r1, #4]
5366:FreeRTOS-Kernel/tasks.c **** 
 5106              		.loc 1 5366 5 discriminator 2 view .LVU1505
 5107 0016 5168     		ldr	r1, [r2, #4]
 5108 0018 03F11800 		add	r0, r3, #24
 5109 001c 8142     		cmp	r1, r0
 5110 001e 4AD0     		beq	.L368
 5111              	.L359:
5366:FreeRTOS-Kernel/tasks.c **** 
 5112              		.loc 1 5366 5 discriminator 3 view .LVU1506
 5113 0020 0021     		movs	r1, #0
 5114 0022 9962     		str	r1, [r3, #40]
5366:FreeRTOS-Kernel/tasks.c **** 
 5115              		.loc 1 5366 5 discriminator 3 view .LVU1507
 5116 0024 1168     		ldr	r1, [r2]
 5117 0026 0139     		subs	r1, r1, #1
 5118 0028 1160     		str	r1, [r2]
 5119              	.LBE292:
5366:FreeRTOS-Kernel/tasks.c **** 
 5120              		.loc 1 5366 5 discriminator 3 view .LVU1508
5368:FreeRTOS-Kernel/tasks.c ****     {
 5121              		.loc 1 5368 5 discriminator 3 view .LVU1509
5368:FreeRTOS-Kernel/tasks.c ****     {
 5122              		.loc 1 5368 30 is_stmt 0 discriminator 3 view .LVU1510
 5123 002a 2D4A     		ldr	r2, .L370
 5124              	.LVL366:
5368:FreeRTOS-Kernel/tasks.c ****     {
 5125              		.loc 1 5368 30 discriminator 3 view .LVU1511
 5126 002c 1268     		ldr	r2, [r2]
5368:FreeRTOS-Kernel/tasks.c ****     {
 5127              		.loc 1 5368 7 discriminator 3 view .LVU1512
 5128 002e 002A     		cmp	r2, #0
 5129 0030 47D1     		bne	.L360
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5130              		.loc 1 5370 9 is_stmt 1 view .LVU1513
 5131              	.LBB293:
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5132              		.loc 1 5370 9 view .LVU1514
 5133 0032 5A69     		ldr	r2, [r3, #20]
 5134              	.LVL367:
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  /tmp/ccJw1tyY.s 			page 269


 5135              		.loc 1 5370 9 view .LVU1515
 5136 0034 9868     		ldr	r0, [r3, #8]
 5137 0036 D968     		ldr	r1, [r3, #12]
 5138 0038 8160     		str	r1, [r0, #8]
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5139              		.loc 1 5370 9 view .LVU1516
 5140 003a 9868     		ldr	r0, [r3, #8]
 5141 003c 4860     		str	r0, [r1, #4]
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5142              		.loc 1 5370 9 view .LVU1517
 5143 003e 5168     		ldr	r1, [r2, #4]
 5144 0040 181D     		adds	r0, r3, #4
 5145 0042 8142     		cmp	r1, r0
 5146 0044 3AD0     		beq	.L369
 5147              	.L361:
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5148              		.loc 1 5370 9 discriminator 3 view .LVU1518
 5149 0046 0021     		movs	r1, #0
 5150 0048 5961     		str	r1, [r3, #20]
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5151              		.loc 1 5370 9 discriminator 3 view .LVU1519
 5152 004a 1168     		ldr	r1, [r2]
 5153 004c 0139     		subs	r1, r1, #1
 5154 004e 1160     		str	r1, [r2]
 5155              	.LBE293:
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5156              		.loc 1 5370 9 discriminator 3 view .LVU1520
5371:FreeRTOS-Kernel/tasks.c **** 
 5157              		.loc 1 5371 9 discriminator 3 view .LVU1521
5371:FreeRTOS-Kernel/tasks.c **** 
 5158              		.loc 1 5371 9 discriminator 3 view .LVU1522
5371:FreeRTOS-Kernel/tasks.c **** 
 5159              		.loc 1 5371 9 discriminator 3 view .LVU1523
 5160 0050 DA6A     		ldr	r2, [r3, #44]
 5161              	.LVL368:
5371:FreeRTOS-Kernel/tasks.c **** 
 5162              		.loc 1 5371 9 is_stmt 0 discriminator 3 view .LVU1524
 5163 0052 0121     		movs	r1, #1
 5164 0054 9140     		lsls	r1, r1, r2
 5165 0056 234C     		ldr	r4, .L370+4
 5166 0058 2568     		ldr	r5, [r4]
 5167 005a 2943     		orrs	r1, r1, r5
 5168 005c 2160     		str	r1, [r4]
5371:FreeRTOS-Kernel/tasks.c **** 
 5169              		.loc 1 5371 9 is_stmt 1 discriminator 3 view .LVU1525
 5170              	.LBB294:
5371:FreeRTOS-Kernel/tasks.c **** 
 5171              		.loc 1 5371 9 discriminator 3 view .LVU1526
 5172 005e 2249     		ldr	r1, .L370+8
 5173 0060 02EB8202 		add	r2, r2, r2, lsl #2
 5174 0064 01EB8202 		add	r2, r1, r2, lsl #2
 5175 0068 5268     		ldr	r2, [r2, #4]
 5176              	.LVL369:
5371:FreeRTOS-Kernel/tasks.c **** 
 5177              		.loc 1 5371 9 discriminator 3 view .LVU1527
5371:FreeRTOS-Kernel/tasks.c **** 
 5178              		.loc 1 5371 9 discriminator 3 view .LVU1528
ARM GAS  /tmp/ccJw1tyY.s 			page 270


5371:FreeRTOS-Kernel/tasks.c **** 
 5179              		.loc 1 5371 9 discriminator 3 view .LVU1529
 5180 006a 9A60     		str	r2, [r3, #8]
5371:FreeRTOS-Kernel/tasks.c **** 
 5181              		.loc 1 5371 9 discriminator 3 view .LVU1530
 5182 006c 9468     		ldr	r4, [r2, #8]
 5183 006e DC60     		str	r4, [r3, #12]
5371:FreeRTOS-Kernel/tasks.c **** 
 5184              		.loc 1 5371 9 discriminator 3 view .LVU1531
 5185 0070 6060     		str	r0, [r4, #4]
5371:FreeRTOS-Kernel/tasks.c **** 
 5186              		.loc 1 5371 9 discriminator 3 view .LVU1532
 5187 0072 9060     		str	r0, [r2, #8]
5371:FreeRTOS-Kernel/tasks.c **** 
 5188              		.loc 1 5371 9 discriminator 3 view .LVU1533
 5189 0074 DA6A     		ldr	r2, [r3, #44]
 5190              	.LVL370:
5371:FreeRTOS-Kernel/tasks.c **** 
 5191              		.loc 1 5371 9 is_stmt 0 discriminator 3 view .LVU1534
 5192 0076 02EB8200 		add	r0, r2, r2, lsl #2
 5193 007a 01EB8004 		add	r4, r1, r0, lsl #2
 5194 007e 5C61     		str	r4, [r3, #20]
5371:FreeRTOS-Kernel/tasks.c **** 
 5195              		.loc 1 5371 9 is_stmt 1 discriminator 3 view .LVU1535
 5196 0080 51F82000 		ldr	r0, [r1, r0, lsl #2]
 5197 0084 0130     		adds	r0, r0, #1
 5198 0086 02EB8202 		add	r2, r2, r2, lsl #2
 5199 008a 41F82200 		str	r0, [r1, r2, lsl #2]
 5200              	.LBE294:
5371:FreeRTOS-Kernel/tasks.c **** 
 5201              		.loc 1 5371 9 discriminator 3 view .LVU1536
5371:FreeRTOS-Kernel/tasks.c **** 
 5202              		.loc 1 5371 9 discriminator 3 view .LVU1537
5371:FreeRTOS-Kernel/tasks.c **** 
 5203              		.loc 1 5371 9 discriminator 3 view .LVU1538
 5204              	.LVL371:
 5205              	.L362:
5391:FreeRTOS-Kernel/tasks.c ****     }
 5206              		.loc 1 5391 9 discriminator 1 view .LVU1539
5396:FreeRTOS-Kernel/tasks.c ****         {
 5207              		.loc 1 5396 9 discriminator 1 view .LVU1540
5396:FreeRTOS-Kernel/tasks.c ****         {
 5208              		.loc 1 5396 27 is_stmt 0 discriminator 1 view .LVU1541
 5209 008e DA6A     		ldr	r2, [r3, #44]
5396:FreeRTOS-Kernel/tasks.c ****         {
 5210              		.loc 1 5396 54 discriminator 1 view .LVU1542
 5211 0090 164B     		ldr	r3, .L370+12
 5212              	.LVL372:
5396:FreeRTOS-Kernel/tasks.c ****         {
 5213              		.loc 1 5396 54 discriminator 1 view .LVU1543
 5214 0092 1B68     		ldr	r3, [r3]
 5215 0094 DB6A     		ldr	r3, [r3, #44]
5396:FreeRTOS-Kernel/tasks.c ****         {
 5216              		.loc 1 5396 11 discriminator 1 view .LVU1544
 5217 0096 9A42     		cmp	r2, r3
 5218 0098 1FD9     		bls	.L364
5401:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 271


 5219              		.loc 1 5401 13 is_stmt 1 view .LVU1545
 5220              	.LVL373:
5405:FreeRTOS-Kernel/tasks.c ****         }
 5221              		.loc 1 5405 13 view .LVU1546
5405:FreeRTOS-Kernel/tasks.c ****         }
 5222              		.loc 1 5405 33 is_stmt 0 view .LVU1547
 5223 009a 0120     		movs	r0, #1
 5224 009c 144B     		ldr	r3, .L370+16
 5225 009e 1860     		str	r0, [r3]
 5226              	.LVL374:
 5227              	.L356:
5431:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5228              		.loc 1 5431 1 view .LVU1548
 5229 00a0 30BC     		pop	{r4, r5}
 5230              	.LCFI38:
 5231              		.cfi_restore 5
 5232              		.cfi_restore 4
 5233              		.cfi_def_cfa_offset 0
 5234 00a2 7047     		bx	lr
 5235              	.LVL375:
 5236              	.L367:
5365:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5237              		.loc 1 5365 5 is_stmt 1 view .LVU1549
 5238              	.LBB295:
 5239              	.LBI295:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5240              		.loc 2 213 30 view .LVU1550
 5241              	.LBB296:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5242              		.loc 2 215 5 view .LVU1551
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5243              		.loc 2 217 5 view .LVU1552
 5244              		.syntax unified
 5245              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5246 00a4 4FF05003 		   mov r3, #80                                              
 5247 00a8 83F31188 	   msr basepri, r3                                         
 5248 00ac BFF36F8F 	   isb                                                     
 5249 00b0 BFF34F8F 	   dsb                                                     
 5250              	
 5251              	@ 0 "" 2
 5252              	.LVL376:
 5253              		.thumb
 5254              		.syntax unified
 5255              	.L358:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5256              		.loc 2 217 5 is_stmt 0 view .LVU1553
 5257              	.LBE296:
 5258              	.LBE295:
5365:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5259              		.loc 1 5365 5 is_stmt 1 discriminator 1 view .LVU1554
5365:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 5260              		.loc 1 5365 5 discriminator 1 view .LVU1555
 5261 00b4 FEE7     		b	.L358
 5262              	.LVL377:
 5263              	.L368:
 5264              	.LCFI39:
 5265              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJw1tyY.s 			page 272


 5266              		.cfi_offset 4, -8
 5267              		.cfi_offset 5, -4
 5268              	.LBB297:
5366:FreeRTOS-Kernel/tasks.c **** 
 5269              		.loc 1 5366 5 discriminator 1 view .LVU1556
 5270 00b6 196A     		ldr	r1, [r3, #32]
 5271 00b8 5160     		str	r1, [r2, #4]
 5272 00ba B1E7     		b	.L359
 5273              	.LVL378:
 5274              	.L369:
5366:FreeRTOS-Kernel/tasks.c **** 
 5275              		.loc 1 5366 5 is_stmt 0 discriminator 1 view .LVU1557
 5276              	.LBE297:
 5277              	.LBB298:
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5278              		.loc 1 5370 9 is_stmt 1 discriminator 1 view .LVU1558
 5279 00bc D968     		ldr	r1, [r3, #12]
 5280 00be 5160     		str	r1, [r2, #4]
 5281 00c0 C1E7     		b	.L361
 5282              	.LVL379:
 5283              	.L360:
5370:FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 5284              		.loc 1 5370 9 is_stmt 0 discriminator 1 view .LVU1559
 5285              	.LBE298:
5391:FreeRTOS-Kernel/tasks.c ****     }
 5286              		.loc 1 5391 9 is_stmt 1 view .LVU1560
 5287              	.LBB299:
5391:FreeRTOS-Kernel/tasks.c ****     }
 5288              		.loc 1 5391 9 view .LVU1561
 5289 00c2 0C4A     		ldr	r2, .L370+20
 5290 00c4 5168     		ldr	r1, [r2, #4]
 5291              	.LVL380:
5391:FreeRTOS-Kernel/tasks.c ****     }
 5292              		.loc 1 5391 9 view .LVU1562
5391:FreeRTOS-Kernel/tasks.c ****     }
 5293              		.loc 1 5391 9 view .LVU1563
5391:FreeRTOS-Kernel/tasks.c ****     }
 5294              		.loc 1 5391 9 view .LVU1564
 5295 00c6 D961     		str	r1, [r3, #28]
5391:FreeRTOS-Kernel/tasks.c ****     }
 5296              		.loc 1 5391 9 view .LVU1565
 5297 00c8 8C68     		ldr	r4, [r1, #8]
 5298 00ca 1C62     		str	r4, [r3, #32]
5391:FreeRTOS-Kernel/tasks.c ****     }
 5299              		.loc 1 5391 9 view .LVU1566
 5300 00cc 6060     		str	r0, [r4, #4]
5391:FreeRTOS-Kernel/tasks.c ****     }
 5301              		.loc 1 5391 9 view .LVU1567
 5302 00ce 8860     		str	r0, [r1, #8]
5391:FreeRTOS-Kernel/tasks.c ****     }
 5303              		.loc 1 5391 9 view .LVU1568
 5304 00d0 9A62     		str	r2, [r3, #40]
5391:FreeRTOS-Kernel/tasks.c ****     }
 5305              		.loc 1 5391 9 view .LVU1569
 5306 00d2 1168     		ldr	r1, [r2]
 5307              	.LVL381:
5391:FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  /tmp/ccJw1tyY.s 			page 273


 5308              		.loc 1 5391 9 is_stmt 0 view .LVU1570
 5309 00d4 0131     		adds	r1, r1, #1
 5310 00d6 1160     		str	r1, [r2]
 5311 00d8 D9E7     		b	.L362
 5312              	.LVL382:
 5313              	.L364:
5391:FreeRTOS-Kernel/tasks.c ****     }
 5314              		.loc 1 5391 9 view .LVU1571
 5315              	.LBE299:
5409:FreeRTOS-Kernel/tasks.c ****         }
 5316              		.loc 1 5409 21 view .LVU1572
 5317 00da 0020     		movs	r0, #0
 5318              	.LVL383:
5429:FreeRTOS-Kernel/tasks.c ****     return xReturn;
 5319              		.loc 1 5429 52 is_stmt 1 view .LVU1573
5430:FreeRTOS-Kernel/tasks.c **** }
 5320              		.loc 1 5430 5 view .LVU1574
5430:FreeRTOS-Kernel/tasks.c **** }
 5321              		.loc 1 5430 12 is_stmt 0 view .LVU1575
 5322 00dc E0E7     		b	.L356
 5323              	.L371:
 5324 00de 00BF     		.align	2
 5325              	.L370:
 5326 00e0 00000000 		.word	uxSchedulerSuspended
 5327 00e4 00000000 		.word	uxTopReadyPriority
 5328 00e8 00000000 		.word	pxReadyTasksLists
 5329 00ec 00000000 		.word	pxCurrentTCB
 5330 00f0 00000000 		.word	xYieldPendings
 5331 00f4 00000000 		.word	xPendingReadyList
 5332              		.cfi_endproc
 5333              	.LFE37:
 5335              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 5336              		.align	1
 5337              		.global	vTaskRemoveFromUnorderedEventList
 5338              		.syntax unified
 5339              		.thumb
 5340              		.thumb_func
 5342              	vTaskRemoveFromUnorderedEventList:
 5343              	.LVL384:
 5344              	.LFB38:
5436:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
 5345              		.loc 1 5436 1 is_stmt 1 view -0
 5346              		.cfi_startproc
 5347              		@ args = 0, pretend = 0, frame = 0
 5348              		@ frame_needed = 0, uses_anonymous_args = 0
 5349              		@ link register save eliminated.
5437:FreeRTOS-Kernel/tasks.c **** 
 5350              		.loc 1 5437 5 view .LVU1577
5439:FreeRTOS-Kernel/tasks.c **** 
 5351              		.loc 1 5439 80 view .LVU1578
5443:FreeRTOS-Kernel/tasks.c **** 
 5352              		.loc 1 5443 5 view .LVU1579
 5353 0000 344B     		ldr	r3, .L385
 5354 0002 1B68     		ldr	r3, [r3]
 5355 0004 43B9     		cbnz	r3, .L373
5443:FreeRTOS-Kernel/tasks.c **** 
 5356              		.loc 1 5443 5 view .LVU1580
ARM GAS  /tmp/ccJw1tyY.s 			page 274


 5357              	.LBB300:
 5358              	.LBI300:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5359              		.loc 2 213 30 view .LVU1581
 5360              	.LBB301:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5361              		.loc 2 215 5 view .LVU1582
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5362              		.loc 2 217 5 view .LVU1583
 5363              		.syntax unified
 5364              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5365 0006 4FF05003 		   mov r3, #80                                              
 5366 000a 83F31188 	   msr basepri, r3                                         
 5367 000e BFF36F8F 	   isb                                                     
 5368 0012 BFF34F8F 	   dsb                                                     
 5369              	
 5370              	@ 0 "" 2
 5371              	.LVL385:
 5372              		.thumb
 5373              		.syntax unified
 5374              	.L374:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5375              		.loc 2 217 5 is_stmt 0 view .LVU1584
 5376              	.LBE301:
 5377              	.LBE300:
5443:FreeRTOS-Kernel/tasks.c **** 
 5378              		.loc 1 5443 5 is_stmt 1 discriminator 1 view .LVU1585
5443:FreeRTOS-Kernel/tasks.c **** 
 5379              		.loc 1 5443 5 discriminator 1 view .LVU1586
 5380 0016 FEE7     		b	.L374
 5381              	.L373:
5443:FreeRTOS-Kernel/tasks.c **** 
 5382              		.loc 1 5443 63 discriminator 2 view .LVU1587
5446:FreeRTOS-Kernel/tasks.c **** 
 5383              		.loc 1 5446 5 discriminator 2 view .LVU1588
 5384 0018 41F00041 		orr	r1, r1, #-2147483648
 5385              	.LVL386:
5446:FreeRTOS-Kernel/tasks.c **** 
 5386              		.loc 1 5446 5 is_stmt 0 discriminator 2 view .LVU1589
 5387 001c 0160     		str	r1, [r0]
5453:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 5388              		.loc 1 5453 5 is_stmt 1 discriminator 2 view .LVU1590
5453:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 5389              		.loc 1 5453 20 is_stmt 0 discriminator 2 view .LVU1591
 5390 001e C268     		ldr	r2, [r0, #12]
 5391              	.LVL387:
5454:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5392              		.loc 1 5454 5 is_stmt 1 discriminator 2 view .LVU1592
 5393 0020 002A     		cmp	r2, #0
 5394 0022 47D0     		beq	.L382
5436:FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
 5395              		.loc 1 5436 1 is_stmt 0 discriminator 2 view .LVU1593
 5396 0024 30B4     		push	{r4, r5}
 5397              	.LCFI40:
 5398              		.cfi_def_cfa_offset 8
 5399              		.cfi_offset 4, -8
 5400              		.cfi_offset 5, -4
ARM GAS  /tmp/ccJw1tyY.s 			page 275


5454:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5401              		.loc 1 5454 35 is_stmt 1 discriminator 2 view .LVU1594
5455:FreeRTOS-Kernel/tasks.c **** 
 5402              		.loc 1 5455 5 discriminator 2 view .LVU1595
 5403              	.LBB302:
5455:FreeRTOS-Kernel/tasks.c **** 
 5404              		.loc 1 5455 5 discriminator 2 view .LVU1596
 5405 0026 0369     		ldr	r3, [r0, #16]
 5406              	.LVL388:
5455:FreeRTOS-Kernel/tasks.c **** 
 5407              		.loc 1 5455 5 discriminator 2 view .LVU1597
 5408 0028 4468     		ldr	r4, [r0, #4]
 5409 002a 8168     		ldr	r1, [r0, #8]
 5410 002c A160     		str	r1, [r4, #8]
5455:FreeRTOS-Kernel/tasks.c **** 
 5411              		.loc 1 5455 5 discriminator 2 view .LVU1598
 5412 002e 4468     		ldr	r4, [r0, #4]
 5413 0030 4C60     		str	r4, [r1, #4]
5455:FreeRTOS-Kernel/tasks.c **** 
 5414              		.loc 1 5455 5 discriminator 2 view .LVU1599
 5415 0032 5968     		ldr	r1, [r3, #4]
 5416 0034 8142     		cmp	r1, r0
 5417 0036 46D0     		beq	.L383
 5418              	.L377:
5455:FreeRTOS-Kernel/tasks.c **** 
 5419              		.loc 1 5455 5 discriminator 3 view .LVU1600
 5420 0038 0021     		movs	r1, #0
 5421 003a 0161     		str	r1, [r0, #16]
5455:FreeRTOS-Kernel/tasks.c **** 
 5422              		.loc 1 5455 5 discriminator 3 view .LVU1601
 5423 003c 1968     		ldr	r1, [r3]
 5424 003e 0139     		subs	r1, r1, #1
 5425 0040 1960     		str	r1, [r3]
 5426              	.LBE302:
5455:FreeRTOS-Kernel/tasks.c **** 
 5427              		.loc 1 5455 5 discriminator 3 view .LVU1602
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5428              		.loc 1 5474 5 discriminator 3 view .LVU1603
 5429              	.LBB303:
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5430              		.loc 1 5474 5 discriminator 3 view .LVU1604
 5431 0042 5369     		ldr	r3, [r2, #20]
 5432              	.LVL389:
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5433              		.loc 1 5474 5 discriminator 3 view .LVU1605
 5434 0044 9068     		ldr	r0, [r2, #8]
 5435              	.LVL390:
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5436              		.loc 1 5474 5 is_stmt 0 discriminator 3 view .LVU1606
 5437 0046 D168     		ldr	r1, [r2, #12]
 5438 0048 8160     		str	r1, [r0, #8]
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5439              		.loc 1 5474 5 is_stmt 1 discriminator 3 view .LVU1607
 5440 004a 9068     		ldr	r0, [r2, #8]
 5441 004c 4860     		str	r0, [r1, #4]
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5442              		.loc 1 5474 5 discriminator 3 view .LVU1608
ARM GAS  /tmp/ccJw1tyY.s 			page 276


 5443 004e 5968     		ldr	r1, [r3, #4]
 5444 0050 101D     		adds	r0, r2, #4
 5445 0052 8142     		cmp	r1, r0
 5446 0054 3AD0     		beq	.L384
 5447              	.L378:
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5448              		.loc 1 5474 5 discriminator 3 view .LVU1609
 5449 0056 0021     		movs	r1, #0
 5450 0058 5161     		str	r1, [r2, #20]
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5451              		.loc 1 5474 5 discriminator 3 view .LVU1610
 5452 005a 1968     		ldr	r1, [r3]
 5453 005c 0139     		subs	r1, r1, #1
 5454 005e 1960     		str	r1, [r3]
 5455              	.LBE303:
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5456              		.loc 1 5474 5 discriminator 3 view .LVU1611
5475:FreeRTOS-Kernel/tasks.c **** 
 5457              		.loc 1 5475 5 discriminator 3 view .LVU1612
5475:FreeRTOS-Kernel/tasks.c **** 
 5458              		.loc 1 5475 5 discriminator 3 view .LVU1613
5475:FreeRTOS-Kernel/tasks.c **** 
 5459              		.loc 1 5475 5 discriminator 3 view .LVU1614
 5460 0060 D36A     		ldr	r3, [r2, #44]
 5461              	.LVL391:
5475:FreeRTOS-Kernel/tasks.c **** 
 5462              		.loc 1 5475 5 is_stmt 0 discriminator 3 view .LVU1615
 5463 0062 0121     		movs	r1, #1
 5464 0064 9940     		lsls	r1, r1, r3
 5465 0066 1C4C     		ldr	r4, .L385+4
 5466 0068 2568     		ldr	r5, [r4]
 5467 006a 2943     		orrs	r1, r1, r5
 5468 006c 2160     		str	r1, [r4]
5475:FreeRTOS-Kernel/tasks.c **** 
 5469              		.loc 1 5475 5 is_stmt 1 discriminator 3 view .LVU1616
 5470              	.LBB304:
5475:FreeRTOS-Kernel/tasks.c **** 
 5471              		.loc 1 5475 5 discriminator 3 view .LVU1617
 5472 006e 1B49     		ldr	r1, .L385+8
 5473 0070 03EB8303 		add	r3, r3, r3, lsl #2
 5474 0074 01EB8303 		add	r3, r1, r3, lsl #2
 5475 0078 5B68     		ldr	r3, [r3, #4]
 5476              	.LVL392:
5475:FreeRTOS-Kernel/tasks.c **** 
 5477              		.loc 1 5475 5 discriminator 3 view .LVU1618
5475:FreeRTOS-Kernel/tasks.c **** 
 5478              		.loc 1 5475 5 discriminator 3 view .LVU1619
5475:FreeRTOS-Kernel/tasks.c **** 
 5479              		.loc 1 5475 5 discriminator 3 view .LVU1620
 5480 007a 9360     		str	r3, [r2, #8]
5475:FreeRTOS-Kernel/tasks.c **** 
 5481              		.loc 1 5475 5 discriminator 3 view .LVU1621
 5482 007c 9C68     		ldr	r4, [r3, #8]
 5483 007e D460     		str	r4, [r2, #12]
5475:FreeRTOS-Kernel/tasks.c **** 
 5484              		.loc 1 5475 5 discriminator 3 view .LVU1622
 5485 0080 6060     		str	r0, [r4, #4]
ARM GAS  /tmp/ccJw1tyY.s 			page 277


5475:FreeRTOS-Kernel/tasks.c **** 
 5486              		.loc 1 5475 5 discriminator 3 view .LVU1623
 5487 0082 9860     		str	r0, [r3, #8]
5475:FreeRTOS-Kernel/tasks.c **** 
 5488              		.loc 1 5475 5 discriminator 3 view .LVU1624
 5489 0084 D36A     		ldr	r3, [r2, #44]
 5490              	.LVL393:
5475:FreeRTOS-Kernel/tasks.c **** 
 5491              		.loc 1 5475 5 is_stmt 0 discriminator 3 view .LVU1625
 5492 0086 03EB8300 		add	r0, r3, r3, lsl #2
 5493 008a 01EB8004 		add	r4, r1, r0, lsl #2
 5494 008e 5461     		str	r4, [r2, #20]
5475:FreeRTOS-Kernel/tasks.c **** 
 5495              		.loc 1 5475 5 is_stmt 1 discriminator 3 view .LVU1626
 5496 0090 51F82000 		ldr	r0, [r1, r0, lsl #2]
 5497 0094 0130     		adds	r0, r0, #1
 5498 0096 03EB8303 		add	r3, r3, r3, lsl #2
 5499 009a 41F82300 		str	r0, [r1, r3, lsl #2]
 5500              	.LBE304:
5475:FreeRTOS-Kernel/tasks.c **** 
 5501              		.loc 1 5475 5 discriminator 3 view .LVU1627
5475:FreeRTOS-Kernel/tasks.c **** 
 5502              		.loc 1 5475 5 discriminator 3 view .LVU1628
5475:FreeRTOS-Kernel/tasks.c **** 
 5503              		.loc 1 5475 5 discriminator 3 view .LVU1629
5479:FreeRTOS-Kernel/tasks.c ****         {
 5504              		.loc 1 5479 9 discriminator 3 view .LVU1630
5479:FreeRTOS-Kernel/tasks.c ****         {
 5505              		.loc 1 5479 27 is_stmt 0 discriminator 3 view .LVU1631
 5506 009e D26A     		ldr	r2, [r2, #44]
 5507              	.LVL394:
5479:FreeRTOS-Kernel/tasks.c ****         {
 5508              		.loc 1 5479 54 discriminator 3 view .LVU1632
 5509 00a0 0F4B     		ldr	r3, .L385+12
 5510 00a2 1B68     		ldr	r3, [r3]
 5511 00a4 DB6A     		ldr	r3, [r3, #44]
5479:FreeRTOS-Kernel/tasks.c ****         {
 5512              		.loc 1 5479 11 discriminator 3 view .LVU1633
 5513 00a6 9A42     		cmp	r2, r3
 5514 00a8 02D9     		bls	.L372
5485:FreeRTOS-Kernel/tasks.c ****         }
 5515              		.loc 1 5485 13 is_stmt 1 view .LVU1634
5485:FreeRTOS-Kernel/tasks.c ****         }
 5516              		.loc 1 5485 33 is_stmt 0 view .LVU1635
 5517 00aa 0E4B     		ldr	r3, .L385+16
 5518 00ac 0122     		movs	r2, #1
 5519 00ae 1A60     		str	r2, [r3]
5502:FreeRTOS-Kernel/tasks.c **** }
 5520              		.loc 1 5502 52 is_stmt 1 view .LVU1636
 5521              	.L372:
5503:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5522              		.loc 1 5503 1 is_stmt 0 view .LVU1637
 5523 00b0 30BC     		pop	{r4, r5}
 5524              	.LCFI41:
 5525              		.cfi_restore 5
 5526              		.cfi_restore 4
 5527              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccJw1tyY.s 			page 278


 5528 00b2 7047     		bx	lr
 5529              	.LVL395:
 5530              	.L382:
5454:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5531              		.loc 1 5454 5 is_stmt 1 view .LVU1638
 5532              	.LBB305:
 5533              	.LBI305:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5534              		.loc 2 213 30 view .LVU1639
 5535              	.LBB306:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5536              		.loc 2 215 5 view .LVU1640
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5537              		.loc 2 217 5 view .LVU1641
 5538              		.syntax unified
 5539              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5540 00b4 4FF05003 		   mov r3, #80                                              
 5541 00b8 83F31188 	   msr basepri, r3                                         
 5542 00bc BFF36F8F 	   isb                                                     
 5543 00c0 BFF34F8F 	   dsb                                                     
 5544              	
 5545              	@ 0 "" 2
 5546              	.LVL396:
 5547              		.thumb
 5548              		.syntax unified
 5549              	.L376:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5550              		.loc 2 217 5 is_stmt 0 view .LVU1642
 5551              	.LBE306:
 5552              	.LBE305:
5454:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5553              		.loc 1 5454 5 is_stmt 1 discriminator 2 view .LVU1643
5454:FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5554              		.loc 1 5454 5 discriminator 2 view .LVU1644
 5555 00c4 FEE7     		b	.L376
 5556              	.LVL397:
 5557              	.L383:
 5558              	.LCFI42:
 5559              		.cfi_def_cfa_offset 8
 5560              		.cfi_offset 4, -8
 5561              		.cfi_offset 5, -4
 5562              	.LBB307:
5455:FreeRTOS-Kernel/tasks.c **** 
 5563              		.loc 1 5455 5 discriminator 1 view .LVU1645
 5564 00c6 8168     		ldr	r1, [r0, #8]
 5565 00c8 5960     		str	r1, [r3, #4]
 5566 00ca B5E7     		b	.L377
 5567              	.LVL398:
 5568              	.L384:
5455:FreeRTOS-Kernel/tasks.c **** 
 5569              		.loc 1 5455 5 is_stmt 0 discriminator 1 view .LVU1646
 5570              	.LBE307:
 5571              	.LBB308:
5474:FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5572              		.loc 1 5474 5 is_stmt 1 discriminator 1 view .LVU1647
 5573 00cc D168     		ldr	r1, [r2, #12]
 5574 00ce 5960     		str	r1, [r3, #4]
ARM GAS  /tmp/ccJw1tyY.s 			page 279


 5575 00d0 C1E7     		b	.L378
 5576              	.L386:
 5577 00d2 00BF     		.align	2
 5578              	.L385:
 5579 00d4 00000000 		.word	uxSchedulerSuspended
 5580 00d8 00000000 		.word	uxTopReadyPriority
 5581 00dc 00000000 		.word	pxReadyTasksLists
 5582 00e0 00000000 		.word	pxCurrentTCB
 5583 00e4 00000000 		.word	xYieldPendings
 5584              	.LBE308:
 5585              		.cfi_endproc
 5586              	.LFE38:
 5588              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5589              		.align	1
 5590              		.global	vTaskSetTimeOutState
 5591              		.syntax unified
 5592              		.thumb
 5593              		.thumb_func
 5595              	vTaskSetTimeOutState:
 5596              	.LVL399:
 5597              	.LFB39:
5507:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskSetTimeOutState( pxTimeOut );
 5598              		.loc 1 5507 1 view -0
 5599              		.cfi_startproc
 5600              		@ args = 0, pretend = 0, frame = 0
 5601              		@ frame_needed = 0, uses_anonymous_args = 0
5508:FreeRTOS-Kernel/tasks.c **** 
 5602              		.loc 1 5508 49 view .LVU1649
5510:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
 5603              		.loc 1 5510 5 view .LVU1650
 5604 0000 60B1     		cbz	r0, .L392
5507:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskSetTimeOutState( pxTimeOut );
 5605              		.loc 1 5507 1 is_stmt 0 discriminator 2 view .LVU1651
 5606 0002 10B5     		push	{r4, lr}
 5607              	.LCFI43:
 5608              		.cfi_def_cfa_offset 8
 5609              		.cfi_offset 4, -8
 5610              		.cfi_offset 14, -4
 5611 0004 0446     		mov	r4, r0
5510:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
 5612              		.loc 1 5510 30 is_stmt 1 discriminator 2 view .LVU1652
5511:FreeRTOS-Kernel/tasks.c ****     {
 5613              		.loc 1 5511 5 discriminator 2 view .LVU1653
 5614 0006 FFF7FEFF 		bl	vPortEnterCritical
 5615              	.LVL400:
5513:FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 5616              		.loc 1 5513 9 discriminator 2 view .LVU1654
5513:FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 5617              		.loc 1 5513 35 is_stmt 0 discriminator 2 view .LVU1655
 5618 000a 094B     		ldr	r3, .L393
 5619 000c 1B68     		ldr	r3, [r3]
 5620 000e 2360     		str	r3, [r4]
5514:FreeRTOS-Kernel/tasks.c ****     }
 5621              		.loc 1 5514 9 is_stmt 1 discriminator 2 view .LVU1656
5514:FreeRTOS-Kernel/tasks.c ****     }
 5622              		.loc 1 5514 36 is_stmt 0 discriminator 2 view .LVU1657
 5623 0010 084B     		ldr	r3, .L393+4
ARM GAS  /tmp/ccJw1tyY.s 			page 280


 5624 0012 1B68     		ldr	r3, [r3]
 5625 0014 6360     		str	r3, [r4, #4]
5516:FreeRTOS-Kernel/tasks.c **** 
 5626              		.loc 1 5516 5 is_stmt 1 discriminator 2 view .LVU1658
 5627 0016 FFF7FEFF 		bl	vPortExitCritical
 5628              	.LVL401:
5518:FreeRTOS-Kernel/tasks.c **** }
 5629              		.loc 1 5518 39 discriminator 2 view .LVU1659
5519:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5630              		.loc 1 5519 1 is_stmt 0 discriminator 2 view .LVU1660
 5631 001a 10BD     		pop	{r4, pc}
 5632              	.LVL402:
 5633              	.L392:
 5634              	.LCFI44:
 5635              		.cfi_def_cfa_offset 0
 5636              		.cfi_restore 4
 5637              		.cfi_restore 14
5510:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
 5638              		.loc 1 5510 5 is_stmt 1 view .LVU1661
 5639              	.LBB309:
 5640              	.LBI309:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5641              		.loc 2 213 30 view .LVU1662
 5642              	.LBB310:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5643              		.loc 2 215 5 view .LVU1663
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5644              		.loc 2 217 5 view .LVU1664
 5645              		.syntax unified
 5646              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5647 001c 4FF05003 		   mov r3, #80                                              
 5648 0020 83F31188 	   msr basepri, r3                                         
 5649 0024 BFF36F8F 	   isb                                                     
 5650 0028 BFF34F8F 	   dsb                                                     
 5651              	
 5652              	@ 0 "" 2
 5653              	.LVL403:
 5654              		.thumb
 5655              		.syntax unified
 5656              	.L389:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5657              		.loc 2 217 5 is_stmt 0 view .LVU1665
 5658              	.LBE310:
 5659              	.LBE309:
5510:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
 5660              		.loc 1 5510 5 is_stmt 1 discriminator 1 view .LVU1666
5510:FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
 5661              		.loc 1 5510 5 discriminator 1 view .LVU1667
 5662 002c FEE7     		b	.L389
 5663              	.L394:
 5664 002e 00BF     		.align	2
 5665              	.L393:
 5666 0030 00000000 		.word	xNumOfOverflows
 5667 0034 00000000 		.word	xTickCount
 5668              		.cfi_endproc
 5669              	.LFE39:
 5671              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
ARM GAS  /tmp/ccJw1tyY.s 			page 281


 5672              		.align	1
 5673              		.global	vTaskInternalSetTimeOutState
 5674              		.syntax unified
 5675              		.thumb
 5676              		.thumb_func
 5678              	vTaskInternalSetTimeOutState:
 5679              	.LVL404:
 5680              	.LFB40:
5523:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );
 5681              		.loc 1 5523 1 view -0
 5682              		.cfi_startproc
 5683              		@ args = 0, pretend = 0, frame = 0
 5684              		@ frame_needed = 0, uses_anonymous_args = 0
 5685              		@ link register save eliminated.
5524:FreeRTOS-Kernel/tasks.c **** 
 5686              		.loc 1 5524 57 view .LVU1669
5527:FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5687              		.loc 1 5527 5 view .LVU1670
5527:FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5688              		.loc 1 5527 31 is_stmt 0 view .LVU1671
 5689 0000 034B     		ldr	r3, .L396
 5690 0002 1B68     		ldr	r3, [r3]
 5691 0004 0360     		str	r3, [r0]
5528:FreeRTOS-Kernel/tasks.c **** 
 5692              		.loc 1 5528 5 is_stmt 1 view .LVU1672
5528:FreeRTOS-Kernel/tasks.c **** 
 5693              		.loc 1 5528 32 is_stmt 0 view .LVU1673
 5694 0006 034B     		ldr	r3, .L396+4
 5695 0008 1B68     		ldr	r3, [r3]
 5696 000a 4360     		str	r3, [r0, #4]
5530:FreeRTOS-Kernel/tasks.c **** }
 5697              		.loc 1 5530 47 is_stmt 1 view .LVU1674
5531:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5698              		.loc 1 5531 1 is_stmt 0 view .LVU1675
 5699 000c 7047     		bx	lr
 5700              	.L397:
 5701 000e 00BF     		.align	2
 5702              	.L396:
 5703 0010 00000000 		.word	xNumOfOverflows
 5704 0014 00000000 		.word	xTickCount
 5705              		.cfi_endproc
 5706              	.LFE40:
 5708              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5709              		.align	1
 5710              		.global	xTaskCheckForTimeOut
 5711              		.syntax unified
 5712              		.thumb
 5713              		.thumb_func
 5715              	xTaskCheckForTimeOut:
 5716              	.LVL405:
 5717              	.LFB41:
5536:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
 5718              		.loc 1 5536 1 is_stmt 1 view -0
 5719              		.cfi_startproc
 5720              		@ args = 0, pretend = 0, frame = 0
 5721              		@ frame_needed = 0, uses_anonymous_args = 0
5536:FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
ARM GAS  /tmp/ccJw1tyY.s 			page 282


 5722              		.loc 1 5536 1 is_stmt 0 view .LVU1677
 5723 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5724              	.LCFI45:
 5725              		.cfi_def_cfa_offset 24
 5726              		.cfi_offset 3, -24
 5727              		.cfi_offset 4, -20
 5728              		.cfi_offset 5, -16
 5729              		.cfi_offset 6, -12
 5730              		.cfi_offset 7, -8
 5731              		.cfi_offset 14, -4
5537:FreeRTOS-Kernel/tasks.c **** 
 5732              		.loc 1 5537 5 is_stmt 1 view .LVU1678
5539:FreeRTOS-Kernel/tasks.c **** 
 5733              		.loc 1 5539 64 view .LVU1679
5541:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
 5734              		.loc 1 5541 5 view .LVU1680
 5735 0002 B8B1     		cbz	r0, .L408
 5736 0004 0C46     		mov	r4, r1
 5737 0006 0546     		mov	r5, r0
5541:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
 5738              		.loc 1 5541 30 discriminator 2 view .LVU1681
5542:FreeRTOS-Kernel/tasks.c **** 
 5739              		.loc 1 5542 5 discriminator 2 view .LVU1682
 5740 0008 E9B1     		cbz	r1, .L409
5542:FreeRTOS-Kernel/tasks.c **** 
 5741              		.loc 1 5542 34 discriminator 2 view .LVU1683
5544:FreeRTOS-Kernel/tasks.c ****     {
 5742              		.loc 1 5544 5 discriminator 2 view .LVU1684
 5743 000a FFF7FEFF 		bl	vPortEnterCritical
 5744              	.LVL406:
 5745              	.LBB311:
5547:FreeRTOS-Kernel/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5746              		.loc 1 5547 9 discriminator 2 view .LVU1685
5547:FreeRTOS-Kernel/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5747              		.loc 1 5547 26 is_stmt 0 discriminator 2 view .LVU1686
 5748 000e 1C4B     		ldr	r3, .L411
 5749 0010 1968     		ldr	r1, [r3]
 5750              	.LVL407:
5548:FreeRTOS-Kernel/tasks.c **** 
 5751              		.loc 1 5548 9 is_stmt 1 discriminator 2 view .LVU1687
5548:FreeRTOS-Kernel/tasks.c **** 
 5752              		.loc 1 5548 68 is_stmt 0 discriminator 2 view .LVU1688
 5753 0012 6B68     		ldr	r3, [r5, #4]
5548:FreeRTOS-Kernel/tasks.c **** 
 5754              		.loc 1 5548 26 discriminator 2 view .LVU1689
 5755 0014 C81A     		subs	r0, r1, r3
 5756              	.LVL408:
5562:FreeRTOS-Kernel/tasks.c ****             {
 5757              		.loc 1 5562 13 is_stmt 1 discriminator 2 view .LVU1690
5562:FreeRTOS-Kernel/tasks.c ****             {
 5758              		.loc 1 5562 17 is_stmt 0 discriminator 2 view .LVU1691
 5759 0016 2268     		ldr	r2, [r4]
5562:FreeRTOS-Kernel/tasks.c ****             {
 5760              		.loc 1 5562 15 discriminator 2 view .LVU1692
 5761 0018 B2F1FF3F 		cmp	r2, #-1
 5762 001c 2AD0     		beq	.L406
5572:FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  /tmp/ccJw1tyY.s 			page 283


 5763              		.loc 1 5572 9 is_stmt 1 view .LVU1693
5572:FreeRTOS-Kernel/tasks.c ****         {
 5764              		.loc 1 5572 31 is_stmt 0 view .LVU1694
 5765 001e 194E     		ldr	r6, .L411+4
 5766 0020 3668     		ldr	r6, [r6]
5572:FreeRTOS-Kernel/tasks.c ****         {
 5767              		.loc 1 5572 11 view .LVU1695
 5768 0022 2F68     		ldr	r7, [r5]
 5769 0024 B742     		cmp	r7, r6
 5770 0026 17D0     		beq	.L404
5572:FreeRTOS-Kernel/tasks.c ****         {
 5771              		.loc 1 5572 62 discriminator 1 view .LVU1696
 5772 0028 8B42     		cmp	r3, r1
 5773 002a 15D8     		bhi	.L404
5579:FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5774              		.loc 1 5579 13 is_stmt 1 view .LVU1697
 5775              	.LVL409:
5580:FreeRTOS-Kernel/tasks.c ****         }
 5776              		.loc 1 5580 13 view .LVU1698
5580:FreeRTOS-Kernel/tasks.c ****         }
 5777              		.loc 1 5580 28 is_stmt 0 view .LVU1699
 5778 002c 0023     		movs	r3, #0
 5779 002e 2360     		str	r3, [r4]
5579:FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5780              		.loc 1 5579 21 view .LVU1700
 5781 0030 0124     		movs	r4, #1
 5782              	.LVL410:
5580:FreeRTOS-Kernel/tasks.c ****         }
 5783              		.loc 1 5580 28 view .LVU1701
 5784 0032 20E0     		b	.L403
 5785              	.LVL411:
 5786              	.L408:
5580:FreeRTOS-Kernel/tasks.c ****         }
 5787              		.loc 1 5580 28 view .LVU1702
 5788              	.LBE311:
5541:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
 5789              		.loc 1 5541 5 is_stmt 1 view .LVU1703
 5790              	.LBB312:
 5791              	.LBI312:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5792              		.loc 2 213 30 view .LVU1704
 5793              	.LBB313:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5794              		.loc 2 215 5 view .LVU1705
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5795              		.loc 2 217 5 view .LVU1706
 5796              		.syntax unified
 5797              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5798 0034 4FF05003 		   mov r3, #80                                              
 5799 0038 83F31188 	   msr basepri, r3                                         
 5800 003c BFF36F8F 	   isb                                                     
 5801 0040 BFF34F8F 	   dsb                                                     
 5802              	
 5803              	@ 0 "" 2
 5804              	.LVL412:
 5805              		.thumb
 5806              		.syntax unified
ARM GAS  /tmp/ccJw1tyY.s 			page 284


 5807              	.L400:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5808              		.loc 2 217 5 is_stmt 0 view .LVU1707
 5809              	.LBE313:
 5810              	.LBE312:
5541:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
 5811              		.loc 1 5541 5 is_stmt 1 discriminator 1 view .LVU1708
5541:FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
 5812              		.loc 1 5541 5 discriminator 1 view .LVU1709
 5813 0044 FEE7     		b	.L400
 5814              	.L409:
5542:FreeRTOS-Kernel/tasks.c **** 
 5815              		.loc 1 5542 5 view .LVU1710
 5816              	.LBB314:
 5817              	.LBI314:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 5818              		.loc 2 213 30 view .LVU1711
 5819              	.LBB315:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 5820              		.loc 2 215 5 view .LVU1712
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5821              		.loc 2 217 5 view .LVU1713
 5822              		.syntax unified
 5823              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 5824 0046 4FF05003 		   mov r3, #80                                              
 5825 004a 83F31188 	   msr basepri, r3                                         
 5826 004e BFF36F8F 	   isb                                                     
 5827 0052 BFF34F8F 	   dsb                                                     
 5828              	
 5829              	@ 0 "" 2
 5830              	.LVL413:
 5831              		.thumb
 5832              		.syntax unified
 5833              	.L402:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5834              		.loc 2 217 5 is_stmt 0 view .LVU1714
 5835              	.LBE315:
 5836              	.LBE314:
5542:FreeRTOS-Kernel/tasks.c **** 
 5837              		.loc 1 5542 5 is_stmt 1 discriminator 2 view .LVU1715
5542:FreeRTOS-Kernel/tasks.c **** 
 5838              		.loc 1 5542 5 discriminator 2 view .LVU1716
 5839 0056 FEE7     		b	.L402
 5840              	.LVL414:
 5841              	.L404:
 5842              	.LBB316:
5582:FreeRTOS-Kernel/tasks.c ****         {
 5843              		.loc 1 5582 14 view .LVU1717
5582:FreeRTOS-Kernel/tasks.c ****         {
 5844              		.loc 1 5582 16 is_stmt 0 view .LVU1718
 5845 0058 8242     		cmp	r2, r0
 5846 005a 03D8     		bhi	.L410
5591:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
 5847              		.loc 1 5591 13 is_stmt 1 view .LVU1719
5591:FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
 5848              		.loc 1 5591 28 is_stmt 0 view .LVU1720
 5849 005c 0023     		movs	r3, #0
ARM GAS  /tmp/ccJw1tyY.s 			page 285


 5850 005e 2360     		str	r3, [r4]
5592:FreeRTOS-Kernel/tasks.c ****         }
 5851              		.loc 1 5592 13 is_stmt 1 view .LVU1721
 5852              	.LVL415:
5592:FreeRTOS-Kernel/tasks.c ****         }
 5853              		.loc 1 5592 21 is_stmt 0 view .LVU1722
 5854 0060 0124     		movs	r4, #1
 5855              	.LVL416:
5592:FreeRTOS-Kernel/tasks.c ****         }
 5856              		.loc 1 5592 21 view .LVU1723
 5857 0062 08E0     		b	.L403
 5858              	.LVL417:
 5859              	.L410:
5585:FreeRTOS-Kernel/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5860              		.loc 1 5585 13 is_stmt 1 view .LVU1724
5585:FreeRTOS-Kernel/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5861              		.loc 1 5585 28 is_stmt 0 view .LVU1725
 5862 0064 5B1A     		subs	r3, r3, r1
 5863 0066 1344     		add	r3, r3, r2
 5864 0068 2360     		str	r3, [r4]
5586:FreeRTOS-Kernel/tasks.c ****             xReturn = pdFALSE;
 5865              		.loc 1 5586 13 is_stmt 1 view .LVU1726
 5866 006a 2846     		mov	r0, r5
 5867              	.LVL418:
5586:FreeRTOS-Kernel/tasks.c ****             xReturn = pdFALSE;
 5868              		.loc 1 5586 13 is_stmt 0 view .LVU1727
 5869 006c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 5870              	.LVL419:
5587:FreeRTOS-Kernel/tasks.c ****         }
 5871              		.loc 1 5587 13 is_stmt 1 view .LVU1728
5587:FreeRTOS-Kernel/tasks.c ****         }
 5872              		.loc 1 5587 21 is_stmt 0 view .LVU1729
 5873 0070 0024     		movs	r4, #0
 5874              	.LVL420:
5587:FreeRTOS-Kernel/tasks.c ****         }
 5875              		.loc 1 5587 21 view .LVU1730
 5876 0072 00E0     		b	.L403
 5877              	.LVL421:
 5878              	.L406:
5567:FreeRTOS-Kernel/tasks.c ****             }
 5879              		.loc 1 5567 25 view .LVU1731
 5880 0074 0024     		movs	r4, #0
 5881              	.LVL422:
 5882              	.L403:
5567:FreeRTOS-Kernel/tasks.c ****             }
 5883              		.loc 1 5567 25 view .LVU1732
 5884              	.LBE316:
5595:FreeRTOS-Kernel/tasks.c **** 
 5885              		.loc 1 5595 5 is_stmt 1 view .LVU1733
 5886 0076 FFF7FEFF 		bl	vPortExitCritical
 5887              	.LVL423:
5597:FreeRTOS-Kernel/tasks.c **** 
 5888              		.loc 1 5597 48 view .LVU1734
5599:FreeRTOS-Kernel/tasks.c **** }
 5889              		.loc 1 5599 5 view .LVU1735
5600:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5890              		.loc 1 5600 1 is_stmt 0 view .LVU1736
ARM GAS  /tmp/ccJw1tyY.s 			page 286


 5891 007a 2046     		mov	r0, r4
 5892 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5893              	.LVL424:
 5894              	.L412:
5600:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5895              		.loc 1 5600 1 view .LVU1737
 5896 007e 00BF     		.align	2
 5897              	.L411:
 5898 0080 00000000 		.word	xTickCount
 5899 0084 00000000 		.word	xNumOfOverflows
 5900              		.cfi_endproc
 5901              	.LFE41:
 5903              		.section	.text.vTaskMissedYield,"ax",%progbits
 5904              		.align	1
 5905              		.global	vTaskMissedYield
 5906              		.syntax unified
 5907              		.thumb
 5908              		.thumb_func
 5910              	vTaskMissedYield:
 5911              	.LFB42:
5604:FreeRTOS-Kernel/tasks.c ****     traceENTER_vTaskMissedYield();
 5912              		.loc 1 5604 1 is_stmt 1 view -0
 5913              		.cfi_startproc
 5914              		@ args = 0, pretend = 0, frame = 0
 5915              		@ frame_needed = 0, uses_anonymous_args = 0
 5916              		@ link register save eliminated.
5605:FreeRTOS-Kernel/tasks.c **** 
 5917              		.loc 1 5605 34 view .LVU1739
5608:FreeRTOS-Kernel/tasks.c **** 
 5918              		.loc 1 5608 5 view .LVU1740
5608:FreeRTOS-Kernel/tasks.c **** 
 5919              		.loc 1 5608 41 is_stmt 0 view .LVU1741
 5920 0000 014B     		ldr	r3, .L414
 5921 0002 0122     		movs	r2, #1
 5922 0004 1A60     		str	r2, [r3]
5610:FreeRTOS-Kernel/tasks.c **** }
 5923              		.loc 1 5610 35 is_stmt 1 view .LVU1742
5611:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 5924              		.loc 1 5611 1 is_stmt 0 view .LVU1743
 5925 0006 7047     		bx	lr
 5926              	.L415:
 5927              		.align	2
 5928              	.L414:
 5929 0008 00000000 		.word	xYieldPendings
 5930              		.cfi_endproc
 5931              	.LFE42:
 5933              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5934              		.align	1
 5935              		.global	xTaskGetCurrentTaskHandle
 5936              		.syntax unified
 5937              		.thumb
 5938              		.thumb_func
 5940              	xTaskGetCurrentTaskHandle:
 5941              	.LFB48:
6481:FreeRTOS-Kernel/tasks.c ****             TaskHandle_t xReturn;
 5942              		.loc 1 6481 9 is_stmt 1 view -0
 5943              		.cfi_startproc
ARM GAS  /tmp/ccJw1tyY.s 			page 287


 5944              		@ args = 0, pretend = 0, frame = 0
 5945              		@ frame_needed = 0, uses_anonymous_args = 0
 5946              		@ link register save eliminated.
6482:FreeRTOS-Kernel/tasks.c **** 
 5947              		.loc 1 6482 13 view .LVU1745
6484:FreeRTOS-Kernel/tasks.c **** 
 5948              		.loc 1 6484 51 view .LVU1746
6489:FreeRTOS-Kernel/tasks.c **** 
 5949              		.loc 1 6489 13 view .LVU1747
6489:FreeRTOS-Kernel/tasks.c **** 
 5950              		.loc 1 6489 21 is_stmt 0 view .LVU1748
 5951 0000 014B     		ldr	r3, .L417
 5952 0002 1868     		ldr	r0, [r3]
 5953              	.LVL425:
6491:FreeRTOS-Kernel/tasks.c **** 
 5954              		.loc 1 6491 61 is_stmt 1 view .LVU1749
6493:FreeRTOS-Kernel/tasks.c ****         }
 5955              		.loc 1 6493 13 view .LVU1750
6494:FreeRTOS-Kernel/tasks.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5956              		.loc 1 6494 9 is_stmt 0 view .LVU1751
 5957 0004 7047     		bx	lr
 5958              	.L418:
 5959 0006 00BF     		.align	2
 5960              	.L417:
 5961 0008 00000000 		.word	pxCurrentTCB
 5962              		.cfi_endproc
 5963              	.LFE48:
 5965              		.section	.text.xTaskGetCurrentTaskHandleForCore,"ax",%progbits
 5966              		.align	1
 5967              		.global	xTaskGetCurrentTaskHandleForCore
 5968              		.syntax unified
 5969              		.thumb
 5970              		.thumb_func
 5972              	xTaskGetCurrentTaskHandleForCore:
 5973              	.LVL426:
 5974              	.LFB49:
6516:FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn = NULL;
 5975              		.loc 1 6516 5 is_stmt 1 view -0
 5976              		.cfi_startproc
 5977              		@ args = 0, pretend = 0, frame = 0
 5978              		@ frame_needed = 0, uses_anonymous_args = 0
 5979              		@ link register save eliminated.
6517:FreeRTOS-Kernel/tasks.c **** 
 5980              		.loc 1 6517 9 view .LVU1753
6519:FreeRTOS-Kernel/tasks.c **** 
 5981              		.loc 1 6519 63 view .LVU1754
6521:FreeRTOS-Kernel/tasks.c ****         {
 5982              		.loc 1 6521 9 view .LVU1755
6521:FreeRTOS-Kernel/tasks.c ****         {
 5983              		.loc 1 6521 11 is_stmt 0 view .LVU1756
 5984 0000 10B9     		cbnz	r0, .L421
6524:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5985              		.loc 1 6524 17 is_stmt 1 view .LVU1757
6524:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5986              		.loc 1 6524 25 is_stmt 0 view .LVU1758
 5987 0002 024B     		ldr	r3, .L422
 5988 0004 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccJw1tyY.s 			page 288


 5989              	.LVL427:
6524:FreeRTOS-Kernel/tasks.c ****             #else /* #if ( configNUMBER_OF_CORES == 1 ) */
 5990              		.loc 1 6524 25 view .LVU1759
 5991 0006 7047     		bx	lr
 5992              	.LVL428:
 5993              	.L421:
6517:FreeRTOS-Kernel/tasks.c **** 
 5994              		.loc 1 6517 22 view .LVU1760
 5995 0008 0020     		movs	r0, #0
 5996              	.LVL429:
6530:FreeRTOS-Kernel/tasks.c **** 
 5997              		.loc 1 6530 64 is_stmt 1 view .LVU1761
6532:FreeRTOS-Kernel/tasks.c ****     }
 5998              		.loc 1 6532 9 view .LVU1762
6533:FreeRTOS-Kernel/tasks.c **** 
 5999              		.loc 1 6533 5 is_stmt 0 view .LVU1763
 6000 000a 7047     		bx	lr
 6001              	.L423:
 6002              		.align	2
 6003              	.L422:
 6004 000c 00000000 		.word	pxCurrentTCB
 6005              		.cfi_endproc
 6006              	.LFE49:
 6008              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6009              		.align	1
 6010              		.global	xTaskGetSchedulerState
 6011              		.syntax unified
 6012              		.thumb
 6013              		.thumb_func
 6015              	xTaskGetSchedulerState:
 6016              	.LFB50:
6541:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
 6017              		.loc 1 6541 5 is_stmt 1 view -0
 6018              		.cfi_startproc
 6019              		@ args = 0, pretend = 0, frame = 0
 6020              		@ frame_needed = 0, uses_anonymous_args = 0
 6021              		@ link register save eliminated.
6542:FreeRTOS-Kernel/tasks.c **** 
 6022              		.loc 1 6542 9 view .LVU1765
6544:FreeRTOS-Kernel/tasks.c **** 
 6023              		.loc 1 6544 44 view .LVU1766
6546:FreeRTOS-Kernel/tasks.c ****         {
 6024              		.loc 1 6546 9 view .LVU1767
6546:FreeRTOS-Kernel/tasks.c ****         {
 6025              		.loc 1 6546 31 is_stmt 0 view .LVU1768
 6026 0000 054B     		ldr	r3, .L429
 6027 0002 1B68     		ldr	r3, [r3]
6546:FreeRTOS-Kernel/tasks.c ****         {
 6028              		.loc 1 6546 11 view .LVU1769
 6029 0004 33B1     		cbz	r3, .L426
6556:FreeRTOS-Kernel/tasks.c ****                 {
 6030              		.loc 1 6556 17 is_stmt 1 view .LVU1770
6556:FreeRTOS-Kernel/tasks.c ****                 {
 6031              		.loc 1 6556 42 is_stmt 0 view .LVU1771
 6032 0006 054B     		ldr	r3, .L429+4
 6033 0008 1B68     		ldr	r3, [r3]
6556:FreeRTOS-Kernel/tasks.c ****                 {
ARM GAS  /tmp/ccJw1tyY.s 			page 289


 6034              		.loc 1 6556 19 view .LVU1772
 6035 000a 0BB1     		cbz	r3, .L428
6562:FreeRTOS-Kernel/tasks.c ****                 }
 6036              		.loc 1 6562 29 view .LVU1773
 6037 000c 0020     		movs	r0, #0
 6038              	.LVL430:
6570:FreeRTOS-Kernel/tasks.c **** 
 6039              		.loc 1 6570 54 is_stmt 1 view .LVU1774
6572:FreeRTOS-Kernel/tasks.c ****     }
 6040              		.loc 1 6572 9 view .LVU1775
6573:FreeRTOS-Kernel/tasks.c **** 
 6041              		.loc 1 6573 5 is_stmt 0 view .LVU1776
 6042 000e 7047     		bx	lr
 6043              	.LVL431:
 6044              	.L428:
6558:FreeRTOS-Kernel/tasks.c ****                 }
 6045              		.loc 1 6558 29 view .LVU1777
 6046 0010 0220     		movs	r0, #2
 6047 0012 7047     		bx	lr
 6048              	.L426:
6548:FreeRTOS-Kernel/tasks.c ****         }
 6049              		.loc 1 6548 21 view .LVU1778
 6050 0014 0120     		movs	r0, #1
 6051 0016 7047     		bx	lr
 6052              	.L430:
 6053              		.align	2
 6054              	.L429:
 6055 0018 00000000 		.word	xSchedulerRunning
 6056 001c 00000000 		.word	uxSchedulerSuspended
 6057              		.cfi_endproc
 6058              	.LFE50:
 6060              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6061              		.align	1
 6062              		.global	xTaskPriorityInherit
 6063              		.syntax unified
 6064              		.thumb
 6065              		.thumb_func
 6067              	xTaskPriorityInherit:
 6068              	.LVL432:
 6069              	.LFB51:
6581:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6070              		.loc 1 6581 5 is_stmt 1 view -0
 6071              		.cfi_startproc
 6072              		@ args = 0, pretend = 0, frame = 0
 6073              		@ frame_needed = 0, uses_anonymous_args = 0
6582:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6074              		.loc 1 6582 9 view .LVU1780
6583:FreeRTOS-Kernel/tasks.c **** 
 6075              		.loc 1 6583 9 view .LVU1781
6585:FreeRTOS-Kernel/tasks.c **** 
 6076              		.loc 1 6585 57 view .LVU1782
6589:FreeRTOS-Kernel/tasks.c ****         {
 6077              		.loc 1 6589 9 view .LVU1783
6589:FreeRTOS-Kernel/tasks.c ****         {
 6078              		.loc 1 6589 11 is_stmt 0 view .LVU1784
 6079 0000 0028     		cmp	r0, #0
 6080 0002 57D0     		beq	.L437
ARM GAS  /tmp/ccJw1tyY.s 			page 290


6581:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6081              		.loc 1 6581 5 view .LVU1785
 6082 0004 70B5     		push	{r4, r5, r6, lr}
 6083              	.LCFI46:
 6084              		.cfi_def_cfa_offset 16
 6085              		.cfi_offset 4, -16
 6086              		.cfi_offset 5, -12
 6087              		.cfi_offset 6, -8
 6088              		.cfi_offset 14, -4
 6089 0006 0446     		mov	r4, r0
6594:FreeRTOS-Kernel/tasks.c ****             {
 6090              		.loc 1 6594 13 is_stmt 1 view .LVU1786
6594:FreeRTOS-Kernel/tasks.c ****             {
 6091              		.loc 1 6594 33 is_stmt 0 view .LVU1787
 6092 0008 C36A     		ldr	r3, [r0, #44]
6594:FreeRTOS-Kernel/tasks.c ****             {
 6093              		.loc 1 6594 60 view .LVU1788
 6094 000a 2C4A     		ldr	r2, .L444
 6095 000c 1268     		ldr	r2, [r2]
 6096 000e D26A     		ldr	r2, [r2, #44]
6594:FreeRTOS-Kernel/tasks.c ****             {
 6097              		.loc 1 6594 15 view .LVU1789
 6098 0010 9342     		cmp	r3, r2
 6099 0012 47D2     		bcs	.L433
6599:FreeRTOS-Kernel/tasks.c ****                 {
 6100              		.loc 1 6599 17 is_stmt 1 view .LVU1790
6599:FreeRTOS-Kernel/tasks.c ****                 {
 6101              		.loc 1 6599 23 is_stmt 0 view .LVU1791
 6102 0014 8269     		ldr	r2, [r0, #24]
6599:FreeRTOS-Kernel/tasks.c ****                 {
 6103              		.loc 1 6599 19 view .LVU1792
 6104 0016 002A     		cmp	r2, #0
 6105 0018 05DB     		blt	.L434
6601:FreeRTOS-Kernel/tasks.c ****                 }
 6106              		.loc 1 6601 21 is_stmt 1 view .LVU1793
 6107 001a 284A     		ldr	r2, .L444
 6108 001c 1268     		ldr	r2, [r2]
 6109 001e D26A     		ldr	r2, [r2, #44]
 6110 0020 C2F10702 		rsb	r2, r2, #7
 6111 0024 8261     		str	r2, [r0, #24]
 6112              	.L434:
6605:FreeRTOS-Kernel/tasks.c ****                 }
 6113              		.loc 1 6605 45 view .LVU1794
6610:FreeRTOS-Kernel/tasks.c ****                 {
 6114              		.loc 1 6610 17 view .LVU1795
6610:FreeRTOS-Kernel/tasks.c ****                 {
 6115              		.loc 1 6610 21 is_stmt 0 view .LVU1796
 6116 0026 6169     		ldr	r1, [r4, #20]
 6117 0028 03EB8303 		add	r3, r3, r3, lsl #2
 6118 002c 244A     		ldr	r2, .L444+4
 6119 002e 02EB8303 		add	r3, r2, r3, lsl #2
6610:FreeRTOS-Kernel/tasks.c ****                 {
 6120              		.loc 1 6610 19 view .LVU1797
 6121 0032 9942     		cmp	r1, r3
 6122 0034 05D0     		beq	.L443
6641:FreeRTOS-Kernel/tasks.c ****                 }
 6123              		.loc 1 6641 21 is_stmt 1 view .LVU1798
ARM GAS  /tmp/ccJw1tyY.s 			page 291


6641:FreeRTOS-Kernel/tasks.c ****                 }
 6124              		.loc 1 6641 64 is_stmt 0 view .LVU1799
 6125 0036 214B     		ldr	r3, .L444
 6126 0038 1B68     		ldr	r3, [r3]
 6127 003a DB6A     		ldr	r3, [r3, #44]
6641:FreeRTOS-Kernel/tasks.c ****                 }
 6128              		.loc 1 6641 50 view .LVU1800
 6129 003c E362     		str	r3, [r4, #44]
6647:FreeRTOS-Kernel/tasks.c ****             }
 6130              		.loc 1 6647 25 view .LVU1801
 6131 003e 0120     		movs	r0, #1
 6132              	.LVL433:
 6133              	.L431:
6676:FreeRTOS-Kernel/tasks.c **** 
 6134              		.loc 1 6676 5 view .LVU1802
 6135 0040 70BD     		pop	{r4, r5, r6, pc}
 6136              	.LVL434:
 6137              	.L443:
6612:FreeRTOS-Kernel/tasks.c ****                     {
 6138              		.loc 1 6612 21 is_stmt 1 view .LVU1803
6612:FreeRTOS-Kernel/tasks.c ****                     {
 6139              		.loc 1 6612 25 is_stmt 0 view .LVU1804
 6140 0042 251D     		adds	r5, r4, #4
 6141 0044 2846     		mov	r0, r5
 6142              	.LVL435:
6612:FreeRTOS-Kernel/tasks.c ****                     {
 6143              		.loc 1 6612 25 view .LVU1805
 6144 0046 FFF7FEFF 		bl	uxListRemove
 6145              	.LVL436:
6612:FreeRTOS-Kernel/tasks.c ****                     {
 6146              		.loc 1 6612 23 view .LVU1806
 6147 004a 38B9     		cbnz	r0, .L436
6617:FreeRTOS-Kernel/tasks.c ****                     }
 6148              		.loc 1 6617 25 is_stmt 1 view .LVU1807
 6149 004c E36A     		ldr	r3, [r4, #44]
 6150 004e 0122     		movs	r2, #1
 6151 0050 9A40     		lsls	r2, r2, r3
 6152 0052 1C49     		ldr	r1, .L444+8
 6153 0054 0B68     		ldr	r3, [r1]
 6154 0056 23EA0203 		bic	r3, r3, r2
 6155 005a 0B60     		str	r3, [r1]
 6156              	.L436:
6621:FreeRTOS-Kernel/tasks.c ****                     }
 6157              		.loc 1 6621 49 view .LVU1808
6625:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6158              		.loc 1 6625 21 view .LVU1809
6625:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6159              		.loc 1 6625 64 is_stmt 0 view .LVU1810
 6160 005c 174B     		ldr	r3, .L444
 6161 005e 1B68     		ldr	r3, [r3]
 6162 0060 DB6A     		ldr	r3, [r3, #44]
6625:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6163              		.loc 1 6625 50 view .LVU1811
 6164 0062 E362     		str	r3, [r4, #44]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6165              		.loc 1 6626 21 is_stmt 1 view .LVU1812
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 292


 6166              		.loc 1 6626 21 view .LVU1813
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6167              		.loc 1 6626 21 view .LVU1814
 6168 0064 0120     		movs	r0, #1
 6169 0066 00FA03F2 		lsl	r2, r0, r3
 6170 006a 1649     		ldr	r1, .L444+8
 6171 006c 0E68     		ldr	r6, [r1]
 6172 006e 3243     		orrs	r2, r2, r6
 6173 0070 0A60     		str	r2, [r1]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6174              		.loc 1 6626 21 view .LVU1815
 6175              	.LBB317:
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6176              		.loc 1 6626 21 view .LVU1816
 6177 0072 134A     		ldr	r2, .L444+4
 6178 0074 03EB8303 		add	r3, r3, r3, lsl #2
 6179 0078 02EB8303 		add	r3, r2, r3, lsl #2
 6180 007c 5B68     		ldr	r3, [r3, #4]
 6181              	.LVL437:
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6182              		.loc 1 6626 21 view .LVU1817
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6183              		.loc 1 6626 21 view .LVU1818
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6184              		.loc 1 6626 21 view .LVU1819
 6185 007e A360     		str	r3, [r4, #8]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6186              		.loc 1 6626 21 view .LVU1820
 6187 0080 9968     		ldr	r1, [r3, #8]
 6188 0082 E160     		str	r1, [r4, #12]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6189              		.loc 1 6626 21 view .LVU1821
 6190 0084 4D60     		str	r5, [r1, #4]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6191              		.loc 1 6626 21 view .LVU1822
 6192 0086 9D60     		str	r5, [r3, #8]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6193              		.loc 1 6626 21 view .LVU1823
 6194 0088 E36A     		ldr	r3, [r4, #44]
 6195              	.LVL438:
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6196              		.loc 1 6626 21 is_stmt 0 view .LVU1824
 6197 008a 03EB8301 		add	r1, r3, r3, lsl #2
 6198 008e 02EB8105 		add	r5, r2, r1, lsl #2
 6199 0092 6561     		str	r5, [r4, #20]
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6200              		.loc 1 6626 21 is_stmt 1 view .LVU1825
 6201 0094 52F82110 		ldr	r1, [r2, r1, lsl #2]
 6202 0098 0144     		add	r1, r1, r0
 6203 009a 03EB8303 		add	r3, r3, r3, lsl #2
 6204 009e 42F82310 		str	r1, [r2, r3, lsl #2]
 6205              	.LBE317:
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6206              		.loc 1 6626 21 view .LVU1826
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6207              		.loc 1 6626 21 view .LVU1827
6626:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 293


 6208              		.loc 1 6626 21 view .LVU1828
 6209 00a2 CDE7     		b	.L431
 6210              	.LVL439:
 6211              	.L433:
6651:FreeRTOS-Kernel/tasks.c ****                 {
 6212              		.loc 1 6651 17 view .LVU1829
6651:FreeRTOS-Kernel/tasks.c ****                 {
 6213              		.loc 1 6651 37 is_stmt 0 view .LVU1830
 6214 00a4 426C     		ldr	r2, [r0, #68]
6651:FreeRTOS-Kernel/tasks.c ****                 {
 6215              		.loc 1 6651 68 view .LVU1831
 6216 00a6 054B     		ldr	r3, .L444
 6217 00a8 1B68     		ldr	r3, [r3]
 6218 00aa DB6A     		ldr	r3, [r3, #44]
6651:FreeRTOS-Kernel/tasks.c ****                 {
 6219              		.loc 1 6651 19 view .LVU1832
 6220 00ac 9A42     		cmp	r2, r3
 6221 00ae 03D3     		bcc	.L438
6583:FreeRTOS-Kernel/tasks.c **** 
 6222              		.loc 1 6583 20 view .LVU1833
 6223 00b0 0020     		movs	r0, #0
 6224              	.LVL440:
6583:FreeRTOS-Kernel/tasks.c **** 
 6225              		.loc 1 6583 20 view .LVU1834
 6226 00b2 C5E7     		b	.L431
 6227              	.LVL441:
 6228              	.L437:
 6229              	.LCFI47:
 6230              		.cfi_def_cfa_offset 0
 6231              		.cfi_restore 4
 6232              		.cfi_restore 5
 6233              		.cfi_restore 6
 6234              		.cfi_restore 14
6583:FreeRTOS-Kernel/tasks.c **** 
 6235              		.loc 1 6583 20 view .LVU1835
 6236 00b4 0020     		movs	r0, #0
 6237              	.LVL442:
6676:FreeRTOS-Kernel/tasks.c **** 
 6238              		.loc 1 6676 5 view .LVU1836
 6239 00b6 7047     		bx	lr
 6240              	.LVL443:
 6241              	.L438:
 6242              	.LCFI48:
 6243              		.cfi_def_cfa_offset 16
 6244              		.cfi_offset 4, -16
 6245              		.cfi_offset 5, -12
 6246              		.cfi_offset 6, -8
 6247              		.cfi_offset 14, -4
6660:FreeRTOS-Kernel/tasks.c ****                 }
 6248              		.loc 1 6660 29 view .LVU1837
 6249 00b8 0120     		movs	r0, #1
 6250              	.LVL444:
6670:FreeRTOS-Kernel/tasks.c ****         }
 6251              		.loc 1 6670 37 is_stmt 1 view .LVU1838
6673:FreeRTOS-Kernel/tasks.c **** 
 6252              		.loc 1 6673 52 view .LVU1839
6675:FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  /tmp/ccJw1tyY.s 			page 294


 6253              		.loc 1 6675 9 view .LVU1840
6675:FreeRTOS-Kernel/tasks.c ****     }
 6254              		.loc 1 6675 16 is_stmt 0 view .LVU1841
 6255 00ba C1E7     		b	.L431
 6256              	.L445:
 6257              		.align	2
 6258              	.L444:
 6259 00bc 00000000 		.word	pxCurrentTCB
 6260 00c0 00000000 		.word	pxReadyTasksLists
 6261 00c4 00000000 		.word	uxTopReadyPriority
 6262              		.cfi_endproc
 6263              	.LFE51:
 6265              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6266              		.align	1
 6267              		.global	xTaskPriorityDisinherit
 6268              		.syntax unified
 6269              		.thumb
 6270              		.thumb_func
 6272              	xTaskPriorityDisinherit:
 6273              	.LVL445:
 6274              	.LFB52:
6684:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6275              		.loc 1 6684 5 is_stmt 1 view -0
 6276              		.cfi_startproc
 6277              		@ args = 0, pretend = 0, frame = 0
 6278              		@ frame_needed = 0, uses_anonymous_args = 0
6685:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6279              		.loc 1 6685 9 view .LVU1843
6686:FreeRTOS-Kernel/tasks.c **** 
 6280              		.loc 1 6686 9 view .LVU1844
6688:FreeRTOS-Kernel/tasks.c **** 
 6281              		.loc 1 6688 60 view .LVU1845
6690:FreeRTOS-Kernel/tasks.c ****         {
 6282              		.loc 1 6690 9 view .LVU1846
6690:FreeRTOS-Kernel/tasks.c ****         {
 6283              		.loc 1 6690 11 is_stmt 0 view .LVU1847
 6284 0000 0028     		cmp	r0, #0
 6285 0002 54D0     		beq	.L453
6684:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6286              		.loc 1 6684 5 view .LVU1848
 6287 0004 70B5     		push	{r4, r5, r6, lr}
 6288              	.LCFI49:
 6289              		.cfi_def_cfa_offset 16
 6290              		.cfi_offset 4, -16
 6291              		.cfi_offset 5, -12
 6292              		.cfi_offset 6, -8
 6293              		.cfi_offset 14, -4
 6294 0006 0446     		mov	r4, r0
6696:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6295              		.loc 1 6696 13 is_stmt 1 view .LVU1849
 6296 0008 2B4B     		ldr	r3, .L461
 6297 000a 1B68     		ldr	r3, [r3]
 6298 000c 8342     		cmp	r3, r0
 6299 000e 08D0     		beq	.L448
6696:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6300              		.loc 1 6696 13 view .LVU1850
 6301              	.LBB318:
ARM GAS  /tmp/ccJw1tyY.s 			page 295


 6302              	.LBI318:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 6303              		.loc 2 213 30 view .LVU1851
 6304              	.LBB319:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 6305              		.loc 2 215 5 view .LVU1852
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6306              		.loc 2 217 5 view .LVU1853
 6307              		.syntax unified
 6308              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 6309 0010 4FF05003 		   mov r3, #80                                              
 6310 0014 83F31188 	   msr basepri, r3                                         
 6311 0018 BFF36F8F 	   isb                                                     
 6312 001c BFF34F8F 	   dsb                                                     
 6313              	
 6314              	@ 0 "" 2
 6315              	.LVL446:
 6316              		.thumb
 6317              		.syntax unified
 6318              	.L449:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6319              		.loc 2 217 5 is_stmt 0 view .LVU1854
 6320              	.LBE319:
 6321              	.LBE318:
6696:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6322              		.loc 1 6696 13 is_stmt 1 discriminator 1 view .LVU1855
6696:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6323              		.loc 1 6696 13 discriminator 1 view .LVU1856
 6324 0020 FEE7     		b	.L449
 6325              	.L448:
6696:FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6326              		.loc 1 6696 50 discriminator 2 view .LVU1857
6697:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6327              		.loc 1 6697 13 discriminator 2 view .LVU1858
 6328 0022 836C     		ldr	r3, [r0, #72]
 6329 0024 43B9     		cbnz	r3, .L450
6697:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6330              		.loc 1 6697 13 view .LVU1859
 6331              	.LBB320:
 6332              	.LBI320:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 6333              		.loc 2 213 30 view .LVU1860
 6334              	.LBB321:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 6335              		.loc 2 215 5 view .LVU1861
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6336              		.loc 2 217 5 view .LVU1862
 6337              		.syntax unified
 6338              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 6339 0026 4FF05003 		   mov r3, #80                                              
 6340 002a 83F31188 	   msr basepri, r3                                         
 6341 002e BFF36F8F 	   isb                                                     
 6342 0032 BFF34F8F 	   dsb                                                     
 6343              	
 6344              	@ 0 "" 2
 6345              	.LVL447:
 6346              		.thumb
ARM GAS  /tmp/ccJw1tyY.s 			page 296


 6347              		.syntax unified
 6348              	.L451:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6349              		.loc 2 217 5 is_stmt 0 view .LVU1863
 6350              	.LBE321:
 6351              	.LBE320:
6697:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6352              		.loc 1 6697 13 is_stmt 1 discriminator 2 view .LVU1864
6697:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6353              		.loc 1 6697 13 discriminator 2 view .LVU1865
 6354 0036 FEE7     		b	.L451
 6355              	.L450:
6697:FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6356              		.loc 1 6697 49 discriminator 2 view .LVU1866
6698:FreeRTOS-Kernel/tasks.c **** 
 6357              		.loc 1 6698 13 discriminator 2 view .LVU1867
6698:FreeRTOS-Kernel/tasks.c **** 
 6358              		.loc 1 6698 37 is_stmt 0 discriminator 2 view .LVU1868
 6359 0038 013B     		subs	r3, r3, #1
 6360 003a 8364     		str	r3, [r0, #72]
6702:FreeRTOS-Kernel/tasks.c ****             {
 6361              		.loc 1 6702 13 is_stmt 1 discriminator 2 view .LVU1869
6702:FreeRTOS-Kernel/tasks.c ****             {
 6362              		.loc 1 6702 22 is_stmt 0 discriminator 2 view .LVU1870
 6363 003c C16A     		ldr	r1, [r0, #44]
6702:FreeRTOS-Kernel/tasks.c ****             {
 6364              		.loc 1 6702 43 discriminator 2 view .LVU1871
 6365 003e 426C     		ldr	r2, [r0, #68]
6702:FreeRTOS-Kernel/tasks.c ****             {
 6366              		.loc 1 6702 15 discriminator 2 view .LVU1872
 6367 0040 9142     		cmp	r1, r2
 6368 0042 36D0     		beq	.L454
6705:FreeRTOS-Kernel/tasks.c ****                 {
 6369              		.loc 1 6705 17 is_stmt 1 view .LVU1873
6705:FreeRTOS-Kernel/tasks.c ****                 {
 6370              		.loc 1 6705 19 is_stmt 0 view .LVU1874
 6371 0044 0BB1     		cbz	r3, .L460
6686:FreeRTOS-Kernel/tasks.c **** 
 6372              		.loc 1 6686 20 view .LVU1875
 6373 0046 0020     		movs	r0, #0
 6374              	.LVL448:
6764:FreeRTOS-Kernel/tasks.c ****         }
 6375              		.loc 1 6764 37 is_stmt 1 view .LVU1876
6767:FreeRTOS-Kernel/tasks.c **** 
 6376              		.loc 1 6767 55 view .LVU1877
6769:FreeRTOS-Kernel/tasks.c ****     }
 6377              		.loc 1 6769 9 view .LVU1878
 6378              	.L446:
6770:FreeRTOS-Kernel/tasks.c **** 
 6379              		.loc 1 6770 5 is_stmt 0 view .LVU1879
 6380 0048 70BD     		pop	{r4, r5, r6, pc}
 6381              	.LVL449:
 6382              	.L460:
6712:FreeRTOS-Kernel/tasks.c ****                     {
 6383              		.loc 1 6712 21 is_stmt 1 view .LVU1880
6712:FreeRTOS-Kernel/tasks.c ****                     {
 6384              		.loc 1 6712 25 is_stmt 0 view .LVU1881
ARM GAS  /tmp/ccJw1tyY.s 			page 297


 6385 004a 051D     		adds	r5, r0, #4
 6386 004c 2846     		mov	r0, r5
 6387              	.LVL450:
6712:FreeRTOS-Kernel/tasks.c ****                     {
 6388              		.loc 1 6712 25 view .LVU1882
 6389 004e FFF7FEFF 		bl	uxListRemove
 6390              	.LVL451:
6712:FreeRTOS-Kernel/tasks.c ****                     {
 6391              		.loc 1 6712 23 view .LVU1883
 6392 0052 38B9     		cbnz	r0, .L452
6714:FreeRTOS-Kernel/tasks.c ****                     }
 6393              		.loc 1 6714 25 is_stmt 1 view .LVU1884
 6394 0054 E36A     		ldr	r3, [r4, #44]
 6395 0056 0122     		movs	r2, #1
 6396 0058 9A40     		lsls	r2, r2, r3
 6397 005a 1849     		ldr	r1, .L461+4
 6398 005c 0B68     		ldr	r3, [r1]
 6399 005e 23EA0203 		bic	r3, r3, r2
 6400 0062 0B60     		str	r3, [r1]
 6401              	.L452:
6718:FreeRTOS-Kernel/tasks.c ****                     }
 6402              		.loc 1 6718 49 view .LVU1885
6723:FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6403              		.loc 1 6723 82 view .LVU1886
6724:FreeRTOS-Kernel/tasks.c **** 
 6404              		.loc 1 6724 21 view .LVU1887
6724:FreeRTOS-Kernel/tasks.c **** 
 6405              		.loc 1 6724 46 is_stmt 0 view .LVU1888
 6406 0064 636C     		ldr	r3, [r4, #68]
6724:FreeRTOS-Kernel/tasks.c **** 
 6407              		.loc 1 6724 39 view .LVU1889
 6408 0066 E362     		str	r3, [r4, #44]
6729:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6409              		.loc 1 6729 21 is_stmt 1 view .LVU1890
 6410 0068 C3F10702 		rsb	r2, r3, #7
 6411 006c A261     		str	r2, [r4, #24]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6412              		.loc 1 6730 21 view .LVU1891
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6413              		.loc 1 6730 21 view .LVU1892
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6414              		.loc 1 6730 21 view .LVU1893
 6415 006e 0120     		movs	r0, #1
 6416 0070 00FA03F2 		lsl	r2, r0, r3
 6417 0074 1149     		ldr	r1, .L461+4
 6418 0076 0E68     		ldr	r6, [r1]
 6419 0078 3243     		orrs	r2, r2, r6
 6420 007a 0A60     		str	r2, [r1]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6421              		.loc 1 6730 21 view .LVU1894
 6422              	.LBB322:
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6423              		.loc 1 6730 21 view .LVU1895
 6424 007c 104A     		ldr	r2, .L461+8
 6425 007e 03EB8303 		add	r3, r3, r3, lsl #2
 6426 0082 02EB8303 		add	r3, r2, r3, lsl #2
 6427 0086 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccJw1tyY.s 			page 298


 6428              	.LVL452:
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6429              		.loc 1 6730 21 view .LVU1896
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6430              		.loc 1 6730 21 view .LVU1897
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6431              		.loc 1 6730 21 view .LVU1898
 6432 0088 A360     		str	r3, [r4, #8]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6433              		.loc 1 6730 21 view .LVU1899
 6434 008a 9968     		ldr	r1, [r3, #8]
 6435 008c E160     		str	r1, [r4, #12]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6436              		.loc 1 6730 21 view .LVU1900
 6437 008e 4D60     		str	r5, [r1, #4]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6438              		.loc 1 6730 21 view .LVU1901
 6439 0090 9D60     		str	r5, [r3, #8]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6440              		.loc 1 6730 21 view .LVU1902
 6441 0092 E36A     		ldr	r3, [r4, #44]
 6442              	.LVL453:
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6443              		.loc 1 6730 21 is_stmt 0 view .LVU1903
 6444 0094 03EB8301 		add	r1, r3, r3, lsl #2
 6445 0098 02EB8105 		add	r5, r2, r1, lsl #2
 6446 009c 6561     		str	r5, [r4, #20]
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6447              		.loc 1 6730 21 is_stmt 1 view .LVU1904
 6448 009e 52F82110 		ldr	r1, [r2, r1, lsl #2]
 6449 00a2 0144     		add	r1, r1, r0
 6450 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 6451 00a8 42F82310 		str	r1, [r2, r3, lsl #2]
 6452              	.LBE322:
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6453              		.loc 1 6730 21 view .LVU1905
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6454              		.loc 1 6730 21 view .LVU1906
6730:FreeRTOS-Kernel/tasks.c ****                     #if ( configNUMBER_OF_CORES > 1 )
 6455              		.loc 1 6730 21 view .LVU1907
6750:FreeRTOS-Kernel/tasks.c ****                 }
 6456              		.loc 1 6750 21 view .LVU1908
 6457              	.LVL454:
6750:FreeRTOS-Kernel/tasks.c ****                 }
 6458              		.loc 1 6750 21 is_stmt 0 view .LVU1909
 6459 00ac CCE7     		b	.L446
 6460              	.LVL455:
 6461              	.L453:
 6462              	.LCFI50:
 6463              		.cfi_def_cfa_offset 0
 6464              		.cfi_restore 4
 6465              		.cfi_restore 5
 6466              		.cfi_restore 6
 6467              		.cfi_restore 14
6686:FreeRTOS-Kernel/tasks.c **** 
 6468              		.loc 1 6686 20 view .LVU1910
 6469 00ae 0020     		movs	r0, #0
ARM GAS  /tmp/ccJw1tyY.s 			page 299


 6470              	.LVL456:
6770:FreeRTOS-Kernel/tasks.c **** 
 6471              		.loc 1 6770 5 view .LVU1911
 6472 00b0 7047     		bx	lr
 6473              	.LVL457:
 6474              	.L454:
 6475              	.LCFI51:
 6476              		.cfi_def_cfa_offset 16
 6477              		.cfi_offset 4, -16
 6478              		.cfi_offset 5, -12
 6479              		.cfi_offset 6, -8
 6480              		.cfi_offset 14, -4
6686:FreeRTOS-Kernel/tasks.c **** 
 6481              		.loc 1 6686 20 view .LVU1912
 6482 00b2 0020     		movs	r0, #0
 6483              	.LVL458:
6686:FreeRTOS-Kernel/tasks.c **** 
 6484              		.loc 1 6686 20 view .LVU1913
 6485 00b4 C8E7     		b	.L446
 6486              	.L462:
 6487 00b6 00BF     		.align	2
 6488              	.L461:
 6489 00b8 00000000 		.word	pxCurrentTCB
 6490 00bc 00000000 		.word	uxTopReadyPriority
 6491 00c0 00000000 		.word	pxReadyTasksLists
 6492              		.cfi_endproc
 6493              	.LFE52:
 6495              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6496              		.align	1
 6497              		.global	vTaskPriorityDisinheritAfterTimeout
 6498              		.syntax unified
 6499              		.thumb
 6500              		.thumb_func
 6502              	vTaskPriorityDisinheritAfterTimeout:
 6503              	.LVL459:
 6504              	.LFB53:
6779:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6505              		.loc 1 6779 5 is_stmt 1 view -0
 6506              		.cfi_startproc
 6507              		@ args = 0, pretend = 0, frame = 0
 6508              		@ frame_needed = 0, uses_anonymous_args = 0
6780:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 6509              		.loc 1 6780 9 view .LVU1915
6781:FreeRTOS-Kernel/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6510              		.loc 1 6781 9 view .LVU1916
6782:FreeRTOS-Kernel/tasks.c **** 
 6511              		.loc 1 6782 9 view .LVU1917
6784:FreeRTOS-Kernel/tasks.c **** 
 6512              		.loc 1 6784 102 view .LVU1918
6786:FreeRTOS-Kernel/tasks.c ****         {
 6513              		.loc 1 6786 9 view .LVU1919
6786:FreeRTOS-Kernel/tasks.c ****         {
 6514              		.loc 1 6786 11 is_stmt 0 view .LVU1920
 6515 0000 0028     		cmp	r0, #0
 6516 0002 5FD0     		beq	.L473
6779:FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6517              		.loc 1 6779 5 view .LVU1921
ARM GAS  /tmp/ccJw1tyY.s 			page 300


 6518 0004 38B5     		push	{r3, r4, r5, lr}
 6519              	.LCFI52:
 6520              		.cfi_def_cfa_offset 16
 6521              		.cfi_offset 3, -16
 6522              		.cfi_offset 4, -12
 6523              		.cfi_offset 5, -8
 6524              		.cfi_offset 14, -4
 6525 0006 0446     		mov	r4, r0
6790:FreeRTOS-Kernel/tasks.c **** 
 6526              		.loc 1 6790 13 is_stmt 1 view .LVU1922
 6527 0008 836C     		ldr	r3, [r0, #72]
 6528 000a 43B9     		cbnz	r3, .L465
6790:FreeRTOS-Kernel/tasks.c **** 
 6529              		.loc 1 6790 13 view .LVU1923
 6530              	.LBB323:
 6531              	.LBI323:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 6532              		.loc 2 213 30 view .LVU1924
 6533              	.LBB324:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 6534              		.loc 2 215 5 view .LVU1925
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6535              		.loc 2 217 5 view .LVU1926
 6536              		.syntax unified
 6537              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 6538 000c 4FF05003 		   mov r3, #80                                              
 6539 0010 83F31188 	   msr basepri, r3                                         
 6540 0014 BFF36F8F 	   isb                                                     
 6541 0018 BFF34F8F 	   dsb                                                     
 6542              	
 6543              	@ 0 "" 2
 6544              	.LVL460:
 6545              		.thumb
 6546              		.syntax unified
 6547              	.L466:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6548              		.loc 2 217 5 is_stmt 0 view .LVU1927
 6549              	.LBE324:
 6550              	.LBE323:
6790:FreeRTOS-Kernel/tasks.c **** 
 6551              		.loc 1 6790 13 is_stmt 1 discriminator 1 view .LVU1928
6790:FreeRTOS-Kernel/tasks.c **** 
 6552              		.loc 1 6790 13 discriminator 1 view .LVU1929
 6553 001c FEE7     		b	.L466
 6554              	.L465:
6790:FreeRTOS-Kernel/tasks.c **** 
 6555              		.loc 1 6790 49 discriminator 2 view .LVU1930
6796:FreeRTOS-Kernel/tasks.c ****             {
 6556              		.loc 1 6796 13 discriminator 2 view .LVU1931
6796:FreeRTOS-Kernel/tasks.c ****             {
 6557              		.loc 1 6796 22 is_stmt 0 discriminator 2 view .LVU1932
 6558 001e 426C     		ldr	r2, [r0, #68]
6796:FreeRTOS-Kernel/tasks.c ****             {
 6559              		.loc 1 6796 15 discriminator 2 view .LVU1933
 6560 0020 8A42     		cmp	r2, r1
 6561 0022 00D2     		bcs	.L467
6798:FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  /tmp/ccJw1tyY.s 			page 301


 6562              		.loc 1 6798 33 view .LVU1934
 6563 0024 0A46     		mov	r2, r1
 6564              	.L467:
 6565              	.LVL461:
6806:FreeRTOS-Kernel/tasks.c ****             {
 6566              		.loc 1 6806 13 is_stmt 1 view .LVU1935
6806:FreeRTOS-Kernel/tasks.c ****             {
 6567              		.loc 1 6806 22 is_stmt 0 view .LVU1936
 6568 0026 E16A     		ldr	r1, [r4, #44]
 6569              	.LVL462:
6806:FreeRTOS-Kernel/tasks.c ****             {
 6570              		.loc 1 6806 15 view .LVU1937
 6571 0028 9142     		cmp	r1, r2
 6572 002a 01D0     		beq	.L463
6812:FreeRTOS-Kernel/tasks.c ****                 {
 6573              		.loc 1 6812 17 is_stmt 1 view .LVU1938
6812:FreeRTOS-Kernel/tasks.c ****                 {
 6574              		.loc 1 6812 19 is_stmt 0 view .LVU1939
 6575 002c 012B     		cmp	r3, #1
 6576 002e 00D0     		beq	.L476
 6577              	.LVL463:
 6578              	.L463:
6890:FreeRTOS-Kernel/tasks.c **** 
 6579              		.loc 1 6890 5 view .LVU1940
 6580 0030 38BD     		pop	{r3, r4, r5, pc}
 6581              	.LVL464:
 6582              	.L476:
6817:FreeRTOS-Kernel/tasks.c **** 
 6583              		.loc 1 6817 21 is_stmt 1 view .LVU1941
 6584 0032 254B     		ldr	r3, .L478
 6585 0034 1B68     		ldr	r3, [r3]
 6586 0036 A342     		cmp	r3, r4
 6587 0038 3BD0     		beq	.L477
6817:FreeRTOS-Kernel/tasks.c **** 
 6588              		.loc 1 6817 58 discriminator 2 view .LVU1942
6822:FreeRTOS-Kernel/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6589              		.loc 1 6822 76 discriminator 2 view .LVU1943
6823:FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 6590              		.loc 1 6823 21 discriminator 2 view .LVU1944
 6591              	.LVL465:
6824:FreeRTOS-Kernel/tasks.c **** 
 6592              		.loc 1 6824 21 discriminator 2 view .LVU1945
6824:FreeRTOS-Kernel/tasks.c **** 
 6593              		.loc 1 6824 39 is_stmt 0 discriminator 2 view .LVU1946
 6594 003a E262     		str	r2, [r4, #44]
6828:FreeRTOS-Kernel/tasks.c ****                     {
 6595              		.loc 1 6828 21 is_stmt 1 discriminator 2 view .LVU1947
6828:FreeRTOS-Kernel/tasks.c ****                     {
 6596              		.loc 1 6828 27 is_stmt 0 discriminator 2 view .LVU1948
 6597 003c A369     		ldr	r3, [r4, #24]
6828:FreeRTOS-Kernel/tasks.c ****                     {
 6598              		.loc 1 6828 23 discriminator 2 view .LVU1949
 6599 003e 002B     		cmp	r3, #0
 6600 0040 02DB     		blt	.L470
6830:FreeRTOS-Kernel/tasks.c ****                     }
 6601              		.loc 1 6830 25 is_stmt 1 view .LVU1950
 6602 0042 C2F10702 		rsb	r2, r2, #7
ARM GAS  /tmp/ccJw1tyY.s 			page 302


 6603              	.LVL466:
6830:FreeRTOS-Kernel/tasks.c ****                     }
 6604              		.loc 1 6830 25 is_stmt 0 view .LVU1951
 6605 0046 A261     		str	r2, [r4, #24]
 6606              	.L470:
6834:FreeRTOS-Kernel/tasks.c ****                     }
 6607              		.loc 1 6834 49 is_stmt 1 view .LVU1952
6843:FreeRTOS-Kernel/tasks.c ****                     {
 6608              		.loc 1 6843 21 view .LVU1953
6843:FreeRTOS-Kernel/tasks.c ****                     {
 6609              		.loc 1 6843 25 is_stmt 0 view .LVU1954
 6610 0048 6269     		ldr	r2, [r4, #20]
 6611 004a 01EB8101 		add	r1, r1, r1, lsl #2
 6612              	.LVL467:
6843:FreeRTOS-Kernel/tasks.c ****                     {
 6613              		.loc 1 6843 25 view .LVU1955
 6614 004e 1F4B     		ldr	r3, .L478+4
 6615 0050 03EB8103 		add	r3, r3, r1, lsl #2
6843:FreeRTOS-Kernel/tasks.c ****                     {
 6616              		.loc 1 6843 23 view .LVU1956
 6617 0054 9A42     		cmp	r2, r3
 6618 0056 EBD1     		bne	.L463
6845:FreeRTOS-Kernel/tasks.c ****                         {
 6619              		.loc 1 6845 25 is_stmt 1 view .LVU1957
6845:FreeRTOS-Kernel/tasks.c ****                         {
 6620              		.loc 1 6845 29 is_stmt 0 view .LVU1958
 6621 0058 251D     		adds	r5, r4, #4
 6622 005a 2846     		mov	r0, r5
 6623              	.LVL468:
6845:FreeRTOS-Kernel/tasks.c ****                         {
 6624              		.loc 1 6845 29 view .LVU1959
 6625 005c FFF7FEFF 		bl	uxListRemove
 6626              	.LVL469:
6845:FreeRTOS-Kernel/tasks.c ****                         {
 6627              		.loc 1 6845 27 view .LVU1960
 6628 0060 38B9     		cbnz	r0, .L471
6850:FreeRTOS-Kernel/tasks.c ****                         }
 6629              		.loc 1 6850 29 is_stmt 1 view .LVU1961
 6630 0062 E36A     		ldr	r3, [r4, #44]
 6631 0064 0122     		movs	r2, #1
 6632 0066 9A40     		lsls	r2, r2, r3
 6633 0068 1949     		ldr	r1, .L478+8
 6634 006a 0B68     		ldr	r3, [r1]
 6635 006c 23EA0203 		bic	r3, r3, r2
 6636 0070 0B60     		str	r3, [r1]
 6637              	.L471:
6854:FreeRTOS-Kernel/tasks.c ****                         }
 6638              		.loc 1 6854 53 view .LVU1962
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6639              		.loc 1 6857 25 view .LVU1963
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6640              		.loc 1 6857 25 view .LVU1964
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6641              		.loc 1 6857 25 view .LVU1965
 6642 0072 E36A     		ldr	r3, [r4, #44]
 6643 0074 0122     		movs	r2, #1
 6644 0076 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccJw1tyY.s 			page 303


 6645 0078 1549     		ldr	r1, .L478+8
 6646 007a 0868     		ldr	r0, [r1]
 6647 007c 0243     		orrs	r2, r2, r0
 6648 007e 0A60     		str	r2, [r1]
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6649              		.loc 1 6857 25 view .LVU1966
 6650              	.LBB325:
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6651              		.loc 1 6857 25 view .LVU1967
 6652 0080 124A     		ldr	r2, .L478+4
 6653 0082 03EB8303 		add	r3, r3, r3, lsl #2
 6654 0086 02EB8303 		add	r3, r2, r3, lsl #2
 6655 008a 5B68     		ldr	r3, [r3, #4]
 6656              	.LVL470:
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6657              		.loc 1 6857 25 view .LVU1968
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6658              		.loc 1 6857 25 view .LVU1969
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6659              		.loc 1 6857 25 view .LVU1970
 6660 008c A360     		str	r3, [r4, #8]
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6661              		.loc 1 6857 25 view .LVU1971
 6662 008e 9968     		ldr	r1, [r3, #8]
 6663 0090 E160     		str	r1, [r4, #12]
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6664              		.loc 1 6857 25 view .LVU1972
 6665 0092 4D60     		str	r5, [r1, #4]
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6666              		.loc 1 6857 25 view .LVU1973
 6667 0094 9D60     		str	r5, [r3, #8]
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6668              		.loc 1 6857 25 view .LVU1974
 6669 0096 E36A     		ldr	r3, [r4, #44]
 6670              	.LVL471:
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6671              		.loc 1 6857 25 is_stmt 0 view .LVU1975
 6672 0098 03EB8301 		add	r1, r3, r3, lsl #2
 6673 009c 02EB8100 		add	r0, r2, r1, lsl #2
 6674 00a0 6061     		str	r0, [r4, #20]
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6675              		.loc 1 6857 25 is_stmt 1 view .LVU1976
 6676 00a2 52F82110 		ldr	r1, [r2, r1, lsl #2]
 6677 00a6 0131     		adds	r1, r1, #1
 6678 00a8 03EB8303 		add	r3, r3, r3, lsl #2
 6679 00ac 42F82310 		str	r1, [r2, r3, lsl #2]
 6680              	.LBE325:
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6681              		.loc 1 6857 25 view .LVU1977
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6682              		.loc 1 6857 25 view .LVU1978
6857:FreeRTOS-Kernel/tasks.c ****                         #if ( configNUMBER_OF_CORES > 1 )
 6683              		.loc 1 6857 25 view .LVU1979
6886:FreeRTOS-Kernel/tasks.c ****         }
 6684              		.loc 1 6886 37 view .LVU1980
6889:FreeRTOS-Kernel/tasks.c ****     }
 6685              		.loc 1 6889 58 view .LVU1981
ARM GAS  /tmp/ccJw1tyY.s 			page 304


6890:FreeRTOS-Kernel/tasks.c **** 
 6686              		.loc 1 6890 5 is_stmt 0 view .LVU1982
 6687 00b0 BEE7     		b	.L463
 6688              	.LVL472:
 6689              	.L477:
6817:FreeRTOS-Kernel/tasks.c **** 
 6690              		.loc 1 6817 21 is_stmt 1 view .LVU1983
 6691              	.LBB326:
 6692              	.LBI326:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 6693              		.loc 2 213 30 view .LVU1984
 6694              	.LBB327:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 6695              		.loc 2 215 5 view .LVU1985
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6696              		.loc 2 217 5 view .LVU1986
 6697              		.syntax unified
 6698              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 6699 00b2 4FF05003 		   mov r3, #80                                              
 6700 00b6 83F31188 	   msr basepri, r3                                         
 6701 00ba BFF36F8F 	   isb                                                     
 6702 00be BFF34F8F 	   dsb                                                     
 6703              	
 6704              	@ 0 "" 2
 6705              	.LVL473:
 6706              		.thumb
 6707              		.syntax unified
 6708              	.L469:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6709              		.loc 2 217 5 is_stmt 0 view .LVU1987
 6710              	.LBE327:
 6711              	.LBE326:
6817:FreeRTOS-Kernel/tasks.c **** 
 6712              		.loc 1 6817 21 is_stmt 1 discriminator 2 view .LVU1988
6817:FreeRTOS-Kernel/tasks.c **** 
 6713              		.loc 1 6817 21 discriminator 2 view .LVU1989
 6714 00c2 FEE7     		b	.L469
 6715              	.LVL474:
 6716              	.L473:
 6717              	.LCFI53:
 6718              		.cfi_def_cfa_offset 0
 6719              		.cfi_restore 3
 6720              		.cfi_restore 4
 6721              		.cfi_restore 5
 6722              		.cfi_restore 14
6817:FreeRTOS-Kernel/tasks.c **** 
 6723              		.loc 1 6817 21 is_stmt 0 discriminator 2 view .LVU1990
 6724 00c4 7047     		bx	lr
 6725              	.L479:
 6726 00c6 00BF     		.align	2
 6727              	.L478:
 6728 00c8 00000000 		.word	pxCurrentTCB
 6729 00cc 00000000 		.word	pxReadyTasksLists
 6730 00d0 00000000 		.word	uxTopReadyPriority
 6731              		.cfi_endproc
 6732              	.LFE53:
 6734              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
ARM GAS  /tmp/ccJw1tyY.s 			page 305


 6735              		.align	1
 6736              		.global	uxTaskResetEventItemValue
 6737              		.syntax unified
 6738              		.thumb
 6739              		.thumb_func
 6741              	uxTaskResetEventItemValue:
 6742              	.LFB54:
7570:FreeRTOS-Kernel/tasks.c ****     TickType_t uxReturn;
 6743              		.loc 1 7570 1 is_stmt 1 view -0
 6744              		.cfi_startproc
 6745              		@ args = 0, pretend = 0, frame = 0
 6746              		@ frame_needed = 0, uses_anonymous_args = 0
 6747              		@ link register save eliminated.
7571:FreeRTOS-Kernel/tasks.c **** 
 6748              		.loc 1 7571 5 view .LVU1992
7573:FreeRTOS-Kernel/tasks.c **** 
 6749              		.loc 1 7573 43 view .LVU1993
7575:FreeRTOS-Kernel/tasks.c **** 
 6750              		.loc 1 7575 5 view .LVU1994
7575:FreeRTOS-Kernel/tasks.c **** 
 6751              		.loc 1 7575 16 is_stmt 0 view .LVU1995
 6752 0000 044A     		ldr	r2, .L481
 6753 0002 1368     		ldr	r3, [r2]
7575:FreeRTOS-Kernel/tasks.c **** 
 6754              		.loc 1 7575 14 view .LVU1996
 6755 0004 9869     		ldr	r0, [r3, #24]
 6756              	.LVL475:
7579:FreeRTOS-Kernel/tasks.c **** 
 6757              		.loc 1 7579 5 is_stmt 1 view .LVU1997
 6758 0006 1368     		ldr	r3, [r2]
 6759 0008 DB6A     		ldr	r3, [r3, #44]
 6760 000a 1268     		ldr	r2, [r2]
 6761 000c C3F10703 		rsb	r3, r3, #7
 6762 0010 9361     		str	r3, [r2, #24]
7581:FreeRTOS-Kernel/tasks.c **** 
 6763              		.loc 1 7581 54 view .LVU1998
7583:FreeRTOS-Kernel/tasks.c **** }
 6764              		.loc 1 7583 5 view .LVU1999
7584:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 6765              		.loc 1 7584 1 is_stmt 0 view .LVU2000
 6766 0012 7047     		bx	lr
 6767              	.L482:
 6768              		.align	2
 6769              	.L481:
 6770 0014 00000000 		.word	pxCurrentTCB
 6771              		.cfi_endproc
 6772              	.LFE54:
 6774              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6775              		.align	1
 6776              		.global	pvTaskIncrementMutexHeldCount
 6777              		.syntax unified
 6778              		.thumb
 6779              		.thumb_func
 6781              	pvTaskIncrementMutexHeldCount:
 6782              	.LFB55:
7590:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 6783              		.loc 1 7590 5 is_stmt 1 view -0
ARM GAS  /tmp/ccJw1tyY.s 			page 306


 6784              		.cfi_startproc
 6785              		@ args = 0, pretend = 0, frame = 0
 6786              		@ frame_needed = 0, uses_anonymous_args = 0
 6787              		@ link register save eliminated.
7591:FreeRTOS-Kernel/tasks.c **** 
 6788              		.loc 1 7591 9 view .LVU2002
7593:FreeRTOS-Kernel/tasks.c **** 
 6789              		.loc 1 7593 51 view .LVU2003
7595:FreeRTOS-Kernel/tasks.c **** 
 6790              		.loc 1 7595 9 view .LVU2004
7595:FreeRTOS-Kernel/tasks.c **** 
 6791              		.loc 1 7595 15 is_stmt 0 view .LVU2005
 6792 0000 034B     		ldr	r3, .L485
 6793 0002 1868     		ldr	r0, [r3]
 6794              	.LVL476:
7599:FreeRTOS-Kernel/tasks.c ****         {
 6795              		.loc 1 7599 9 is_stmt 1 view .LVU2006
7599:FreeRTOS-Kernel/tasks.c ****         {
 6796              		.loc 1 7599 11 is_stmt 0 view .LVU2007
 6797 0004 10B1     		cbz	r0, .L483
7601:FreeRTOS-Kernel/tasks.c ****         }
 6798              		.loc 1 7601 13 is_stmt 1 view .LVU2008
7601:FreeRTOS-Kernel/tasks.c ****         }
 6799              		.loc 1 7601 20 is_stmt 0 view .LVU2009
 6800 0006 836C     		ldr	r3, [r0, #72]
7601:FreeRTOS-Kernel/tasks.c ****         }
 6801              		.loc 1 7601 37 view .LVU2010
 6802 0008 0133     		adds	r3, r3, #1
 6803 000a 8364     		str	r3, [r0, #72]
7604:FreeRTOS-Kernel/tasks.c **** 
 6804              		.loc 1 7604 59 is_stmt 1 view .LVU2011
7606:FreeRTOS-Kernel/tasks.c ****     }
 6805              		.loc 1 7606 9 view .LVU2012
 6806              	.L483:
7607:FreeRTOS-Kernel/tasks.c **** 
 6807              		.loc 1 7607 5 is_stmt 0 view .LVU2013
 6808 000c 7047     		bx	lr
 6809              	.L486:
 6810 000e 00BF     		.align	2
 6811              	.L485:
 6812 0010 00000000 		.word	pxCurrentTCB
 6813              		.cfi_endproc
 6814              	.LFE55:
 6816              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 6817              		.align	1
 6818              		.global	ulTaskGenericNotifyTake
 6819              		.syntax unified
 6820              		.thumb
 6821              		.thumb_func
 6823              	ulTaskGenericNotifyTake:
 6824              	.LVL477:
 6825              	.LFB56:
7617:FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
 6826              		.loc 1 7617 5 is_stmt 1 view -0
 6827              		.cfi_startproc
 6828              		@ args = 0, pretend = 0, frame = 0
 6829              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccJw1tyY.s 			page 307


7618:FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 6830              		.loc 1 7618 9 view .LVU2015
7619:FreeRTOS-Kernel/tasks.c **** 
 6831              		.loc 1 7619 9 view .LVU2016
7621:FreeRTOS-Kernel/tasks.c **** 
 6832              		.loc 1 7621 95 view .LVU2017
7623:FreeRTOS-Kernel/tasks.c **** 
 6833              		.loc 1 7623 9 view .LVU2018
 6834 0000 40B1     		cbz	r0, .L488
7623:FreeRTOS-Kernel/tasks.c **** 
 6835              		.loc 1 7623 9 view .LVU2019
 6836              	.LBB328:
 6837              	.LBI328:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 6838              		.loc 2 213 30 view .LVU2020
 6839              	.LBB329:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 6840              		.loc 2 215 5 view .LVU2021
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6841              		.loc 2 217 5 view .LVU2022
 6842              		.syntax unified
 6843              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 6844 0002 4FF05003 		   mov r3, #80                                              
 6845 0006 83F31188 	   msr basepri, r3                                         
 6846 000a BFF36F8F 	   isb                                                     
 6847 000e BFF34F8F 	   dsb                                                     
 6848              	
 6849              	@ 0 "" 2
 6850              	.LVL478:
 6851              		.thumb
 6852              		.syntax unified
 6853              	.L489:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 6854              		.loc 2 217 5 is_stmt 0 view .LVU2023
 6855              	.LBE329:
 6856              	.LBE328:
7623:FreeRTOS-Kernel/tasks.c **** 
 6857              		.loc 1 7623 9 is_stmt 1 discriminator 1 view .LVU2024
7623:FreeRTOS-Kernel/tasks.c **** 
 6858              		.loc 1 7623 9 discriminator 1 view .LVU2025
 6859 0012 FEE7     		b	.L489
 6860              	.L488:
7617:FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
 6861              		.loc 1 7617 5 is_stmt 0 discriminator 2 view .LVU2026
 6862 0014 70B5     		push	{r4, r5, r6, lr}
 6863              	.LCFI54:
 6864              		.cfi_def_cfa_offset 16
 6865              		.cfi_offset 4, -16
 6866              		.cfi_offset 5, -12
 6867              		.cfi_offset 6, -8
 6868              		.cfi_offset 14, -4
 6869 0016 0E46     		mov	r6, r1
 6870 0018 1446     		mov	r4, r2
 6871 001a 0546     		mov	r5, r0
7623:FreeRTOS-Kernel/tasks.c **** 
 6872              		.loc 1 7623 80 is_stmt 1 discriminator 2 view .LVU2027
7627:FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  /tmp/ccJw1tyY.s 			page 308


 6873              		.loc 1 7627 9 discriminator 2 view .LVU2028
 6874 001c FFF7FEFF 		bl	vTaskSuspendAll
 6875              	.LVL479:
7633:FreeRTOS-Kernel/tasks.c ****             {
 6876              		.loc 1 7633 13 discriminator 2 view .LVU2029
 6877 0020 FFF7FEFF 		bl	vPortEnterCritical
 6878              	.LVL480:
7636:FreeRTOS-Kernel/tasks.c ****                 {
 6879              		.loc 1 7636 17 discriminator 2 view .LVU2030
7636:FreeRTOS-Kernel/tasks.c ****                 {
 6880              		.loc 1 7636 33 is_stmt 0 discriminator 2 view .LVU2031
 6881 0024 284B     		ldr	r3, .L500
 6882 0026 1B68     		ldr	r3, [r3]
7636:FreeRTOS-Kernel/tasks.c ****                 {
 6883              		.loc 1 7636 50 discriminator 2 view .LVU2032
 6884 0028 05F11202 		add	r2, r5, #18
 6885 002c 03EB8203 		add	r3, r3, r2, lsl #2
 6886 0030 5B68     		ldr	r3, [r3, #4]
7636:FreeRTOS-Kernel/tasks.c ****                 {
 6887              		.loc 1 7636 19 discriminator 2 view .LVU2033
 6888 0032 33BB     		cbnz	r3, .L498
7639:FreeRTOS-Kernel/tasks.c **** 
 6889              		.loc 1 7639 21 is_stmt 1 view .LVU2034
7639:FreeRTOS-Kernel/tasks.c **** 
 6890              		.loc 1 7639 33 is_stmt 0 view .LVU2035
 6891 0034 244B     		ldr	r3, .L500
 6892 0036 1B68     		ldr	r3, [r3]
7639:FreeRTOS-Kernel/tasks.c **** 
 6893              		.loc 1 7639 68 view .LVU2036
 6894 0038 2B44     		add	r3, r3, r5
 6895 003a 0122     		movs	r2, #1
 6896 003c 83F85020 		strb	r2, [r3, #80]
7641:FreeRTOS-Kernel/tasks.c ****                     {
 6897              		.loc 1 7641 21 is_stmt 1 view .LVU2037
7641:FreeRTOS-Kernel/tasks.c ****                     {
 6898              		.loc 1 7641 23 is_stmt 0 view .LVU2038
 6899 0040 1CBB     		cbnz	r4, .L492
7652:FreeRTOS-Kernel/tasks.c ****                 }
 6900              		.loc 1 7652 45 is_stmt 1 view .LVU2039
7655:FreeRTOS-Kernel/tasks.c **** 
 6901              		.loc 1 7655 13 view .LVU2040
 6902 0042 FFF7FEFF 		bl	vPortExitCritical
 6903              	.LVL481:
7660:FreeRTOS-Kernel/tasks.c ****             {
 6904              		.loc 1 7660 13 view .LVU2041
 6905              	.L491:
7667:FreeRTOS-Kernel/tasks.c ****             }
 6906              		.loc 1 7667 41 view .LVU2042
7670:FreeRTOS-Kernel/tasks.c **** 
 6907              		.loc 1 7670 9 view .LVU2043
7670:FreeRTOS-Kernel/tasks.c **** 
 6908              		.loc 1 7670 27 is_stmt 0 view .LVU2044
 6909 0046 FFF7FEFF 		bl	xTaskResumeAll
 6910              	.LVL482:
7673:FreeRTOS-Kernel/tasks.c ****         {
 6911              		.loc 1 7673 9 is_stmt 1 view .LVU2045
7673:FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  /tmp/ccJw1tyY.s 			page 309


 6912              		.loc 1 7673 11 is_stmt 0 view .LVU2046
 6913 004a 34BB     		cbnz	r4, .L499
 6914              	.L493:
7679:FreeRTOS-Kernel/tasks.c ****         }
 6915              		.loc 1 7679 37 is_stmt 1 view .LVU2047
7682:FreeRTOS-Kernel/tasks.c ****         {
 6916              		.loc 1 7682 9 view .LVU2048
 6917 004c FFF7FEFF 		bl	vPortEnterCritical
 6918              	.LVL483:
7684:FreeRTOS-Kernel/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 6919              		.loc 1 7684 53 view .LVU2049
7685:FreeRTOS-Kernel/tasks.c **** 
 6920              		.loc 1 7685 13 view .LVU2050
7685:FreeRTOS-Kernel/tasks.c **** 
 6921              		.loc 1 7685 36 is_stmt 0 view .LVU2051
 6922 0050 1D4B     		ldr	r3, .L500
 6923 0052 1B68     		ldr	r3, [r3]
7685:FreeRTOS-Kernel/tasks.c **** 
 6924              		.loc 1 7685 22 view .LVU2052
 6925 0054 05F11202 		add	r2, r5, #18
 6926 0058 03EB8203 		add	r3, r3, r2, lsl #2
 6927 005c 5C68     		ldr	r4, [r3, #4]
 6928              	.LVL484:
7687:FreeRTOS-Kernel/tasks.c ****             {
 6929              		.loc 1 7687 13 is_stmt 1 view .LVU2053
7687:FreeRTOS-Kernel/tasks.c ****             {
 6930              		.loc 1 7687 15 is_stmt 0 view .LVU2054
 6931 005e 34B1     		cbz	r4, .L494
7689:FreeRTOS-Kernel/tasks.c ****                 {
 6932              		.loc 1 7689 17 is_stmt 1 view .LVU2055
7689:FreeRTOS-Kernel/tasks.c ****                 {
 6933              		.loc 1 7689 19 is_stmt 0 view .LVU2056
 6934 0060 46B3     		cbz	r6, .L495
7691:FreeRTOS-Kernel/tasks.c ****                 }
 6935              		.loc 1 7691 21 is_stmt 1 view .LVU2057
7691:FreeRTOS-Kernel/tasks.c ****                 }
 6936              		.loc 1 7691 33 is_stmt 0 view .LVU2058
 6937 0062 194B     		ldr	r3, .L500
 6938 0064 1B68     		ldr	r3, [r3]
7691:FreeRTOS-Kernel/tasks.c ****                 }
 6939              		.loc 1 7691 70 view .LVU2059
 6940 0066 03EB8203 		add	r3, r3, r2, lsl #2
 6941 006a 0022     		movs	r2, #0
 6942 006c 5A60     		str	r2, [r3, #4]
 6943              	.L494:
7700:FreeRTOS-Kernel/tasks.c ****             }
 6944              		.loc 1 7700 41 is_stmt 1 view .LVU2060
7703:FreeRTOS-Kernel/tasks.c ****         }
 6945              		.loc 1 7703 13 view .LVU2061
7703:FreeRTOS-Kernel/tasks.c ****         }
 6946              		.loc 1 7703 25 is_stmt 0 view .LVU2062
 6947 006e 164B     		ldr	r3, .L500
 6948 0070 1B68     		ldr	r3, [r3]
7703:FreeRTOS-Kernel/tasks.c ****         }
 6949              		.loc 1 7703 60 view .LVU2063
 6950 0072 2B44     		add	r3, r3, r5
 6951 0074 0022     		movs	r2, #0
ARM GAS  /tmp/ccJw1tyY.s 			page 310


 6952 0076 83F85020 		strb	r2, [r3, #80]
7705:FreeRTOS-Kernel/tasks.c **** 
 6953              		.loc 1 7705 9 is_stmt 1 view .LVU2064
 6954 007a FFF7FEFF 		bl	vPortExitCritical
 6955              	.LVL485:
7707:FreeRTOS-Kernel/tasks.c **** 
 6956              		.loc 1 7707 56 view .LVU2065
7709:FreeRTOS-Kernel/tasks.c ****     }
 6957              		.loc 1 7709 9 view .LVU2066
7710:FreeRTOS-Kernel/tasks.c **** 
 6958              		.loc 1 7710 5 is_stmt 0 view .LVU2067
 6959 007e 2046     		mov	r0, r4
 6960 0080 70BD     		pop	{r4, r5, r6, pc}
 6961              	.LVL486:
 6962              	.L498:
7652:FreeRTOS-Kernel/tasks.c ****                 }
 6963              		.loc 1 7652 45 is_stmt 1 view .LVU2068
7655:FreeRTOS-Kernel/tasks.c **** 
 6964              		.loc 1 7655 13 view .LVU2069
 6965 0082 FFF7FEFF 		bl	vPortExitCritical
 6966              	.LVL487:
7660:FreeRTOS-Kernel/tasks.c ****             {
 6967              		.loc 1 7660 13 view .LVU2070
7619:FreeRTOS-Kernel/tasks.c **** 
 6968              		.loc 1 7619 37 is_stmt 0 view .LVU2071
 6969 0086 0024     		movs	r4, #0
 6970              	.LVL488:
7619:FreeRTOS-Kernel/tasks.c **** 
 6971              		.loc 1 7619 37 view .LVU2072
 6972 0088 DDE7     		b	.L491
 6973              	.LVL489:
 6974              	.L492:
7643:FreeRTOS-Kernel/tasks.c ****                     }
 6975              		.loc 1 7643 25 is_stmt 1 view .LVU2073
7652:FreeRTOS-Kernel/tasks.c ****                 }
 6976              		.loc 1 7652 45 view .LVU2074
7655:FreeRTOS-Kernel/tasks.c **** 
 6977              		.loc 1 7655 13 view .LVU2075
 6978 008a FFF7FEFF 		bl	vPortExitCritical
 6979              	.LVL490:
7660:FreeRTOS-Kernel/tasks.c ****             {
 6980              		.loc 1 7660 13 view .LVU2076
7662:FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6981              		.loc 1 7662 63 view .LVU2077
7663:FreeRTOS-Kernel/tasks.c ****             }
 6982              		.loc 1 7663 17 view .LVU2078
 6983 008e 0121     		movs	r1, #1
 6984 0090 2046     		mov	r0, r4
 6985 0092 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6986              	.LVL491:
7643:FreeRTOS-Kernel/tasks.c ****                     }
 6987              		.loc 1 7643 38 is_stmt 0 view .LVU2079
 6988 0096 0124     		movs	r4, #1
 6989              	.LVL492:
7643:FreeRTOS-Kernel/tasks.c ****                     }
 6990              		.loc 1 7643 38 view .LVU2080
 6991 0098 D5E7     		b	.L491
ARM GAS  /tmp/ccJw1tyY.s 			page 311


 6992              	.LVL493:
 6993              	.L499:
7673:FreeRTOS-Kernel/tasks.c ****         {
 6994              		.loc 1 7673 40 discriminator 1 view .LVU2081
 6995 009a 0028     		cmp	r0, #0
 6996 009c D6D1     		bne	.L493
7675:FreeRTOS-Kernel/tasks.c ****         }
 6997              		.loc 1 7675 13 is_stmt 1 view .LVU2082
 6998 009e 4FF0E023 		mov	r3, #-536813568
 6999 00a2 4FF08052 		mov	r2, #268435456
 7000 00a6 C3F8042D 		str	r2, [r3, #3332]
7675:FreeRTOS-Kernel/tasks.c ****         }
 7001              		.loc 1 7675 13 view .LVU2083
 7002              		.syntax unified
 7003              	@ 7675 "FreeRTOS-Kernel/tasks.c" 1
 7004 00aa BFF34F8F 		dsb
 7005              	@ 0 "" 2
7675:FreeRTOS-Kernel/tasks.c ****         }
 7006              		.loc 1 7675 13 view .LVU2084
 7007              	@ 7675 "FreeRTOS-Kernel/tasks.c" 1
 7008 00ae BFF36F8F 		isb
 7009              	@ 0 "" 2
7675:FreeRTOS-Kernel/tasks.c ****         }
 7010              		.loc 1 7675 35 view .LVU2085
 7011              		.thumb
 7012              		.syntax unified
 7013 00b2 CBE7     		b	.L493
 7014              	.LVL494:
 7015              	.L495:
7695:FreeRTOS-Kernel/tasks.c ****                 }
 7016              		.loc 1 7695 21 view .LVU2086
7695:FreeRTOS-Kernel/tasks.c ****                 }
 7017              		.loc 1 7695 33 is_stmt 0 view .LVU2087
 7018 00b4 044B     		ldr	r3, .L500
 7019 00b6 1B68     		ldr	r3, [r3]
7695:FreeRTOS-Kernel/tasks.c ****                 }
 7020              		.loc 1 7695 81 view .LVU2088
 7021 00b8 621E     		subs	r2, r4, #1
7695:FreeRTOS-Kernel/tasks.c ****                 }
 7022              		.loc 1 7695 70 view .LVU2089
 7023 00ba 05F11201 		add	r1, r5, #18
 7024 00be 03EB8103 		add	r3, r3, r1, lsl #2
 7025 00c2 5A60     		str	r2, [r3, #4]
 7026 00c4 D3E7     		b	.L494
 7027              	.L501:
 7028 00c6 00BF     		.align	2
 7029              	.L500:
 7030 00c8 00000000 		.word	pxCurrentTCB
 7031              		.cfi_endproc
 7032              	.LFE56:
 7034              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 7035              		.align	1
 7036              		.global	xTaskGenericNotifyWait
 7037              		.syntax unified
 7038              		.thumb
 7039              		.thumb_func
 7041              	xTaskGenericNotifyWait:
ARM GAS  /tmp/ccJw1tyY.s 			page 312


 7042              	.LVL495:
 7043              	.LFB57:
7722:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 7044              		.loc 1 7722 5 is_stmt 1 view -0
 7045              		.cfi_startproc
 7046              		@ args = 4, pretend = 0, frame = 0
 7047              		@ frame_needed = 0, uses_anonymous_args = 0
7722:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 7048              		.loc 1 7722 5 is_stmt 0 view .LVU2091
 7049 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7050              	.LCFI55:
 7051              		.cfi_def_cfa_offset 24
 7052              		.cfi_offset 3, -24
 7053              		.cfi_offset 4, -20
 7054              		.cfi_offset 5, -16
 7055              		.cfi_offset 6, -12
 7056              		.cfi_offset 7, -8
 7057              		.cfi_offset 14, -4
7723:FreeRTOS-Kernel/tasks.c **** 
 7058              		.loc 1 7723 9 is_stmt 1 view .LVU2092
 7059              	.LVL496:
7725:FreeRTOS-Kernel/tasks.c **** 
 7060              		.loc 1 7725 140 view .LVU2093
7727:FreeRTOS-Kernel/tasks.c **** 
 7061              		.loc 1 7727 9 view .LVU2094
 7062 0002 40B1     		cbz	r0, .L503
7727:FreeRTOS-Kernel/tasks.c **** 
 7063              		.loc 1 7727 9 view .LVU2095
 7064              	.LBB330:
 7065              	.LBI330:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7066              		.loc 2 213 30 view .LVU2096
 7067              	.LBB331:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7068              		.loc 2 215 5 view .LVU2097
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7069              		.loc 2 217 5 view .LVU2098
 7070              		.syntax unified
 7071              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7072 0004 4FF05003 		   mov r3, #80                                              
 7073 0008 83F31188 	   msr basepri, r3                                         
 7074 000c BFF36F8F 	   isb                                                     
 7075 0010 BFF34F8F 	   dsb                                                     
 7076              	
 7077              	@ 0 "" 2
 7078              	.LVL497:
 7079              		.thumb
 7080              		.syntax unified
 7081              	.L504:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7082              		.loc 2 217 5 is_stmt 0 view .LVU2099
 7083              	.LBE331:
 7084              	.LBE330:
7727:FreeRTOS-Kernel/tasks.c **** 
 7085              		.loc 1 7727 9 is_stmt 1 discriminator 1 view .LVU2100
7727:FreeRTOS-Kernel/tasks.c **** 
 7086              		.loc 1 7727 9 discriminator 1 view .LVU2101
ARM GAS  /tmp/ccJw1tyY.s 			page 313


 7087 0014 FEE7     		b	.L504
 7088              	.LVL498:
 7089              	.L503:
7727:FreeRTOS-Kernel/tasks.c **** 
 7090              		.loc 1 7727 9 is_stmt 0 discriminator 1 view .LVU2102
 7091 0016 0D46     		mov	r5, r1
 7092 0018 1646     		mov	r6, r2
 7093 001a 1C46     		mov	r4, r3
 7094 001c 0746     		mov	r7, r0
7727:FreeRTOS-Kernel/tasks.c **** 
 7095              		.loc 1 7727 80 is_stmt 1 discriminator 2 view .LVU2103
7731:FreeRTOS-Kernel/tasks.c ****         {
 7096              		.loc 1 7731 9 discriminator 2 view .LVU2104
 7097 001e FFF7FEFF 		bl	vTaskSuspendAll
 7098              	.LVL499:
7736:FreeRTOS-Kernel/tasks.c ****             {
 7099              		.loc 1 7736 13 discriminator 2 view .LVU2105
 7100 0022 FFF7FEFF 		bl	vPortEnterCritical
 7101              	.LVL500:
7739:FreeRTOS-Kernel/tasks.c ****                 {
 7102              		.loc 1 7739 17 discriminator 2 view .LVU2106
7739:FreeRTOS-Kernel/tasks.c ****                 {
 7103              		.loc 1 7739 33 is_stmt 0 discriminator 2 view .LVU2107
 7104 0026 314B     		ldr	r3, .L516
 7105 0028 1B68     		ldr	r3, [r3]
7739:FreeRTOS-Kernel/tasks.c ****                 {
 7106              		.loc 1 7739 48 discriminator 2 view .LVU2108
 7107 002a 3B44     		add	r3, r3, r7
 7108 002c 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 7109 0030 DBB2     		uxtb	r3, r3
7739:FreeRTOS-Kernel/tasks.c ****                 {
 7110              		.loc 1 7739 19 discriminator 2 view .LVU2109
 7111 0032 022B     		cmp	r3, #2
 7112 0034 34D0     		beq	.L513
7744:FreeRTOS-Kernel/tasks.c **** 
 7113              		.loc 1 7744 21 is_stmt 1 view .LVU2110
7744:FreeRTOS-Kernel/tasks.c **** 
 7114              		.loc 1 7744 33 is_stmt 0 view .LVU2111
 7115 0036 2D49     		ldr	r1, .L516
 7116 0038 0B68     		ldr	r3, [r1]
7744:FreeRTOS-Kernel/tasks.c **** 
 7117              		.loc 1 7744 50 view .LVU2112
 7118 003a 07F11202 		add	r2, r7, #18
 7119 003e 03EB8203 		add	r3, r3, r2, lsl #2
 7120 0042 5A68     		ldr	r2, [r3, #4]
7744:FreeRTOS-Kernel/tasks.c **** 
 7121              		.loc 1 7744 70 view .LVU2113
 7122 0044 22EA0502 		bic	r2, r2, r5
 7123 0048 5A60     		str	r2, [r3, #4]
7747:FreeRTOS-Kernel/tasks.c **** 
 7124              		.loc 1 7747 21 is_stmt 1 view .LVU2114
7747:FreeRTOS-Kernel/tasks.c **** 
 7125              		.loc 1 7747 33 is_stmt 0 view .LVU2115
 7126 004a 0B68     		ldr	r3, [r1]
7747:FreeRTOS-Kernel/tasks.c **** 
 7127              		.loc 1 7747 68 view .LVU2116
 7128 004c 3B44     		add	r3, r3, r7
ARM GAS  /tmp/ccJw1tyY.s 			page 314


 7129 004e 0122     		movs	r2, #1
 7130 0050 83F85020 		strb	r2, [r3, #80]
7749:FreeRTOS-Kernel/tasks.c ****                     {
 7131              		.loc 1 7749 21 is_stmt 1 view .LVU2117
7749:FreeRTOS-Kernel/tasks.c ****                     {
 7132              		.loc 1 7749 23 is_stmt 0 view .LVU2118
 7133 0054 069B     		ldr	r3, [sp, #24]
 7134 0056 3BBB     		cbnz	r3, .L507
7760:FreeRTOS-Kernel/tasks.c ****                 }
 7135              		.loc 1 7760 45 is_stmt 1 view .LVU2119
7763:FreeRTOS-Kernel/tasks.c **** 
 7136              		.loc 1 7763 13 view .LVU2120
 7137 0058 FFF7FEFF 		bl	vPortExitCritical
 7138              	.LVL501:
7768:FreeRTOS-Kernel/tasks.c ****             {
 7139              		.loc 1 7768 13 view .LVU2121
7723:FreeRTOS-Kernel/tasks.c **** 
 7140              		.loc 1 7723 46 is_stmt 0 view .LVU2122
 7141 005c 0025     		movs	r5, #0
 7142              	.LVL502:
 7143              	.L506:
7775:FreeRTOS-Kernel/tasks.c ****             }
 7144              		.loc 1 7775 41 is_stmt 1 view .LVU2123
7778:FreeRTOS-Kernel/tasks.c **** 
 7145              		.loc 1 7778 9 view .LVU2124
7778:FreeRTOS-Kernel/tasks.c **** 
 7146              		.loc 1 7778 27 is_stmt 0 view .LVU2125
 7147 005e FFF7FEFF 		bl	xTaskResumeAll
 7148              	.LVL503:
7781:FreeRTOS-Kernel/tasks.c ****         {
 7149              		.loc 1 7781 9 is_stmt 1 view .LVU2126
7781:FreeRTOS-Kernel/tasks.c ****         {
 7150              		.loc 1 7781 11 is_stmt 0 view .LVU2127
 7151 0062 4DBB     		cbnz	r5, .L514
 7152              	.LVL504:
 7153              	.L508:
7787:FreeRTOS-Kernel/tasks.c ****         }
 7154              		.loc 1 7787 37 is_stmt 1 view .LVU2128
7790:FreeRTOS-Kernel/tasks.c ****         {
 7155              		.loc 1 7790 9 view .LVU2129
 7156 0064 FFF7FEFF 		bl	vPortEnterCritical
 7157              	.LVL505:
7792:FreeRTOS-Kernel/tasks.c **** 
 7158              		.loc 1 7792 53 view .LVU2130
7794:FreeRTOS-Kernel/tasks.c ****             {
 7159              		.loc 1 7794 13 view .LVU2131
7794:FreeRTOS-Kernel/tasks.c ****             {
 7160              		.loc 1 7794 15 is_stmt 0 view .LVU2132
 7161 0068 3CB1     		cbz	r4, .L509
7798:FreeRTOS-Kernel/tasks.c ****             }
 7162              		.loc 1 7798 17 is_stmt 1 view .LVU2133
7798:FreeRTOS-Kernel/tasks.c ****             }
 7163              		.loc 1 7798 53 is_stmt 0 view .LVU2134
 7164 006a 204B     		ldr	r3, .L516
 7165 006c 1B68     		ldr	r3, [r3]
7798:FreeRTOS-Kernel/tasks.c ****             }
 7166              		.loc 1 7798 70 view .LVU2135
ARM GAS  /tmp/ccJw1tyY.s 			page 315


 7167 006e 07F11202 		add	r2, r7, #18
 7168 0072 03EB8203 		add	r3, r3, r2, lsl #2
 7169 0076 5B68     		ldr	r3, [r3, #4]
7798:FreeRTOS-Kernel/tasks.c ****             }
 7170              		.loc 1 7798 39 view .LVU2136
 7171 0078 2360     		str	r3, [r4]
 7172              	.L509:
7805:FreeRTOS-Kernel/tasks.c ****             {
 7173              		.loc 1 7805 13 is_stmt 1 view .LVU2137
7805:FreeRTOS-Kernel/tasks.c ****             {
 7174              		.loc 1 7805 29 is_stmt 0 view .LVU2138
 7175 007a 1C4B     		ldr	r3, .L516
 7176 007c 1B68     		ldr	r3, [r3]
7805:FreeRTOS-Kernel/tasks.c ****             {
 7177              		.loc 1 7805 44 view .LVU2139
 7178 007e 3B44     		add	r3, r3, r7
 7179 0080 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 7180 0084 DBB2     		uxtb	r3, r3
7805:FreeRTOS-Kernel/tasks.c ****             {
 7181              		.loc 1 7805 15 view .LVU2140
 7182 0086 022B     		cmp	r3, #2
 7183 0088 23D0     		beq	.L515
7808:FreeRTOS-Kernel/tasks.c ****             }
 7184              		.loc 1 7808 25 view .LVU2141
 7185 008a 0024     		movs	r4, #0
 7186              	.LVL506:
 7187              	.L510:
7818:FreeRTOS-Kernel/tasks.c ****         }
 7188              		.loc 1 7818 13 is_stmt 1 view .LVU2142
7818:FreeRTOS-Kernel/tasks.c ****         }
 7189              		.loc 1 7818 25 is_stmt 0 view .LVU2143
 7190 008c 174B     		ldr	r3, .L516
 7191 008e 1B68     		ldr	r3, [r3]
7818:FreeRTOS-Kernel/tasks.c ****         }
 7192              		.loc 1 7818 60 view .LVU2144
 7193 0090 3B44     		add	r3, r3, r7
 7194 0092 0022     		movs	r2, #0
 7195 0094 83F85020 		strb	r2, [r3, #80]
7820:FreeRTOS-Kernel/tasks.c **** 
 7196              		.loc 1 7820 9 is_stmt 1 view .LVU2145
 7197 0098 FFF7FEFF 		bl	vPortExitCritical
 7198              	.LVL507:
7822:FreeRTOS-Kernel/tasks.c **** 
 7199              		.loc 1 7822 54 view .LVU2146
7824:FreeRTOS-Kernel/tasks.c ****     }
 7200              		.loc 1 7824 9 view .LVU2147
7825:FreeRTOS-Kernel/tasks.c **** 
 7201              		.loc 1 7825 5 is_stmt 0 view .LVU2148
 7202 009c 2046     		mov	r0, r4
 7203 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7204              	.LVL508:
 7205              	.L513:
7760:FreeRTOS-Kernel/tasks.c ****                 }
 7206              		.loc 1 7760 45 is_stmt 1 view .LVU2149
7763:FreeRTOS-Kernel/tasks.c **** 
 7207              		.loc 1 7763 13 view .LVU2150
 7208 00a0 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccJw1tyY.s 			page 316


 7209              	.LVL509:
7768:FreeRTOS-Kernel/tasks.c ****             {
 7210              		.loc 1 7768 13 view .LVU2151
7723:FreeRTOS-Kernel/tasks.c **** 
 7211              		.loc 1 7723 46 is_stmt 0 view .LVU2152
 7212 00a4 0025     		movs	r5, #0
 7213              	.LVL510:
7723:FreeRTOS-Kernel/tasks.c **** 
 7214              		.loc 1 7723 46 view .LVU2153
 7215 00a6 DAE7     		b	.L506
 7216              	.LVL511:
 7217              	.L507:
7751:FreeRTOS-Kernel/tasks.c ****                     }
 7218              		.loc 1 7751 25 is_stmt 1 view .LVU2154
7760:FreeRTOS-Kernel/tasks.c ****                 }
 7219              		.loc 1 7760 45 view .LVU2155
7763:FreeRTOS-Kernel/tasks.c **** 
 7220              		.loc 1 7763 13 view .LVU2156
 7221 00a8 FFF7FEFF 		bl	vPortExitCritical
 7222              	.LVL512:
7768:FreeRTOS-Kernel/tasks.c ****             {
 7223              		.loc 1 7768 13 view .LVU2157
7770:FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7224              		.loc 1 7770 63 view .LVU2158
7771:FreeRTOS-Kernel/tasks.c ****             }
 7225              		.loc 1 7771 17 view .LVU2159
 7226 00ac 0121     		movs	r1, #1
 7227 00ae 0698     		ldr	r0, [sp, #24]
 7228 00b0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 7229              	.LVL513:
7751:FreeRTOS-Kernel/tasks.c ****                     }
 7230              		.loc 1 7751 38 is_stmt 0 view .LVU2160
 7231 00b4 0125     		movs	r5, #1
 7232              	.LVL514:
7751:FreeRTOS-Kernel/tasks.c ****                     }
 7233              		.loc 1 7751 38 view .LVU2161
 7234 00b6 D2E7     		b	.L506
 7235              	.LVL515:
 7236              	.L514:
7781:FreeRTOS-Kernel/tasks.c ****         {
 7237              		.loc 1 7781 40 discriminator 1 view .LVU2162
 7238 00b8 0028     		cmp	r0, #0
 7239 00ba D3D1     		bne	.L508
7783:FreeRTOS-Kernel/tasks.c ****         }
 7240              		.loc 1 7783 13 is_stmt 1 view .LVU2163
 7241 00bc 4FF0E023 		mov	r3, #-536813568
 7242 00c0 4FF08052 		mov	r2, #268435456
 7243 00c4 C3F8042D 		str	r2, [r3, #3332]
 7244              	.LVL516:
7783:FreeRTOS-Kernel/tasks.c ****         }
 7245              		.loc 1 7783 13 view .LVU2164
 7246              		.syntax unified
 7247              	@ 7783 "FreeRTOS-Kernel/tasks.c" 1
 7248 00c8 BFF34F8F 		dsb
 7249              	@ 0 "" 2
7783:FreeRTOS-Kernel/tasks.c ****         }
 7250              		.loc 1 7783 13 view .LVU2165
ARM GAS  /tmp/ccJw1tyY.s 			page 317


 7251              	@ 7783 "FreeRTOS-Kernel/tasks.c" 1
 7252 00cc BFF36F8F 		isb
 7253              	@ 0 "" 2
7783:FreeRTOS-Kernel/tasks.c ****         }
 7254              		.loc 1 7783 35 view .LVU2166
 7255              		.thumb
 7256              		.syntax unified
 7257 00d0 C8E7     		b	.L508
 7258              	.LVL517:
 7259              	.L515:
7814:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
 7260              		.loc 1 7814 17 view .LVU2167
7814:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
 7261              		.loc 1 7814 29 is_stmt 0 view .LVU2168
 7262 00d2 064B     		ldr	r3, .L516
 7263 00d4 1B68     		ldr	r3, [r3]
7814:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
 7264              		.loc 1 7814 46 view .LVU2169
 7265 00d6 07F11202 		add	r2, r7, #18
 7266 00da 03EB8203 		add	r3, r3, r2, lsl #2
 7267 00de 5A68     		ldr	r2, [r3, #4]
7814:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
 7268              		.loc 1 7814 66 view .LVU2170
 7269 00e0 22EA0602 		bic	r2, r2, r6
 7270 00e4 5A60     		str	r2, [r3, #4]
7815:FreeRTOS-Kernel/tasks.c ****             }
 7271              		.loc 1 7815 17 is_stmt 1 view .LVU2171
 7272              	.LVL518:
7815:FreeRTOS-Kernel/tasks.c ****             }
 7273              		.loc 1 7815 25 is_stmt 0 view .LVU2172
 7274 00e6 0124     		movs	r4, #1
 7275              	.LVL519:
7815:FreeRTOS-Kernel/tasks.c ****             }
 7276              		.loc 1 7815 25 view .LVU2173
 7277 00e8 D0E7     		b	.L510
 7278              	.L517:
 7279 00ea 00BF     		.align	2
 7280              	.L516:
 7281 00ec 00000000 		.word	pxCurrentTCB
 7282              		.cfi_endproc
 7283              	.LFE57:
 7285              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7286              		.align	1
 7287              		.global	xTaskGenericNotify
 7288              		.syntax unified
 7289              		.thumb
 7290              		.thumb_func
 7292              	xTaskGenericNotify:
 7293              	.LVL520:
 7294              	.LFB58:
7837:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 7295              		.loc 1 7837 5 is_stmt 1 view -0
 7296              		.cfi_startproc
 7297              		@ args = 4, pretend = 0, frame = 0
 7298              		@ frame_needed = 0, uses_anonymous_args = 0
7837:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 7299              		.loc 1 7837 5 is_stmt 0 view .LVU2175
ARM GAS  /tmp/ccJw1tyY.s 			page 318


 7300 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7301              	.LCFI56:
 7302              		.cfi_def_cfa_offset 24
 7303              		.cfi_offset 3, -24
 7304              		.cfi_offset 4, -20
 7305              		.cfi_offset 5, -16
 7306              		.cfi_offset 6, -12
 7307              		.cfi_offset 7, -8
 7308              		.cfi_offset 14, -4
7838:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdPASS;
 7309              		.loc 1 7838 9 is_stmt 1 view .LVU2176
7839:FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 7310              		.loc 1 7839 9 view .LVU2177
 7311              	.LVL521:
7840:FreeRTOS-Kernel/tasks.c **** 
 7312              		.loc 1 7840 9 view .LVU2178
7842:FreeRTOS-Kernel/tasks.c **** 
 7313              		.loc 1 7842 120 view .LVU2179
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
 7314              		.loc 1 7844 9 view .LVU2180
 7315 0002 41B1     		cbz	r1, .L519
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
 7316              		.loc 1 7844 9 view .LVU2181
 7317              	.LBB332:
 7318              	.LBI332:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7319              		.loc 2 213 30 view .LVU2182
 7320              	.LBB333:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7321              		.loc 2 215 5 view .LVU2183
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7322              		.loc 2 217 5 view .LVU2184
 7323              		.syntax unified
 7324              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7325 0004 4FF05003 		   mov r3, #80                                              
 7326 0008 83F31188 	   msr basepri, r3                                         
 7327 000c BFF36F8F 	   isb                                                     
 7328 0010 BFF34F8F 	   dsb                                                     
 7329              	
 7330              	@ 0 "" 2
 7331              	.LVL522:
 7332              		.thumb
 7333              		.syntax unified
 7334              	.L520:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7335              		.loc 2 217 5 is_stmt 0 view .LVU2185
 7336              	.LBE333:
 7337              	.LBE332:
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
 7338              		.loc 1 7844 9 is_stmt 1 discriminator 1 view .LVU2186
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
 7339              		.loc 1 7844 9 discriminator 1 view .LVU2187
 7340 0014 FEE7     		b	.L520
 7341              	.LVL523:
 7342              	.L519:
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
 7343              		.loc 1 7844 9 is_stmt 0 discriminator 1 view .LVU2188
ARM GAS  /tmp/ccJw1tyY.s 			page 319


 7344 0016 0446     		mov	r4, r0
 7345 0018 1746     		mov	r7, r2
 7346 001a 1E46     		mov	r6, r3
 7347 001c 0D46     		mov	r5, r1
7844:FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
 7348              		.loc 1 7844 80 is_stmt 1 discriminator 2 view .LVU2189
7845:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
 7349              		.loc 1 7845 9 discriminator 2 view .LVU2190
 7350 001e C0B1     		cbz	r0, .L541
7845:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
 7351              		.loc 1 7845 38 discriminator 2 view .LVU2191
7846:FreeRTOS-Kernel/tasks.c **** 
 7352              		.loc 1 7846 9 discriminator 2 view .LVU2192
 7353              	.LVL524:
7848:FreeRTOS-Kernel/tasks.c ****         {
 7354              		.loc 1 7848 9 discriminator 2 view .LVU2193
 7355 0020 FFF7FEFF 		bl	vPortEnterCritical
 7356              	.LVL525:
7850:FreeRTOS-Kernel/tasks.c ****             {
 7357              		.loc 1 7850 13 discriminator 2 view .LVU2194
7850:FreeRTOS-Kernel/tasks.c ****             {
 7358              		.loc 1 7850 15 is_stmt 0 discriminator 2 view .LVU2195
 7359 0024 069B     		ldr	r3, [sp, #24]
 7360 0026 33B1     		cbz	r3, .L523
7852:FreeRTOS-Kernel/tasks.c ****             }
 7361              		.loc 1 7852 17 is_stmt 1 view .LVU2196
7852:FreeRTOS-Kernel/tasks.c ****             }
 7362              		.loc 1 7852 71 is_stmt 0 view .LVU2197
 7363 0028 05F11203 		add	r3, r5, #18
 7364 002c 04EB8303 		add	r3, r4, r3, lsl #2
 7365 0030 5B68     		ldr	r3, [r3, #4]
7852:FreeRTOS-Kernel/tasks.c ****             }
 7366              		.loc 1 7852 47 view .LVU2198
 7367 0032 069A     		ldr	r2, [sp, #24]
 7368 0034 1360     		str	r3, [r2]
 7369              	.L523:
7855:FreeRTOS-Kernel/tasks.c **** 
 7370              		.loc 1 7855 13 is_stmt 1 view .LVU2199
7855:FreeRTOS-Kernel/tasks.c **** 
 7371              		.loc 1 7855 35 is_stmt 0 view .LVU2200
 7372 0036 6319     		adds	r3, r4, r5
 7373 0038 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 7374 003c D2B2     		uxtb	r2, r2
 7375              	.LVL526:
7857:FreeRTOS-Kernel/tasks.c **** 
 7376              		.loc 1 7857 13 is_stmt 1 view .LVU2201
7857:FreeRTOS-Kernel/tasks.c **** 
 7377              		.loc 1 7857 53 is_stmt 0 view .LVU2202
 7378 003e 0221     		movs	r1, #2
 7379 0040 83F85010 		strb	r1, [r3, #80]
7859:FreeRTOS-Kernel/tasks.c ****             {
 7380              		.loc 1 7859 13 is_stmt 1 view .LVU2203
 7381 0044 042E     		cmp	r6, #4
 7382 0046 31D8     		bhi	.L524
 7383 0048 DFE806F0 		tbb	[pc, r6]
 7384              	.L526:
 7385 004c 13       		.byte	(.L530-.L526)/2
ARM GAS  /tmp/ccJw1tyY.s 			page 320


 7386 004d 0C       		.byte	(.L529-.L526)/2
 7387 004e 1A       		.byte	(.L528-.L526)/2
 7388 004f 22       		.byte	(.L527-.L526)/2
 7389 0050 28       		.byte	(.L525-.L526)/2
 7390              	.LVL527:
 7391 0051 00       		.p2align 1
 7392              	.L541:
7845:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
 7393              		.loc 1 7845 9 view .LVU2204
 7394              	.LBB334:
 7395              	.LBI334:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7396              		.loc 2 213 30 view .LVU2205
 7397              	.LBB335:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7398              		.loc 2 215 5 view .LVU2206
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7399              		.loc 2 217 5 view .LVU2207
 7400              		.syntax unified
 7401              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7402 0052 4FF05003 		   mov r3, #80                                              
 7403 0056 83F31188 	   msr basepri, r3                                         
 7404 005a BFF36F8F 	   isb                                                     
 7405 005e BFF34F8F 	   dsb                                                     
 7406              	
 7407              	@ 0 "" 2
 7408              	.LVL528:
 7409              		.thumb
 7410              		.syntax unified
 7411              	.L522:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7412              		.loc 2 217 5 is_stmt 0 view .LVU2208
 7413              	.LBE335:
 7414              	.LBE334:
7845:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
 7415              		.loc 1 7845 9 is_stmt 1 discriminator 2 view .LVU2209
7845:FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
 7416              		.loc 1 7845 9 discriminator 2 view .LVU2210
 7417 0062 FEE7     		b	.L522
 7418              	.LVL529:
 7419              	.L529:
7862:FreeRTOS-Kernel/tasks.c ****                     break;
 7420              		.loc 1 7862 21 view .LVU2211
7862:FreeRTOS-Kernel/tasks.c ****                     break;
 7421              		.loc 1 7862 43 is_stmt 0 view .LVU2212
 7422 0064 05F11203 		add	r3, r5, #18
 7423 0068 04EB8303 		add	r3, r4, r3, lsl #2
 7424 006c 5968     		ldr	r1, [r3, #4]
7862:FreeRTOS-Kernel/tasks.c ****                     break;
 7425              		.loc 1 7862 63 view .LVU2213
 7426 006e 3943     		orrs	r1, r1, r7
 7427 0070 5960     		str	r1, [r3, #4]
7863:FreeRTOS-Kernel/tasks.c **** 
 7428              		.loc 1 7863 21 is_stmt 1 view .LVU2214
 7429              	.L530:
7903:FreeRTOS-Kernel/tasks.c **** 
 7430              		.loc 1 7903 48 view .LVU2215
ARM GAS  /tmp/ccJw1tyY.s 			page 321


7907:FreeRTOS-Kernel/tasks.c ****             {
 7431              		.loc 1 7907 13 view .LVU2216
7907:FreeRTOS-Kernel/tasks.c ****             {
 7432              		.loc 1 7907 15 is_stmt 0 view .LVU2217
 7433 0072 012A     		cmp	r2, #1
 7434 0074 27D0     		beq	.L542
 7435 0076 0124     		movs	r4, #1
 7436              	.LVL530:
 7437              	.L531:
7937:FreeRTOS-Kernel/tasks.c ****             }
 7438              		.loc 1 7937 41 is_stmt 1 view .LVU2218
7940:FreeRTOS-Kernel/tasks.c **** 
 7439              		.loc 1 7940 9 view .LVU2219
 7440 0078 FFF7FEFF 		bl	vPortExitCritical
 7441              	.LVL531:
7942:FreeRTOS-Kernel/tasks.c **** 
 7442              		.loc 1 7942 50 view .LVU2220
7944:FreeRTOS-Kernel/tasks.c ****     }
 7443              		.loc 1 7944 9 view .LVU2221
7945:FreeRTOS-Kernel/tasks.c **** 
 7444              		.loc 1 7945 5 is_stmt 0 view .LVU2222
 7445 007c 2046     		mov	r0, r4
 7446 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7447              	.LVL532:
 7448              	.L528:
7866:FreeRTOS-Kernel/tasks.c ****                     break;
 7449              		.loc 1 7866 21 is_stmt 1 view .LVU2223
7866:FreeRTOS-Kernel/tasks.c ****                     break;
 7450              		.loc 1 7866 45 is_stmt 0 view .LVU2224
 7451 0080 05F11203 		add	r3, r5, #18
 7452 0084 04EB8303 		add	r3, r4, r3, lsl #2
 7453 0088 5968     		ldr	r1, [r3, #4]
7866:FreeRTOS-Kernel/tasks.c ****                     break;
 7454              		.loc 1 7866 66 view .LVU2225
 7455 008a 0131     		adds	r1, r1, #1
 7456 008c 5960     		str	r1, [r3, #4]
7867:FreeRTOS-Kernel/tasks.c **** 
 7457              		.loc 1 7867 21 is_stmt 1 view .LVU2226
 7458 008e F0E7     		b	.L530
 7459              	.L527:
7870:FreeRTOS-Kernel/tasks.c ****                     break;
 7460              		.loc 1 7870 21 view .LVU2227
7870:FreeRTOS-Kernel/tasks.c ****                     break;
 7461              		.loc 1 7870 63 is_stmt 0 view .LVU2228
 7462 0090 05F11203 		add	r3, r5, #18
 7463 0094 04EB8303 		add	r3, r4, r3, lsl #2
 7464 0098 5F60     		str	r7, [r3, #4]
7871:FreeRTOS-Kernel/tasks.c **** 
 7465              		.loc 1 7871 21 is_stmt 1 view .LVU2229
 7466 009a EAE7     		b	.L530
 7467              	.L525:
7875:FreeRTOS-Kernel/tasks.c ****                     {
 7468              		.loc 1 7875 21 view .LVU2230
7875:FreeRTOS-Kernel/tasks.c ****                     {
 7469              		.loc 1 7875 23 is_stmt 0 view .LVU2231
 7470 009c 022A     		cmp	r2, #2
 7471 009e 60D0     		beq	.L536
ARM GAS  /tmp/ccJw1tyY.s 			page 322


7877:FreeRTOS-Kernel/tasks.c ****                     }
 7472              		.loc 1 7877 25 is_stmt 1 view .LVU2232
7877:FreeRTOS-Kernel/tasks.c ****                     }
 7473              		.loc 1 7877 67 is_stmt 0 view .LVU2233
 7474 00a0 05F11203 		add	r3, r5, #18
 7475 00a4 04EB8303 		add	r3, r4, r3, lsl #2
 7476 00a8 5F60     		str	r7, [r3, #4]
 7477 00aa E2E7     		b	.L530
 7478              	.L524:
7898:FreeRTOS-Kernel/tasks.c **** 
 7479              		.loc 1 7898 21 is_stmt 1 view .LVU2234
 7480 00ac 2F4B     		ldr	r3, .L544
 7481 00ae 1B68     		ldr	r3, [r3]
 7482 00b0 002B     		cmp	r3, #0
 7483 00b2 DED0     		beq	.L530
7898:FreeRTOS-Kernel/tasks.c **** 
 7484              		.loc 1 7898 21 view .LVU2235
 7485              	.LBB336:
 7486              	.LBI336:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7487              		.loc 2 213 30 view .LVU2236
 7488              	.LBB337:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7489              		.loc 2 215 5 view .LVU2237
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7490              		.loc 2 217 5 view .LVU2238
 7491              		.syntax unified
 7492              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7493 00b4 4FF05003 		   mov r3, #80                                              
 7494 00b8 83F31188 	   msr basepri, r3                                         
 7495 00bc BFF36F8F 	   isb                                                     
 7496 00c0 BFF34F8F 	   dsb                                                     
 7497              	
 7498              	@ 0 "" 2
 7499              	.LVL533:
 7500              		.thumb
 7501              		.syntax unified
 7502              	.L532:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7503              		.loc 2 217 5 is_stmt 0 view .LVU2239
 7504              	.LBE337:
 7505              	.LBE336:
7898:FreeRTOS-Kernel/tasks.c **** 
 7506              		.loc 1 7898 21 is_stmt 1 discriminator 3 view .LVU2240
7898:FreeRTOS-Kernel/tasks.c **** 
 7507              		.loc 1 7898 21 discriminator 3 view .LVU2241
 7508 00c4 FEE7     		b	.L532
 7509              	.L542:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7510              		.loc 1 7909 17 view .LVU2242
 7511              	.LBB338:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7512              		.loc 1 7909 17 view .LVU2243
 7513 00c6 6369     		ldr	r3, [r4, #20]
 7514              	.LVL534:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7515              		.loc 1 7909 17 view .LVU2244
ARM GAS  /tmp/ccJw1tyY.s 			page 323


 7516 00c8 A168     		ldr	r1, [r4, #8]
 7517 00ca E268     		ldr	r2, [r4, #12]
 7518              	.LVL535:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7519              		.loc 1 7909 17 is_stmt 0 view .LVU2245
 7520 00cc 8A60     		str	r2, [r1, #8]
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7521              		.loc 1 7909 17 is_stmt 1 view .LVU2246
 7522 00ce A168     		ldr	r1, [r4, #8]
 7523 00d0 5160     		str	r1, [r2, #4]
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7524              		.loc 1 7909 17 view .LVU2247
 7525 00d2 5A68     		ldr	r2, [r3, #4]
 7526 00d4 211D     		adds	r1, r4, #4
 7527 00d6 8A42     		cmp	r2, r1
 7528 00d8 2ED0     		beq	.L543
 7529              	.L533:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7530              		.loc 1 7909 17 discriminator 3 view .LVU2248
 7531 00da 0022     		movs	r2, #0
 7532 00dc 6261     		str	r2, [r4, #20]
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7533              		.loc 1 7909 17 discriminator 3 view .LVU2249
 7534 00de 1A68     		ldr	r2, [r3]
 7535 00e0 013A     		subs	r2, r2, #1
 7536 00e2 1A60     		str	r2, [r3]
 7537              	.LBE338:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7538              		.loc 1 7909 17 discriminator 3 view .LVU2250
7910:FreeRTOS-Kernel/tasks.c **** 
 7539              		.loc 1 7910 17 discriminator 3 view .LVU2251
7910:FreeRTOS-Kernel/tasks.c **** 
 7540              		.loc 1 7910 17 discriminator 3 view .LVU2252
7910:FreeRTOS-Kernel/tasks.c **** 
 7541              		.loc 1 7910 17 discriminator 3 view .LVU2253
 7542 00e4 E36A     		ldr	r3, [r4, #44]
 7543              	.LVL536:
7910:FreeRTOS-Kernel/tasks.c **** 
 7544              		.loc 1 7910 17 is_stmt 0 discriminator 3 view .LVU2254
 7545 00e6 0122     		movs	r2, #1
 7546 00e8 9A40     		lsls	r2, r2, r3
 7547 00ea 2148     		ldr	r0, .L544+4
 7548 00ec 0568     		ldr	r5, [r0]
 7549              	.LVL537:
7910:FreeRTOS-Kernel/tasks.c **** 
 7550              		.loc 1 7910 17 discriminator 3 view .LVU2255
 7551 00ee 2A43     		orrs	r2, r2, r5
 7552 00f0 0260     		str	r2, [r0]
7910:FreeRTOS-Kernel/tasks.c **** 
 7553              		.loc 1 7910 17 is_stmt 1 discriminator 3 view .LVU2256
 7554              	.LBB339:
7910:FreeRTOS-Kernel/tasks.c **** 
 7555              		.loc 1 7910 17 discriminator 3 view .LVU2257
 7556 00f2 204A     		ldr	r2, .L544+8
 7557 00f4 03EB8303 		add	r3, r3, r3, lsl #2
 7558 00f8 02EB8303 		add	r3, r2, r3, lsl #2
 7559 00fc 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccJw1tyY.s 			page 324


 7560              	.LVL538:
7910:FreeRTOS-Kernel/tasks.c **** 
 7561              		.loc 1 7910 17 discriminator 3 view .LVU2258
7910:FreeRTOS-Kernel/tasks.c **** 
 7562              		.loc 1 7910 17 discriminator 3 view .LVU2259
7910:FreeRTOS-Kernel/tasks.c **** 
 7563              		.loc 1 7910 17 discriminator 3 view .LVU2260
 7564 00fe A360     		str	r3, [r4, #8]
7910:FreeRTOS-Kernel/tasks.c **** 
 7565              		.loc 1 7910 17 discriminator 3 view .LVU2261
 7566 0100 9868     		ldr	r0, [r3, #8]
 7567 0102 E060     		str	r0, [r4, #12]
7910:FreeRTOS-Kernel/tasks.c **** 
 7568              		.loc 1 7910 17 discriminator 3 view .LVU2262
 7569 0104 4160     		str	r1, [r0, #4]
7910:FreeRTOS-Kernel/tasks.c **** 
 7570              		.loc 1 7910 17 discriminator 3 view .LVU2263
 7571 0106 9960     		str	r1, [r3, #8]
7910:FreeRTOS-Kernel/tasks.c **** 
 7572              		.loc 1 7910 17 discriminator 3 view .LVU2264
 7573 0108 E36A     		ldr	r3, [r4, #44]
 7574              	.LVL539:
7910:FreeRTOS-Kernel/tasks.c **** 
 7575              		.loc 1 7910 17 is_stmt 0 discriminator 3 view .LVU2265
 7576 010a 03EB8301 		add	r1, r3, r3, lsl #2
 7577 010e 02EB8100 		add	r0, r2, r1, lsl #2
 7578 0112 6061     		str	r0, [r4, #20]
7910:FreeRTOS-Kernel/tasks.c **** 
 7579              		.loc 1 7910 17 is_stmt 1 discriminator 3 view .LVU2266
 7580 0114 52F82110 		ldr	r1, [r2, r1, lsl #2]
 7581 0118 0131     		adds	r1, r1, #1
 7582 011a 03EB8303 		add	r3, r3, r3, lsl #2
 7583 011e 42F82310 		str	r1, [r2, r3, lsl #2]
 7584              	.LBE339:
7910:FreeRTOS-Kernel/tasks.c **** 
 7585              		.loc 1 7910 17 discriminator 3 view .LVU2267
7910:FreeRTOS-Kernel/tasks.c **** 
 7586              		.loc 1 7910 17 discriminator 3 view .LVU2268
7910:FreeRTOS-Kernel/tasks.c **** 
 7587              		.loc 1 7910 17 discriminator 3 view .LVU2269
7913:FreeRTOS-Kernel/tasks.c **** 
 7588              		.loc 1 7913 17 discriminator 3 view .LVU2270
 7589 0122 A36A     		ldr	r3, [r4, #40]
 7590 0124 5BB1     		cbz	r3, .L534
7913:FreeRTOS-Kernel/tasks.c **** 
 7591              		.loc 1 7913 17 view .LVU2271
 7592              	.LBB340:
 7593              	.LBI340:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7594              		.loc 2 213 30 view .LVU2272
 7595              	.LBB341:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7596              		.loc 2 215 5 view .LVU2273
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7597              		.loc 2 217 5 view .LVU2274
 7598              		.syntax unified
 7599              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccJw1tyY.s 			page 325


 7600 0126 4FF05003 		   mov r3, #80                                              
 7601 012a 83F31188 	   msr basepri, r3                                         
 7602 012e BFF36F8F 	   isb                                                     
 7603 0132 BFF34F8F 	   dsb                                                     
 7604              	
 7605              	@ 0 "" 2
 7606              	.LVL540:
 7607              		.thumb
 7608              		.syntax unified
 7609              	.L535:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7610              		.loc 2 217 5 is_stmt 0 view .LVU2275
 7611              	.LBE341:
 7612              	.LBE340:
7913:FreeRTOS-Kernel/tasks.c **** 
 7613              		.loc 1 7913 17 is_stmt 1 discriminator 4 view .LVU2276
7913:FreeRTOS-Kernel/tasks.c **** 
 7614              		.loc 1 7913 17 discriminator 4 view .LVU2277
 7615 0136 FEE7     		b	.L535
 7616              	.LVL541:
 7617              	.L543:
 7618              	.LBB342:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7619              		.loc 1 7909 17 discriminator 1 view .LVU2278
 7620 0138 E268     		ldr	r2, [r4, #12]
 7621 013a 5A60     		str	r2, [r3, #4]
 7622 013c CDE7     		b	.L533
 7623              	.LVL542:
 7624              	.L534:
7909:FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7625              		.loc 1 7909 17 is_stmt 0 discriminator 1 view .LVU2279
 7626              	.LBE342:
7913:FreeRTOS-Kernel/tasks.c **** 
 7627              		.loc 1 7913 94 is_stmt 1 discriminator 2 view .LVU2280
7933:FreeRTOS-Kernel/tasks.c ****             }
 7628              		.loc 1 7933 17 discriminator 2 view .LVU2281
7933:FreeRTOS-Kernel/tasks.c ****             }
 7629              		.loc 1 7933 17 discriminator 2 view .LVU2282
 7630 013e 0E4B     		ldr	r3, .L544+12
 7631 0140 1B68     		ldr	r3, [r3]
 7632 0142 DA6A     		ldr	r2, [r3, #44]
 7633 0144 E36A     		ldr	r3, [r4, #44]
 7634 0146 9A42     		cmp	r2, r3
 7635 0148 0DD2     		bcs	.L538
7933:FreeRTOS-Kernel/tasks.c ****             }
 7636              		.loc 1 7933 17 discriminator 1 view .LVU2283
 7637 014a 4FF0E023 		mov	r3, #-536813568
 7638 014e 4FF08052 		mov	r2, #268435456
 7639 0152 C3F8042D 		str	r2, [r3, #3332]
 7640              	.LVL543:
7933:FreeRTOS-Kernel/tasks.c ****             }
 7641              		.loc 1 7933 17 discriminator 1 view .LVU2284
 7642              		.syntax unified
 7643              	@ 7933 "FreeRTOS-Kernel/tasks.c" 1
 7644 0156 BFF34F8F 		dsb
 7645              	@ 0 "" 2
7933:FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  /tmp/ccJw1tyY.s 			page 326


 7646              		.loc 1 7933 17 discriminator 1 view .LVU2285
 7647              	@ 7933 "FreeRTOS-Kernel/tasks.c" 1
 7648 015a BFF36F8F 		isb
 7649              	@ 0 "" 2
7933:FreeRTOS-Kernel/tasks.c ****             }
 7650              		.loc 1 7933 17 discriminator 1 view .LVU2286
 7651              		.thumb
 7652              		.syntax unified
 7653 015e 0124     		movs	r4, #1
 7654              	.LVL544:
7933:FreeRTOS-Kernel/tasks.c ****             }
 7655              		.loc 1 7933 17 is_stmt 0 discriminator 1 view .LVU2287
 7656 0160 8AE7     		b	.L531
 7657              	.LVL545:
 7658              	.L536:
7882:FreeRTOS-Kernel/tasks.c ****                     }
 7659              		.loc 1 7882 33 view .LVU2288
 7660 0162 0024     		movs	r4, #0
 7661              	.LVL546:
7882:FreeRTOS-Kernel/tasks.c ****                     }
 7662              		.loc 1 7882 33 view .LVU2289
 7663 0164 88E7     		b	.L531
 7664              	.LVL547:
 7665              	.L538:
7882:FreeRTOS-Kernel/tasks.c ****                     }
 7666              		.loc 1 7882 33 view .LVU2290
 7667 0166 0124     		movs	r4, #1
 7668              	.LVL548:
7882:FreeRTOS-Kernel/tasks.c ****                     }
 7669              		.loc 1 7882 33 view .LVU2291
 7670 0168 86E7     		b	.L531
 7671              	.L545:
 7672 016a 00BF     		.align	2
 7673              	.L544:
 7674 016c 00000000 		.word	xTickCount
 7675 0170 00000000 		.word	uxTopReadyPriority
 7676 0174 00000000 		.word	pxReadyTasksLists
 7677 0178 00000000 		.word	pxCurrentTCB
 7678              		.cfi_endproc
 7679              	.LFE58:
 7681              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7682              		.align	1
 7683              		.global	xTaskGenericNotifyFromISR
 7684              		.syntax unified
 7685              		.thumb
 7686              		.thumb_func
 7688              	xTaskGenericNotifyFromISR:
 7689              	.LVL549:
 7690              	.LFB59:
7958:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 7691              		.loc 1 7958 5 is_stmt 1 view -0
 7692              		.cfi_startproc
 7693              		@ args = 8, pretend = 0, frame = 0
 7694              		@ frame_needed = 0, uses_anonymous_args = 0
7958:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 7695              		.loc 1 7958 5 is_stmt 0 view .LVU2293
 7696 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccJw1tyY.s 			page 327


 7697              	.LCFI57:
 7698              		.cfi_def_cfa_offset 24
 7699              		.cfi_offset 3, -24
 7700              		.cfi_offset 4, -20
 7701              		.cfi_offset 5, -16
 7702              		.cfi_offset 6, -12
 7703              		.cfi_offset 7, -8
 7704              		.cfi_offset 14, -4
7959:FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 7705              		.loc 1 7959 9 is_stmt 1 view .LVU2294
7960:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdPASS;
 7706              		.loc 1 7960 9 view .LVU2295
7961:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7707              		.loc 1 7961 9 view .LVU2296
 7708              	.LVL550:
7962:FreeRTOS-Kernel/tasks.c **** 
 7709              		.loc 1 7962 9 view .LVU2297
7964:FreeRTOS-Kernel/tasks.c **** 
 7710              		.loc 1 7964 154 view .LVU2298
7966:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7711              		.loc 1 7966 9 view .LVU2299
 7712 0002 68B1     		cbz	r0, .L572
 7713 0004 0C46     		mov	r4, r1
 7714 0006 1746     		mov	r7, r2
 7715 0008 1D46     		mov	r5, r3
 7716 000a 0646     		mov	r6, r0
7966:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7717              		.loc 1 7966 38 discriminator 2 view .LVU2300
7967:FreeRTOS-Kernel/tasks.c **** 
 7718              		.loc 1 7967 9 discriminator 2 view .LVU2301
 7719 000c 89B1     		cbz	r1, .L549
7967:FreeRTOS-Kernel/tasks.c **** 
 7720              		.loc 1 7967 9 view .LVU2302
 7721              	.LBB343:
 7722              	.LBI343:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7723              		.loc 2 213 30 view .LVU2303
 7724              	.LBB344:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7725              		.loc 2 215 5 view .LVU2304
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7726              		.loc 2 217 5 view .LVU2305
 7727              		.syntax unified
 7728              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7729 000e 4FF05003 		   mov r3, #80                                              
 7730 0012 83F31188 	   msr basepri, r3                                         
 7731 0016 BFF36F8F 	   isb                                                     
 7732 001a BFF34F8F 	   dsb                                                     
 7733              	
 7734              	@ 0 "" 2
 7735              	.LVL551:
 7736              		.thumb
 7737              		.syntax unified
 7738              	.L550:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7739              		.loc 2 217 5 is_stmt 0 view .LVU2306
 7740              	.LBE344:
ARM GAS  /tmp/ccJw1tyY.s 			page 328


 7741              	.LBE343:
7967:FreeRTOS-Kernel/tasks.c **** 
 7742              		.loc 1 7967 9 is_stmt 1 discriminator 2 view .LVU2307
7967:FreeRTOS-Kernel/tasks.c **** 
 7743              		.loc 1 7967 9 discriminator 2 view .LVU2308
 7744 001e FEE7     		b	.L550
 7745              	.LVL552:
 7746              	.L572:
7966:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7747              		.loc 1 7966 9 view .LVU2309
 7748              	.LBB345:
 7749              	.LBI345:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7750              		.loc 2 213 30 view .LVU2310
 7751              	.LBB346:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7752              		.loc 2 215 5 view .LVU2311
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7753              		.loc 2 217 5 view .LVU2312
 7754              		.syntax unified
 7755              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7756 0020 4FF05003 		   mov r3, #80                                              
 7757 0024 83F31188 	   msr basepri, r3                                         
 7758 0028 BFF36F8F 	   isb                                                     
 7759 002c BFF34F8F 	   dsb                                                     
 7760              	
 7761              	@ 0 "" 2
 7762              	.LVL553:
 7763              		.thumb
 7764              		.syntax unified
 7765              	.L548:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7766              		.loc 2 217 5 is_stmt 0 view .LVU2313
 7767              	.LBE346:
 7768              	.LBE345:
7966:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7769              		.loc 1 7966 9 is_stmt 1 discriminator 1 view .LVU2314
7966:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7770              		.loc 1 7966 9 discriminator 1 view .LVU2315
 7771 0030 FEE7     		b	.L548
 7772              	.LVL554:
 7773              	.L549:
7967:FreeRTOS-Kernel/tasks.c **** 
 7774              		.loc 1 7967 80 discriminator 2 view .LVU2316
7985:FreeRTOS-Kernel/tasks.c **** 
 7775              		.loc 1 7985 9 discriminator 2 view .LVU2317
 7776 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7777              	.LVL555:
7987:FreeRTOS-Kernel/tasks.c **** 
 7778              		.loc 1 7987 9 discriminator 2 view .LVU2318
7992:FreeRTOS-Kernel/tasks.c ****         {
 7779              		.loc 1 7992 9 discriminator 2 view .LVU2319
 7780              	.LBB347:
 7781              	.LBI347:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7782              		.loc 2 229 34 discriminator 2 view .LVU2320
 7783              	.LBB348:
ARM GAS  /tmp/ccJw1tyY.s 			page 329


 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7784              		.loc 2 231 5 discriminator 2 view .LVU2321
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7785              		.loc 2 233 5 discriminator 2 view .LVU2322
 7786              		.syntax unified
 7787              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7788 0036 EFF31181 		   mrs r1, basepri                                         
 7789 003a 4FF05003 	   mov r3, #80                                              
 7790 003e 83F31188 	   msr basepri, r3                                         
 7791 0042 BFF36F8F 	   isb                                                     
 7792 0046 BFF34F8F 	   dsb                                                     
 7793              	
 7794              	@ 0 "" 2
 7795              	.LVL556:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 7796              		.loc 2 245 5 discriminator 2 view .LVU2323
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 7797              		.loc 2 245 5 is_stmt 0 discriminator 2 view .LVU2324
 7798              		.thumb
 7799              		.syntax unified
 7800              	.LBE348:
 7801              	.LBE347:
7994:FreeRTOS-Kernel/tasks.c ****             {
 7802              		.loc 1 7994 13 is_stmt 1 discriminator 2 view .LVU2325
7994:FreeRTOS-Kernel/tasks.c ****             {
 7803              		.loc 1 7994 15 is_stmt 0 discriminator 2 view .LVU2326
 7804 004a 069B     		ldr	r3, [sp, #24]
 7805 004c 33B1     		cbz	r3, .L551
7996:FreeRTOS-Kernel/tasks.c ****             }
 7806              		.loc 1 7996 17 is_stmt 1 view .LVU2327
7996:FreeRTOS-Kernel/tasks.c ****             }
 7807              		.loc 1 7996 71 is_stmt 0 view .LVU2328
 7808 004e 04F11203 		add	r3, r4, #18
 7809 0052 06EB8303 		add	r3, r6, r3, lsl #2
 7810 0056 5B68     		ldr	r3, [r3, #4]
7996:FreeRTOS-Kernel/tasks.c ****             }
 7811              		.loc 1 7996 47 view .LVU2329
 7812 0058 069A     		ldr	r2, [sp, #24]
 7813 005a 1360     		str	r3, [r2]
 7814              	.L551:
7999:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7815              		.loc 1 7999 13 is_stmt 1 view .LVU2330
7999:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7816              		.loc 1 7999 35 is_stmt 0 view .LVU2331
 7817 005c 3319     		adds	r3, r6, r4
 7818 005e 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 7819 0062 D2B2     		uxtb	r2, r2
 7820              	.LVL557:
8000:FreeRTOS-Kernel/tasks.c **** 
 7821              		.loc 1 8000 13 is_stmt 1 view .LVU2332
8000:FreeRTOS-Kernel/tasks.c **** 
 7822              		.loc 1 8000 53 is_stmt 0 view .LVU2333
 7823 0064 0220     		movs	r0, #2
 7824 0066 83F85000 		strb	r0, [r3, #80]
8002:FreeRTOS-Kernel/tasks.c ****             {
 7825              		.loc 1 8002 13 is_stmt 1 view .LVU2334
 7826 006a 042D     		cmp	r5, #4
ARM GAS  /tmp/ccJw1tyY.s 			page 330


 7827 006c 27D8     		bhi	.L552
 7828 006e DFE805F0 		tbb	[pc, r5]
 7829              	.L554:
 7830 0072 0A       		.byte	(.L558-.L554)/2
 7831 0073 03       		.byte	(.L557-.L554)/2
 7832 0074 10       		.byte	(.L556-.L554)/2
 7833 0075 18       		.byte	(.L555-.L554)/2
 7834 0076 1E       		.byte	(.L553-.L554)/2
 7835 0077 00       		.p2align 1
 7836              	.L557:
8005:FreeRTOS-Kernel/tasks.c ****                     break;
 7837              		.loc 1 8005 21 view .LVU2335
8005:FreeRTOS-Kernel/tasks.c ****                     break;
 7838              		.loc 1 8005 43 is_stmt 0 view .LVU2336
 7839 0078 04F11203 		add	r3, r4, #18
 7840 007c 06EB8303 		add	r3, r6, r3, lsl #2
 7841 0080 5868     		ldr	r0, [r3, #4]
8005:FreeRTOS-Kernel/tasks.c ****                     break;
 7842              		.loc 1 8005 63 view .LVU2337
 7843 0082 3843     		orrs	r0, r0, r7
 7844 0084 5860     		str	r0, [r3, #4]
8006:FreeRTOS-Kernel/tasks.c **** 
 7845              		.loc 1 8006 21 is_stmt 1 view .LVU2338
 7846              	.L558:
8045:FreeRTOS-Kernel/tasks.c **** 
 7847              		.loc 1 8045 57 view .LVU2339
8049:FreeRTOS-Kernel/tasks.c ****             {
 7848              		.loc 1 8049 13 view .LVU2340
8049:FreeRTOS-Kernel/tasks.c ****             {
 7849              		.loc 1 8049 15 is_stmt 0 view .LVU2341
 7850 0086 012A     		cmp	r2, #1
 7851 0088 26D0     		beq	.L573
 7852 008a 0120     		movs	r0, #1
 7853              	.LVL558:
 7854              	.L559:
8084:FreeRTOS-Kernel/tasks.c ****                     }
 7855              		.loc 1 8084 49 is_stmt 1 view .LVU2342
8106:FreeRTOS-Kernel/tasks.c **** 
 7856              		.loc 1 8106 9 view .LVU2343
 7857              	.LBB349:
 7858              	.LBI349:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7859              		.loc 2 249 30 view .LVU2344
 7860              	.LBB350:
 7861              		.loc 2 251 5 view .LVU2345
 7862              		.syntax unified
 7863              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7864 008c 81F31188 		   msr basepri, r1 
 7865              	@ 0 "" 2
 7866              		.thumb
 7867              		.syntax unified
 7868              	.LBE350:
 7869              	.LBE349:
8108:FreeRTOS-Kernel/tasks.c **** 
 7870              		.loc 1 8108 57 view .LVU2346
8110:FreeRTOS-Kernel/tasks.c ****     }
 7871              		.loc 1 8110 9 view .LVU2347
ARM GAS  /tmp/ccJw1tyY.s 			page 331


8111:FreeRTOS-Kernel/tasks.c **** 
 7872              		.loc 1 8111 5 is_stmt 0 view .LVU2348
 7873 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7874              	.LVL559:
 7875              	.L556:
8009:FreeRTOS-Kernel/tasks.c ****                     break;
 7876              		.loc 1 8009 21 is_stmt 1 view .LVU2349
8009:FreeRTOS-Kernel/tasks.c ****                     break;
 7877              		.loc 1 8009 45 is_stmt 0 view .LVU2350
 7878 0092 04F11203 		add	r3, r4, #18
 7879 0096 06EB8303 		add	r3, r6, r3, lsl #2
 7880 009a 5868     		ldr	r0, [r3, #4]
8009:FreeRTOS-Kernel/tasks.c ****                     break;
 7881              		.loc 1 8009 66 view .LVU2351
 7882 009c 0130     		adds	r0, r0, #1
 7883 009e 5860     		str	r0, [r3, #4]
8010:FreeRTOS-Kernel/tasks.c **** 
 7884              		.loc 1 8010 21 is_stmt 1 view .LVU2352
 7885 00a0 F1E7     		b	.L558
 7886              	.L555:
8013:FreeRTOS-Kernel/tasks.c ****                     break;
 7887              		.loc 1 8013 21 view .LVU2353
8013:FreeRTOS-Kernel/tasks.c ****                     break;
 7888              		.loc 1 8013 63 is_stmt 0 view .LVU2354
 7889 00a2 04F11203 		add	r3, r4, #18
 7890 00a6 06EB8303 		add	r3, r6, r3, lsl #2
 7891 00aa 5F60     		str	r7, [r3, #4]
8014:FreeRTOS-Kernel/tasks.c **** 
 7892              		.loc 1 8014 21 is_stmt 1 view .LVU2355
 7893 00ac EBE7     		b	.L558
 7894              	.L553:
8018:FreeRTOS-Kernel/tasks.c ****                     {
 7895              		.loc 1 8018 21 view .LVU2356
8018:FreeRTOS-Kernel/tasks.c ****                     {
 7896              		.loc 1 8018 23 is_stmt 0 view .LVU2357
 7897 00ae 022A     		cmp	r2, #2
 7898 00b0 6FD0     		beq	.L567
8020:FreeRTOS-Kernel/tasks.c ****                     }
 7899              		.loc 1 8020 25 is_stmt 1 view .LVU2358
8020:FreeRTOS-Kernel/tasks.c ****                     }
 7900              		.loc 1 8020 67 is_stmt 0 view .LVU2359
 7901 00b2 04F11203 		add	r3, r4, #18
 7902 00b6 06EB8303 		add	r3, r6, r3, lsl #2
 7903 00ba 5F60     		str	r7, [r3, #4]
 7904 00bc E3E7     		b	.L558
 7905              	.L552:
8041:FreeRTOS-Kernel/tasks.c ****                     break;
 7906              		.loc 1 8041 21 is_stmt 1 view .LVU2360
 7907 00be 374B     		ldr	r3, .L575
 7908 00c0 1B68     		ldr	r3, [r3]
 7909 00c2 002B     		cmp	r3, #0
 7910 00c4 DFD0     		beq	.L558
8041:FreeRTOS-Kernel/tasks.c ****                     break;
 7911              		.loc 1 8041 21 view .LVU2361
 7912              	.LBB351:
 7913              	.LBI351:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /tmp/ccJw1tyY.s 			page 332


 7914              		.loc 2 213 30 view .LVU2362
 7915              	.LBB352:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7916              		.loc 2 215 5 view .LVU2363
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7917              		.loc 2 217 5 view .LVU2364
 7918              		.syntax unified
 7919              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7920 00c6 4FF05003 		   mov r3, #80                                              
 7921 00ca 83F31188 	   msr basepri, r3                                         
 7922 00ce BFF36F8F 	   isb                                                     
 7923 00d2 BFF34F8F 	   dsb                                                     
 7924              	
 7925              	@ 0 "" 2
 7926              	.LVL560:
 7927              		.thumb
 7928              		.syntax unified
 7929              	.L560:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7930              		.loc 2 217 5 is_stmt 0 view .LVU2365
 7931              	.LBE352:
 7932              	.LBE351:
8041:FreeRTOS-Kernel/tasks.c ****                     break;
 7933              		.loc 1 8041 21 is_stmt 1 discriminator 3 view .LVU2366
8041:FreeRTOS-Kernel/tasks.c ****                     break;
 7934              		.loc 1 8041 21 discriminator 3 view .LVU2367
 7935 00d6 FEE7     		b	.L560
 7936              	.L573:
8052:FreeRTOS-Kernel/tasks.c **** 
 7937              		.loc 1 8052 17 view .LVU2368
 7938 00d8 B36A     		ldr	r3, [r6, #40]
 7939 00da 43B1     		cbz	r3, .L561
8052:FreeRTOS-Kernel/tasks.c **** 
 7940              		.loc 1 8052 17 view .LVU2369
 7941              	.LBB353:
 7942              	.LBI353:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 7943              		.loc 2 213 30 view .LVU2370
 7944              	.LBB354:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 7945              		.loc 2 215 5 view .LVU2371
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7946              		.loc 2 217 5 view .LVU2372
 7947              		.syntax unified
 7948              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 7949 00dc 4FF05003 		   mov r3, #80                                              
 7950 00e0 83F31188 	   msr basepri, r3                                         
 7951 00e4 BFF36F8F 	   isb                                                     
 7952 00e8 BFF34F8F 	   dsb                                                     
 7953              	
 7954              	@ 0 "" 2
 7955              	.LVL561:
 7956              		.thumb
 7957              		.syntax unified
 7958              	.L562:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 7959              		.loc 2 217 5 is_stmt 0 view .LVU2373
ARM GAS  /tmp/ccJw1tyY.s 			page 333


 7960              	.LBE354:
 7961              	.LBE353:
8052:FreeRTOS-Kernel/tasks.c **** 
 7962              		.loc 1 8052 17 is_stmt 1 discriminator 4 view .LVU2374
8052:FreeRTOS-Kernel/tasks.c **** 
 7963              		.loc 1 8052 17 discriminator 4 view .LVU2375
 7964 00ec FEE7     		b	.L562
 7965              	.L561:
8052:FreeRTOS-Kernel/tasks.c **** 
 7966              		.loc 1 8052 94 discriminator 2 view .LVU2376
8054:FreeRTOS-Kernel/tasks.c ****                 {
 7967              		.loc 1 8054 17 discriminator 2 view .LVU2377
8054:FreeRTOS-Kernel/tasks.c ****                 {
 7968              		.loc 1 8054 42 is_stmt 0 discriminator 2 view .LVU2378
 7969 00ee 2C4B     		ldr	r3, .L575+4
 7970 00f0 1B68     		ldr	r3, [r3]
8054:FreeRTOS-Kernel/tasks.c ****                 {
 7971              		.loc 1 8054 19 discriminator 2 view .LVU2379
 7972 00f2 002B     		cmp	r3, #0
 7973 00f4 3FD1     		bne	.L563
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7974              		.loc 1 8056 21 is_stmt 1 view .LVU2380
 7975              	.LBB355:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7976              		.loc 1 8056 21 view .LVU2381
 7977 00f6 7369     		ldr	r3, [r6, #20]
 7978              	.LVL562:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7979              		.loc 1 8056 21 view .LVU2382
 7980 00f8 B068     		ldr	r0, [r6, #8]
 7981 00fa F268     		ldr	r2, [r6, #12]
 7982              	.LVL563:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7983              		.loc 1 8056 21 is_stmt 0 view .LVU2383
 7984 00fc 8260     		str	r2, [r0, #8]
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7985              		.loc 1 8056 21 is_stmt 1 view .LVU2384
 7986 00fe B068     		ldr	r0, [r6, #8]
 7987 0100 5060     		str	r0, [r2, #4]
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7988              		.loc 1 8056 21 view .LVU2385
 7989 0102 5A68     		ldr	r2, [r3, #4]
 7990 0104 301D     		adds	r0, r6, #4
 7991 0106 8242     		cmp	r2, r0
 7992 0108 32D0     		beq	.L574
 7993              	.L564:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7994              		.loc 1 8056 21 discriminator 3 view .LVU2386
 7995 010a 0022     		movs	r2, #0
 7996 010c 7261     		str	r2, [r6, #20]
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7997              		.loc 1 8056 21 discriminator 3 view .LVU2387
 7998 010e 1A68     		ldr	r2, [r3]
 7999 0110 013A     		subs	r2, r2, #1
 8000 0112 1A60     		str	r2, [r3]
 8001              	.LBE355:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccJw1tyY.s 			page 334


 8002              		.loc 1 8056 21 discriminator 3 view .LVU2388
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8003              		.loc 1 8057 21 discriminator 3 view .LVU2389
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8004              		.loc 1 8057 21 discriminator 3 view .LVU2390
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8005              		.loc 1 8057 21 discriminator 3 view .LVU2391
 8006 0114 F36A     		ldr	r3, [r6, #44]
 8007              	.LVL564:
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8008              		.loc 1 8057 21 is_stmt 0 discriminator 3 view .LVU2392
 8009 0116 0122     		movs	r2, #1
 8010 0118 9A40     		lsls	r2, r2, r3
 8011 011a 224C     		ldr	r4, .L575+8
 8012              	.LVL565:
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8013              		.loc 1 8057 21 discriminator 3 view .LVU2393
 8014 011c 2568     		ldr	r5, [r4]
 8015 011e 2A43     		orrs	r2, r2, r5
 8016 0120 2260     		str	r2, [r4]
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8017              		.loc 1 8057 21 is_stmt 1 discriminator 3 view .LVU2394
 8018              	.LBB356:
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8019              		.loc 1 8057 21 discriminator 3 view .LVU2395
 8020 0122 214A     		ldr	r2, .L575+12
 8021 0124 03EB8303 		add	r3, r3, r3, lsl #2
 8022 0128 02EB8303 		add	r3, r2, r3, lsl #2
 8023 012c 5B68     		ldr	r3, [r3, #4]
 8024              	.LVL566:
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8025              		.loc 1 8057 21 discriminator 3 view .LVU2396
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8026              		.loc 1 8057 21 discriminator 3 view .LVU2397
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8027              		.loc 1 8057 21 discriminator 3 view .LVU2398
 8028 012e B360     		str	r3, [r6, #8]
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8029              		.loc 1 8057 21 discriminator 3 view .LVU2399
 8030 0130 9C68     		ldr	r4, [r3, #8]
 8031 0132 F460     		str	r4, [r6, #12]
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8032              		.loc 1 8057 21 discriminator 3 view .LVU2400
 8033 0134 6060     		str	r0, [r4, #4]
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8034              		.loc 1 8057 21 discriminator 3 view .LVU2401
 8035 0136 9860     		str	r0, [r3, #8]
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8036              		.loc 1 8057 21 discriminator 3 view .LVU2402
 8037 0138 F36A     		ldr	r3, [r6, #44]
 8038              	.LVL567:
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8039              		.loc 1 8057 21 is_stmt 0 discriminator 3 view .LVU2403
 8040 013a 03EB8300 		add	r0, r3, r3, lsl #2
 8041 013e 02EB8004 		add	r4, r2, r0, lsl #2
 8042 0142 7461     		str	r4, [r6, #20]
8057:FreeRTOS-Kernel/tasks.c ****                 }
ARM GAS  /tmp/ccJw1tyY.s 			page 335


 8043              		.loc 1 8057 21 is_stmt 1 discriminator 3 view .LVU2404
 8044 0144 52F82000 		ldr	r0, [r2, r0, lsl #2]
 8045 0148 0130     		adds	r0, r0, #1
 8046 014a 03EB8303 		add	r3, r3, r3, lsl #2
 8047 014e 42F82300 		str	r0, [r2, r3, lsl #2]
 8048              	.LBE356:
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8049              		.loc 1 8057 21 discriminator 3 view .LVU2405
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8050              		.loc 1 8057 21 discriminator 3 view .LVU2406
8057:FreeRTOS-Kernel/tasks.c ****                 }
 8051              		.loc 1 8057 21 discriminator 3 view .LVU2407
 8052              	.LVL568:
 8053              	.L565:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8054              		.loc 1 8063 21 discriminator 1 view .LVU2408
8068:FreeRTOS-Kernel/tasks.c ****                     {
 8055              		.loc 1 8068 21 discriminator 1 view .LVU2409
8068:FreeRTOS-Kernel/tasks.c ****                     {
 8056              		.loc 1 8068 30 is_stmt 0 discriminator 1 view .LVU2410
 8057 0152 F26A     		ldr	r2, [r6, #44]
8068:FreeRTOS-Kernel/tasks.c ****                     {
 8058              		.loc 1 8068 57 discriminator 1 view .LVU2411
 8059 0154 154B     		ldr	r3, .L575+16
 8060 0156 1B68     		ldr	r3, [r3]
 8061 0158 DB6A     		ldr	r3, [r3, #44]
8068:FreeRTOS-Kernel/tasks.c ****                     {
 8062              		.loc 1 8068 23 discriminator 1 view .LVU2412
 8063 015a 9A42     		cmp	r2, r3
 8064 015c 1BD9     		bls	.L569
8072:FreeRTOS-Kernel/tasks.c ****                         {
 8065              		.loc 1 8072 25 is_stmt 1 view .LVU2413
8072:FreeRTOS-Kernel/tasks.c ****                         {
 8066              		.loc 1 8072 27 is_stmt 0 view .LVU2414
 8067 015e 079B     		ldr	r3, [sp, #28]
 8068 0160 13B1     		cbz	r3, .L566
8074:FreeRTOS-Kernel/tasks.c ****                         }
 8069              		.loc 1 8074 29 is_stmt 1 view .LVU2415
8074:FreeRTOS-Kernel/tasks.c ****                         }
 8070              		.loc 1 8074 56 is_stmt 0 view .LVU2416
 8071 0162 0123     		movs	r3, #1
 8072 0164 079A     		ldr	r2, [sp, #28]
 8073 0166 1360     		str	r3, [r2]
 8074              	.L566:
8080:FreeRTOS-Kernel/tasks.c ****                     }
 8075              		.loc 1 8080 25 is_stmt 1 view .LVU2417
8080:FreeRTOS-Kernel/tasks.c ****                     }
 8076              		.loc 1 8080 45 is_stmt 0 view .LVU2418
 8077 0168 0120     		movs	r0, #1
 8078 016a 114B     		ldr	r3, .L575+20
 8079 016c 1860     		str	r0, [r3]
 8080 016e 8DE7     		b	.L559
 8081              	.LVL569:
 8082              	.L574:
 8083              	.LBB357:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8084              		.loc 1 8056 21 is_stmt 1 discriminator 1 view .LVU2419
ARM GAS  /tmp/ccJw1tyY.s 			page 336


 8085 0170 F268     		ldr	r2, [r6, #12]
 8086 0172 5A60     		str	r2, [r3, #4]
 8087 0174 C9E7     		b	.L564
 8088              	.LVL570:
 8089              	.L563:
8056:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8090              		.loc 1 8056 21 is_stmt 0 discriminator 1 view .LVU2420
 8091              	.LBE357:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8092              		.loc 1 8063 21 is_stmt 1 view .LVU2421
 8093              	.LBB358:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8094              		.loc 1 8063 21 view .LVU2422
 8095 0176 0F4B     		ldr	r3, .L575+24
 8096 0178 5A68     		ldr	r2, [r3, #4]
 8097              	.LVL571:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8098              		.loc 1 8063 21 view .LVU2423
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8099              		.loc 1 8063 21 view .LVU2424
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8100              		.loc 1 8063 21 view .LVU2425
 8101 017a F261     		str	r2, [r6, #28]
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8102              		.loc 1 8063 21 view .LVU2426
 8103 017c 9468     		ldr	r4, [r2, #8]
 8104              	.LVL572:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8105              		.loc 1 8063 21 is_stmt 0 view .LVU2427
 8106 017e 3462     		str	r4, [r6, #32]
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8107              		.loc 1 8063 21 is_stmt 1 view .LVU2428
 8108 0180 06F11800 		add	r0, r6, #24
 8109 0184 6060     		str	r0, [r4, #4]
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8110              		.loc 1 8063 21 view .LVU2429
 8111 0186 9060     		str	r0, [r2, #8]
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8112              		.loc 1 8063 21 view .LVU2430
 8113 0188 B362     		str	r3, [r6, #40]
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8114              		.loc 1 8063 21 view .LVU2431
 8115 018a 1A68     		ldr	r2, [r3]
 8116              	.LVL573:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8117              		.loc 1 8063 21 is_stmt 0 view .LVU2432
 8118 018c 0132     		adds	r2, r2, #1
 8119 018e 1A60     		str	r2, [r3]
 8120 0190 DFE7     		b	.L565
 8121              	.LVL574:
 8122              	.L567:
8063:FreeRTOS-Kernel/tasks.c ****                 }
 8123              		.loc 1 8063 21 view .LVU2433
 8124              	.LBE358:
8025:FreeRTOS-Kernel/tasks.c ****                     }
 8125              		.loc 1 8025 33 view .LVU2434
 8126 0192 0020     		movs	r0, #0
ARM GAS  /tmp/ccJw1tyY.s 			page 337


 8127 0194 7AE7     		b	.L559
 8128              	.LVL575:
 8129              	.L569:
8025:FreeRTOS-Kernel/tasks.c ****                     }
 8130              		.loc 1 8025 33 view .LVU2435
 8131 0196 0120     		movs	r0, #1
 8132 0198 78E7     		b	.L559
 8133              	.L576:
 8134 019a 00BF     		.align	2
 8135              	.L575:
 8136 019c 00000000 		.word	xTickCount
 8137 01a0 00000000 		.word	uxSchedulerSuspended
 8138 01a4 00000000 		.word	uxTopReadyPriority
 8139 01a8 00000000 		.word	pxReadyTasksLists
 8140 01ac 00000000 		.word	pxCurrentTCB
 8141 01b0 00000000 		.word	xYieldPendings
 8142 01b4 00000000 		.word	xPendingReadyList
 8143              		.cfi_endproc
 8144              	.LFE59:
 8146              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 8147              		.align	1
 8148              		.global	vTaskGenericNotifyGiveFromISR
 8149              		.syntax unified
 8150              		.thumb
 8151              		.thumb_func
 8153              	vTaskGenericNotifyGiveFromISR:
 8154              	.LVL576:
 8155              	.LFB60:
8121:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 8156              		.loc 1 8121 5 is_stmt 1 view -0
 8157              		.cfi_startproc
 8158              		@ args = 0, pretend = 0, frame = 0
 8159              		@ frame_needed = 0, uses_anonymous_args = 0
8121:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 8160              		.loc 1 8121 5 is_stmt 0 view .LVU2437
 8161 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 8162              	.LCFI58:
 8163              		.cfi_def_cfa_offset 24
 8164              		.cfi_offset 3, -24
 8165              		.cfi_offset 4, -20
 8166              		.cfi_offset 5, -16
 8167              		.cfi_offset 6, -12
 8168              		.cfi_offset 7, -8
 8169              		.cfi_offset 14, -4
8122:FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 8170              		.loc 1 8122 9 is_stmt 1 view .LVU2438
8123:FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 8171              		.loc 1 8123 9 view .LVU2439
8124:FreeRTOS-Kernel/tasks.c **** 
 8172              		.loc 1 8124 9 view .LVU2440
8126:FreeRTOS-Kernel/tasks.c **** 
 8173              		.loc 1 8126 110 view .LVU2441
8128:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8174              		.loc 1 8128 9 view .LVU2442
 8175 0002 60B1     		cbz	r0, .L590
 8176 0004 0C46     		mov	r4, r1
 8177 0006 1546     		mov	r5, r2
ARM GAS  /tmp/ccJw1tyY.s 			page 338


 8178 0008 0646     		mov	r6, r0
8128:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8179              		.loc 1 8128 38 discriminator 2 view .LVU2443
8129:FreeRTOS-Kernel/tasks.c **** 
 8180              		.loc 1 8129 9 discriminator 2 view .LVU2444
 8181 000a 89B1     		cbz	r1, .L580
8129:FreeRTOS-Kernel/tasks.c **** 
 8182              		.loc 1 8129 9 view .LVU2445
 8183              	.LBB359:
 8184              	.LBI359:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8185              		.loc 2 213 30 view .LVU2446
 8186              	.LBB360:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 8187              		.loc 2 215 5 view .LVU2447
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8188              		.loc 2 217 5 view .LVU2448
 8189              		.syntax unified
 8190              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8191 000c 4FF05003 		   mov r3, #80                                              
 8192 0010 83F31188 	   msr basepri, r3                                         
 8193 0014 BFF36F8F 	   isb                                                     
 8194 0018 BFF34F8F 	   dsb                                                     
 8195              	
 8196              	@ 0 "" 2
 8197              	.LVL577:
 8198              		.thumb
 8199              		.syntax unified
 8200              	.L581:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8201              		.loc 2 217 5 is_stmt 0 view .LVU2449
 8202              	.LBE360:
 8203              	.LBE359:
8129:FreeRTOS-Kernel/tasks.c **** 
 8204              		.loc 1 8129 9 is_stmt 1 discriminator 2 view .LVU2450
8129:FreeRTOS-Kernel/tasks.c **** 
 8205              		.loc 1 8129 9 discriminator 2 view .LVU2451
 8206 001c FEE7     		b	.L581
 8207              	.L590:
8128:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8208              		.loc 1 8128 9 view .LVU2452
 8209              	.LBB361:
 8210              	.LBI361:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8211              		.loc 2 213 30 view .LVU2453
 8212              	.LBB362:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 8213              		.loc 2 215 5 view .LVU2454
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8214              		.loc 2 217 5 view .LVU2455
 8215              		.syntax unified
 8216              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8217 001e 4FF05003 		   mov r3, #80                                              
 8218 0022 83F31188 	   msr basepri, r3                                         
 8219 0026 BFF36F8F 	   isb                                                     
 8220 002a BFF34F8F 	   dsb                                                     
 8221              	
ARM GAS  /tmp/ccJw1tyY.s 			page 339


 8222              	@ 0 "" 2
 8223              	.LVL578:
 8224              		.thumb
 8225              		.syntax unified
 8226              	.L579:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8227              		.loc 2 217 5 is_stmt 0 view .LVU2456
 8228              	.LBE362:
 8229              	.LBE361:
8128:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8230              		.loc 1 8128 9 is_stmt 1 discriminator 1 view .LVU2457
8128:FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8231              		.loc 1 8128 9 discriminator 1 view .LVU2458
 8232 002e FEE7     		b	.L579
 8233              	.L580:
8129:FreeRTOS-Kernel/tasks.c **** 
 8234              		.loc 1 8129 80 discriminator 2 view .LVU2459
8147:FreeRTOS-Kernel/tasks.c **** 
 8235              		.loc 1 8147 9 discriminator 2 view .LVU2460
 8236 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
 8237              	.LVL579:
8149:FreeRTOS-Kernel/tasks.c **** 
 8238              		.loc 1 8149 9 discriminator 2 view .LVU2461
8154:FreeRTOS-Kernel/tasks.c ****         {
 8239              		.loc 1 8154 9 discriminator 2 view .LVU2462
 8240              	.LBB363:
 8241              	.LBI363:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8242              		.loc 2 229 34 discriminator 2 view .LVU2463
 8243              	.LBB364:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 8244              		.loc 2 231 5 discriminator 2 view .LVU2464
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8245              		.loc 2 233 5 discriminator 2 view .LVU2465
 8246              		.syntax unified
 8247              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8248 0034 EFF31180 		   mrs r0, basepri                                         
 8249 0038 4FF05003 	   mov r3, #80                                              
 8250 003c 83F31188 	   msr basepri, r3                                         
 8251 0040 BFF36F8F 	   isb                                                     
 8252 0044 BFF34F8F 	   dsb                                                     
 8253              	
 8254              	@ 0 "" 2
 8255              	.LVL580:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 8256              		.loc 2 245 5 discriminator 2 view .LVU2466
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 8257              		.loc 2 245 5 is_stmt 0 discriminator 2 view .LVU2467
 8258              		.thumb
 8259              		.syntax unified
 8260              	.LBE364:
 8261              	.LBE363:
8156:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8262              		.loc 1 8156 13 is_stmt 1 discriminator 2 view .LVU2468
8156:FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8263              		.loc 1 8156 35 is_stmt 0 discriminator 2 view .LVU2469
 8264 0048 3319     		adds	r3, r6, r4
ARM GAS  /tmp/ccJw1tyY.s 			page 340


 8265 004a 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 8266 004e D2B2     		uxtb	r2, r2
 8267              	.LVL581:
8157:FreeRTOS-Kernel/tasks.c **** 
 8268              		.loc 1 8157 13 is_stmt 1 discriminator 2 view .LVU2470
8157:FreeRTOS-Kernel/tasks.c **** 
 8269              		.loc 1 8157 53 is_stmt 0 discriminator 2 view .LVU2471
 8270 0050 0221     		movs	r1, #2
 8271 0052 83F85010 		strb	r1, [r3, #80]
8161:FreeRTOS-Kernel/tasks.c **** 
 8272              		.loc 1 8161 13 is_stmt 1 discriminator 2 view .LVU2472
8161:FreeRTOS-Kernel/tasks.c **** 
 8273              		.loc 1 8161 37 is_stmt 0 discriminator 2 view .LVU2473
 8274 0056 04F11203 		add	r3, r4, #18
 8275 005a 06EB8303 		add	r3, r6, r3, lsl #2
 8276 005e 5968     		ldr	r1, [r3, #4]
8161:FreeRTOS-Kernel/tasks.c **** 
 8277              		.loc 1 8161 58 discriminator 2 view .LVU2474
 8278 0060 0131     		adds	r1, r1, #1
 8279 0062 5960     		str	r1, [r3, #4]
8163:FreeRTOS-Kernel/tasks.c **** 
 8280              		.loc 1 8163 62 is_stmt 1 discriminator 2 view .LVU2475
8167:FreeRTOS-Kernel/tasks.c ****             {
 8281              		.loc 1 8167 13 discriminator 2 view .LVU2476
8167:FreeRTOS-Kernel/tasks.c ****             {
 8282              		.loc 1 8167 15 is_stmt 0 discriminator 2 view .LVU2477
 8283 0064 012A     		cmp	r2, #1
 8284 0066 02D0     		beq	.L591
 8285              	.LVL582:
 8286              	.L582:
8202:FreeRTOS-Kernel/tasks.c ****                     }
 8287              		.loc 1 8202 49 is_stmt 1 view .LVU2478
8224:FreeRTOS-Kernel/tasks.c **** 
 8288              		.loc 1 8224 9 view .LVU2479
 8289              	.LBB365:
 8290              	.LBI365:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8291              		.loc 2 249 30 view .LVU2480
 8292              	.LBB366:
 8293              		.loc 2 251 5 view .LVU2481
 8294              		.syntax unified
 8295              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8296 0068 80F31188 		   msr basepri, r0 
 8297              	@ 0 "" 2
 8298              		.thumb
 8299              		.syntax unified
 8300              	.LBE366:
 8301              	.LBE365:
8226:FreeRTOS-Kernel/tasks.c ****     }
 8302              		.loc 1 8226 52 view .LVU2482
8227:FreeRTOS-Kernel/tasks.c **** 
 8303              		.loc 1 8227 5 is_stmt 0 view .LVU2483
 8304 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 8305              	.LVL583:
 8306              	.L591:
8170:FreeRTOS-Kernel/tasks.c **** 
 8307              		.loc 1 8170 17 is_stmt 1 view .LVU2484
ARM GAS  /tmp/ccJw1tyY.s 			page 341


 8308 006e B36A     		ldr	r3, [r6, #40]
 8309 0070 43B1     		cbz	r3, .L583
8170:FreeRTOS-Kernel/tasks.c **** 
 8310              		.loc 1 8170 17 view .LVU2485
 8311              	.LBB367:
 8312              	.LBI367:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8313              		.loc 2 213 30 view .LVU2486
 8314              	.LBB368:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 8315              		.loc 2 215 5 view .LVU2487
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8316              		.loc 2 217 5 view .LVU2488
 8317              		.syntax unified
 8318              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8319 0072 4FF05003 		   mov r3, #80                                              
 8320 0076 83F31188 	   msr basepri, r3                                         
 8321 007a BFF36F8F 	   isb                                                     
 8322 007e BFF34F8F 	   dsb                                                     
 8323              	
 8324              	@ 0 "" 2
 8325              	.LVL584:
 8326              		.thumb
 8327              		.syntax unified
 8328              	.L584:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8329              		.loc 2 217 5 is_stmt 0 view .LVU2489
 8330              	.LBE368:
 8331              	.LBE367:
8170:FreeRTOS-Kernel/tasks.c **** 
 8332              		.loc 1 8170 17 is_stmt 1 discriminator 3 view .LVU2490
8170:FreeRTOS-Kernel/tasks.c **** 
 8333              		.loc 1 8170 17 discriminator 3 view .LVU2491
 8334 0082 FEE7     		b	.L584
 8335              	.L583:
8170:FreeRTOS-Kernel/tasks.c **** 
 8336              		.loc 1 8170 94 discriminator 2 view .LVU2492
8172:FreeRTOS-Kernel/tasks.c ****                 {
 8337              		.loc 1 8172 17 discriminator 2 view .LVU2493
8172:FreeRTOS-Kernel/tasks.c ****                 {
 8338              		.loc 1 8172 42 is_stmt 0 discriminator 2 view .LVU2494
 8339 0084 274B     		ldr	r3, .L593
 8340 0086 1B68     		ldr	r3, [r3]
8172:FreeRTOS-Kernel/tasks.c ****                 {
 8341              		.loc 1 8172 19 discriminator 2 view .LVU2495
 8342 0088 002B     		cmp	r3, #0
 8343 008a 3DD1     		bne	.L585
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8344              		.loc 1 8174 21 is_stmt 1 view .LVU2496
 8345              	.LBB369:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8346              		.loc 1 8174 21 view .LVU2497
 8347 008c 7369     		ldr	r3, [r6, #20]
 8348              	.LVL585:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8349              		.loc 1 8174 21 view .LVU2498
 8350 008e B168     		ldr	r1, [r6, #8]
ARM GAS  /tmp/ccJw1tyY.s 			page 342


 8351 0090 F268     		ldr	r2, [r6, #12]
 8352              	.LVL586:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8353              		.loc 1 8174 21 is_stmt 0 view .LVU2499
 8354 0092 8A60     		str	r2, [r1, #8]
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8355              		.loc 1 8174 21 is_stmt 1 view .LVU2500
 8356 0094 B168     		ldr	r1, [r6, #8]
 8357 0096 5160     		str	r1, [r2, #4]
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8358              		.loc 1 8174 21 view .LVU2501
 8359 0098 5A68     		ldr	r2, [r3, #4]
 8360 009a 311D     		adds	r1, r6, #4
 8361 009c 8A42     		cmp	r2, r1
 8362 009e 30D0     		beq	.L592
 8363              	.L586:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8364              		.loc 1 8174 21 discriminator 3 view .LVU2502
 8365 00a0 0022     		movs	r2, #0
 8366 00a2 7261     		str	r2, [r6, #20]
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8367              		.loc 1 8174 21 discriminator 3 view .LVU2503
 8368 00a4 1A68     		ldr	r2, [r3]
 8369 00a6 013A     		subs	r2, r2, #1
 8370 00a8 1A60     		str	r2, [r3]
 8371              	.LBE369:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8372              		.loc 1 8174 21 discriminator 3 view .LVU2504
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8373              		.loc 1 8175 21 discriminator 3 view .LVU2505
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8374              		.loc 1 8175 21 discriminator 3 view .LVU2506
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8375              		.loc 1 8175 21 discriminator 3 view .LVU2507
 8376 00aa F36A     		ldr	r3, [r6, #44]
 8377              	.LVL587:
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8378              		.loc 1 8175 21 is_stmt 0 discriminator 3 view .LVU2508
 8379 00ac 0122     		movs	r2, #1
 8380 00ae 9A40     		lsls	r2, r2, r3
 8381 00b0 1D4C     		ldr	r4, .L593+4
 8382              	.LVL588:
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8383              		.loc 1 8175 21 discriminator 3 view .LVU2509
 8384 00b2 2768     		ldr	r7, [r4]
 8385 00b4 3A43     		orrs	r2, r2, r7
 8386 00b6 2260     		str	r2, [r4]
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8387              		.loc 1 8175 21 is_stmt 1 discriminator 3 view .LVU2510
 8388              	.LBB370:
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8389              		.loc 1 8175 21 discriminator 3 view .LVU2511
 8390 00b8 1C4A     		ldr	r2, .L593+8
 8391 00ba 03EB8303 		add	r3, r3, r3, lsl #2
 8392 00be 02EB8303 		add	r3, r2, r3, lsl #2
 8393 00c2 5B68     		ldr	r3, [r3, #4]
 8394              	.LVL589:
ARM GAS  /tmp/ccJw1tyY.s 			page 343


8175:FreeRTOS-Kernel/tasks.c ****                 }
 8395              		.loc 1 8175 21 discriminator 3 view .LVU2512
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8396              		.loc 1 8175 21 discriminator 3 view .LVU2513
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8397              		.loc 1 8175 21 discriminator 3 view .LVU2514
 8398 00c4 B360     		str	r3, [r6, #8]
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8399              		.loc 1 8175 21 discriminator 3 view .LVU2515
 8400 00c6 9C68     		ldr	r4, [r3, #8]
 8401 00c8 F460     		str	r4, [r6, #12]
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8402              		.loc 1 8175 21 discriminator 3 view .LVU2516
 8403 00ca 6160     		str	r1, [r4, #4]
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8404              		.loc 1 8175 21 discriminator 3 view .LVU2517
 8405 00cc 9960     		str	r1, [r3, #8]
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8406              		.loc 1 8175 21 discriminator 3 view .LVU2518
 8407 00ce F36A     		ldr	r3, [r6, #44]
 8408              	.LVL590:
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8409              		.loc 1 8175 21 is_stmt 0 discriminator 3 view .LVU2519
 8410 00d0 03EB8301 		add	r1, r3, r3, lsl #2
 8411 00d4 02EB8104 		add	r4, r2, r1, lsl #2
 8412 00d8 7461     		str	r4, [r6, #20]
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8413              		.loc 1 8175 21 is_stmt 1 discriminator 3 view .LVU2520
 8414 00da 52F82110 		ldr	r1, [r2, r1, lsl #2]
 8415 00de 0131     		adds	r1, r1, #1
 8416 00e0 03EB8303 		add	r3, r3, r3, lsl #2
 8417 00e4 42F82310 		str	r1, [r2, r3, lsl #2]
 8418              	.LBE370:
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8419              		.loc 1 8175 21 discriminator 3 view .LVU2521
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8420              		.loc 1 8175 21 discriminator 3 view .LVU2522
8175:FreeRTOS-Kernel/tasks.c ****                 }
 8421              		.loc 1 8175 21 discriminator 3 view .LVU2523
 8422              	.LVL591:
 8423              	.L587:
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8424              		.loc 1 8181 21 discriminator 1 view .LVU2524
8186:FreeRTOS-Kernel/tasks.c ****                     {
 8425              		.loc 1 8186 21 discriminator 1 view .LVU2525
8186:FreeRTOS-Kernel/tasks.c ****                     {
 8426              		.loc 1 8186 30 is_stmt 0 discriminator 1 view .LVU2526
 8427 00e8 F26A     		ldr	r2, [r6, #44]
8186:FreeRTOS-Kernel/tasks.c ****                     {
 8428              		.loc 1 8186 57 discriminator 1 view .LVU2527
 8429 00ea 114B     		ldr	r3, .L593+12
 8430 00ec 1B68     		ldr	r3, [r3]
 8431 00ee DB6A     		ldr	r3, [r3, #44]
8186:FreeRTOS-Kernel/tasks.c ****                     {
 8432              		.loc 1 8186 23 discriminator 1 view .LVU2528
 8433 00f0 9A42     		cmp	r2, r3
 8434 00f2 B9D9     		bls	.L582
ARM GAS  /tmp/ccJw1tyY.s 			page 344


8190:FreeRTOS-Kernel/tasks.c ****                         {
 8435              		.loc 1 8190 25 is_stmt 1 view .LVU2529
8190:FreeRTOS-Kernel/tasks.c ****                         {
 8436              		.loc 1 8190 27 is_stmt 0 view .LVU2530
 8437 00f4 0DB1     		cbz	r5, .L588
8192:FreeRTOS-Kernel/tasks.c ****                         }
 8438              		.loc 1 8192 29 is_stmt 1 view .LVU2531
8192:FreeRTOS-Kernel/tasks.c ****                         }
 8439              		.loc 1 8192 56 is_stmt 0 view .LVU2532
 8440 00f6 0123     		movs	r3, #1
 8441 00f8 2B60     		str	r3, [r5]
 8442              	.L588:
8198:FreeRTOS-Kernel/tasks.c ****                     }
 8443              		.loc 1 8198 25 is_stmt 1 view .LVU2533
8198:FreeRTOS-Kernel/tasks.c ****                     }
 8444              		.loc 1 8198 45 is_stmt 0 view .LVU2534
 8445 00fa 0E4B     		ldr	r3, .L593+16
 8446 00fc 0122     		movs	r2, #1
 8447 00fe 1A60     		str	r2, [r3]
 8448 0100 B2E7     		b	.L582
 8449              	.LVL592:
 8450              	.L592:
 8451              	.LBB371:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8452              		.loc 1 8174 21 is_stmt 1 discriminator 1 view .LVU2535
 8453 0102 F268     		ldr	r2, [r6, #12]
 8454 0104 5A60     		str	r2, [r3, #4]
 8455 0106 CBE7     		b	.L586
 8456              	.LVL593:
 8457              	.L585:
8174:FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8458              		.loc 1 8174 21 is_stmt 0 discriminator 1 view .LVU2536
 8459              	.LBE371:
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8460              		.loc 1 8181 21 is_stmt 1 view .LVU2537
 8461              	.LBB372:
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8462              		.loc 1 8181 21 view .LVU2538
 8463 0108 0B4B     		ldr	r3, .L593+20
 8464 010a 5A68     		ldr	r2, [r3, #4]
 8465              	.LVL594:
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8466              		.loc 1 8181 21 view .LVU2539
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8467              		.loc 1 8181 21 view .LVU2540
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8468              		.loc 1 8181 21 view .LVU2541
 8469 010c F261     		str	r2, [r6, #28]
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8470              		.loc 1 8181 21 view .LVU2542
 8471 010e 9468     		ldr	r4, [r2, #8]
 8472              	.LVL595:
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8473              		.loc 1 8181 21 is_stmt 0 view .LVU2543
 8474 0110 3462     		str	r4, [r6, #32]
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8475              		.loc 1 8181 21 is_stmt 1 view .LVU2544
ARM GAS  /tmp/ccJw1tyY.s 			page 345


 8476 0112 06F11801 		add	r1, r6, #24
 8477 0116 6160     		str	r1, [r4, #4]
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8478              		.loc 1 8181 21 view .LVU2545
 8479 0118 9160     		str	r1, [r2, #8]
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8480              		.loc 1 8181 21 view .LVU2546
 8481 011a B362     		str	r3, [r6, #40]
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8482              		.loc 1 8181 21 view .LVU2547
 8483 011c 1A68     		ldr	r2, [r3]
 8484              	.LVL596:
8181:FreeRTOS-Kernel/tasks.c ****                 }
 8485              		.loc 1 8181 21 is_stmt 0 view .LVU2548
 8486 011e 0132     		adds	r2, r2, #1
 8487 0120 1A60     		str	r2, [r3]
 8488 0122 E1E7     		b	.L587
 8489              	.L594:
 8490              		.align	2
 8491              	.L593:
 8492 0124 00000000 		.word	uxSchedulerSuspended
 8493 0128 00000000 		.word	uxTopReadyPriority
 8494 012c 00000000 		.word	pxReadyTasksLists
 8495 0130 00000000 		.word	pxCurrentTCB
 8496 0134 00000000 		.word	xYieldPendings
 8497 0138 00000000 		.word	xPendingReadyList
 8498              	.LBE372:
 8499              		.cfi_endproc
 8500              	.LFE60:
 8502              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 8503              		.align	1
 8504              		.global	xTaskGenericNotifyStateClear
 8505              		.syntax unified
 8506              		.thumb
 8507              		.thumb_func
 8509              	xTaskGenericNotifyStateClear:
 8510              	.LVL597:
 8511              	.LFB61:
8236:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 8512              		.loc 1 8236 5 is_stmt 1 view -0
 8513              		.cfi_startproc
 8514              		@ args = 0, pretend = 0, frame = 0
 8515              		@ frame_needed = 0, uses_anonymous_args = 0
8236:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 8516              		.loc 1 8236 5 is_stmt 0 view .LVU2550
 8517 0000 38B5     		push	{r3, r4, r5, lr}
 8518              	.LCFI59:
 8519              		.cfi_def_cfa_offset 16
 8520              		.cfi_offset 3, -16
 8521              		.cfi_offset 4, -12
 8522              		.cfi_offset 5, -8
 8523              		.cfi_offset 14, -4
8237:FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
 8524              		.loc 1 8237 9 is_stmt 1 view .LVU2551
8238:FreeRTOS-Kernel/tasks.c **** 
 8525              		.loc 1 8238 9 view .LVU2552
8240:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 346


 8526              		.loc 1 8240 73 view .LVU2553
8242:FreeRTOS-Kernel/tasks.c **** 
 8527              		.loc 1 8242 9 view .LVU2554
 8528 0002 41B1     		cbz	r1, .L596
8242:FreeRTOS-Kernel/tasks.c **** 
 8529              		.loc 1 8242 9 view .LVU2555
 8530              	.LBB373:
 8531              	.LBI373:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8532              		.loc 2 213 30 view .LVU2556
 8533              	.LBB374:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 8534              		.loc 2 215 5 view .LVU2557
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8535              		.loc 2 217 5 view .LVU2558
 8536              		.syntax unified
 8537              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8538 0004 4FF05003 		   mov r3, #80                                              
 8539 0008 83F31188 	   msr basepri, r3                                         
 8540 000c BFF36F8F 	   isb                                                     
 8541 0010 BFF34F8F 	   dsb                                                     
 8542              	
 8543              	@ 0 "" 2
 8544              	.LVL598:
 8545              		.thumb
 8546              		.syntax unified
 8547              	.L597:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8548              		.loc 2 217 5 is_stmt 0 view .LVU2559
 8549              	.LBE374:
 8550              	.LBE373:
8242:FreeRTOS-Kernel/tasks.c **** 
 8551              		.loc 1 8242 9 is_stmt 1 discriminator 1 view .LVU2560
8242:FreeRTOS-Kernel/tasks.c **** 
 8552              		.loc 1 8242 9 discriminator 1 view .LVU2561
 8553 0014 FEE7     		b	.L597
 8554              	.L596:
 8555 0016 0446     		mov	r4, r0
 8556 0018 0D46     		mov	r5, r1
8242:FreeRTOS-Kernel/tasks.c **** 
 8557              		.loc 1 8242 79 discriminator 2 view .LVU2562
8246:FreeRTOS-Kernel/tasks.c **** 
 8558              		.loc 1 8246 9 discriminator 2 view .LVU2563
8246:FreeRTOS-Kernel/tasks.c **** 
 8559              		.loc 1 8246 17 is_stmt 0 discriminator 2 view .LVU2564
 8560 001a 60B1     		cbz	r0, .L602
 8561              	.LVL599:
 8562              	.L598:
8248:FreeRTOS-Kernel/tasks.c ****         {
 8563              		.loc 1 8248 9 is_stmt 1 discriminator 4 view .LVU2565
 8564 001c FFF7FEFF 		bl	vPortEnterCritical
 8565              	.LVL600:
8250:FreeRTOS-Kernel/tasks.c ****             {
 8566              		.loc 1 8250 13 discriminator 4 view .LVU2566
8250:FreeRTOS-Kernel/tasks.c ****             {
 8567              		.loc 1 8250 37 is_stmt 0 discriminator 4 view .LVU2567
 8568 0020 6319     		adds	r3, r4, r5
ARM GAS  /tmp/ccJw1tyY.s 			page 347


 8569 0022 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 8570 0026 DBB2     		uxtb	r3, r3
8250:FreeRTOS-Kernel/tasks.c ****             {
 8571              		.loc 1 8250 15 discriminator 4 view .LVU2568
 8572 0028 022B     		cmp	r3, #2
 8573 002a 07D0     		beq	.L603
8257:FreeRTOS-Kernel/tasks.c ****             }
 8574              		.loc 1 8257 25 view .LVU2569
 8575 002c 0024     		movs	r4, #0
 8576              	.LVL601:
 8577              	.L599:
8260:FreeRTOS-Kernel/tasks.c **** 
 8578              		.loc 1 8260 9 is_stmt 1 view .LVU2570
 8579 002e FFF7FEFF 		bl	vPortExitCritical
 8580              	.LVL602:
8262:FreeRTOS-Kernel/tasks.c **** 
 8581              		.loc 1 8262 60 view .LVU2571
8264:FreeRTOS-Kernel/tasks.c ****     }
 8582              		.loc 1 8264 9 view .LVU2572
8265:FreeRTOS-Kernel/tasks.c **** 
 8583              		.loc 1 8265 5 is_stmt 0 view .LVU2573
 8584 0032 2046     		mov	r0, r4
 8585 0034 38BD     		pop	{r3, r4, r5, pc}
 8586              	.LVL603:
 8587              	.L602:
8246:FreeRTOS-Kernel/tasks.c **** 
 8588              		.loc 1 8246 17 discriminator 1 view .LVU2574
 8589 0036 044B     		ldr	r3, .L604
 8590 0038 1C68     		ldr	r4, [r3]
 8591              	.LVL604:
8246:FreeRTOS-Kernel/tasks.c **** 
 8592              		.loc 1 8246 17 discriminator 1 view .LVU2575
 8593 003a EFE7     		b	.L598
 8594              	.LVL605:
 8595              	.L603:
8252:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
 8596              		.loc 1 8252 17 is_stmt 1 view .LVU2576
8252:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
 8597              		.loc 1 8252 56 is_stmt 0 view .LVU2577
 8598 003c 2C44     		add	r4, r4, r5
 8599              	.LVL606:
8252:FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
 8600              		.loc 1 8252 56 view .LVU2578
 8601 003e 0023     		movs	r3, #0
 8602 0040 84F85030 		strb	r3, [r4, #80]
8253:FreeRTOS-Kernel/tasks.c ****             }
 8603              		.loc 1 8253 17 is_stmt 1 view .LVU2579
 8604              	.LVL607:
8253:FreeRTOS-Kernel/tasks.c ****             }
 8605              		.loc 1 8253 25 is_stmt 0 view .LVU2580
 8606 0044 0124     		movs	r4, #1
 8607 0046 F2E7     		b	.L599
 8608              	.L605:
 8609              		.align	2
 8610              	.L604:
 8611 0048 00000000 		.word	pxCurrentTCB
 8612              		.cfi_endproc
ARM GAS  /tmp/ccJw1tyY.s 			page 348


 8613              	.LFE61:
 8615              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 8616              		.align	1
 8617              		.global	ulTaskGenericNotifyValueClear
 8618              		.syntax unified
 8619              		.thumb
 8620              		.thumb_func
 8622              	ulTaskGenericNotifyValueClear:
 8623              	.LVL608:
 8624              	.LFB62:
8275:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 8625              		.loc 1 8275 5 is_stmt 1 view -0
 8626              		.cfi_startproc
 8627              		@ args = 0, pretend = 0, frame = 0
 8628              		@ frame_needed = 0, uses_anonymous_args = 0
8276:FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
 8629              		.loc 1 8276 9 view .LVU2582
8277:FreeRTOS-Kernel/tasks.c **** 
 8630              		.loc 1 8277 9 view .LVU2583
8279:FreeRTOS-Kernel/tasks.c **** 
 8631              		.loc 1 8279 89 view .LVU2584
8281:FreeRTOS-Kernel/tasks.c **** 
 8632              		.loc 1 8281 9 view .LVU2585
 8633 0000 41B1     		cbz	r1, .L607
8281:FreeRTOS-Kernel/tasks.c **** 
 8634              		.loc 1 8281 9 view .LVU2586
 8635              	.LBB375:
 8636              	.LBI375:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 8637              		.loc 2 213 30 view .LVU2587
 8638              	.LBB376:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 8639              		.loc 2 215 5 view .LVU2588
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8640              		.loc 2 217 5 view .LVU2589
 8641              		.syntax unified
 8642              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 8643 0002 4FF05003 		   mov r3, #80                                              
 8644 0006 83F31188 	   msr basepri, r3                                         
 8645 000a BFF36F8F 	   isb                                                     
 8646 000e BFF34F8F 	   dsb                                                     
 8647              	
 8648              	@ 0 "" 2
 8649              	.LVL609:
 8650              		.thumb
 8651              		.syntax unified
 8652              	.L608:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 8653              		.loc 2 217 5 is_stmt 0 view .LVU2590
 8654              	.LBE376:
 8655              	.LBE375:
8281:FreeRTOS-Kernel/tasks.c **** 
 8656              		.loc 1 8281 9 is_stmt 1 discriminator 1 view .LVU2591
8281:FreeRTOS-Kernel/tasks.c **** 
 8657              		.loc 1 8281 9 discriminator 1 view .LVU2592
 8658 0012 FEE7     		b	.L608
 8659              	.L607:
ARM GAS  /tmp/ccJw1tyY.s 			page 349


8275:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 8660              		.loc 1 8275 5 is_stmt 0 discriminator 2 view .LVU2593
 8661 0014 70B5     		push	{r4, r5, r6, lr}
 8662              	.LCFI60:
 8663              		.cfi_def_cfa_offset 16
 8664              		.cfi_offset 4, -16
 8665              		.cfi_offset 5, -12
 8666              		.cfi_offset 6, -8
 8667              		.cfi_offset 14, -4
 8668 0016 0446     		mov	r4, r0
 8669 0018 1646     		mov	r6, r2
 8670 001a 0D46     		mov	r5, r1
8281:FreeRTOS-Kernel/tasks.c **** 
 8671              		.loc 1 8281 79 is_stmt 1 discriminator 2 view .LVU2594
8285:FreeRTOS-Kernel/tasks.c **** 
 8672              		.loc 1 8285 9 discriminator 2 view .LVU2595
8285:FreeRTOS-Kernel/tasks.c **** 
 8673              		.loc 1 8285 17 is_stmt 0 discriminator 2 view .LVU2596
 8674 001c 68B1     		cbz	r0, .L612
 8675              	.LVL610:
 8676              	.L609:
8287:FreeRTOS-Kernel/tasks.c ****         {
 8677              		.loc 1 8287 9 is_stmt 1 discriminator 4 view .LVU2597
 8678 001e FFF7FEFF 		bl	vPortEnterCritical
 8679              	.LVL611:
8291:FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8680              		.loc 1 8291 13 discriminator 4 view .LVU2598
8291:FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8681              		.loc 1 8291 22 is_stmt 0 discriminator 4 view .LVU2599
 8682 0022 1235     		adds	r5, r5, #18
 8683              	.LVL612:
8291:FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8684              		.loc 1 8291 22 discriminator 4 view .LVU2600
 8685 0024 04EB8504 		add	r4, r4, r5, lsl #2
 8686              	.LVL613:
8291:FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8687              		.loc 1 8291 22 discriminator 4 view .LVU2601
 8688 0028 6568     		ldr	r5, [r4, #4]
 8689              	.LVL614:
8292:FreeRTOS-Kernel/tasks.c ****         }
 8690              		.loc 1 8292 13 is_stmt 1 discriminator 4 view .LVU2602
8292:FreeRTOS-Kernel/tasks.c ****         }
 8691              		.loc 1 8292 35 is_stmt 0 discriminator 4 view .LVU2603
 8692 002a 6368     		ldr	r3, [r4, #4]
8292:FreeRTOS-Kernel/tasks.c ****         }
 8693              		.loc 1 8292 54 discriminator 4 view .LVU2604
 8694 002c 23EA0603 		bic	r3, r3, r6
 8695 0030 6360     		str	r3, [r4, #4]
8294:FreeRTOS-Kernel/tasks.c **** 
 8696              		.loc 1 8294 9 is_stmt 1 discriminator 4 view .LVU2605
 8697 0032 FFF7FEFF 		bl	vPortExitCritical
 8698              	.LVL615:
8296:FreeRTOS-Kernel/tasks.c **** 
 8699              		.loc 1 8296 62 discriminator 4 view .LVU2606
8298:FreeRTOS-Kernel/tasks.c ****     }
 8700              		.loc 1 8298 9 discriminator 4 view .LVU2607
8299:FreeRTOS-Kernel/tasks.c **** 
ARM GAS  /tmp/ccJw1tyY.s 			page 350


 8701              		.loc 1 8299 5 is_stmt 0 discriminator 4 view .LVU2608
 8702 0036 2846     		mov	r0, r5
 8703 0038 70BD     		pop	{r4, r5, r6, pc}
 8704              	.LVL616:
 8705              	.L612:
8285:FreeRTOS-Kernel/tasks.c **** 
 8706              		.loc 1 8285 17 discriminator 1 view .LVU2609
 8707 003a 014B     		ldr	r3, .L613
 8708 003c 1C68     		ldr	r4, [r3]
 8709              	.LVL617:
8285:FreeRTOS-Kernel/tasks.c **** 
 8710              		.loc 1 8285 17 discriminator 1 view .LVU2610
 8711 003e EEE7     		b	.L609
 8712              	.L614:
 8713              		.align	2
 8714              	.L613:
 8715 0040 00000000 		.word	pxCurrentTCB
 8716              		.cfi_endproc
 8717              	.LFE62:
 8719              		.section	.text.vTaskResetState,"ax",%progbits
 8720              		.align	1
 8721              		.global	vTaskResetState
 8722              		.syntax unified
 8723              		.thumb
 8724              		.thumb_func
 8726              	vTaskResetState:
 8727              	.LFB64:
8532:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8533:FreeRTOS-Kernel/tasks.c **** 
8534:FreeRTOS-Kernel/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
8535:FreeRTOS-Kernel/tasks.c **** 
8536:FreeRTOS-Kernel/tasks.c ****     xMPU_SETTINGS * xTaskGetMPUSettings( TaskHandle_t xTask )
8537:FreeRTOS-Kernel/tasks.c ****     {
8538:FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
8539:FreeRTOS-Kernel/tasks.c **** 
8540:FreeRTOS-Kernel/tasks.c ****         traceENTER_xTaskGetMPUSettings( xTask );
8541:FreeRTOS-Kernel/tasks.c **** 
8542:FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
8543:FreeRTOS-Kernel/tasks.c **** 
8544:FreeRTOS-Kernel/tasks.c ****         traceRETURN_xTaskGetMPUSettings( &( pxTCB->xMPUSettings ) );
8545:FreeRTOS-Kernel/tasks.c **** 
8546:FreeRTOS-Kernel/tasks.c ****         return &( pxTCB->xMPUSettings );
8547:FreeRTOS-Kernel/tasks.c ****     }
8548:FreeRTOS-Kernel/tasks.c **** 
8549:FreeRTOS-Kernel/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
8550:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8551:FreeRTOS-Kernel/tasks.c **** 
8552:FreeRTOS-Kernel/tasks.c **** /* Code below here allows additional code to be inserted into this source file,
8553:FreeRTOS-Kernel/tasks.c ****  * especially where access to file scope functions and data is needed (for example
8554:FreeRTOS-Kernel/tasks.c ****  * when performing module tests). */
8555:FreeRTOS-Kernel/tasks.c **** 
8556:FreeRTOS-Kernel/tasks.c **** #ifdef FREERTOS_MODULE_TEST
8557:FreeRTOS-Kernel/tasks.c ****     #include "tasks_test_access_functions.h"
8558:FreeRTOS-Kernel/tasks.c **** #endif
8559:FreeRTOS-Kernel/tasks.c **** 
8560:FreeRTOS-Kernel/tasks.c **** 
8561:FreeRTOS-Kernel/tasks.c **** #if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 )
ARM GAS  /tmp/ccJw1tyY.s 			page 351


8562:FreeRTOS-Kernel/tasks.c **** 
8563:FreeRTOS-Kernel/tasks.c ****     #include "freertos_tasks_c_additions.h"
8564:FreeRTOS-Kernel/tasks.c **** 
8565:FreeRTOS-Kernel/tasks.c ****     #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
8566:FreeRTOS-Kernel/tasks.c ****         static void freertos_tasks_c_additions_init( void )
8567:FreeRTOS-Kernel/tasks.c ****         {
8568:FreeRTOS-Kernel/tasks.c ****             FREERTOS_TASKS_C_ADDITIONS_INIT();
8569:FreeRTOS-Kernel/tasks.c ****         }
8570:FreeRTOS-Kernel/tasks.c ****     #endif
8571:FreeRTOS-Kernel/tasks.c **** 
8572:FreeRTOS-Kernel/tasks.c **** #endif /* if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 ) */
8573:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8574:FreeRTOS-Kernel/tasks.c **** 
8575:FreeRTOS-Kernel/tasks.c **** #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY == 1 ) && (
8576:FreeRTOS-Kernel/tasks.c **** 
8577:FreeRTOS-Kernel/tasks.c **** /*
8578:FreeRTOS-Kernel/tasks.c ****  * This is the kernel provided implementation of vApplicationGetIdleTaskMemory()
8579:FreeRTOS-Kernel/tasks.c ****  * to provide the memory that is used by the Idle task. It is used when
8580:FreeRTOS-Kernel/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY is set to 1. The application can provide
8581:FreeRTOS-Kernel/tasks.c ****  * it's own implementation of vApplicationGetIdleTaskMemory by setting
8582:FreeRTOS-Kernel/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
8583:FreeRTOS-Kernel/tasks.c ****  */
8584:FreeRTOS-Kernel/tasks.c ****     void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
8585:FreeRTOS-Kernel/tasks.c ****                                         StackType_t ** ppxIdleTaskStackBuffer,
8586:FreeRTOS-Kernel/tasks.c ****                                         configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
8587:FreeRTOS-Kernel/tasks.c ****     {
8588:FreeRTOS-Kernel/tasks.c ****         static StaticTask_t xIdleTaskTCB;
8589:FreeRTOS-Kernel/tasks.c ****         static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];
8590:FreeRTOS-Kernel/tasks.c **** 
8591:FreeRTOS-Kernel/tasks.c ****         *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
8592:FreeRTOS-Kernel/tasks.c ****         *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
8593:FreeRTOS-Kernel/tasks.c ****         *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
8594:FreeRTOS-Kernel/tasks.c ****     }
8595:FreeRTOS-Kernel/tasks.c **** 
8596:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES > 1 )
8597:FreeRTOS-Kernel/tasks.c **** 
8598:FreeRTOS-Kernel/tasks.c ****         void vApplicationGetPassiveIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
8599:FreeRTOS-Kernel/tasks.c ****                                                    StackType_t ** ppxIdleTaskStackBuffer,
8600:FreeRTOS-Kernel/tasks.c ****                                                    configSTACK_DEPTH_TYPE * puxIdleTaskStackSize,
8601:FreeRTOS-Kernel/tasks.c ****                                                    BaseType_t xPassiveIdleTaskIndex )
8602:FreeRTOS-Kernel/tasks.c ****         {
8603:FreeRTOS-Kernel/tasks.c ****             static StaticTask_t xIdleTaskTCBs[ configNUMBER_OF_CORES - 1 ];
8604:FreeRTOS-Kernel/tasks.c ****             static StackType_t uxIdleTaskStacks[ configNUMBER_OF_CORES - 1 ][ configMINIMAL_STACK_S
8605:FreeRTOS-Kernel/tasks.c **** 
8606:FreeRTOS-Kernel/tasks.c ****             *ppxIdleTaskTCBBuffer = &( xIdleTaskTCBs[ xPassiveIdleTaskIndex ] );
8607:FreeRTOS-Kernel/tasks.c ****             *ppxIdleTaskStackBuffer = &( uxIdleTaskStacks[ xPassiveIdleTaskIndex ][ 0 ] );
8608:FreeRTOS-Kernel/tasks.c ****             *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
8609:FreeRTOS-Kernel/tasks.c ****         }
8610:FreeRTOS-Kernel/tasks.c **** 
8611:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
8612:FreeRTOS-Kernel/tasks.c **** 
8613:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY =
8614:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8615:FreeRTOS-Kernel/tasks.c **** 
8616:FreeRTOS-Kernel/tasks.c **** #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY == 1 ) && (
8617:FreeRTOS-Kernel/tasks.c **** 
8618:FreeRTOS-Kernel/tasks.c **** /*
ARM GAS  /tmp/ccJw1tyY.s 			page 352


8619:FreeRTOS-Kernel/tasks.c ****  * This is the kernel provided implementation of vApplicationGetTimerTaskMemory()
8620:FreeRTOS-Kernel/tasks.c ****  * to provide the memory that is used by the Timer service task. It is used when
8621:FreeRTOS-Kernel/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY is set to 1. The application can provide
8622:FreeRTOS-Kernel/tasks.c ****  * it's own implementation of vApplicationGetTimerTaskMemory by setting
8623:FreeRTOS-Kernel/tasks.c ****  * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
8624:FreeRTOS-Kernel/tasks.c ****  */
8625:FreeRTOS-Kernel/tasks.c ****     void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
8626:FreeRTOS-Kernel/tasks.c ****                                          StackType_t ** ppxTimerTaskStackBuffer,
8627:FreeRTOS-Kernel/tasks.c ****                                          configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
8628:FreeRTOS-Kernel/tasks.c ****     {
8629:FreeRTOS-Kernel/tasks.c ****         static StaticTask_t xTimerTaskTCB;
8630:FreeRTOS-Kernel/tasks.c ****         static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];
8631:FreeRTOS-Kernel/tasks.c **** 
8632:FreeRTOS-Kernel/tasks.c ****         *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
8633:FreeRTOS-Kernel/tasks.c ****         *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
8634:FreeRTOS-Kernel/tasks.c ****         *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
8635:FreeRTOS-Kernel/tasks.c ****     }
8636:FreeRTOS-Kernel/tasks.c **** 
8637:FreeRTOS-Kernel/tasks.c **** #endif /* #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configKERNEL_PROVIDED_STATIC_MEMORY =
8638:FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
8639:FreeRTOS-Kernel/tasks.c **** 
8640:FreeRTOS-Kernel/tasks.c **** /*
8641:FreeRTOS-Kernel/tasks.c ****  * Reset the state in this file. This state is normally initialized at start up.
8642:FreeRTOS-Kernel/tasks.c ****  * This function must be called by the application before restarting the
8643:FreeRTOS-Kernel/tasks.c ****  * scheduler.
8644:FreeRTOS-Kernel/tasks.c ****  */
8645:FreeRTOS-Kernel/tasks.c **** void vTaskResetState( void )
8646:FreeRTOS-Kernel/tasks.c **** {
 8728              		.loc 1 8646 1 is_stmt 1 view -0
 8729              		.cfi_startproc
 8730              		@ args = 0, pretend = 0, frame = 0
 8731              		@ frame_needed = 0, uses_anonymous_args = 0
 8732              		@ link register save eliminated.
8647:FreeRTOS-Kernel/tasks.c ****     BaseType_t xCoreID;
 8733              		.loc 1 8647 5 view .LVU2612
8648:FreeRTOS-Kernel/tasks.c **** 
8649:FreeRTOS-Kernel/tasks.c ****     /* Task control block. */
8650:FreeRTOS-Kernel/tasks.c ****     #if ( configNUMBER_OF_CORES == 1 )
8651:FreeRTOS-Kernel/tasks.c ****     {
8652:FreeRTOS-Kernel/tasks.c ****         pxCurrentTCB = NULL;
 8734              		.loc 1 8652 9 view .LVU2613
 8735              		.loc 1 8652 22 is_stmt 0 view .LVU2614
 8736 0000 0023     		movs	r3, #0
 8737 0002 104A     		ldr	r2, .L618
 8738 0004 1360     		str	r3, [r2]
8653:FreeRTOS-Kernel/tasks.c ****     }
8654:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
8655:FreeRTOS-Kernel/tasks.c **** 
8656:FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
8657:FreeRTOS-Kernel/tasks.c ****     {
8658:FreeRTOS-Kernel/tasks.c ****         uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 8739              		.loc 1 8658 9 is_stmt 1 view .LVU2615
 8740              		.loc 1 8658 38 is_stmt 0 view .LVU2616
 8741 0006 104A     		ldr	r2, .L618+4
 8742 0008 1360     		str	r3, [r2]
8659:FreeRTOS-Kernel/tasks.c ****     }
8660:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */
ARM GAS  /tmp/ccJw1tyY.s 			page 353


8661:FreeRTOS-Kernel/tasks.c **** 
8662:FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
8663:FreeRTOS-Kernel/tasks.c ****     {
8664:FreeRTOS-Kernel/tasks.c ****         FreeRTOS_errno = 0;
8665:FreeRTOS-Kernel/tasks.c ****     }
8666:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */
8667:FreeRTOS-Kernel/tasks.c **** 
8668:FreeRTOS-Kernel/tasks.c ****     /* Other file private variables. */
8669:FreeRTOS-Kernel/tasks.c ****     uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 8743              		.loc 1 8669 5 is_stmt 1 view .LVU2617
 8744              		.loc 1 8669 28 is_stmt 0 view .LVU2618
 8745 000a 104A     		ldr	r2, .L618+8
 8746 000c 1360     		str	r3, [r2]
8670:FreeRTOS-Kernel/tasks.c ****     xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8747              		.loc 1 8670 5 is_stmt 1 view .LVU2619
 8748              		.loc 1 8670 16 is_stmt 0 view .LVU2620
 8749 000e 104A     		ldr	r2, .L618+12
 8750 0010 1360     		str	r3, [r2]
8671:FreeRTOS-Kernel/tasks.c ****     uxTopReadyPriority = tskIDLE_PRIORITY;
 8751              		.loc 1 8671 5 is_stmt 1 view .LVU2621
 8752              		.loc 1 8671 24 is_stmt 0 view .LVU2622
 8753 0012 104A     		ldr	r2, .L618+16
 8754 0014 1360     		str	r3, [r2]
8672:FreeRTOS-Kernel/tasks.c ****     xSchedulerRunning = pdFALSE;
 8755              		.loc 1 8672 5 is_stmt 1 view .LVU2623
 8756              		.loc 1 8672 23 is_stmt 0 view .LVU2624
 8757 0016 104A     		ldr	r2, .L618+20
 8758 0018 1360     		str	r3, [r2]
8673:FreeRTOS-Kernel/tasks.c ****     xPendedTicks = ( TickType_t ) 0U;
 8759              		.loc 1 8673 5 is_stmt 1 view .LVU2625
 8760              		.loc 1 8673 18 is_stmt 0 view .LVU2626
 8761 001a 104A     		ldr	r2, .L618+24
 8762 001c 1360     		str	r3, [r2]
8674:FreeRTOS-Kernel/tasks.c **** 
8675:FreeRTOS-Kernel/tasks.c ****     for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
 8763              		.loc 1 8675 5 is_stmt 1 view .LVU2627
 8764              	.LVL618:
 8765              	.L616:
 8766              		.loc 1 8675 31 discriminator 1 view .LVU2628
 8767 001e 002B     		cmp	r3, #0
 8768 0020 09DD     		ble	.L617
8676:FreeRTOS-Kernel/tasks.c ****     {
8677:FreeRTOS-Kernel/tasks.c ****         xYieldPendings[ xCoreID ] = pdFALSE;
8678:FreeRTOS-Kernel/tasks.c ****     }
8679:FreeRTOS-Kernel/tasks.c **** 
8680:FreeRTOS-Kernel/tasks.c ****     xNumOfOverflows = ( BaseType_t ) 0;
 8769              		.loc 1 8680 5 view .LVU2629
 8770              		.loc 1 8680 21 is_stmt 0 view .LVU2630
 8771 0022 0023     		movs	r3, #0
 8772              	.LVL619:
 8773              		.loc 1 8680 21 view .LVU2631
 8774 0024 0E4A     		ldr	r2, .L618+28
 8775 0026 1360     		str	r3, [r2]
8681:FreeRTOS-Kernel/tasks.c ****     uxTaskNumber = ( UBaseType_t ) 0U;
 8776              		.loc 1 8681 5 is_stmt 1 view .LVU2632
 8777              		.loc 1 8681 18 is_stmt 0 view .LVU2633
 8778 0028 0E4A     		ldr	r2, .L618+32
ARM GAS  /tmp/ccJw1tyY.s 			page 354


 8779 002a 1360     		str	r3, [r2]
8682:FreeRTOS-Kernel/tasks.c ****     xNextTaskUnblockTime = ( TickType_t ) 0U;
 8780              		.loc 1 8682 5 is_stmt 1 view .LVU2634
 8781              		.loc 1 8682 26 is_stmt 0 view .LVU2635
 8782 002c 0E4A     		ldr	r2, .L618+36
 8783 002e 1360     		str	r3, [r2]
8683:FreeRTOS-Kernel/tasks.c **** 
8684:FreeRTOS-Kernel/tasks.c ****     uxSchedulerSuspended = ( UBaseType_t ) 0U;
 8784              		.loc 1 8684 5 is_stmt 1 view .LVU2636
 8785              		.loc 1 8684 26 is_stmt 0 view .LVU2637
 8786 0030 0E4A     		ldr	r2, .L618+40
 8787 0032 1360     		str	r3, [r2]
8685:FreeRTOS-Kernel/tasks.c **** 
8686:FreeRTOS-Kernel/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
8687:FreeRTOS-Kernel/tasks.c ****     {
8688:FreeRTOS-Kernel/tasks.c ****         for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
8689:FreeRTOS-Kernel/tasks.c ****         {
8690:FreeRTOS-Kernel/tasks.c ****             ulTaskSwitchedInTime[ xCoreID ] = 0U;
8691:FreeRTOS-Kernel/tasks.c ****             ulTotalRunTime[ xCoreID ] = 0U;
8692:FreeRTOS-Kernel/tasks.c ****         }
8693:FreeRTOS-Kernel/tasks.c ****     }
8694:FreeRTOS-Kernel/tasks.c ****     #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
8695:FreeRTOS-Kernel/tasks.c **** }
 8788              		.loc 1 8695 1 view .LVU2638
 8789 0034 7047     		bx	lr
 8790              	.LVL620:
 8791              	.L617:
8677:FreeRTOS-Kernel/tasks.c ****     }
 8792              		.loc 1 8677 9 is_stmt 1 discriminator 3 view .LVU2639
8677:FreeRTOS-Kernel/tasks.c ****     }
 8793              		.loc 1 8677 35 is_stmt 0 discriminator 3 view .LVU2640
 8794 0036 0E4A     		ldr	r2, .L618+44
 8795 0038 0021     		movs	r1, #0
 8796 003a 42F82310 		str	r1, [r2, r3, lsl #2]
8675:FreeRTOS-Kernel/tasks.c ****     {
 8797              		.loc 1 8675 63 is_stmt 1 discriminator 3 view .LVU2641
 8798 003e 0133     		adds	r3, r3, #1
 8799              	.LVL621:
8675:FreeRTOS-Kernel/tasks.c ****     {
 8800              		.loc 1 8675 63 is_stmt 0 discriminator 3 view .LVU2642
 8801 0040 EDE7     		b	.L616
 8802              	.L619:
 8803 0042 00BF     		.align	2
 8804              	.L618:
 8805 0044 00000000 		.word	pxCurrentTCB
 8806 0048 00000000 		.word	uxDeletedTasksWaitingCleanUp
 8807 004c 00000000 		.word	uxCurrentNumberOfTasks
 8808 0050 00000000 		.word	xTickCount
 8809 0054 00000000 		.word	uxTopReadyPriority
 8810 0058 00000000 		.word	xSchedulerRunning
 8811 005c 00000000 		.word	xPendedTicks
 8812 0060 00000000 		.word	xNumOfOverflows
 8813 0064 00000000 		.word	uxTaskNumber
 8814 0068 00000000 		.word	xNextTaskUnblockTime
 8815 006c 00000000 		.word	uxSchedulerSuspended
 8816 0070 00000000 		.word	xYieldPendings
 8817              		.cfi_endproc
ARM GAS  /tmp/ccJw1tyY.s 			page 355


 8818              	.LFE64:
 8820              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 8821              		.align	2
 8824              	uxSchedulerSuspended:
 8825 0000 00000000 		.space	4
 8826              		.section	.data.uxTopUsedPriority,"aw"
 8827              		.align	2
 8830              	uxTopUsedPriority:
 8831 0000 06000000 		.word	6
 8832              		.section	.bss.xIdleTaskHandles,"aw",%nobits
 8833              		.align	2
 8836              	xIdleTaskHandles:
 8837 0000 00000000 		.space	4
 8838              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 8839              		.align	2
 8842              	xNextTaskUnblockTime:
 8843 0000 00000000 		.space	4
 8844              		.section	.bss.uxTaskNumber,"aw",%nobits
 8845              		.align	2
 8848              	uxTaskNumber:
 8849 0000 00000000 		.space	4
 8850              		.section	.bss.xNumOfOverflows,"aw",%nobits
 8851              		.align	2
 8854              	xNumOfOverflows:
 8855 0000 00000000 		.space	4
 8856              		.section	.bss.xYieldPendings,"aw",%nobits
 8857              		.align	2
 8860              	xYieldPendings:
 8861 0000 00000000 		.space	4
 8862              		.section	.bss.xPendedTicks,"aw",%nobits
 8863              		.align	2
 8866              	xPendedTicks:
 8867 0000 00000000 		.space	4
 8868              		.section	.bss.xSchedulerRunning,"aw",%nobits
 8869              		.align	2
 8872              	xSchedulerRunning:
 8873 0000 00000000 		.space	4
 8874              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 8875              		.align	2
 8878              	uxTopReadyPriority:
 8879 0000 00000000 		.space	4
 8880              		.section	.bss.xTickCount,"aw",%nobits
 8881              		.align	2
 8884              	xTickCount:
 8885 0000 00000000 		.space	4
 8886              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 8887              		.align	2
 8890              	uxCurrentNumberOfTasks:
 8891 0000 00000000 		.space	4
 8892              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 8893              		.align	2
 8896              	xSuspendedTaskList:
 8897 0000 00000000 		.space	20
 8897      00000000 
 8897      00000000 
 8897      00000000 
 8897      00000000 
ARM GAS  /tmp/ccJw1tyY.s 			page 356


 8898              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 8899              		.align	2
 8902              	uxDeletedTasksWaitingCleanUp:
 8903 0000 00000000 		.space	4
 8904              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 8905              		.align	2
 8908              	xTasksWaitingTermination:
 8909 0000 00000000 		.space	20
 8909      00000000 
 8909      00000000 
 8909      00000000 
 8909      00000000 
 8910              		.section	.bss.xPendingReadyList,"aw",%nobits
 8911              		.align	2
 8914              	xPendingReadyList:
 8915 0000 00000000 		.space	20
 8915      00000000 
 8915      00000000 
 8915      00000000 
 8915      00000000 
 8916              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 8917              		.align	2
 8920              	pxOverflowDelayedTaskList:
 8921 0000 00000000 		.space	4
 8922              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 8923              		.align	2
 8926              	pxDelayedTaskList:
 8927 0000 00000000 		.space	4
 8928              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 8929              		.align	2
 8932              	xDelayedTaskList2:
 8933 0000 00000000 		.space	20
 8933      00000000 
 8933      00000000 
 8933      00000000 
 8933      00000000 
 8934              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 8935              		.align	2
 8938              	xDelayedTaskList1:
 8939 0000 00000000 		.space	20
 8939      00000000 
 8939      00000000 
 8939      00000000 
 8939      00000000 
 8940              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 8941              		.align	2
 8944              	pxReadyTasksLists:
 8945 0000 00000000 		.space	140
 8945      00000000 
 8945      00000000 
 8945      00000000 
 8945      00000000 
 8946              		.global	pxCurrentTCB
 8947              		.section	.bss.pxCurrentTCB,"aw",%nobits
 8948              		.align	2
 8951              	pxCurrentTCB:
 8952 0000 00000000 		.space	4
ARM GAS  /tmp/ccJw1tyY.s 			page 357


 8953              		.text
 8954              	.Letext0:
 8955              		.file 3 "/usr/share/arm-gnu-toolchain/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 8956              		.file 4 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 8957              		.file 5 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 8958              		.file 6 "FreeRTOS-Kernel/include/projdefs.h"
 8959              		.file 7 "FreeRTOS-Kernel/include/FreeRTOS.h"
 8960              		.file 8 "FreeRTOS-Kernel/include/list.h"
 8961              		.file 9 "FreeRTOS-Kernel/include/task.h"
 8962              		.file 10 "FreeRTOS-Kernel/include/timers.h"
 8963              		.file 11 "FreeRTOS-Kernel/include/portable.h"
 8964              		.file 12 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/string.h"
 8965              		.file 13 "<built-in>"
ARM GAS  /tmp/ccJw1tyY.s 			page 358


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccJw1tyY.s:21     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccJw1tyY.s:26     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccJw1tyY.s:150    .text.prvTaskIsTaskSuspended:0000000000000054 $d
     /tmp/ccJw1tyY.s:8896   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccJw1tyY.s:8914   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccJw1tyY.s:156    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccJw1tyY.s:161    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccJw1tyY.s:196    .text.prvResetNextTaskUnblockTime:0000000000000020 $d
     /tmp/ccJw1tyY.s:8926   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccJw1tyY.s:8842   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccJw1tyY.s:202    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccJw1tyY.s:207    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccJw1tyY.s:366    .text.prvCreateStaticTask:0000000000000000 $t
     /tmp/ccJw1tyY.s:371    .text.prvCreateStaticTask:0000000000000000 prvCreateStaticTask
     /tmp/ccJw1tyY.s:550    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccJw1tyY.s:555    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccJw1tyY.s:628    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccJw1tyY.s:8944   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccJw1tyY.s:8938   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccJw1tyY.s:8932   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccJw1tyY.s:8908   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccJw1tyY.s:8920   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccJw1tyY.s:640    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccJw1tyY.s:645    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccJw1tyY.s:809    .text.prvAddNewTaskToReadyList:00000000000000b4 $d
     /tmp/ccJw1tyY.s:8890   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccJw1tyY.s:8951   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccJw1tyY.s:8872   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccJw1tyY.s:8848   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccJw1tyY.s:8878   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccJw1tyY.s:819    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccJw1tyY.s:824    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccJw1tyY.s:884    .text.prvCheckTasksWaitingTermination:0000000000000034 $d
     /tmp/ccJw1tyY.s:8902   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccJw1tyY.s:891    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccJw1tyY.s:896    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccJw1tyY.s:945    .text.prvIdleTask:0000000000000024 $d
     /tmp/ccJw1tyY.s:950    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccJw1tyY.s:955    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccJw1tyY.s:1113   .text.prvAddCurrentTaskToDelayedList:00000000000000a0 $d
     /tmp/ccJw1tyY.s:8884   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccJw1tyY.s:1124   .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccJw1tyY.s:1130   .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccJw1tyY.s:1186   .rodata.prvCreateIdleTasks.str1.4:0000000000000000 $d
     /tmp/ccJw1tyY.s:1190   .text.prvCreateIdleTasks:0000000000000000 $t
     /tmp/ccJw1tyY.s:1195   .text.prvCreateIdleTasks:0000000000000000 prvCreateIdleTasks
     /tmp/ccJw1tyY.s:1322   .text.prvCreateIdleTasks:0000000000000060 $d
     /tmp/ccJw1tyY.s:8836   .bss.xIdleTaskHandles:0000000000000000 xIdleTaskHandles
     /tmp/ccJw1tyY.s:1330   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccJw1tyY.s:1336   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccJw1tyY.s:1549   .text.vTaskDelete:00000000000000c8 $d
     /tmp/ccJw1tyY.s:8824   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccJw1tyY.s:1562   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccJw1tyY.s:1568   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccJw1tyY.s:1616   .text.uxTaskPriorityGet:000000000000001c $d
ARM GAS  /tmp/ccJw1tyY.s 			page 359


     /tmp/ccJw1tyY.s:1621   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccJw1tyY.s:1627   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccJw1tyY.s:1709   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccJw1tyY.s:1714   .text.uxTaskBasePriorityGet:0000000000000000 $t
     /tmp/ccJw1tyY.s:1720   .text.uxTaskBasePriorityGet:0000000000000000 uxTaskBasePriorityGet
     /tmp/ccJw1tyY.s:1768   .text.uxTaskBasePriorityGet:000000000000001c $d
     /tmp/ccJw1tyY.s:1773   .text.uxTaskBasePriorityGetFromISR:0000000000000000 $t
     /tmp/ccJw1tyY.s:1779   .text.uxTaskBasePriorityGetFromISR:0000000000000000 uxTaskBasePriorityGetFromISR
     /tmp/ccJw1tyY.s:1861   .text.uxTaskBasePriorityGetFromISR:000000000000002c $d
     /tmp/ccJw1tyY.s:1866   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccJw1tyY.s:1872   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccJw1tyY.s:2147   .text.vTaskPrioritySet:00000000000000fc $d
     /tmp/ccJw1tyY.s:2154   .text.vTaskResume:0000000000000000 $t
     /tmp/ccJw1tyY.s:2160   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccJw1tyY.s:2318   .text.vTaskResume:000000000000009c $d
     /tmp/ccJw1tyY.s:2325   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccJw1tyY.s:2331   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccJw1tyY.s:2538   .text.xTaskResumeFromISR:00000000000000b8 $d
     /tmp/ccJw1tyY.s:8860   .bss.xYieldPendings:0000000000000000 xYieldPendings
     /tmp/ccJw1tyY.s:2548   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccJw1tyY.s:2554   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccJw1tyY.s:2672   .text.vTaskStartScheduler:000000000000005c $d
     /tmp/ccJw1tyY.s:8830   .data.uxTopUsedPriority:0000000000000000 uxTopUsedPriority
     /tmp/ccJw1tyY.s:2680   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccJw1tyY.s:2686   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccJw1tyY.s:2763   .text.vTaskEndScheduler:0000000000000040 $d
     /tmp/ccJw1tyY.s:2770   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccJw1tyY.s:2776   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccJw1tyY.s:2799   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccJw1tyY.s:2804   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccJw1tyY.s:2810   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccJw1tyY.s:2833   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccJw1tyY.s:2838   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccJw1tyY.s:2844   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccJw1tyY.s:2875   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccJw1tyY.s:2880   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccJw1tyY.s:2886   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccJw1tyY.s:2904   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccJw1tyY.s:2909   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccJw1tyY.s:2915   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccJw1tyY.s:2974   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccJw1tyY.s:2979   .text.xTaskGetStaticBuffers:0000000000000000 $t
     /tmp/ccJw1tyY.s:2985   .text.xTaskGetStaticBuffers:0000000000000000 xTaskGetStaticBuffers
     /tmp/ccJw1tyY.s:3090   .text.xTaskGetStaticBuffers:000000000000003c $d
     /tmp/ccJw1tyY.s:3095   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccJw1tyY.s:3101   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccJw1tyY.s:3460   .text.xTaskIncrementTick:000000000000014c $d
     /tmp/ccJw1tyY.s:8854   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccJw1tyY.s:8866   .bss.xPendedTicks:0000000000000000 xPendedTicks
     /tmp/ccJw1tyY.s:3475   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccJw1tyY.s:3481   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccJw1tyY.s:3832   .text.xTaskResumeAll:0000000000000138 $d
     /tmp/ccJw1tyY.s:3844   .text.xTaskDelayUntil:0000000000000000 $t
     /tmp/ccJw1tyY.s:3850   .text.xTaskDelayUntil:0000000000000000 xTaskDelayUntil
     /tmp/ccJw1tyY.s:4097   .text.xTaskDelayUntil:00000000000000a8 $d
     /tmp/ccJw1tyY.s:4103   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccJw1tyY.s:4109   .text.vTaskDelay:0000000000000000 vTaskDelay
ARM GAS  /tmp/ccJw1tyY.s 			page 360


     /tmp/ccJw1tyY.s:4209   .text.vTaskDelay:000000000000004c $d
     /tmp/ccJw1tyY.s:4214   .text.xTaskCatchUpTicks:0000000000000000 $t
     /tmp/ccJw1tyY.s:4220   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
     /tmp/ccJw1tyY.s:4295   .text.xTaskCatchUpTicks:0000000000000038 $d
     /tmp/ccJw1tyY.s:4301   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccJw1tyY.s:4307   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccJw1tyY.s:4454   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccJw1tyY.s:4465   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccJw1tyY.s:4471   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccJw1tyY.s:4710   .text.vTaskSuspend:00000000000000dc $d
     /tmp/ccJw1tyY.s:4721   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccJw1tyY.s:4727   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccJw1tyY.s:4796   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccJw1tyY.s:4801   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccJw1tyY.s:4807   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccJw1tyY.s:4939   .text.vTaskPlaceOnUnorderedEventList:0000000000000068 $d
     /tmp/ccJw1tyY.s:4945   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccJw1tyY.s:4951   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccJw1tyY.s:5054   .text.vTaskPlaceOnEventListRestricted:0000000000000050 $d
     /tmp/ccJw1tyY.s:5059   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccJw1tyY.s:5065   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccJw1tyY.s:5326   .text.xTaskRemoveFromEventList:00000000000000e0 $d
     /tmp/ccJw1tyY.s:5336   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccJw1tyY.s:5342   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccJw1tyY.s:5579   .text.vTaskRemoveFromUnorderedEventList:00000000000000d4 $d
     /tmp/ccJw1tyY.s:5589   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccJw1tyY.s:5595   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccJw1tyY.s:5666   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccJw1tyY.s:5672   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccJw1tyY.s:5678   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccJw1tyY.s:5703   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccJw1tyY.s:5709   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccJw1tyY.s:5715   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccJw1tyY.s:5898   .text.xTaskCheckForTimeOut:0000000000000080 $d
     /tmp/ccJw1tyY.s:5904   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccJw1tyY.s:5910   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccJw1tyY.s:5929   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccJw1tyY.s:5934   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccJw1tyY.s:5940   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccJw1tyY.s:5961   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccJw1tyY.s:5966   .text.xTaskGetCurrentTaskHandleForCore:0000000000000000 $t
     /tmp/ccJw1tyY.s:5972   .text.xTaskGetCurrentTaskHandleForCore:0000000000000000 xTaskGetCurrentTaskHandleForCore
     /tmp/ccJw1tyY.s:6004   .text.xTaskGetCurrentTaskHandleForCore:000000000000000c $d
     /tmp/ccJw1tyY.s:6009   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccJw1tyY.s:6015   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccJw1tyY.s:6055   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccJw1tyY.s:6061   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccJw1tyY.s:6067   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccJw1tyY.s:6259   .text.xTaskPriorityInherit:00000000000000bc $d
     /tmp/ccJw1tyY.s:6266   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccJw1tyY.s:6272   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccJw1tyY.s:6489   .text.xTaskPriorityDisinherit:00000000000000b8 $d
     /tmp/ccJw1tyY.s:6496   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccJw1tyY.s:6502   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccJw1tyY.s:6728   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000c8 $d
     /tmp/ccJw1tyY.s:6735   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccJw1tyY.s:6741   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
ARM GAS  /tmp/ccJw1tyY.s 			page 361


     /tmp/ccJw1tyY.s:6770   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccJw1tyY.s:6775   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccJw1tyY.s:6781   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccJw1tyY.s:6812   .text.pvTaskIncrementMutexHeldCount:0000000000000010 $d
     /tmp/ccJw1tyY.s:6817   .text.ulTaskGenericNotifyTake:0000000000000000 $t
     /tmp/ccJw1tyY.s:6823   .text.ulTaskGenericNotifyTake:0000000000000000 ulTaskGenericNotifyTake
     /tmp/ccJw1tyY.s:7030   .text.ulTaskGenericNotifyTake:00000000000000c8 $d
     /tmp/ccJw1tyY.s:7035   .text.xTaskGenericNotifyWait:0000000000000000 $t
     /tmp/ccJw1tyY.s:7041   .text.xTaskGenericNotifyWait:0000000000000000 xTaskGenericNotifyWait
     /tmp/ccJw1tyY.s:7281   .text.xTaskGenericNotifyWait:00000000000000ec $d
     /tmp/ccJw1tyY.s:7286   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccJw1tyY.s:7292   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccJw1tyY.s:7385   .text.xTaskGenericNotify:000000000000004c $d
     /tmp/ccJw1tyY.s:7674   .text.xTaskGenericNotify:000000000000016c $d
     /tmp/ccJw1tyY.s:7682   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccJw1tyY.s:7688   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccJw1tyY.s:7830   .text.xTaskGenericNotifyFromISR:0000000000000072 $d
     /tmp/ccJw1tyY.s:8136   .text.xTaskGenericNotifyFromISR:000000000000019c $d
     /tmp/ccJw1tyY.s:8147   .text.vTaskGenericNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccJw1tyY.s:8153   .text.vTaskGenericNotifyGiveFromISR:0000000000000000 vTaskGenericNotifyGiveFromISR
     /tmp/ccJw1tyY.s:8492   .text.vTaskGenericNotifyGiveFromISR:0000000000000124 $d
     /tmp/ccJw1tyY.s:8503   .text.xTaskGenericNotifyStateClear:0000000000000000 $t
     /tmp/ccJw1tyY.s:8509   .text.xTaskGenericNotifyStateClear:0000000000000000 xTaskGenericNotifyStateClear
     /tmp/ccJw1tyY.s:8611   .text.xTaskGenericNotifyStateClear:0000000000000048 $d
     /tmp/ccJw1tyY.s:8616   .text.ulTaskGenericNotifyValueClear:0000000000000000 $t
     /tmp/ccJw1tyY.s:8622   .text.ulTaskGenericNotifyValueClear:0000000000000000 ulTaskGenericNotifyValueClear
     /tmp/ccJw1tyY.s:8715   .text.ulTaskGenericNotifyValueClear:0000000000000040 $d
     /tmp/ccJw1tyY.s:8720   .text.vTaskResetState:0000000000000000 $t
     /tmp/ccJw1tyY.s:8726   .text.vTaskResetState:0000000000000000 vTaskResetState
     /tmp/ccJw1tyY.s:8805   .text.vTaskResetState:0000000000000044 $d
     /tmp/ccJw1tyY.s:8821   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccJw1tyY.s:8827   .data.uxTopUsedPriority:0000000000000000 $d
     /tmp/ccJw1tyY.s:8833   .bss.xIdleTaskHandles:0000000000000000 $d
     /tmp/ccJw1tyY.s:8839   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccJw1tyY.s:8845   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccJw1tyY.s:8851   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccJw1tyY.s:8857   .bss.xYieldPendings:0000000000000000 $d
     /tmp/ccJw1tyY.s:8863   .bss.xPendedTicks:0000000000000000 $d
     /tmp/ccJw1tyY.s:8869   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccJw1tyY.s:8875   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccJw1tyY.s:8881   .bss.xTickCount:0000000000000000 $d
     /tmp/ccJw1tyY.s:8887   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccJw1tyY.s:8893   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccJw1tyY.s:8899   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccJw1tyY.s:8905   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccJw1tyY.s:8911   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccJw1tyY.s:8917   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccJw1tyY.s:8923   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccJw1tyY.s:8929   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccJw1tyY.s:8935   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccJw1tyY.s:8941   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccJw1tyY.s:8948   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccJw1tyY.s:7391   .text.xTaskGenericNotify:0000000000000051 $d
     /tmp/ccJw1tyY.s:7391   .text.xTaskGenericNotify:0000000000000052 $t
     /tmp/ccJw1tyY.s:7835   .text.xTaskGenericNotifyFromISR:0000000000000077 $d
     /tmp/ccJw1tyY.s:7835   .text.xTaskGenericNotifyFromISR:0000000000000078 $t

ARM GAS  /tmp/ccJw1tyY.s 			page 362


UNDEFINED SYMBOLS
vListInitialiseItem
pxPortInitialiseStack
memset
vListInitialise
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsert
vApplicationGetIdleTaskMemory
vListInsertEnd
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
xTimerGetTimerDaemonTaskHandle
vPortEndScheduler
