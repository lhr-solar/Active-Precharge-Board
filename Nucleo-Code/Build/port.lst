ARM GAS  /tmp/ccUOrFw4.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c"
  20              		.section	.text.prvTaskExitError,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskExitError:
  27              	.LFB6:
   1:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
   2:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  *
   5:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  *
   7:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  *
  14:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  *
  17:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  *
  24:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  *
  27:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
  28:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  29:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  30:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** * Implementation of functions defined in portable.h for the ARM CM4F port.
  31:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** *----------------------------------------------------------*/
ARM GAS  /tmp/ccUOrFw4.s 			page 2


  32:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  33:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  34:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  35:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  36:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  37:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  38:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  39:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif
  40:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  41:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Prototype of all Interrupt Service Routines (ISRs). */
  42:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** typedef void ( * portISR_t )( void );
  43:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  44:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  45:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  46:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  47:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  48:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SHPR2_REG                    ( *( ( volatile uint32_t * ) 0xe000ed1c ) )
  49:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  50:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  51:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK_BIT              ( 1UL << 2UL )
  52:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  53:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  54:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  55:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  56:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_SET_BIT         ( 1UL << 26UL )
  57:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  58:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  59:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  60:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * r0p1 port. */
  61:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portCPUID                             ( *( ( volatile uint32_t * ) 0xE000ed00 ) )
  62:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID                 ( 0x410FC271UL )
  63:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID                 ( 0x410FC270UL )
  64:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  65:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portMIN_INTERRUPT_PRIORITY            ( 255UL )
  66:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 16UL
  67:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 24UL
  68:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  69:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Constants used to check the installation of the FreeRTOS interrupt handlers. */
  70:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portSCB_VTOR_REG                      ( *( ( portISR_t ** ) 0xE000ED08 ) )
  71:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portVECTOR_INDEX_SVC                  ( 11 )
  72:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portVECTOR_INDEX_PENDSV               ( 14 )
  73:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  74:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  75:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  76:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  77:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  78:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  79:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  80:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  81:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  82:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  83:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  84:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  85:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  86:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  87:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  88:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
ARM GAS  /tmp/ccUOrFw4.s 			page 3


  89:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
  90:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  91:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  92:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  93:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  94:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  95:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  96:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  97:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
  98:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  99:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 100:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
 101:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 102:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 103:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
 104:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * calculations. */
 105:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR              ( 94UL )
 106:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 107:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the default SysTick clock rate.  If defined by the
 108:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * user, this symbol must equal the SysTick clock rate when the CLK bit is 0 in the
 109:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * configuration register. */
 110:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
 111:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #define configSYSTICK_CLOCK_HZ             ( configCPU_CLOCK_HZ )
 112:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
 113:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( portNVIC_SYSTICK_CLK_BIT )
 114:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #else
 115:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Select the option to clock SysTick not at the same frequency as the core. */
 116:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( 0 )
 117:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif
 118:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 119:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 120:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 121:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * debugger. */
 122:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 123:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 124:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #else
 125:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 126:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif
 127:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 128:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 129:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 130:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 131:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 132:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 133:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 134:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 135:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 136:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 137:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 138:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 139:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 140:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 141:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 142:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 143:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 144:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 145:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
ARM GAS  /tmp/ccUOrFw4.s 			page 4


 146:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 147:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 148:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 149:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 150:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 151:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 152:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 153:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 154:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 156:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 158:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 159:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 160:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * variable. */
 161:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 162:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 163:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 164:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 165:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 166:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 167:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 168:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 169:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 170:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 171:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 172:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 173:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 174:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 175:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 176:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 177:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 178:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 179:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 180:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 181:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 182:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 183:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 184:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 185:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 186:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 187:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 188:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 189:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 190:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 191:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 192:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 193:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 194:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 195:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 196:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 197:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 198:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 199:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 200:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 201:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 202:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
ARM GAS  /tmp/ccUOrFw4.s 			page 5


 203:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                                      TaskFunction_t pxCode,
 204:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                                      void * pvParameters )
 205:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 206:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 207:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * interrupt. */
 208:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 209:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 210:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * of interrupts, and to ensure alignment. */
 211:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 212:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 214:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 216:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 218:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 219:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Save code space by skipping register initialisation. */
 220:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 222:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 223:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* A save method is being used that requires each task to maintain its
 224:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * own exec return value. */
 225:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 227:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 228:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 230:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     return pxTopOfStack;
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 232:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 234:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 235:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
  28              		.loc 1 235 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 82B0     		sub	sp, sp, #8
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
 236:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     volatile uint32_t ulDummy = 0;
  36              		.loc 1 236 5 view .LVU1
  37              		.loc 1 236 23 is_stmt 0 view .LVU2
  38 0002 0023     		movs	r3, #0
  39 0004 0193     		str	r3, [sp, #4]
 237:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 238:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* A function that implements a task must not exit or attempt to return to
 239:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 240:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * should instead call vTaskDelete( NULL ).
 241:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      *
 242:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 243:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * defined, then stop here so application writers can catch the error. */
 244:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
  40              		.loc 1 244 5 is_stmt 1 view .LVU3
  41 0006 0D4B     		ldr	r3, .L6
  42 0008 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccUOrFw4.s 			page 6


  43 000a B3F1FF3F 		cmp	r3, #-1
  44 000e 08D0     		beq	.L2
  45              		.loc 1 244 5 view .LVU4
  46              	.LBB38:
  47              	.LBI38:
  48              		.file 2 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
ARM GAS  /tmp/ccUOrFw4.s 			page 7


  52:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
  85:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
ARM GAS  /tmp/ccUOrFw4.s 			page 8


 109:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
ARM GAS  /tmp/ccUOrFw4.s 			page 9


 166:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  49              		.loc 2 213 30 view .LVU5
  50              	.LBB39:
 214:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
  51              		.loc 2 215 5 view .LVU6
 216:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
  52              		.loc 2 217 5 view .LVU7
  53              		.syntax unified
ARM GAS  /tmp/ccUOrFw4.s 			page 10


  54              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
  55 0010 4FF05003 		   mov r3, #80                                              
  56 0014 83F31188 	   msr basepri, r3                                         
  57 0018 BFF36F8F 	   isb                                                     
  58 001c BFF34F8F 	   dsb                                                     
  59              	
  60              	@ 0 "" 2
  61              	.LVL0:
  62              		.thumb
  63              		.syntax unified
  64              	.L3:
  65              		.loc 2 217 5 is_stmt 0 view .LVU8
  66              	.LBE39:
  67              	.LBE38:
  68              		.loc 1 244 5 is_stmt 1 discriminator 1 view .LVU9
  69              		.loc 1 244 5 discriminator 1 view .LVU10
  70 0020 FEE7     		b	.L3
  71              	.L2:
  72              		.loc 1 244 46 view .LVU11
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
  73              		.loc 1 245 5 view .LVU12
  74              	.LBB40:
  75              	.LBI40:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
  76              		.loc 2 213 30 view .LVU13
  77              	.LBB41:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  78              		.loc 2 215 5 view .LVU14
  79              		.loc 2 217 5 view .LVU15
  80              		.syntax unified
  81              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
  82 0022 4FF05003 		   mov r3, #80                                              
  83 0026 83F31188 	   msr basepri, r3                                         
  84 002a BFF36F8F 	   isb                                                     
  85 002e BFF34F8F 	   dsb                                                     
  86              	
  87              	@ 0 "" 2
  88              	.LVL1:
  89              		.thumb
  90              		.syntax unified
  91              	.L4:
  92              		.loc 2 217 5 is_stmt 0 view .LVU16
  93              	.LBE41:
  94              	.LBE40:
 246:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 247:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     while( ulDummy == 0 )
 248:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 250:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * started to remove a compiler warning about the function being defined
 251:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 252:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * about code appearing after this function is called - making ulDummy
 253:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * volatile makes the compiler think the function could return and
 254:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 255:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * after it. */
 256:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
  95              		.loc 1 256 5 is_stmt 1 discriminator 1 view .LVU17
 247:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
ARM GAS  /tmp/ccUOrFw4.s 			page 11


  96              		.loc 1 247 20 discriminator 1 view .LVU18
  97 0032 019B     		ldr	r3, [sp, #4]
  98 0034 002B     		cmp	r3, #0
  99 0036 FCD0     		beq	.L4
 257:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 100              		.loc 1 257 1 is_stmt 0 view .LVU19
 101 0038 02B0     		add	sp, sp, #8
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 0
 104              		@ sp needed
 105 003a 7047     		bx	lr
 106              	.L7:
 107              		.align	2
 108              	.L6:
 109 003c 00000000 		.word	uxCriticalNesting
 110              		.cfi_endproc
 111              	.LFE6:
 113              		.section	.text.SVC_Handler,"ax",%progbits
 114              		.align	1
 115              		.global	SVC_Handler
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 120              	SVC_Handler:
 121              	.LFB7:
 258:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 259:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 260:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 261:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 122              		.loc 1 261 1 is_stmt 1 view -0
 123              		.cfi_startproc
 124              		@ Naked Function: prologue and epilogue provided by programmer.
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 262:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 127              		.loc 1 262 5 view .LVU21
 128              		.syntax unified
 129              	@ 262 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c" 1
 130 0000 074B     		   ldr r3, pxCurrentTCBConst2      
 131 0002 1968     	   ldr r1, [r3]                    
 132 0004 0868     	   ldr r0, [r1]                    
 133 0006 B0E8F04F 	   ldmia r0!, {r4-r11, r14}        
 134 000a 80F30988 	   msr psp, r0                     
 135 000e BFF36F8F 	   isb                             
 136 0012 4FF00000 	   mov r0, #0                      
 137 0016 80F31188 	   msr basepri, r0                 
 138 001a 7047     	   bx r14                          
 139              	                                   
 140 001c AFF30080 	   .align 4                        
 141 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB             
 142              	
 143              	@ 0 "" 2
 263:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r3, pxCurrentTCBConst2      \n" /* Restore the context. */
 264:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r1, [r3]                    \n" /* Use pxCurrentTCBConst to get the pxCurrentTCB ad
 265:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r0, [r1]                    \n" /* The first item in pxCurrentTCB is the task top o
 266:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldmia r0!, {r4-r11, r14}        \n" /* Pop the registers that are not automatically sav
 267:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   msr psp, r0                     \n" /* Restore the task stack pointer. */
ARM GAS  /tmp/ccUOrFw4.s 			page 12


 268:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   isb                             \n"
 269:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   mov r0, #0                      \n"
 270:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   msr basepri, r0                 \n"
 271:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   bx r14                          \n"
 272:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                   \n"
 273:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   .align 4                        \n"
 274:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
 275:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         );
 276:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 144              		.loc 1 276 1 is_stmt 0 view .LVU22
 145              		.thumb
 146              		.syntax unified
 147              		.cfi_endproc
 148              	.LFE7:
 150              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 151              		.align	1
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 156              	prvPortStartFirstTask:
 157              	.LFB8:
 277:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 278:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 279:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 280:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 158              		.loc 1 280 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ Naked Function: prologue and epilogue provided by programmer.
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 281:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 282:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 283:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 284:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * for lazy saving of FPU registers. */
 285:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 163              		.loc 1 285 5 view .LVU24
 164              		.syntax unified
 165              	@ 285 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c" 1
 166 0000 0848     		 ldr r0, =0xE000ED08   
 167 0002 0068     	 ldr r0, [r0]          
 168 0004 0068     	 ldr r0, [r0]          
 169 0006 80F30888 	 msr msp, r0           
 170 000a 4FF00000 	 mov r0, #0            
 171 000e 80F31488 	 msr control, r0       
 172 0012 62B6     	 cpsie i               
 173 0014 61B6     	 cpsie f               
 174 0016 BFF34F8F 	 dsb                   
 175 001a BFF36F8F 	 isb                   
 176 001e 00DF     	 svc 0                 
 177 0020 00BF     	 nop                   
 178 0022 000008ED 	 .ltorg                
 178      00E0
 179              	
 180              	@ 0 "" 2
 286:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, =0xE000ED08   \n" /* Use the NVIC offset register to locate the stack. */
 287:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0]          \n"
 288:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0]          \n"
ARM GAS  /tmp/ccUOrFw4.s 			page 13


 289:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " msr msp, r0           \n" /* Set the msp back to the start of the stack. */
 290:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " mov r0, #0            \n" /* Clear the bit that indicates the FPU is in use, see comment 
 291:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " msr control, r0       \n"
 292:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " cpsie i               \n" /* Globally enable interrupts. */
 293:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " cpsie f               \n"
 294:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " dsb                   \n"
 295:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " isb                   \n"
 296:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " svc 0                 \n" /* System call to start first task. */
 297:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " nop                   \n"
 298:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         " .ltorg                \n"
 299:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         );
 300:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 181              		.loc 1 300 1 is_stmt 0 view .LVU25
 182              		.thumb
 183              		.syntax unified
 184              		.cfi_endproc
 185              	.LFE8:
 187              		.section	.text.PendSV_Handler,"ax",%progbits
 188              		.align	1
 189              		.global	PendSV_Handler
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 194              	PendSV_Handler:
 195              	.LFB13:
 301:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 302:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 303:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 304:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 305:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 306:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 307:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 308:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 309:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * the r0p1 parts.  r0p1 parts should use the port from the
 310:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * /source/portable/GCC/ARM_CM7/r0p1 directory. */
 311:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 312:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 313:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 314:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* An application can install FreeRTOS interrupt handlers in one of the
 315:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * following ways:
 316:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * 1. Direct Routing - Install the functions vPortSVCHandler and
 317:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      *    xPortPendSVHandler for SVCall and PendSV interrupts respectively.
 318:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * 2. Indirect Routing - Install separate handlers for SVCall and PendSV
 319:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      *    interrupts and route program control from those handlers to
 320:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      *    vPortSVCHandler and xPortPendSVHandler functions.
 321:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      *
 322:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * Applications that use Indirect Routing must set
 323:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
 324:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
 325:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * is 1, should be preferred when possible. */
 326:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #if ( configCHECK_HANDLER_INSTALLATION == 1 )
 327:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 328:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 329:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 330:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Validate that the application has correctly installed the FreeRTOS
 331:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * handlers for SVCall and PendSV interrupts. We do not check the
 332:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * installation of the SysTick handler because the application may
ARM GAS  /tmp/ccUOrFw4.s 			page 14


 333:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * choose to drive the RTOS tick using a timer other than the SysTick
 334:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * timer by overriding the weak function vPortSetupTimerInterrupt().
 335:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          *
 336:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * Assertion failures here indicate incorrect installation of the
 337:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * FreeRTOS handlers. For help installing the FreeRTOS handlers, see
 338:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * https://www.FreeRTOS.org/FAQHelp.html.
 339:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          *
 340:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * Systems with a configurable address for the interrupt vector table
 341:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * can also encounter assertion failures or even system faults here if
 342:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * VTOR is not set correctly to point to the application's vector table. */
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 345:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 346:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #endif /* configCHECK_HANDLER_INSTALLATION */
 347:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 348:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #if ( configASSERT_DEFINED == 1 )
 349:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 350:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t ucOriginalPriority;
 351:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint32_t ulImplementedPrioBits = 0;
 352:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 353:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t ucMaxPriorityValue;
 354:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 355:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Determine the maximum priority from which ISR safe FreeRTOS API
 356:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * functions can be called.  ISR safe functions are those that end in
 357:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 358:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * ensure interrupt entry is as fast and simple as possible.
 359:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          *
 360:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * Save the interrupt priority value that is about to be clobbered. */
 361:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ucOriginalPriority = *pucFirstUserPriorityRegister;
 362:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 363:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Determine the number of priority bits available.  First write to all
 364:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * possible bits. */
 365:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 366:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 367:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Read the value back to see how many bits stuck. */
 368:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 369:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 370:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Use the same mask on the maximum system call priority. */
 371:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 372:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 373:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Check that the maximum system call priority is nonzero after
 374:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * accounting for the number of priority bits supported by the
 375:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * hardware. A priority of 0 is invalid because setting the BASEPRI
 376:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * register to 0 unmasks all interrupts, and interrupts with priority 0
 377:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * cannot be masked using BASEPRI.
 378:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 379:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ucMaxSysCallPriority );
 380:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 381:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Check that the bits not implemented in hardware are zero in
 382:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
 383:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 384:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 385:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Calculate the maximum acceptable priority group value for the number
 386:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * of bits read back. */
 387:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 388:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 389:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
ARM GAS  /tmp/ccUOrFw4.s 			page 15


 390:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulImplementedPrioBits++;
 391:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 392:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 393:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 394:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         if( ulImplementedPrioBits == 8 )
 395:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 396:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* When the hardware implements 8 priority bits, there is no way for
 397:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * the software to configure PRIGROUP to not have sub-priorities. As
 398:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * a result, the least significant bit is always used for sub-priority
 399:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * and there are 128 preemption priorities and 2 sub-priorities.
 400:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              *
 401:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * This may cause some confusion in some cases - for example, if
 402:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY is set to 5, both 5 and 4
 403:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * priority interrupts will be masked in Critical Sections as those
 404:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * are at the same preemption priority. This may appear confusing as
 405:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * 4 is higher (numerically lower) priority than
 406:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY and therefore, should not
 407:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * have been masked. Instead, if we set configMAX_SYSCALL_INTERRUPT_PRIORITY
 408:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * to 4, this confusion does not happen and the behaviour remains the same.
 409:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              *
 410:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * The following assert ensures that the sub-priority bit in the
 411:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
 412:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * confusion. */
 413:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
 414:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = 0;
 415:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 416:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         else
 417:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 418:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 419:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 420:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 421:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Shift the priority group value back to its position within the AIRCR
 422:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * register. */
 423:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 424:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 425:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 426:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Restore the clobbered interrupt priority register to its original
 427:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * value. */
 428:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         *pucFirstUserPriorityRegister = ucOriginalPriority;
 429:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 430:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #endif /* configASSERT_DEFINED */
 431:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 432:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
 433:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * the highest priority. */
 434:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 435:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 436:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR2_REG = 0;
 437:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 438:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 439:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * here already. */
 440:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     vPortSetupTimerInterrupt();
 441:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 442:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 443:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting = 0;
 444:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 445:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 446:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     vPortEnableVFP();
ARM GAS  /tmp/ccUOrFw4.s 			page 16


 447:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 448:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Lazy save always. */
 449:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 450:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 451:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task. */
 452:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     prvPortStartFirstTask();
 453:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 454:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 455:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * exit error function to prevent compiler warnings about a static function
 456:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * not being called in the case that the application writer overrides this
 457:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 458:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 459:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * symbol. */
 460:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     vTaskSwitchContext();
 461:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 462:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 463:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Should not get here! */
 464:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     return 0;
 465:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 466:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 467:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 468:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 469:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 470:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 471:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert. */
 472:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 473:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 474:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 475:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 476:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 477:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 478:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 479:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting++;
 480:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 481:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 482:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 483:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 484:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 485:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * assert function also uses a critical section. */
 486:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 1 )
 487:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 488:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 489:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 490:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 491:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 492:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 493:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 494:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 495:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 496:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 497:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 498:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 0 )
 499:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 500:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         portENABLE_INTERRUPTS();
 501:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 502:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 503:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccUOrFw4.s 			page 17


 504:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 505:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 506:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 196              		.loc 1 506 1 is_stmt 1 view -0
 197              		.cfi_startproc
 198              		@ Naked Function: prologue and epilogue provided by programmer.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 507:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* This is a naked function. */
 508:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 509:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 201              		.loc 1 509 5 view .LVU27
 202              		.syntax unified
 203              	@ 509 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c" 1
 204 0000 EFF30980 		   mrs r0, psp                         
 205 0004 BFF36F8F 	   isb                                 
 206              	                                       
 207 0008 154B     	   ldr r3, pxCurrentTCBConst           
 208 000a 1A68     	   ldr r2, [r3]                        
 209              	                                       
 210 000c 1EF0100F 	   tst r14, #0x10                      
 211 0010 08BF     	   it eq                               
 212 0012 20ED108A 	   vstmdbeq r0!, {s16-s31}             
 213              	                                       
 214 0016 20E9F04F 	   stmdb r0!, {r4-r11, r14}            
 215 001a 1060     	   str r0, [r2]                        
 216              	                                       
 217 001c 2DE90900 	   stmdb sp!, {r0, r3}                 
 218 0020 4FF05000 	   mov r0, #80                          
 219 0024 80F31188 	   msr basepri, r0                     
 220 0028 BFF34F8F 	   dsb                                 
 221 002c BFF36F8F 	   isb                                 
 222 0030 FFF7FEFF 	   bl vTaskSwitchContext               
 223 0034 4FF00000 	   mov r0, #0                          
 224 0038 80F31188 	   msr basepri, r0                     
 225 003c 09BC     	   ldmia sp!, {r0, r3}                 
 226              	                                       
 227 003e 1968     	   ldr r1, [r3]                        
 228 0040 0868     	   ldr r0, [r1]                        
 229              	                                       
 230 0042 B0E8F04F 	   ldmia r0!, {r4-r11, r14}            
 231              	                                       
 232 0046 1EF0100F 	   tst r14, #0x10                      
 233 004a 08BF     	   it eq                               
 234 004c B0EC108A 	   vldmiaeq r0!, {s16-s31}             
 235              	                                       
 236 0050 80F30988 	   msr psp, r0                         
 237 0054 BFF36F8F 	   isb                                 
 238              	                                       
 239              	                                       
 240 0058 7047     	   bx r14                              
 241              	                                       
 242 005a 00BFAFF3 	   .align 4                            
 242      0080
 243 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB  
 244              	
 245              	@ 0 "" 2
ARM GAS  /tmp/ccUOrFw4.s 			page 18


 510:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     (
 511:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   mrs r0, psp                         \n"
 512:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   isb                                 \n"
 513:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 514:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r3, pxCurrentTCBConst           \n" /* Get the location of the current TCB. */
 515:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r2, [r3]                        \n"
 516:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 517:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   tst r14, #0x10                      \n" /* Is the task using the FPU context?  If so, p
 518:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   it eq                               \n"
 519:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   vstmdbeq r0!, {s16-s31}             \n"
 520:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 521:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   stmdb r0!, {r4-r11, r14}            \n" /* Save the core registers. */
 522:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   str r0, [r2]                        \n" /* Save the new top of stack into the first mem
 523:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 524:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   stmdb sp!, {r0, r3}                 \n"
 525:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   mov r0, %0                          \n"
 526:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   msr basepri, r0                     \n"
 527:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   dsb                                 \n"
 528:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   isb                                 \n"
 529:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   bl vTaskSwitchContext               \n"
 530:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   mov r0, #0                          \n"
 531:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   msr basepri, r0                     \n"
 532:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldmia sp!, {r0, r3}                 \n"
 533:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 534:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r1, [r3]                        \n" /* The first item in pxCurrentTCB is the task t
 535:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r0, [r1]                        \n"
 536:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 537:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldmia r0!, {r4-r11, r14}            \n" /* Pop the core registers. */
 538:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 539:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   tst r14, #0x10                      \n" /* Is the task using the FPU context?  If so, p
 540:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   it eq                               \n"
 541:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   vldmiaeq r0!, {s16-s31}             \n"
 542:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 543:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   msr psp, r0                         \n"
 544:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   isb                                 \n"
 545:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 546:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 547:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 548:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 "           push { r14 }                \n"
 549:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 "           pop { pc }                  \n"
 550:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             #endif
 551:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         #endif
 552:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 553:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   bx r14                              \n"
 554:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                                       \n"
 555:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   .align 4                            \n"
 556:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB  \n"
 557:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 558:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     );
 559:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 246              		.loc 1 559 1 is_stmt 0 view .LVU28
 247              		.thumb
 248              		.syntax unified
 249              		.cfi_endproc
 250              	.LFE13:
 252              		.section	.text.vPortEnableVFP,"ax",%progbits
 253              		.align	1
ARM GAS  /tmp/ccUOrFw4.s 			page 19


 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 258              	vPortEnableVFP:
 259              	.LFB16:
 560:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 561:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 562:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 563:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 564:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 565:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 566:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * save and then restore the interrupt mask value as its value is already
 567:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****      * known. */
 568:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 569:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     traceISR_ENTER();
 570:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 571:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Increment the RTOS tick. */
 572:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 573:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 574:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             traceISR_EXIT_TO_SCHEDULER();
 575:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 576:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* A context switch is required.  Context switching is performed in
 577:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 578:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 579:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 580:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         else
 581:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 582:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             traceISR_EXIT();
 583:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 584:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 585:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portENABLE_INTERRUPTS();
 586:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 587:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 588:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 589:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 590:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 591:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 592:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 593:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecre
 594:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         TickType_t xModifiableIdleTime;
 595:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 596:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 597:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 598:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 599:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 600:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 601:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 602:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 603:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 604:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 605:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "dsb" );
 606:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "isb" );
 607:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 608:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 609:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * to be unsuspended then abandon the low power entry. */
 610:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 611:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
ARM GAS  /tmp/ccUOrFw4.s 			page 20


 612:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction
 613:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * above. */
 614:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 615:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 616:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         else
 617:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 618:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 619:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * is accounted for as best it can be, but using the tickless mode will
 620:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * inevitably result in some tiny drift of the time maintained by the
 621:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * kernel with respect to calendar time. */
 622:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 623:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 624:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Use the SysTick current-value register to determine the number of
 625:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * SysTick decrements remaining until the next tick interrupt.  If the
 626:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * current-value register is zero, then there are actually
 627:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * ulTimerCountsForOneTick decrements remaining, not zero, because the
 628:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * SysTick requests the interrupt when decrementing from 1 to 0. */
 629:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 630:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 631:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             if( ulSysTickDecrementsLeft == 0 )
 632:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 633:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 634:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 635:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 636:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Calculate the reload value required to wait xExpectedIdleTime
 637:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * tick periods.  -1 is used because this code normally executes part
 638:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * way through the first tick period.  But if the SysTick IRQ is now
 639:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * pending, then clear the IRQ, suppressing the first tick, and correct
 640:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * the reload value to reflect that the second tick period is already
 641:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * underway.  The expected idle time is always at least two ticks. */
 642:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTi
 643:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 644:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 645:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 646:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 647:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulReloadValue -= ulTimerCountsForOneTick;
 648:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 649:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 650:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             if( ulReloadValue > ulStoppedTimerCompensation )
 651:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 652:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulReloadValue -= ulStoppedTimerCompensation;
 653:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 654:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 655:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Set the new reload value. */
 656:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 657:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 658:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Clear the SysTick count flag and set the count value back to
 659:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * zero. */
 660:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 661:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 662:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick. */
 663:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 664:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 665:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 666:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 667:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 668:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * should not be executed again.  However, the original expected idle
ARM GAS  /tmp/ccUOrFw4.s 			page 21


 669:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 670:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 671:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 672:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 673:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             if( xModifiableIdleTime > 0 )
 674:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 675:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 676:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "wfi" );
 677:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "isb" );
 678:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 679:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 680:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 681:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 682:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 683:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * out of sleep mode to execute immediately.  See comments above
 684:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * the cpsid instruction above. */
 685:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 686:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 687:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 688:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 689:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 690:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * and interrupts that execute while the clock is stopped will increase
 691:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 692:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * time. */
 693:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 694:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 695:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 696:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 697:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Disable the SysTick clock without reading the
 698:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 699:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 700:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 701:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 702:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 703:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * time*/
 704:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 705:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 706:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Determine whether the SysTick has already counted to zero. */
 707:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 708:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 709:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 uint32_t ulCalculatedLoadValue;
 710:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 711:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* The tick interrupt ended the sleep (or is now pending), and
 712:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * a new tick period has started.  Reset portNVIC_SYSTICK_LOAD_REG
 713:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * with whatever remains of the new tick period. */
 714:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 715:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 716:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 717:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * underflowed because the post sleep hook did something
 718:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * that took too long or because the SysTick current-value register
 719:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * is zero. */
 720:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadVa
 721:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 {
 722:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 723:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 }
 724:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 725:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
ARM GAS  /tmp/ccUOrFw4.s 			page 22


 726:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 727:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* As the pending tick will be processed as soon as this
 728:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 729:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * forward by one less than the time spent waiting. */
 730:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 731:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 732:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             else
 733:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 734:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* Something other than the tick interrupt ended the sleep. */
 735:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 736:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* Use the SysTick current-value register to determine the
 737:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * number of SysTick decrements remaining until the expected idle
 738:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * time would have ended. */
 739:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 740:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG != portNVIC_SYSTICK_CLK_BIT )
 741:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 {
 742:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     /* If the SysTick is not using the core clock, the current-
 743:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                      * value register might still be zero here.  In that case, the
 744:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                      * SysTick didn't load from the reload register, and there are
 745:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                      * ulReloadValue decrements remaining in the expected idle
 746:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                      * time, not zero. */
 747:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     if( ulSysTickDecrementsLeft == 0 )
 748:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     {
 749:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                         ulSysTickDecrementsLeft = ulReloadValue;
 750:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     }
 751:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 }
 752:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 753:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 754:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* Work out how long the sleep lasted rounded to complete tick
 755:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * periods (not the ulReload value which accounted for part
 756:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * ticks). */
 757:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ul
 758:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 759:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* How many complete tick periods passed while the processor
 760:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * was waiting? */
 761:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 762:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 763:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 764:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * period remains. */
 765:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 766:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 767:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 768:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG again,
 769:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * then set portNVIC_SYSTICK_LOAD_REG back to its standard value.  If
 770:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * the SysTick is not using the core clock, temporarily configure it to
 771:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * use the core clock.  This configuration forces the SysTick to load
 772:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * from portNVIC_SYSTICK_LOAD_REG immediately instead of at the next
 773:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * cycle of the other clock.  Then portNVIC_SYSTICK_LOAD_REG is ready
 774:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * to receive the standard value immediately. */
 775:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 776:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portN
 777:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG == portNVIC_SYSTICK_CLK_BIT )
 778:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
 779:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 780:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 781:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             #else
 782:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             {
ARM GAS  /tmp/ccUOrFw4.s 			page 23


 783:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 /* The temporary usage of the core clock has served its purpose,
 784:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                  * as described above.  Resume usage of the other clock. */
 785:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 786:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 787:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 788:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 {
 789:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     /* The partial tick period already ended.  Be sure the SysTick
 790:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                      * counts it only once. */
 791:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0;
 792:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 }
 793:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 794:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 795:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_
 796:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             }
 797:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 798:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 799:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Step the tick to account for any tick periods that elapsed. */
 800:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 801:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 802:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Exit with interrupts enabled. */
 803:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 804:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 805:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 806:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 807:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 808:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 809:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 810:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*
 811:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 812:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 813:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****  */
 814:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 815:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 816:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 817:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 818:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 819:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 820:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 821:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTIC
 822:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 823:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 824:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 825:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Stop and clear the SysTick. */
 826:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 827:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 828:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 829:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 830:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 831:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 832:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 833:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 834:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 835:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 836:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 837:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** {
 260              		.loc 1 837 1 is_stmt 1 view -0
 261              		.cfi_startproc
ARM GAS  /tmp/ccUOrFw4.s 			page 24


 262              		@ Naked Function: prologue and epilogue provided by programmer.
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 838:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 265              		.loc 1 838 5 view .LVU30
 266              		.syntax unified
 267              	@ 838 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c" 1
 268 0000 DFF80C00 		   ldr.w r0, =0xE000ED88       
 269 0004 0168     	   ldr r1, [r0]                
 270              	                               
 271 0006 41F47001 	   orr r1, r1, #( 0xf << 20 )  
 272 000a 0160     	   str r1, [r0]                
 273 000c 7047     	   bx r14                      
 274 000e 000088ED 	   .ltorg                      
 274      00E0
 275              	
 276              	@ 0 "" 2
 839:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     (
 840:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr.w r0, =0xE000ED88       \n" /* The FPU enable bits are in the CPACR. */
 841:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   ldr r1, [r0]                \n"
 842:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "                               \n"
 843:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. *
 844:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   str r1, [r0]                \n"
 845:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   bx r14                      \n"
 846:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         "   .ltorg                      \n"
 847:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     );
 848:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 277              		.loc 1 848 1 is_stmt 0 view .LVU31
 278              		.thumb
 279              		.syntax unified
 280              		.cfi_endproc
 281              	.LFE16:
 283              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 284              		.align	1
 285              		.global	pxPortInitialiseStack
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 290              	pxPortInitialiseStack:
 291              	.LVL2:
 292              	.LFB5:
 205:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 293              		.loc 1 205 1 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 211:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 298              		.loc 1 211 5 view .LVU33
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 299              		.loc 1 213 5 view .LVU34
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 300              		.loc 1 213 19 is_stmt 0 view .LVU35
 301 0000 4FF08073 		mov	r3, #16777216
 302 0004 40F8043C 		str	r3, [r0, #-4]
 214:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 303              		.loc 1 214 5 is_stmt 1 view .LVU36
ARM GAS  /tmp/ccUOrFw4.s 			page 25


 304              	.LVL3:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 305              		.loc 1 215 5 view .LVU37
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 306              		.loc 1 215 48 is_stmt 0 view .LVU38
 307 0008 21F00101 		bic	r1, r1, #1
 308              	.LVL4:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 309              		.loc 1 215 19 view .LVU39
 310 000c 40F8081C 		str	r1, [r0, #-8]
 216:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 311              		.loc 1 216 5 is_stmt 1 view .LVU40
 312              	.LVL5:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 313              		.loc 1 217 5 view .LVU41
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 314              		.loc 1 217 21 is_stmt 0 view .LVU42
 315 0010 054B     		ldr	r3, .L13
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 316              		.loc 1 217 19 view .LVU43
 317 0012 40F80C3C 		str	r3, [r0, #-12]
 220:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 318              		.loc 1 220 5 is_stmt 1 view .LVU44
 319              	.LVL6:
 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 320              		.loc 1 221 5 view .LVU45
 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 321              		.loc 1 221 19 is_stmt 0 view .LVU46
 322 0016 40F8202C 		str	r2, [r0, #-32]
 225:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 323              		.loc 1 225 5 is_stmt 1 view .LVU47
 324              	.LVL7:
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 325              		.loc 1 226 5 view .LVU48
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 326              		.loc 1 226 19 is_stmt 0 view .LVU49
 327 001a 6FF00203 		mvn	r3, #2
 328 001e 40F8243C 		str	r3, [r0, #-36]
 228:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 329              		.loc 1 228 5 is_stmt 1 view .LVU50
 330              	.LVL8:
 230:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 331              		.loc 1 230 5 view .LVU51
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 332              		.loc 1 231 1 is_stmt 0 view .LVU52
 333 0022 4438     		subs	r0, r0, #68
 334              	.LVL9:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 335              		.loc 1 231 1 view .LVU53
 336 0024 7047     		bx	lr
 337              	.L14:
 338 0026 00BF     		.align	2
 339              	.L13:
 340 0028 00000000 		.word	prvTaskExitError
 341              		.cfi_endproc
 342              	.LFE5:
 344              		.section	.text.vPortEndScheduler,"ax",%progbits
ARM GAS  /tmp/ccUOrFw4.s 			page 26


 345              		.align	1
 346              		.global	vPortEndScheduler
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	vPortEndScheduler:
 352              	.LFB10:
 469:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 353              		.loc 1 469 1 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 472:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 358              		.loc 1 472 5 view .LVU55
 359 0000 074B     		ldr	r3, .L18
 360 0002 1B68     		ldr	r3, [r3]
 361 0004 B3F57A7F 		cmp	r3, #1000
 362 0008 08D0     		beq	.L15
 472:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 363              		.loc 1 472 5 view .LVU56
 364              	.LBB42:
 365              	.LBI42:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 366              		.loc 2 213 30 view .LVU57
 367              	.LBB43:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 368              		.loc 2 215 5 view .LVU58
 369              		.loc 2 217 5 view .LVU59
 370              		.syntax unified
 371              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 372 000a 4FF05003 		   mov r3, #80                                              
 373 000e 83F31188 	   msr basepri, r3                                         
 374 0012 BFF36F8F 	   isb                                                     
 375 0016 BFF34F8F 	   dsb                                                     
 376              	
 377              	@ 0 "" 2
 378              	.LVL10:
 379              		.thumb
 380              		.syntax unified
 381              	.L17:
 382              		.loc 2 217 5 is_stmt 0 view .LVU60
 383              	.LBE43:
 384              	.LBE42:
 472:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 385              		.loc 1 472 5 is_stmt 1 discriminator 1 view .LVU61
 472:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 386              		.loc 1 472 5 discriminator 1 view .LVU62
 387 001a FEE7     		b	.L17
 388              	.L15:
 473:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 389              		.loc 1 473 1 is_stmt 0 view .LVU63
 390 001c 7047     		bx	lr
 391              	.L19:
 392 001e 00BF     		.align	2
 393              	.L18:
 394 0020 00000000 		.word	uxCriticalNesting
ARM GAS  /tmp/ccUOrFw4.s 			page 27


 395              		.cfi_endproc
 396              	.LFE10:
 398              		.section	.text.vPortEnterCritical,"ax",%progbits
 399              		.align	1
 400              		.global	vPortEnterCritical
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	vPortEnterCritical:
 406              	.LFB11:
 477:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 407              		.loc 1 477 1 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 478:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting++;
 412              		.loc 1 478 5 view .LVU65
 413              	.LBB44:
 414              	.LBI44:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 415              		.loc 2 213 30 view .LVU66
 416              	.LBB45:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 417              		.loc 2 215 5 view .LVU67
 418              		.loc 2 217 5 view .LVU68
 419              		.syntax unified
 420              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 421 0000 4FF05003 		   mov r3, #80                                              
 422 0004 83F31188 	   msr basepri, r3                                         
 423 0008 BFF36F8F 	   isb                                                     
 424 000c BFF34F8F 	   dsb                                                     
 425              	
 426              	@ 0 "" 2
 427              		.thumb
 428              		.syntax unified
 429              	.LBE45:
 430              	.LBE44:
 479:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 431              		.loc 1 479 5 view .LVU69
 479:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 432              		.loc 1 479 22 is_stmt 0 view .LVU70
 433 0010 0B4A     		ldr	r2, .L24
 434 0012 1368     		ldr	r3, [r2]
 435 0014 0133     		adds	r3, r3, #1
 436 0016 1360     		str	r3, [r2]
 486:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 437              		.loc 1 486 5 is_stmt 1 view .LVU71
 486:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 438              		.loc 1 486 7 is_stmt 0 view .LVU72
 439 0018 012B     		cmp	r3, #1
 440 001a 00D0     		beq	.L23
 441              	.L20:
 490:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 442              		.loc 1 490 1 view .LVU73
 443 001c 7047     		bx	lr
 444              	.L23:
ARM GAS  /tmp/ccUOrFw4.s 			page 28


 488:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 445              		.loc 1 488 9 is_stmt 1 view .LVU74
 446 001e 4FF0E023 		mov	r3, #-536813568
 447 0022 D3F8043D 		ldr	r3, [r3, #3332]
 448 0026 13F0FF0F 		tst	r3, #255
 449 002a F7D0     		beq	.L20
 488:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 450              		.loc 1 488 9 view .LVU75
 451              	.LBB46:
 452              	.LBI46:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 453              		.loc 2 213 30 view .LVU76
 454              	.LBB47:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 455              		.loc 2 215 5 view .LVU77
 456              		.loc 2 217 5 view .LVU78
 457              		.syntax unified
 458              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 459 002c 4FF05003 		   mov r3, #80                                              
 460 0030 83F31188 	   msr basepri, r3                                         
 461 0034 BFF36F8F 	   isb                                                     
 462 0038 BFF34F8F 	   dsb                                                     
 463              	
 464              	@ 0 "" 2
 465              	.LVL11:
 466              		.thumb
 467              		.syntax unified
 468              	.L22:
 469              		.loc 2 217 5 is_stmt 0 view .LVU79
 470              	.LBE47:
 471              	.LBE46:
 488:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 472              		.loc 1 488 9 is_stmt 1 discriminator 1 view .LVU80
 488:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 473              		.loc 1 488 9 discriminator 1 view .LVU81
 474 003c FEE7     		b	.L22
 475              	.L25:
 476 003e 00BF     		.align	2
 477              	.L24:
 478 0040 00000000 		.word	uxCriticalNesting
 479              		.cfi_endproc
 480              	.LFE11:
 482              		.section	.text.vPortExitCritical,"ax",%progbits
 483              		.align	1
 484              		.global	vPortExitCritical
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 489              	vPortExitCritical:
 490              	.LFB12:
 494:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 491              		.loc 1 494 1 view -0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 495:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
ARM GAS  /tmp/ccUOrFw4.s 			page 29


 496              		.loc 1 495 5 view .LVU83
 497 0000 094B     		ldr	r3, .L30
 498 0002 1B68     		ldr	r3, [r3]
 499 0004 43B9     		cbnz	r3, .L27
 495:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 500              		.loc 1 495 5 view .LVU84
 501              	.LBB48:
 502              	.LBI48:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 503              		.loc 2 213 30 view .LVU85
 504              	.LBB49:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 505              		.loc 2 215 5 view .LVU86
 506              		.loc 2 217 5 view .LVU87
 507              		.syntax unified
 508              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 509 0006 4FF05003 		   mov r3, #80                                              
 510 000a 83F31188 	   msr basepri, r3                                         
 511 000e BFF36F8F 	   isb                                                     
 512 0012 BFF34F8F 	   dsb                                                     
 513              	
 514              	@ 0 "" 2
 515              	.LVL12:
 516              		.thumb
 517              		.syntax unified
 518              	.L28:
 519              		.loc 2 217 5 is_stmt 0 view .LVU88
 520              	.LBE49:
 521              	.LBE48:
 495:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 522              		.loc 1 495 5 is_stmt 1 discriminator 1 view .LVU89
 495:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 523              		.loc 1 495 5 discriminator 1 view .LVU90
 524 0016 FEE7     		b	.L28
 525              	.L27:
 495:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 526              		.loc 1 495 38 discriminator 2 view .LVU91
 496:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 527              		.loc 1 496 5 discriminator 2 view .LVU92
 496:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 528              		.loc 1 496 22 is_stmt 0 discriminator 2 view .LVU93
 529 0018 013B     		subs	r3, r3, #1
 530 001a 034A     		ldr	r2, .L30
 531 001c 1360     		str	r3, [r2]
 498:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 532              		.loc 1 498 5 is_stmt 1 discriminator 2 view .LVU94
 498:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 533              		.loc 1 498 7 is_stmt 0 discriminator 2 view .LVU95
 534 001e 0BB9     		cbnz	r3, .L26
 500:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 535              		.loc 1 500 9 is_stmt 1 view .LVU96
 536              	.LVL13:
 537              	.LBB50:
 538              	.LBI50:
 218:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
ARM GAS  /tmp/ccUOrFw4.s 			page 30


 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 230:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 232:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 234:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 246:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 539              		.loc 2 249 30 view .LVU97
 540              	.LBB51:
 250:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 541              		.loc 2 251 5 view .LVU98
 542              		.syntax unified
 543              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 544 0020 83F31188 		   msr basepri, r3 
 545              	@ 0 "" 2
 546              	.LVL14:
 547              		.thumb
 548              		.syntax unified
 549              	.L26:
 550              		.loc 2 251 5 is_stmt 0 view .LVU99
 551              	.LBE51:
 552              	.LBE50:
 502:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 553              		.loc 1 502 1 view .LVU100
 554 0024 7047     		bx	lr
 555              	.L31:
 556 0026 00BF     		.align	2
 557              	.L30:
 558 0028 00000000 		.word	uxCriticalNesting
 559              		.cfi_endproc
 560              	.LFE12:
 562              		.section	.text.SysTick_Handler,"ax",%progbits
 563              		.align	1
 564              		.global	SysTick_Handler
ARM GAS  /tmp/ccUOrFw4.s 			page 31


 565              		.syntax unified
 566              		.thumb
 567              		.thumb_func
 569              	SysTick_Handler:
 570              	.LFB14:
 563:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 571              		.loc 1 563 1 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575 0000 08B5     		push	{r3, lr}
 576              	.LCFI2:
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 3, -8
 579              		.cfi_offset 14, -4
 568:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     traceISR_ENTER();
 580              		.loc 1 568 5 view .LVU102
 581              	.LBB52:
 582              	.LBI52:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 583              		.loc 2 213 30 view .LVU103
 584              	.LBB53:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 585              		.loc 2 215 5 view .LVU104
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 586              		.loc 2 217 5 view .LVU105
 587              		.syntax unified
 588              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 589 0002 4FF05003 		   mov r3, #80                                              
 590 0006 83F31188 	   msr basepri, r3                                         
 591 000a BFF36F8F 	   isb                                                     
 592 000e BFF34F8F 	   dsb                                                     
 593              	
 594              	@ 0 "" 2
 595              		.thumb
 596              		.syntax unified
 597              	.LBE53:
 598              	.LBE52:
 569:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 599              		.loc 1 569 21 view .LVU106
 572:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 600              		.loc 1 572 9 view .LVU107
 572:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 601              		.loc 1 572 13 is_stmt 0 view .LVU108
 602 0012 FFF7FEFF 		bl	xTaskIncrementTick
 603              	.LVL15:
 572:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 604              		.loc 1 572 11 view .LVU109
 605 0016 28B1     		cbz	r0, .L33
 574:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 606              		.loc 1 574 41 is_stmt 1 view .LVU110
 578:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 607              		.loc 1 578 13 view .LVU111
 578:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 608              		.loc 1 578 35 is_stmt 0 view .LVU112
 609 0018 4FF0E023 		mov	r3, #-536813568
 610 001c 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/ccUOrFw4.s 			page 32


 611 0020 C3F8042D 		str	r2, [r3, #3332]
 612              	.L33:
 582:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 613              		.loc 1 582 28 is_stmt 1 view .LVU113
 585:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 614              		.loc 1 585 5 view .LVU114
 615              	.LVL16:
 616              	.LBB54:
 617              	.LBI54:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 618              		.loc 2 249 30 view .LVU115
 619              	.LBB55:
 620              		.loc 2 251 5 view .LVU116
 621 0024 0023     		movs	r3, #0
 622              		.syntax unified
 623              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 624 0026 83F31188 		   msr basepri, r3 
 625              	@ 0 "" 2
 626              	.LVL17:
 627              		.loc 2 251 5 is_stmt 0 view .LVU117
 628              		.thumb
 629              		.syntax unified
 630              	.LBE55:
 631              	.LBE54:
 586:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 632              		.loc 1 586 1 view .LVU118
 633 002a 08BD     		pop	{r3, pc}
 634              		.cfi_endproc
 635              	.LFE14:
 637              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 638              		.align	1
 639              		.weak	vPortSetupTimerInterrupt
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 644              	vPortSetupTimerInterrupt:
 645              	.LFB15:
 815:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 646              		.loc 1 815 1 is_stmt 1 view -0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 826:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 651              		.loc 1 826 5 view .LVU120
 826:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 652              		.loc 1 826 31 is_stmt 0 view .LVU121
 653 0000 4FF0E022 		mov	r2, #-536813568
 654 0004 0023     		movs	r3, #0
 655 0006 1361     		str	r3, [r2, #16]
 827:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 656              		.loc 1 827 5 is_stmt 1 view .LVU122
 827:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 657              		.loc 1 827 40 is_stmt 0 view .LVU123
 658 0008 9361     		str	r3, [r2, #24]
 830:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 659              		.loc 1 830 5 is_stmt 1 view .LVU124
ARM GAS  /tmp/ccUOrFw4.s 			page 33


 830:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 660              		.loc 1 830 58 is_stmt 0 view .LVU125
 661 000a 054B     		ldr	r3, .L36
 662 000c 1B68     		ldr	r3, [r3]
 663 000e 0549     		ldr	r1, .L36+4
 664 0010 A1FB0313 		umull	r1, r3, r1, r3
 665 0014 9B09     		lsrs	r3, r3, #6
 830:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 666              		.loc 1 830 81 view .LVU126
 667 0016 013B     		subs	r3, r3, #1
 830:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 668              		.loc 1 830 31 view .LVU127
 669 0018 5361     		str	r3, [r2, #20]
 831:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 670              		.loc 1 831 5 is_stmt 1 view .LVU128
 831:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 671              		.loc 1 831 31 is_stmt 0 view .LVU129
 672 001a 0723     		movs	r3, #7
 673 001c 1361     		str	r3, [r2, #16]
 832:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 674              		.loc 1 832 1 view .LVU130
 675 001e 7047     		bx	lr
 676              	.L37:
 677              		.align	2
 678              	.L36:
 679 0020 00000000 		.word	SystemCoreClock
 680 0024 D34D6210 		.word	274877907
 681              		.cfi_endproc
 682              	.LFE15:
 684              		.section	.text.xPortStartScheduler,"ax",%progbits
 685              		.align	1
 686              		.global	xPortStartScheduler
 687              		.syntax unified
 688              		.thumb
 689              		.thumb_func
 691              	xPortStartScheduler:
 692              	.LFB9:
 307:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 693              		.loc 1 307 1 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 8
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 311:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 697              		.loc 1 311 5 view .LVU132
 698 0000 4FF0E023 		mov	r3, #-536813568
 699 0004 D3F8002D 		ldr	r2, [r3, #3328]
 700 0008 5A4B     		ldr	r3, .L60
 701 000a 9A42     		cmp	r2, r3
 702 000c 17D0     		beq	.L56
 311:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 703              		.loc 1 311 55 discriminator 2 view .LVU133
 312:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 704              		.loc 1 312 5 discriminator 2 view .LVU134
 705 000e 4FF0E023 		mov	r3, #-536813568
 706 0012 D3F8002D 		ldr	r2, [r3, #3328]
 707 0016 584B     		ldr	r3, .L60+4
 708 0018 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccUOrFw4.s 			page 34


 709 001a 19D0     		beq	.L57
 312:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 710              		.loc 1 312 55 discriminator 2 view .LVU135
 711              	.LBB56:
 328:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 712              		.loc 1 328 9 discriminator 2 view .LVU136
 328:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 713              		.loc 1 328 33 is_stmt 0 discriminator 2 view .LVU137
 714 001c 4FF0E023 		mov	r3, #-536813568
 715 0020 D3F8083D 		ldr	r3, [r3, #3336]
 716              	.LVL18:
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 717              		.loc 1 343 9 is_stmt 1 discriminator 2 view .LVU138
 718 0024 D96A     		ldr	r1, [r3, #44]
 719 0026 554A     		ldr	r2, .L60+8
 720 0028 9142     		cmp	r1, r2
 721 002a 1AD0     		beq	.L43
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 722              		.loc 1 343 9 view .LVU139
 723              	.LBB57:
 724              	.LBI57:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 725              		.loc 2 213 30 view .LVU140
 726              	.LBB58:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 727              		.loc 2 215 5 view .LVU141
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 728              		.loc 2 217 5 view .LVU142
 729              		.syntax unified
 730              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 731 002c 4FF05003 		   mov r3, #80                                              
 732 0030 83F31188 	   msr basepri, r3                                         
 733 0034 BFF36F8F 	   isb                                                     
 734 0038 BFF34F8F 	   dsb                                                     
 735              	
 736              	@ 0 "" 2
 737              	.LVL19:
 738              		.thumb
 739              		.syntax unified
 740              	.L44:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 741              		.loc 2 217 5 is_stmt 0 view .LVU143
 742              	.LBE58:
 743              	.LBE57:
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 744              		.loc 1 343 9 is_stmt 1 discriminator 3 view .LVU144
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 745              		.loc 1 343 9 discriminator 3 view .LVU145
 746 003c FEE7     		b	.L44
 747              	.LVL20:
 748              	.L56:
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 749              		.loc 1 343 9 is_stmt 0 discriminator 3 view .LVU146
 750              	.LBE56:
 311:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 751              		.loc 1 311 5 is_stmt 1 view .LVU147
 752              	.LBB61:
ARM GAS  /tmp/ccUOrFw4.s 			page 35


 753              	.LBI61:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 754              		.loc 2 213 30 view .LVU148
 755              	.LBB62:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 756              		.loc 2 215 5 view .LVU149
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 757              		.loc 2 217 5 view .LVU150
 758              		.syntax unified
 759              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 760 003e 4FF05003 		   mov r3, #80                                              
 761 0042 83F31188 	   msr basepri, r3                                         
 762 0046 BFF36F8F 	   isb                                                     
 763 004a BFF34F8F 	   dsb                                                     
 764              	
 765              	@ 0 "" 2
 766              	.LVL21:
 767              		.thumb
 768              		.syntax unified
 769              	.L40:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 770              		.loc 2 217 5 is_stmt 0 view .LVU151
 771              	.LBE62:
 772              	.LBE61:
 311:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 773              		.loc 1 311 5 is_stmt 1 discriminator 1 view .LVU152
 311:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 774              		.loc 1 311 5 discriminator 1 view .LVU153
 775 004e FEE7     		b	.L40
 776              	.L57:
 312:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 777              		.loc 1 312 5 view .LVU154
 778              	.LBB63:
 779              	.LBI63:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 780              		.loc 2 213 30 view .LVU155
 781              	.LBB64:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 782              		.loc 2 215 5 view .LVU156
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 783              		.loc 2 217 5 view .LVU157
 784              		.syntax unified
 785              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 786 0050 4FF05003 		   mov r3, #80                                              
 787 0054 83F31188 	   msr basepri, r3                                         
 788 0058 BFF36F8F 	   isb                                                     
 789 005c BFF34F8F 	   dsb                                                     
 790              	
 791              	@ 0 "" 2
 792              	.LVL22:
 793              		.thumb
 794              		.syntax unified
 795              	.L42:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 796              		.loc 2 217 5 is_stmt 0 view .LVU158
 797              	.LBE64:
 798              	.LBE63:
ARM GAS  /tmp/ccUOrFw4.s 			page 36


 312:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 799              		.loc 1 312 5 is_stmt 1 discriminator 2 view .LVU159
 312:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 800              		.loc 1 312 5 discriminator 2 view .LVU160
 801 0060 FEE7     		b	.L42
 802              	.LVL23:
 803              	.L43:
 804              	.LBB65:
 343:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 805              		.loc 1 343 81 discriminator 2 view .LVU161
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 806              		.loc 1 344 9 discriminator 2 view .LVU162
 807 0062 9A6B     		ldr	r2, [r3, #56]
 808 0064 464B     		ldr	r3, .L60+12
 809              	.LVL24:
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 810              		.loc 1 344 9 is_stmt 0 discriminator 2 view .LVU163
 811 0066 9A42     		cmp	r2, r3
 812 0068 08D0     		beq	.L45
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 813              		.loc 1 344 9 is_stmt 1 view .LVU164
 814              	.LBB59:
 815              	.LBI59:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 816              		.loc 2 213 30 view .LVU165
 817              	.LBB60:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 818              		.loc 2 215 5 view .LVU166
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 819              		.loc 2 217 5 view .LVU167
 820              		.syntax unified
 821              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 822 006a 4FF05003 		   mov r3, #80                                              
 823 006e 83F31188 	   msr basepri, r3                                         
 824 0072 BFF36F8F 	   isb                                                     
 825 0076 BFF34F8F 	   dsb                                                     
 826              	
 827              	@ 0 "" 2
 828              	.LVL25:
 829              		.thumb
 830              		.syntax unified
 831              	.L46:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 832              		.loc 2 217 5 is_stmt 0 view .LVU168
 833              	.LBE60:
 834              	.LBE59:
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 835              		.loc 1 344 9 is_stmt 1 discriminator 4 view .LVU169
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 836              		.loc 1 344 9 discriminator 4 view .LVU170
 837 007a FEE7     		b	.L46
 838              	.L45:
 839              	.LBE65:
 307:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 840              		.loc 1 307 1 is_stmt 0 discriminator 2 view .LVU171
 841 007c 30B5     		push	{r4, r5, lr}
 842              	.LCFI3:
ARM GAS  /tmp/ccUOrFw4.s 			page 37


 843              		.cfi_def_cfa_offset 12
 844              		.cfi_offset 4, -12
 845              		.cfi_offset 5, -8
 846              		.cfi_offset 14, -4
 847 007e 83B0     		sub	sp, sp, #12
 848              	.LCFI4:
 849              		.cfi_def_cfa_offset 24
 850              	.LBB66:
 344:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 851              		.loc 1 344 87 is_stmt 1 discriminator 2 view .LVU172
 852              	.LBE66:
 853              	.LBB67:
 350:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint32_t ulImplementedPrioBits = 0;
 854              		.loc 1 350 9 discriminator 2 view .LVU173
 351:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 855              		.loc 1 351 9 discriminator 2 view .LVU174
 351:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 856              		.loc 1 351 27 is_stmt 0 discriminator 2 view .LVU175
 857 0080 0023     		movs	r3, #0
 858 0082 0193     		str	r3, [sp, #4]
 859              	.LVL26:
 352:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t ucMaxPriorityValue;
 860              		.loc 1 352 9 is_stmt 1 discriminator 2 view .LVU176
 353:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 861              		.loc 1 353 9 discriminator 2 view .LVU177
 361:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 862              		.loc 1 361 9 discriminator 2 view .LVU178
 361:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 863              		.loc 1 361 30 is_stmt 0 discriminator 2 view .LVU179
 864 0084 3F4B     		ldr	r3, .L60+16
 865 0086 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 866 0088 D2B2     		uxtb	r2, r2
 361:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 867              		.loc 1 361 28 discriminator 2 view .LVU180
 868 008a 8DF80220 		strb	r2, [sp, #2]
 365:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 869              		.loc 1 365 9 is_stmt 1 discriminator 2 view .LVU181
 365:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 870              		.loc 1 365 39 is_stmt 0 discriminator 2 view .LVU182
 871 008e FF22     		movs	r2, #255
 872 0090 1A70     		strb	r2, [r3]
 368:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 873              		.loc 1 368 9 is_stmt 1 discriminator 2 view .LVU183
 368:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 874              		.loc 1 368 30 is_stmt 0 discriminator 2 view .LVU184
 875 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 876 0094 DBB2     		uxtb	r3, r3
 368:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 877              		.loc 1 368 28 discriminator 2 view .LVU185
 878 0096 8DF80330 		strb	r3, [sp, #3]
 371:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 879              		.loc 1 371 9 is_stmt 1 discriminator 2 view .LVU186
 371:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 880              		.loc 1 371 69 is_stmt 0 discriminator 2 view .LVU187
 881 009a 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 882 009e 03F05003 		and	r3, r3, #80
 371:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccUOrFw4.s 			page 38


 883              		.loc 1 371 30 discriminator 2 view .LVU188
 884 00a2 394A     		ldr	r2, .L60+20
 885 00a4 1370     		strb	r3, [r2]
 379:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 886              		.loc 1 379 9 is_stmt 1 discriminator 2 view .LVU189
 887 00a6 43B9     		cbnz	r3, .L47
 379:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 888              		.loc 1 379 9 view .LVU190
 889              	.LBB68:
 890              	.LBI68:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 891              		.loc 2 213 30 view .LVU191
 892              	.LBB69:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 893              		.loc 2 215 5 view .LVU192
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 894              		.loc 2 217 5 view .LVU193
 895              		.syntax unified
 896              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 897 00a8 4FF05003 		   mov r3, #80                                              
 898 00ac 83F31188 	   msr basepri, r3                                         
 899 00b0 BFF36F8F 	   isb                                                     
 900 00b4 BFF34F8F 	   dsb                                                     
 901              	
 902              	@ 0 "" 2
 903              	.LVL27:
 904              		.thumb
 905              		.syntax unified
 906              	.L48:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 907              		.loc 2 217 5 is_stmt 0 view .LVU194
 908              	.LBE69:
 909              	.LBE68:
 379:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 910              		.loc 1 379 9 is_stmt 1 discriminator 5 view .LVU195
 379:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 911              		.loc 1 379 9 discriminator 5 view .LVU196
 912 00b8 FEE7     		b	.L48
 913              	.L47:
 379:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 914              		.loc 1 379 45 discriminator 2 view .LVU197
 383:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 915              		.loc 1 383 9 discriminator 2 view .LVU198
 916 00ba 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 917 00be DB43     		mvns	r3, r3
 918 00c0 13F0500F 		tst	r3, #80
 919 00c4 08D0     		beq	.L49
 383:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 920              		.loc 1 383 9 view .LVU199
 921              	.LBB70:
 922              	.LBI70:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 923              		.loc 2 213 30 view .LVU200
 924              	.LBB71:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 925              		.loc 2 215 5 view .LVU201
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
ARM GAS  /tmp/ccUOrFw4.s 			page 39


 926              		.loc 2 217 5 view .LVU202
 927              		.syntax unified
 928              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 929 00c6 4FF05003 		   mov r3, #80                                              
 930 00ca 83F31188 	   msr basepri, r3                                         
 931 00ce BFF36F8F 	   isb                                                     
 932 00d2 BFF34F8F 	   dsb                                                     
 933              	
 934              	@ 0 "" 2
 935              	.LVL28:
 936              		.thumb
 937              		.syntax unified
 938              	.L50:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 939              		.loc 2 217 5 is_stmt 0 view .LVU203
 940              	.LBE71:
 941              	.LBE70:
 383:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 942              		.loc 1 383 9 is_stmt 1 discriminator 6 view .LVU204
 383:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 943              		.loc 1 383 9 discriminator 6 view .LVU205
 944 00d6 FEE7     		b	.L50
 945              	.L49:
 388:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 946              		.loc 1 388 61 view .LVU206
 388:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 947              		.loc 1 388 37 is_stmt 0 view .LVU207
 948 00d8 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 388:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 949              		.loc 1 388 61 view .LVU208
 950 00dc 13F0800F 		tst	r3, #128
 951 00e0 09D0     		beq	.L58
 390:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 952              		.loc 1 390 13 is_stmt 1 view .LVU209
 390:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 953              		.loc 1 390 34 is_stmt 0 view .LVU210
 954 00e2 019B     		ldr	r3, [sp, #4]
 955 00e4 0133     		adds	r3, r3, #1
 956 00e6 0193     		str	r3, [sp, #4]
 391:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 957              		.loc 1 391 13 is_stmt 1 view .LVU211
 391:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 958              		.loc 1 391 32 is_stmt 0 view .LVU212
 959 00e8 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 960 00ec 5B00     		lsls	r3, r3, #1
 961 00ee DBB2     		uxtb	r3, r3
 962 00f0 8DF80330 		strb	r3, [sp, #3]
 963 00f4 F0E7     		b	.L49
 964              	.L58:
 394:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 965              		.loc 1 394 9 is_stmt 1 view .LVU213
 394:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 966              		.loc 1 394 35 is_stmt 0 view .LVU214
 967 00f6 019B     		ldr	r3, [sp, #4]
 394:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 968              		.loc 1 394 11 view .LVU215
 969 00f8 082B     		cmp	r3, #8
ARM GAS  /tmp/ccUOrFw4.s 			page 40


 970 00fa 36D0     		beq	.L59
 418:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 971              		.loc 1 418 13 is_stmt 1 view .LVU216
 418:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 972              		.loc 1 418 56 is_stmt 0 view .LVU217
 973 00fc 019B     		ldr	r3, [sp, #4]
 974 00fe C3F10703 		rsb	r3, r3, #7
 418:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 975              		.loc 1 418 32 view .LVU218
 976 0102 224A     		ldr	r2, .L60+24
 977 0104 1360     		str	r3, [r2]
 978              	.L53:
 423:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 979              		.loc 1 423 9 is_stmt 1 view .LVU219
 423:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 980              		.loc 1 423 28 is_stmt 0 view .LVU220
 981 0106 214A     		ldr	r2, .L60+24
 982 0108 1368     		ldr	r3, [r2]
 983 010a 1B02     		lsls	r3, r3, #8
 984 010c 1360     		str	r3, [r2]
 424:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 985              		.loc 1 424 9 is_stmt 1 view .LVU221
 424:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 986              		.loc 1 424 28 is_stmt 0 view .LVU222
 987 010e 03F4E063 		and	r3, r3, #1792
 988 0112 1360     		str	r3, [r2]
 428:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 989              		.loc 1 428 9 is_stmt 1 view .LVU223
 428:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 990              		.loc 1 428 39 is_stmt 0 view .LVU224
 991 0114 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 992 0118 DBB2     		uxtb	r3, r3
 993 011a 1A4A     		ldr	r2, .L60+16
 994 011c 1370     		strb	r3, [r2]
 995              	.LBE67:
 434:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 996              		.loc 1 434 5 is_stmt 1 view .LVU225
 997 011e 4FF0E024 		mov	r4, #-536813568
 998 0122 D4F8203D 		ldr	r3, [r4, #3360]
 434:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 999              		.loc 1 434 24 is_stmt 0 view .LVU226
 1000 0126 43F47F03 		orr	r3, r3, #16711680
 1001 012a C4F8203D 		str	r3, [r4, #3360]
 435:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR2_REG = 0;
 1002              		.loc 1 435 5 is_stmt 1 view .LVU227
 1003 012e D4F8203D 		ldr	r3, [r4, #3360]
 435:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR2_REG = 0;
 1004              		.loc 1 435 24 is_stmt 0 view .LVU228
 1005 0132 43F07F43 		orr	r3, r3, #-16777216
 1006 0136 C4F8203D 		str	r3, [r4, #3360]
 436:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1007              		.loc 1 436 5 is_stmt 1 view .LVU229
 436:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1008              		.loc 1 436 24 is_stmt 0 view .LVU230
 1009 013a 0025     		movs	r5, #0
 1010 013c C4F81C5D 		str	r5, [r4, #3356]
 440:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccUOrFw4.s 			page 41


 1011              		.loc 1 440 5 is_stmt 1 view .LVU231
 1012 0140 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 1013              	.LVL29:
 443:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1014              		.loc 1 443 5 view .LVU232
 443:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1015              		.loc 1 443 23 is_stmt 0 view .LVU233
 1016 0144 124B     		ldr	r3, .L60+28
 1017 0146 1D60     		str	r5, [r3]
 446:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1018              		.loc 1 446 5 is_stmt 1 view .LVU234
 1019 0148 FFF7FEFF 		bl	vPortEnableVFP
 1020              	.LVL30:
 449:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1021              		.loc 1 449 5 view .LVU235
 1022 014c D4F8343F 		ldr	r3, [r4, #3892]
 449:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1023              		.loc 1 449 20 is_stmt 0 view .LVU236
 1024 0150 43F04043 		orr	r3, r3, #-1073741824
 1025 0154 C4F8343F 		str	r3, [r4, #3892]
 452:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1026              		.loc 1 452 5 is_stmt 1 view .LVU237
 1027 0158 FFF7FEFF 		bl	prvPortStartFirstTask
 1028              	.LVL31:
 460:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 1029              		.loc 1 460 5 view .LVU238
 1030 015c FFF7FEFF 		bl	vTaskSwitchContext
 1031              	.LVL32:
 461:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 1032              		.loc 1 461 5 view .LVU239
 1033 0160 FFF7FEFF 		bl	prvTaskExitError
 1034              	.LVL33:
 464:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** }
 1035              		.loc 1 464 5 view .LVU240
 465:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 1036              		.loc 1 465 1 is_stmt 0 view .LVU241
 1037 0164 2846     		mov	r0, r5
 1038 0166 03B0     		add	sp, sp, #12
 1039              	.LCFI5:
 1040              		.cfi_remember_state
 1041              		.cfi_def_cfa_offset 12
 1042              		@ sp needed
 1043 0168 30BD     		pop	{r4, r5, pc}
 1044              	.L59:
 1045              	.LCFI6:
 1046              		.cfi_restore_state
 1047              	.LBB72:
 413:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = 0;
 1048              		.loc 1 413 13 is_stmt 1 discriminator 2 view .LVU242
 413:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue = 0;
 1049              		.loc 1 413 82 discriminator 2 view .LVU243
 414:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 1050              		.loc 1 414 13 discriminator 2 view .LVU244
 414:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 1051              		.loc 1 414 32 is_stmt 0 discriminator 2 view .LVU245
 1052 016a 084B     		ldr	r3, .L60+24
 1053 016c 0022     		movs	r2, #0
ARM GAS  /tmp/ccUOrFw4.s 			page 42


 1054 016e 1A60     		str	r2, [r3]
 1055 0170 C9E7     		b	.L53
 1056              	.L61:
 1057 0172 00BF     		.align	2
 1058              	.L60:
 1059 0174 71C20F41 		.word	1091551857
 1060 0178 70C20F41 		.word	1091551856
 1061 017c 00000000 		.word	SVC_Handler
 1062 0180 00000000 		.word	PendSV_Handler
 1063 0184 00E400E0 		.word	-536812544
 1064 0188 00000000 		.word	ucMaxSysCallPriority
 1065 018c 00000000 		.word	ulMaxPRIGROUPValue
 1066 0190 00000000 		.word	uxCriticalNesting
 1067              	.LBE72:
 1068              		.cfi_endproc
 1069              	.LFE9:
 1071              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 1072              		.align	1
 1073              		.global	vPortValidateInterruptPriority
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1078              	vPortValidateInterruptPriority:
 1079              	.LFB17:
 849:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 850:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 851:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 852:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 853:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     void vPortValidateInterruptPriority( void )
 854:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     {
 1080              		.loc 1 854 5 is_stmt 1 view -0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              		@ link register save eliminated.
 855:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulCurrentInterrupt;
 1085              		.loc 1 855 9 view .LVU247
 856:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         uint8_t ucCurrentPriority;
 1086              		.loc 1 856 9 view .LVU248
 857:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 858:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Obtain the number of the currently executing interrupt. */
 859:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 1087              		.loc 1 859 9 view .LVU249
 1088              		.syntax unified
 1089              	@ 859 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c" 1
 1090 0000 EFF30583 		mrs r3, ipsr
 1091              	@ 0 "" 2
 1092              	.LVL34:
 860:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 861:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Is the interrupt number a user defined interrupt? */
 862:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 1093              		.loc 1 862 9 view .LVU250
 1094              		.loc 1 862 11 is_stmt 0 view .LVU251
 1095              		.thumb
 1096              		.syntax unified
 1097 0004 0F2B     		cmp	r3, #15
 1098 0006 0FD9     		bls	.L63
ARM GAS  /tmp/ccUOrFw4.s 			page 43


 863:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         {
 864:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* Look up the interrupt's priority. */
 865:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 1099              		.loc 1 865 13 is_stmt 1 view .LVU252
 1100              		.loc 1 865 61 is_stmt 0 view .LVU253
 1101 0008 114A     		ldr	r2, .L67
 1102              		.loc 1 865 31 view .LVU254
 1103 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1104              	.LVL35:
 1105              		.loc 1 865 31 view .LVU255
 1106 000c DBB2     		uxtb	r3, r3
 1107              	.LVL36:
 866:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 867:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             /* The following assertion will fail if a service routine (ISR) for
 868:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * an interrupt that has been assigned a priority above
 869:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 870:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * function.  ISR safe FreeRTOS API functions must *only* be called
 871:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * from interrupts that have been assigned a priority at or below
 872:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 873:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              *
 874:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * Numerically low interrupt priority numbers represent logically high
 875:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * interrupt priorities, therefore the priority of the interrupt must
 876:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * be set to a value equal to or numerically *higher* than
 877:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 878:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              *
 879:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * Interrupts that  use the FreeRTOS API must not be left at their
 880:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * default priority of  zero as that is the highest possible priority,
 881:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 882:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * and  therefore also guaranteed to be invalid.
 883:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              *
 884:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * FreeRTOS maintains separate thread and ISR API functions to ensure
 885:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * interrupt entry is as fast and simple as possible.
 886:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              *
 887:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * The following links provide detailed information:
 888:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
 889:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****              * https://www.FreeRTOS.org/FAQHelp.html */
 890:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 1108              		.loc 1 890 13 is_stmt 1 view .LVU256
 1109 000e 114A     		ldr	r2, .L67+4
 1110 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1111 0012 9A42     		cmp	r2, r3
 1112 0014 08D9     		bls	.L63
 1113              		.loc 1 890 13 view .LVU257
 1114              	.LBB73:
 1115              	.LBI73:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1116              		.loc 2 213 30 view .LVU258
 1117              	.LBB74:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1118              		.loc 2 215 5 view .LVU259
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1119              		.loc 2 217 5 view .LVU260
 1120              		.syntax unified
 1121              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1122 0016 4FF05003 		   mov r3, #80                                              
 1123 001a 83F31188 	   msr basepri, r3                                         
 1124 001e BFF36F8F 	   isb                                                     
ARM GAS  /tmp/ccUOrFw4.s 			page 44


 1125 0022 BFF34F8F 	   dsb                                                     
 1126              	
 1127              	@ 0 "" 2
 1128              	.LVL37:
 1129              		.thumb
 1130              		.syntax unified
 1131              	.L64:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1132              		.loc 2 217 5 is_stmt 0 view .LVU261
 1133              	.LBE74:
 1134              	.LBE73:
 1135              		.loc 1 890 13 is_stmt 1 discriminator 1 view .LVU262
 1136              		.loc 1 890 13 discriminator 1 view .LVU263
 1137 0026 FEE7     		b	.L64
 1138              	.LVL38:
 1139              	.L63:
 1140              		.loc 1 890 70 discriminator 2 view .LVU264
 891:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         }
 892:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c **** 
 893:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         /* Priority grouping:  The interrupt controller (NVIC) allows the bits
 894:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * that define each interrupt's priority to be split between bits that
 895:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * define the interrupt's pre-emption priority bits and bits that define
 896:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * the interrupt's sub-priority.  For simplicity all bits must be defined
 897:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * to be pre-emption priority bits.  The following assertion will fail if
 898:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * this is not the case (if some bits represent a sub-priority).
 899:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          *
 900:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * If the application only uses CMSIS libraries for interrupt
 901:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * configuration then the correct setting can be achieved on all Cortex-M
 902:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 903:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * scheduler.  Note however that some vendor specific peripheral libraries
 904:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * assume a non-zero priority group setting, in which cases using a value
 905:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****          * of zero will result in unpredictable behaviour. */
 906:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1141              		.loc 1 906 9 discriminator 2 view .LVU265
 1142 0028 4FF0E023 		mov	r3, #-536813568
 1143 002c D3F80C3D 		ldr	r3, [r3, #3340]
 1144 0030 03F4E063 		and	r3, r3, #1792
 1145 0034 084A     		ldr	r2, .L67+8
 1146 0036 1268     		ldr	r2, [r2]
 1147 0038 9342     		cmp	r3, r2
 1148 003a 08D9     		bls	.L62
 1149              		.loc 1 906 9 view .LVU266
 1150              	.LBB75:
 1151              	.LBI75:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1152              		.loc 2 213 30 view .LVU267
 1153              	.LBB76:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1154              		.loc 2 215 5 view .LVU268
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1155              		.loc 2 217 5 view .LVU269
 1156              		.syntax unified
 1157              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1158 003c 4FF05003 		   mov r3, #80                                              
 1159 0040 83F31188 	   msr basepri, r3                                         
 1160 0044 BFF36F8F 	   isb                                                     
 1161 0048 BFF34F8F 	   dsb                                                     
ARM GAS  /tmp/ccUOrFw4.s 			page 45


 1162              	
 1163              	@ 0 "" 2
 1164              	.LVL39:
 1165              		.thumb
 1166              		.syntax unified
 1167              	.L66:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 1168              		.loc 2 217 5 is_stmt 0 view .LVU270
 1169              	.LBE76:
 1170              	.LBE75:
 1171              		.loc 1 906 9 is_stmt 1 discriminator 2 view .LVU271
 1172              		.loc 1 906 9 discriminator 2 view .LVU272
 1173 004c FEE7     		b	.L66
 1174              	.L62:
 907:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/port.c ****     }
 1175              		.loc 1 907 5 is_stmt 0 view .LVU273
 1176 004e 7047     		bx	lr
 1177              	.L68:
 1178              		.align	2
 1179              	.L67:
 1180 0050 F0E300E0 		.word	-536812560
 1181 0054 00000000 		.word	ucMaxSysCallPriority
 1182 0058 00000000 		.word	ulMaxPRIGROUPValue
 1183              		.cfi_endproc
 1184              	.LFE17:
 1186              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 1187              		.align	2
 1190              	ulMaxPRIGROUPValue:
 1191 0000 00000000 		.space	4
 1192              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 1195              	ucMaxSysCallPriority:
 1196 0000 00       		.space	1
 1197              		.section	.data.uxCriticalNesting,"aw"
 1198              		.align	2
 1201              	uxCriticalNesting:
 1202 0000 AAAAAAAA 		.word	-1431655766
 1203              		.text
 1204              	.Letext0:
 1205              		.file 3 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 1206              		.file 4 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 1207              		.file 5 "FreeRTOS-Kernel/include/projdefs.h"
 1208              		.file 6 "common/Inc/FreeRTOSConfig.h"
 1209              		.file 7 "FreeRTOS-Kernel/include/task.h"
ARM GAS  /tmp/ccUOrFw4.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccUOrFw4.s:21     .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccUOrFw4.s:26     .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccUOrFw4.s:109    .text.prvTaskExitError:000000000000003c $d
     /tmp/ccUOrFw4.s:1201   .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccUOrFw4.s:114    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccUOrFw4.s:120    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccUOrFw4.s:141    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccUOrFw4.s:141    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccUOrFw4.s:151    .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccUOrFw4.s:156    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccUOrFw4.s:178    .text.prvPortStartFirstTask:0000000000000022 $d
     /tmp/ccUOrFw4.s:178    .text.prvPortStartFirstTask:0000000000000024 $d
     /tmp/ccUOrFw4.s:188    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccUOrFw4.s:194    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccUOrFw4.s:243    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccUOrFw4.s:243    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccUOrFw4.s:253    .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccUOrFw4.s:258    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccUOrFw4.s:274    .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccUOrFw4.s:274    .text.vPortEnableVFP:0000000000000010 $d
     /tmp/ccUOrFw4.s:284    .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccUOrFw4.s:290    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccUOrFw4.s:340    .text.pxPortInitialiseStack:0000000000000028 $d
     /tmp/ccUOrFw4.s:345    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccUOrFw4.s:351    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccUOrFw4.s:394    .text.vPortEndScheduler:0000000000000020 $d
     /tmp/ccUOrFw4.s:399    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccUOrFw4.s:405    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccUOrFw4.s:478    .text.vPortEnterCritical:0000000000000040 $d
     /tmp/ccUOrFw4.s:483    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccUOrFw4.s:489    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccUOrFw4.s:558    .text.vPortExitCritical:0000000000000028 $d
     /tmp/ccUOrFw4.s:563    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccUOrFw4.s:569    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccUOrFw4.s:638    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccUOrFw4.s:644    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccUOrFw4.s:679    .text.vPortSetupTimerInterrupt:0000000000000020 $d
     /tmp/ccUOrFw4.s:685    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccUOrFw4.s:691    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccUOrFw4.s:1059   .text.xPortStartScheduler:0000000000000174 $d
     /tmp/ccUOrFw4.s:1195   .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/ccUOrFw4.s:1190   .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/ccUOrFw4.s:1072   .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/ccUOrFw4.s:1078   .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/ccUOrFw4.s:1180   .text.vPortValidateInterruptPriority:0000000000000050 $d
     /tmp/ccUOrFw4.s:1187   .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/ccUOrFw4.s:1196   .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/ccUOrFw4.s:1198   .data.uxCriticalNesting:0000000000000000 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
