ARM GAS  /tmp/ccnrBCYQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "FreeRTOS-Kernel/queue.c"
  20              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	prvGetDisinheritPriorityAfterTimeout:
  27              	.LVL0:
  28              	.LFB28:
   1:FreeRTOS-Kernel/queue.c **** /*
   2:FreeRTOS-Kernel/queue.c ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/queue.c ****  *
   5:FreeRTOS-Kernel/queue.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/queue.c ****  *
   7:FreeRTOS-Kernel/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/queue.c ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/queue.c ****  *
  14:FreeRTOS-Kernel/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/queue.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/queue.c ****  *
  17:FreeRTOS-Kernel/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/queue.c ****  *
  24:FreeRTOS-Kernel/queue.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/queue.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/queue.c ****  *
  27:FreeRTOS-Kernel/queue.c ****  */
  28:FreeRTOS-Kernel/queue.c **** 
  29:FreeRTOS-Kernel/queue.c **** #include <stdlib.h>
  30:FreeRTOS-Kernel/queue.c **** #include <string.h>
ARM GAS  /tmp/ccnrBCYQ.s 			page 2


  31:FreeRTOS-Kernel/queue.c **** 
  32:FreeRTOS-Kernel/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS-Kernel/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS-Kernel/queue.c ****  * task.h is included from an application file. */
  35:FreeRTOS-Kernel/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS-Kernel/queue.c **** 
  37:FreeRTOS-Kernel/queue.c **** #include "FreeRTOS.h"
  38:FreeRTOS-Kernel/queue.c **** #include "task.h"
  39:FreeRTOS-Kernel/queue.c **** #include "queue.h"
  40:FreeRTOS-Kernel/queue.c **** 
  41:FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:FreeRTOS-Kernel/queue.c ****     #include "croutine.h"
  43:FreeRTOS-Kernel/queue.c **** #endif
  44:FreeRTOS-Kernel/queue.c **** 
  45:FreeRTOS-Kernel/queue.c **** /* The MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS-Kernel/queue.c ****  * for the header files above, but not in this file, in order to generate the
  47:FreeRTOS-Kernel/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS-Kernel/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  49:FreeRTOS-Kernel/queue.c **** 
  50:FreeRTOS-Kernel/queue.c **** 
  51:FreeRTOS-Kernel/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:FreeRTOS-Kernel/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  53:FreeRTOS-Kernel/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  54:FreeRTOS-Kernel/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  55:FreeRTOS-Kernel/queue.c **** 
  56:FreeRTOS-Kernel/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  57:FreeRTOS-Kernel/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  58:FreeRTOS-Kernel/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  59:FreeRTOS-Kernel/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  60:FreeRTOS-Kernel/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  61:FreeRTOS-Kernel/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  62:FreeRTOS-Kernel/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  63:FreeRTOS-Kernel/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  64:FreeRTOS-Kernel/queue.c ****  * being used for. */
  65:FreeRTOS-Kernel/queue.c **** #define uxQueueType               pcHead
  66:FreeRTOS-Kernel/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  67:FreeRTOS-Kernel/queue.c **** 
  68:FreeRTOS-Kernel/queue.c **** typedef struct QueuePointers
  69:FreeRTOS-Kernel/queue.c **** {
  70:FreeRTOS-Kernel/queue.c ****     int8_t * pcTail;     /**< Points to the byte at the end of the queue storage area.  Once more b
  71:FreeRTOS-Kernel/queue.c ****     int8_t * pcReadFrom; /**< Points to the last place that a queued item was read from when the st
  72:FreeRTOS-Kernel/queue.c **** } QueuePointers_t;
  73:FreeRTOS-Kernel/queue.c **** 
  74:FreeRTOS-Kernel/queue.c **** typedef struct SemaphoreData
  75:FreeRTOS-Kernel/queue.c **** {
  76:FreeRTOS-Kernel/queue.c ****     TaskHandle_t xMutexHolder;        /**< The handle of the task that holds the mutex. */
  77:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxRecursiveCallCount; /**< Maintains a count of the number of times a recursive mut
  78:FreeRTOS-Kernel/queue.c **** } SemaphoreData_t;
  79:FreeRTOS-Kernel/queue.c **** 
  80:FreeRTOS-Kernel/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  81:FreeRTOS-Kernel/queue.c ****  * zero. */
  82:FreeRTOS-Kernel/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  83:FreeRTOS-Kernel/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  84:FreeRTOS-Kernel/queue.c **** 
  85:FreeRTOS-Kernel/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  86:FreeRTOS-Kernel/queue.c **** 
  87:FreeRTOS-Kernel/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
ARM GAS  /tmp/ccnrBCYQ.s 			page 3


  88:FreeRTOS-Kernel/queue.c ****  * performed just because a higher priority task has been woken. */
  89:FreeRTOS-Kernel/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  90:FreeRTOS-Kernel/queue.c **** #else
  91:FreeRTOS-Kernel/queue.c ****     #if ( configNUMBER_OF_CORES == 1 )
  92:FreeRTOS-Kernel/queue.c ****         #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:FreeRTOS-Kernel/queue.c ****     #else /* #if ( configNUMBER_OF_CORES == 1 ) */
  94:FreeRTOS-Kernel/queue.c ****         #define queueYIELD_IF_USING_PREEMPTION()    vTaskYieldWithinAPI()
  95:FreeRTOS-Kernel/queue.c ****     #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
  96:FreeRTOS-Kernel/queue.c **** #endif
  97:FreeRTOS-Kernel/queue.c **** 
  98:FreeRTOS-Kernel/queue.c **** /*
  99:FreeRTOS-Kernel/queue.c ****  * Definition of the queue used by the scheduler.
 100:FreeRTOS-Kernel/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 101:FreeRTOS-Kernel/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
 102:FreeRTOS-Kernel/queue.c ****  */
 103:FreeRTOS-Kernel/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 104:FreeRTOS-Kernel/queue.c **** {
 105:FreeRTOS-Kernel/queue.c ****     int8_t * pcHead;           /**< Points to the beginning of the queue storage area. */
 106:FreeRTOS-Kernel/queue.c ****     int8_t * pcWriteTo;        /**< Points to the free next place in the storage area. */
 107:FreeRTOS-Kernel/queue.c **** 
 108:FreeRTOS-Kernel/queue.c ****     union
 109:FreeRTOS-Kernel/queue.c ****     {
 110:FreeRTOS-Kernel/queue.c ****         QueuePointers_t xQueue;     /**< Data required exclusively when this structure is used as a
 111:FreeRTOS-Kernel/queue.c ****         SemaphoreData_t xSemaphore; /**< Data required exclusively when this structure is used as a
 112:FreeRTOS-Kernel/queue.c ****     } u;
 113:FreeRTOS-Kernel/queue.c **** 
 114:FreeRTOS-Kernel/queue.c ****     List_t xTasksWaitingToSend;             /**< List of tasks that are blocked waiting to post ont
 115:FreeRTOS-Kernel/queue.c ****     List_t xTasksWaitingToReceive;          /**< List of tasks that are blocked waiting to read fro
 116:FreeRTOS-Kernel/queue.c **** 
 117:FreeRTOS-Kernel/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /**< The number of items currently in the queue. */
 118:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxLength;                   /**< The length of the queue defined as the number of i
 119:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxItemSize;                 /**< The size of each items that the queue will hold. *
 120:FreeRTOS-Kernel/queue.c **** 
 121:FreeRTOS-Kernel/queue.c ****     volatile int8_t cRxLock;                /**< Stores the number of items received from the queue
 122:FreeRTOS-Kernel/queue.c ****     volatile int8_t cTxLock;                /**< Stores the number of items transmitted to the queu
 123:FreeRTOS-Kernel/queue.c **** 
 124:FreeRTOS-Kernel/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 125:FreeRTOS-Kernel/queue.c ****         uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the memory used by the queue was stati
 126:FreeRTOS-Kernel/queue.c ****     #endif
 127:FreeRTOS-Kernel/queue.c **** 
 128:FreeRTOS-Kernel/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 129:FreeRTOS-Kernel/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 130:FreeRTOS-Kernel/queue.c ****     #endif
 131:FreeRTOS-Kernel/queue.c **** 
 132:FreeRTOS-Kernel/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 133:FreeRTOS-Kernel/queue.c ****         UBaseType_t uxQueueNumber;
 134:FreeRTOS-Kernel/queue.c ****         uint8_t ucQueueType;
 135:FreeRTOS-Kernel/queue.c ****     #endif
 136:FreeRTOS-Kernel/queue.c **** } xQUEUE;
 137:FreeRTOS-Kernel/queue.c **** 
 138:FreeRTOS-Kernel/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 139:FreeRTOS-Kernel/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 140:FreeRTOS-Kernel/queue.c **** typedef xQUEUE Queue_t;
 141:FreeRTOS-Kernel/queue.c **** 
 142:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 143:FreeRTOS-Kernel/queue.c **** 
 144:FreeRTOS-Kernel/queue.c **** /*
ARM GAS  /tmp/ccnrBCYQ.s 			page 4


 145:FreeRTOS-Kernel/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 146:FreeRTOS-Kernel/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 147:FreeRTOS-Kernel/queue.c ****  */
 148:FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 149:FreeRTOS-Kernel/queue.c **** 
 150:FreeRTOS-Kernel/queue.c **** /* The type stored within the queue registry array.  This allows a name
 151:FreeRTOS-Kernel/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 152:FreeRTOS-Kernel/queue.c ****  * more user friendly. */
 153:FreeRTOS-Kernel/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 154:FreeRTOS-Kernel/queue.c ****     {
 155:FreeRTOS-Kernel/queue.c ****         const char * pcQueueName;
 156:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle;
 157:FreeRTOS-Kernel/queue.c ****     } xQueueRegistryItem;
 158:FreeRTOS-Kernel/queue.c **** 
 159:FreeRTOS-Kernel/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 160:FreeRTOS-Kernel/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 161:FreeRTOS-Kernel/queue.c ****  * debuggers. */
 162:FreeRTOS-Kernel/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 163:FreeRTOS-Kernel/queue.c **** 
 164:FreeRTOS-Kernel/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 165:FreeRTOS-Kernel/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 166:FreeRTOS-Kernel/queue.c ****  * array position being vacant. */
 167:FreeRTOS-Kernel/queue.c **** 
 168:FreeRTOS-Kernel/queue.c **** /* MISRA Ref 8.4.2 [Declaration shall be visible] */
 169:FreeRTOS-Kernel/queue.c **** /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-84 */
 170:FreeRTOS-Kernel/queue.c **** /* coverity[misra_c_2012_rule_8_4_violation] */
 171:FreeRTOS-Kernel/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 172:FreeRTOS-Kernel/queue.c **** 
 173:FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 174:FreeRTOS-Kernel/queue.c **** 
 175:FreeRTOS-Kernel/queue.c **** /*
 176:FreeRTOS-Kernel/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 177:FreeRTOS-Kernel/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 178:FreeRTOS-Kernel/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 179:FreeRTOS-Kernel/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 180:FreeRTOS-Kernel/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 181:FreeRTOS-Kernel/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 182:FreeRTOS-Kernel/queue.c ****  */
 183:FreeRTOS-Kernel/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 184:FreeRTOS-Kernel/queue.c **** 
 185:FreeRTOS-Kernel/queue.c **** /*
 186:FreeRTOS-Kernel/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 187:FreeRTOS-Kernel/queue.c ****  *
 188:FreeRTOS-Kernel/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 189:FreeRTOS-Kernel/queue.c ****  */
 190:FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:FreeRTOS-Kernel/queue.c **** 
 192:FreeRTOS-Kernel/queue.c **** /*
 193:FreeRTOS-Kernel/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 194:FreeRTOS-Kernel/queue.c ****  *
 195:FreeRTOS-Kernel/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 196:FreeRTOS-Kernel/queue.c ****  */
 197:FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 198:FreeRTOS-Kernel/queue.c **** 
 199:FreeRTOS-Kernel/queue.c **** /*
 200:FreeRTOS-Kernel/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 201:FreeRTOS-Kernel/queue.c ****  * back of the queue.
ARM GAS  /tmp/ccnrBCYQ.s 			page 5


 202:FreeRTOS-Kernel/queue.c ****  */
 203:FreeRTOS-Kernel/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 204:FreeRTOS-Kernel/queue.c ****                                       const void * pvItemToQueue,
 205:FreeRTOS-Kernel/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 206:FreeRTOS-Kernel/queue.c **** 
 207:FreeRTOS-Kernel/queue.c **** /*
 208:FreeRTOS-Kernel/queue.c ****  * Copies an item out of a queue.
 209:FreeRTOS-Kernel/queue.c ****  */
 210:FreeRTOS-Kernel/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 211:FreeRTOS-Kernel/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 212:FreeRTOS-Kernel/queue.c **** 
 213:FreeRTOS-Kernel/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 214:FreeRTOS-Kernel/queue.c **** 
 215:FreeRTOS-Kernel/queue.c **** /*
 216:FreeRTOS-Kernel/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 217:FreeRTOS-Kernel/queue.c ****  * the queue set that the queue contains data.
 218:FreeRTOS-Kernel/queue.c ****  */
 219:FreeRTOS-Kernel/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 220:FreeRTOS-Kernel/queue.c **** #endif
 221:FreeRTOS-Kernel/queue.c **** 
 222:FreeRTOS-Kernel/queue.c **** /*
 223:FreeRTOS-Kernel/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 224:FreeRTOS-Kernel/queue.c ****  * dynamically to fill in the structure's members.
 225:FreeRTOS-Kernel/queue.c ****  */
 226:FreeRTOS-Kernel/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 227:FreeRTOS-Kernel/queue.c ****                                    const UBaseType_t uxItemSize,
 228:FreeRTOS-Kernel/queue.c ****                                    uint8_t * pucQueueStorage,
 229:FreeRTOS-Kernel/queue.c ****                                    const uint8_t ucQueueType,
 230:FreeRTOS-Kernel/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 231:FreeRTOS-Kernel/queue.c **** 
 232:FreeRTOS-Kernel/queue.c **** /*
 233:FreeRTOS-Kernel/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 234:FreeRTOS-Kernel/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 235:FreeRTOS-Kernel/queue.c ****  * as a mutex.
 236:FreeRTOS-Kernel/queue.c ****  */
 237:FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
 238:FreeRTOS-Kernel/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 239:FreeRTOS-Kernel/queue.c **** #endif
 240:FreeRTOS-Kernel/queue.c **** 
 241:FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
 242:FreeRTOS-Kernel/queue.c **** 
 243:FreeRTOS-Kernel/queue.c **** /*
 244:FreeRTOS-Kernel/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 245:FreeRTOS-Kernel/queue.c ****  * priority, but the waiting task times out, then the holder should
 246:FreeRTOS-Kernel/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 247:FreeRTOS-Kernel/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 248:FreeRTOS-Kernel/queue.c ****  * that priority.
 249:FreeRTOS-Kernel/queue.c ****  */
 250:FreeRTOS-Kernel/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 251:FreeRTOS-Kernel/queue.c **** #endif
 252:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 253:FreeRTOS-Kernel/queue.c **** 
 254:FreeRTOS-Kernel/queue.c **** /*
 255:FreeRTOS-Kernel/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 256:FreeRTOS-Kernel/queue.c ****  * accessing the queue event lists.
 257:FreeRTOS-Kernel/queue.c ****  */
 258:FreeRTOS-Kernel/queue.c **** #define prvLockQueue( pxQueue )                            \
ARM GAS  /tmp/ccnrBCYQ.s 			page 6


 259:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();                                  \
 260:FreeRTOS-Kernel/queue.c ****     {                                                      \
 261:FreeRTOS-Kernel/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 262:FreeRTOS-Kernel/queue.c ****         {                                                  \
 263:FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 264:FreeRTOS-Kernel/queue.c ****         }                                                  \
 265:FreeRTOS-Kernel/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 266:FreeRTOS-Kernel/queue.c ****         {                                                  \
 267:FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 268:FreeRTOS-Kernel/queue.c ****         }                                                  \
 269:FreeRTOS-Kernel/queue.c ****     }                                                      \
 270:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL()
 271:FreeRTOS-Kernel/queue.c **** 
 272:FreeRTOS-Kernel/queue.c **** /*
 273:FreeRTOS-Kernel/queue.c ****  * Macro to increment cTxLock member of the queue data structure. It is
 274:FreeRTOS-Kernel/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 275:FreeRTOS-Kernel/queue.c ****  * tasks than the number of tasks in the system.
 276:FreeRTOS-Kernel/queue.c ****  */
 277:FreeRTOS-Kernel/queue.c **** #define prvIncrementQueueTxLock( pxQueue, cTxLock )                           \
 278:FreeRTOS-Kernel/queue.c ****     do {                                                                      \
 279:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 280:FreeRTOS-Kernel/queue.c ****         if( ( UBaseType_t ) ( cTxLock ) < uxNumberOfTasks )                   \
 281:FreeRTOS-Kernel/queue.c ****         {                                                                     \
 282:FreeRTOS-Kernel/queue.c ****             configASSERT( ( cTxLock ) != queueINT8_MAX );                     \
 283:FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cTxLock = ( int8_t ) ( ( cTxLock ) + ( int8_t ) 1 ); \
 284:FreeRTOS-Kernel/queue.c ****         }                                                                     \
 285:FreeRTOS-Kernel/queue.c ****     } while( 0 )
 286:FreeRTOS-Kernel/queue.c **** 
 287:FreeRTOS-Kernel/queue.c **** /*
 288:FreeRTOS-Kernel/queue.c ****  * Macro to increment cRxLock member of the queue data structure. It is
 289:FreeRTOS-Kernel/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 290:FreeRTOS-Kernel/queue.c ****  * tasks than the number of tasks in the system.
 291:FreeRTOS-Kernel/queue.c ****  */
 292:FreeRTOS-Kernel/queue.c **** #define prvIncrementQueueRxLock( pxQueue, cRxLock )                           \
 293:FreeRTOS-Kernel/queue.c ****     do {                                                                      \
 294:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 295:FreeRTOS-Kernel/queue.c ****         if( ( UBaseType_t ) ( cRxLock ) < uxNumberOfTasks )                   \
 296:FreeRTOS-Kernel/queue.c ****         {                                                                     \
 297:FreeRTOS-Kernel/queue.c ****             configASSERT( ( cRxLock ) != queueINT8_MAX );                     \
 298:FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cRxLock = ( int8_t ) ( ( cRxLock ) + ( int8_t ) 1 ); \
 299:FreeRTOS-Kernel/queue.c ****         }                                                                     \
 300:FreeRTOS-Kernel/queue.c ****     } while( 0 )
 301:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 302:FreeRTOS-Kernel/queue.c **** 
 303:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 304:FreeRTOS-Kernel/queue.c ****                                BaseType_t xNewQueue )
 305:FreeRTOS-Kernel/queue.c **** {
 306:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdPASS;
 307:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 308:FreeRTOS-Kernel/queue.c **** 
 309:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueGenericReset( xQueue, xNewQueue );
 310:FreeRTOS-Kernel/queue.c **** 
 311:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
 312:FreeRTOS-Kernel/queue.c **** 
 313:FreeRTOS-Kernel/queue.c ****     if( ( pxQueue != NULL ) &&
 314:FreeRTOS-Kernel/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 315:FreeRTOS-Kernel/queue.c ****         /* Check for multiplication overflow. */
ARM GAS  /tmp/ccnrBCYQ.s 			page 7


 316:FreeRTOS-Kernel/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 317:FreeRTOS-Kernel/queue.c ****     {
 318:FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
 319:FreeRTOS-Kernel/queue.c ****         {
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 321:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 322:FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 323:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 324:FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 325:FreeRTOS-Kernel/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 326:FreeRTOS-Kernel/queue.c **** 
 327:FreeRTOS-Kernel/queue.c ****             if( xNewQueue == pdFALSE )
 328:FreeRTOS-Kernel/queue.c ****             {
 329:FreeRTOS-Kernel/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 330:FreeRTOS-Kernel/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 331:FreeRTOS-Kernel/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 332:FreeRTOS-Kernel/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 333:FreeRTOS-Kernel/queue.c ****                  * it will be possible to write to it. */
 334:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 335:FreeRTOS-Kernel/queue.c ****                 {
 336:FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 337:FreeRTOS-Kernel/queue.c ****                     {
 338:FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 339:FreeRTOS-Kernel/queue.c ****                     }
 340:FreeRTOS-Kernel/queue.c ****                     else
 341:FreeRTOS-Kernel/queue.c ****                     {
 342:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 343:FreeRTOS-Kernel/queue.c ****                     }
 344:FreeRTOS-Kernel/queue.c ****                 }
 345:FreeRTOS-Kernel/queue.c ****                 else
 346:FreeRTOS-Kernel/queue.c ****                 {
 347:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 348:FreeRTOS-Kernel/queue.c ****                 }
 349:FreeRTOS-Kernel/queue.c ****             }
 350:FreeRTOS-Kernel/queue.c ****             else
 351:FreeRTOS-Kernel/queue.c ****             {
 352:FreeRTOS-Kernel/queue.c ****                 /* Ensure the event queues start in the correct state. */
 353:FreeRTOS-Kernel/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 354:FreeRTOS-Kernel/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 355:FreeRTOS-Kernel/queue.c ****             }
 356:FreeRTOS-Kernel/queue.c ****         }
 357:FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
 358:FreeRTOS-Kernel/queue.c ****     }
 359:FreeRTOS-Kernel/queue.c ****     else
 360:FreeRTOS-Kernel/queue.c ****     {
 361:FreeRTOS-Kernel/queue.c ****         xReturn = pdFAIL;
 362:FreeRTOS-Kernel/queue.c ****     }
 363:FreeRTOS-Kernel/queue.c **** 
 364:FreeRTOS-Kernel/queue.c ****     configASSERT( xReturn != pdFAIL );
 365:FreeRTOS-Kernel/queue.c **** 
 366:FreeRTOS-Kernel/queue.c ****     /* A value is returned for calling semantic consistency with previous
 367:FreeRTOS-Kernel/queue.c ****      * versions. */
 368:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueueGenericReset( xReturn );
 369:FreeRTOS-Kernel/queue.c **** 
 370:FreeRTOS-Kernel/queue.c ****     return xReturn;
 371:FreeRTOS-Kernel/queue.c **** }
 372:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccnrBCYQ.s 			page 8


 373:FreeRTOS-Kernel/queue.c **** 
 374:FreeRTOS-Kernel/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 375:FreeRTOS-Kernel/queue.c **** 
 376:FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 377:FreeRTOS-Kernel/queue.c ****                                              const UBaseType_t uxItemSize,
 378:FreeRTOS-Kernel/queue.c ****                                              uint8_t * pucQueueStorage,
 379:FreeRTOS-Kernel/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 380:FreeRTOS-Kernel/queue.c ****                                              const uint8_t ucQueueType )
 381:FreeRTOS-Kernel/queue.c ****     {
 382:FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 383:FreeRTOS-Kernel/queue.c **** 
 384:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQ
 385:FreeRTOS-Kernel/queue.c **** 
 386:FreeRTOS-Kernel/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 387:FreeRTOS-Kernel/queue.c ****          * supplied. */
 388:FreeRTOS-Kernel/queue.c ****         configASSERT( pxStaticQueue );
 389:FreeRTOS-Kernel/queue.c **** 
 390:FreeRTOS-Kernel/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 391:FreeRTOS-Kernel/queue.c ****             ( pxStaticQueue != NULL ) &&
 392:FreeRTOS-Kernel/queue.c **** 
 393:FreeRTOS-Kernel/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 394:FreeRTOS-Kernel/queue.c ****              * should not be provided if the item size is 0. */
 395:FreeRTOS-Kernel/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 396:FreeRTOS-Kernel/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 397:FreeRTOS-Kernel/queue.c ****         {
 398:FreeRTOS-Kernel/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 399:FreeRTOS-Kernel/queue.c ****             {
 400:FreeRTOS-Kernel/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 401:FreeRTOS-Kernel/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 402:FreeRTOS-Kernel/queue.c ****                  * the real queue and semaphore structures. */
 403:FreeRTOS-Kernel/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 404:FreeRTOS-Kernel/queue.c **** 
 405:FreeRTOS-Kernel/queue.c ****                 /* This assertion cannot be branch covered in unit tests */
 406:FreeRTOS-Kernel/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 407:FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 408:FreeRTOS-Kernel/queue.c ****             }
 409:FreeRTOS-Kernel/queue.c ****             #endif /* configASSERT_DEFINED */
 410:FreeRTOS-Kernel/queue.c **** 
 411:FreeRTOS-Kernel/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 412:FreeRTOS-Kernel/queue.c ****              * The address of a statically allocated storage area was also passed in
 413:FreeRTOS-Kernel/queue.c ****              * but is already set. */
 414:FreeRTOS-Kernel/queue.c ****             /* MISRA Ref 11.3.1 [Misaligned access] */
 415:FreeRTOS-Kernel/queue.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 416:FreeRTOS-Kernel/queue.c ****             /* coverity[misra_c_2012_rule_11_3_violation] */
 417:FreeRTOS-Kernel/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue;
 418:FreeRTOS-Kernel/queue.c **** 
 419:FreeRTOS-Kernel/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 420:FreeRTOS-Kernel/queue.c ****             {
 421:FreeRTOS-Kernel/queue.c ****                 /* Queues can be allocated wither statically or dynamically, so
 422:FreeRTOS-Kernel/queue.c ****                  * note this queue was allocated statically in case the queue is
 423:FreeRTOS-Kernel/queue.c ****                  * later deleted. */
 424:FreeRTOS-Kernel/queue.c ****                 pxNewQueue->ucStaticallyAllocated = pdTRUE;
 425:FreeRTOS-Kernel/queue.c ****             }
 426:FreeRTOS-Kernel/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 427:FreeRTOS-Kernel/queue.c **** 
 428:FreeRTOS-Kernel/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 429:FreeRTOS-Kernel/queue.c ****         }
ARM GAS  /tmp/ccnrBCYQ.s 			page 9


 430:FreeRTOS-Kernel/queue.c ****         else
 431:FreeRTOS-Kernel/queue.c ****         {
 432:FreeRTOS-Kernel/queue.c ****             configASSERT( pxNewQueue );
 433:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 434:FreeRTOS-Kernel/queue.c ****         }
 435:FreeRTOS-Kernel/queue.c **** 
 436:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 437:FreeRTOS-Kernel/queue.c **** 
 438:FreeRTOS-Kernel/queue.c ****         return pxNewQueue;
 439:FreeRTOS-Kernel/queue.c ****     }
 440:FreeRTOS-Kernel/queue.c **** 
 441:FreeRTOS-Kernel/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 442:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 443:FreeRTOS-Kernel/queue.c **** 
 444:FreeRTOS-Kernel/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 445:FreeRTOS-Kernel/queue.c **** 
 446:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueGenericGetStaticBuffers( QueueHandle_t xQueue,
 447:FreeRTOS-Kernel/queue.c ****                                               uint8_t ** ppucQueueStorage,
 448:FreeRTOS-Kernel/queue.c ****                                               StaticQueue_t ** ppxStaticQueue )
 449:FreeRTOS-Kernel/queue.c ****     {
 450:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 451:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
 452:FreeRTOS-Kernel/queue.c **** 
 453:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueGenericGetStaticBuffers( xQueue, ppucQueueStorage, ppxStaticQueue );
 454:FreeRTOS-Kernel/queue.c **** 
 455:FreeRTOS-Kernel/queue.c ****         configASSERT( pxQueue );
 456:FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 457:FreeRTOS-Kernel/queue.c **** 
 458:FreeRTOS-Kernel/queue.c ****         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 459:FreeRTOS-Kernel/queue.c ****         {
 460:FreeRTOS-Kernel/queue.c ****             /* Check if the queue was statically allocated. */
 461:FreeRTOS-Kernel/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 462:FreeRTOS-Kernel/queue.c ****             {
 463:FreeRTOS-Kernel/queue.c ****                 if( ppucQueueStorage != NULL )
 464:FreeRTOS-Kernel/queue.c ****                 {
 465:FreeRTOS-Kernel/queue.c ****                     *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 466:FreeRTOS-Kernel/queue.c ****                 }
 467:FreeRTOS-Kernel/queue.c **** 
 468:FreeRTOS-Kernel/queue.c ****                 /* MISRA Ref 11.3.1 [Misaligned access] */
 469:FreeRTOS-Kernel/queue.c ****                 /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#
 470:FreeRTOS-Kernel/queue.c ****                 /* coverity[misra_c_2012_rule_11_3_violation] */
 471:FreeRTOS-Kernel/queue.c ****                 *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 472:FreeRTOS-Kernel/queue.c ****                 xReturn = pdTRUE;
 473:FreeRTOS-Kernel/queue.c ****             }
 474:FreeRTOS-Kernel/queue.c ****             else
 475:FreeRTOS-Kernel/queue.c ****             {
 476:FreeRTOS-Kernel/queue.c ****                 xReturn = pdFALSE;
 477:FreeRTOS-Kernel/queue.c ****             }
 478:FreeRTOS-Kernel/queue.c ****         }
 479:FreeRTOS-Kernel/queue.c ****         #else /* configSUPPORT_DYNAMIC_ALLOCATION */
 480:FreeRTOS-Kernel/queue.c ****         {
 481:FreeRTOS-Kernel/queue.c ****             /* Queue must have been statically allocated. */
 482:FreeRTOS-Kernel/queue.c ****             if( ppucQueueStorage != NULL )
 483:FreeRTOS-Kernel/queue.c ****             {
 484:FreeRTOS-Kernel/queue.c ****                 *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 485:FreeRTOS-Kernel/queue.c ****             }
 486:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 10


 487:FreeRTOS-Kernel/queue.c ****             *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 488:FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
 489:FreeRTOS-Kernel/queue.c ****         }
 490:FreeRTOS-Kernel/queue.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 491:FreeRTOS-Kernel/queue.c **** 
 492:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueGenericGetStaticBuffers( xReturn );
 493:FreeRTOS-Kernel/queue.c **** 
 494:FreeRTOS-Kernel/queue.c ****         return xReturn;
 495:FreeRTOS-Kernel/queue.c ****     }
 496:FreeRTOS-Kernel/queue.c **** 
 497:FreeRTOS-Kernel/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 498:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 499:FreeRTOS-Kernel/queue.c **** 
 500:FreeRTOS-Kernel/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 501:FreeRTOS-Kernel/queue.c **** 
 502:FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 503:FreeRTOS-Kernel/queue.c ****                                        const UBaseType_t uxItemSize,
 504:FreeRTOS-Kernel/queue.c ****                                        const uint8_t ucQueueType )
 505:FreeRTOS-Kernel/queue.c ****     {
 506:FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 507:FreeRTOS-Kernel/queue.c ****         size_t xQueueSizeInBytes;
 508:FreeRTOS-Kernel/queue.c ****         uint8_t * pucQueueStorage;
 509:FreeRTOS-Kernel/queue.c **** 
 510:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 511:FreeRTOS-Kernel/queue.c **** 
 512:FreeRTOS-Kernel/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 513:FreeRTOS-Kernel/queue.c ****             /* Check for multiplication overflow. */
 514:FreeRTOS-Kernel/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 515:FreeRTOS-Kernel/queue.c ****             /* Check for addition overflow. */
 516:FreeRTOS-Kernel/queue.c ****             ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) 
 517:FreeRTOS-Kernel/queue.c ****         {
 518:FreeRTOS-Kernel/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 519:FreeRTOS-Kernel/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 520:FreeRTOS-Kernel/queue.c ****              * zero in the case the queue is used as a semaphore. */
 521:FreeRTOS-Kernel/queue.c ****             xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 522:FreeRTOS-Kernel/queue.c **** 
 523:FreeRTOS-Kernel/queue.c ****             /* MISRA Ref 11.5.1 [Malloc memory assignment] */
 524:FreeRTOS-Kernel/queue.c ****             /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule
 525:FreeRTOS-Kernel/queue.c ****             /* coverity[misra_c_2012_rule_11_5_violation] */
 526:FreeRTOS-Kernel/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 527:FreeRTOS-Kernel/queue.c **** 
 528:FreeRTOS-Kernel/queue.c ****             if( pxNewQueue != NULL )
 529:FreeRTOS-Kernel/queue.c ****             {
 530:FreeRTOS-Kernel/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 531:FreeRTOS-Kernel/queue.c ****                  * storage area. */
 532:FreeRTOS-Kernel/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 533:FreeRTOS-Kernel/queue.c ****                 pucQueueStorage += sizeof( Queue_t );
 534:FreeRTOS-Kernel/queue.c **** 
 535:FreeRTOS-Kernel/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 536:FreeRTOS-Kernel/queue.c ****                 {
 537:FreeRTOS-Kernel/queue.c ****                     /* Queues can be created either statically or dynamically, so
 538:FreeRTOS-Kernel/queue.c ****                      * note this task was created dynamically in case it is later
 539:FreeRTOS-Kernel/queue.c ****                      * deleted. */
 540:FreeRTOS-Kernel/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 541:FreeRTOS-Kernel/queue.c ****                 }
 542:FreeRTOS-Kernel/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 543:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 11


 544:FreeRTOS-Kernel/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 545:FreeRTOS-Kernel/queue.c ****             }
 546:FreeRTOS-Kernel/queue.c ****             else
 547:FreeRTOS-Kernel/queue.c ****             {
 548:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 549:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 550:FreeRTOS-Kernel/queue.c ****             }
 551:FreeRTOS-Kernel/queue.c ****         }
 552:FreeRTOS-Kernel/queue.c ****         else
 553:FreeRTOS-Kernel/queue.c ****         {
 554:FreeRTOS-Kernel/queue.c ****             configASSERT( pxNewQueue );
 555:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 556:FreeRTOS-Kernel/queue.c ****         }
 557:FreeRTOS-Kernel/queue.c **** 
 558:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueGenericCreate( pxNewQueue );
 559:FreeRTOS-Kernel/queue.c **** 
 560:FreeRTOS-Kernel/queue.c ****         return pxNewQueue;
 561:FreeRTOS-Kernel/queue.c ****     }
 562:FreeRTOS-Kernel/queue.c **** 
 563:FreeRTOS-Kernel/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 564:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 565:FreeRTOS-Kernel/queue.c **** 
 566:FreeRTOS-Kernel/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 567:FreeRTOS-Kernel/queue.c ****                                    const UBaseType_t uxItemSize,
 568:FreeRTOS-Kernel/queue.c ****                                    uint8_t * pucQueueStorage,
 569:FreeRTOS-Kernel/queue.c ****                                    const uint8_t ucQueueType,
 570:FreeRTOS-Kernel/queue.c ****                                    Queue_t * pxNewQueue )
 571:FreeRTOS-Kernel/queue.c **** {
 572:FreeRTOS-Kernel/queue.c ****     /* Remove compiler warnings about unused parameters should
 573:FreeRTOS-Kernel/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 574:FreeRTOS-Kernel/queue.c ****     ( void ) ucQueueType;
 575:FreeRTOS-Kernel/queue.c **** 
 576:FreeRTOS-Kernel/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 577:FreeRTOS-Kernel/queue.c ****     {
 578:FreeRTOS-Kernel/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 579:FreeRTOS-Kernel/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 580:FreeRTOS-Kernel/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 581:FreeRTOS-Kernel/queue.c ****          * value that is known to be within the memory map. */
 582:FreeRTOS-Kernel/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 583:FreeRTOS-Kernel/queue.c ****     }
 584:FreeRTOS-Kernel/queue.c ****     else
 585:FreeRTOS-Kernel/queue.c ****     {
 586:FreeRTOS-Kernel/queue.c ****         /* Set the head to the start of the queue storage area. */
 587:FreeRTOS-Kernel/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 588:FreeRTOS-Kernel/queue.c ****     }
 589:FreeRTOS-Kernel/queue.c **** 
 590:FreeRTOS-Kernel/queue.c ****     /* Initialise the queue members as described where the queue type is
 591:FreeRTOS-Kernel/queue.c ****      * defined. */
 592:FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 593:FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 594:FreeRTOS-Kernel/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 595:FreeRTOS-Kernel/queue.c **** 
 596:FreeRTOS-Kernel/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 597:FreeRTOS-Kernel/queue.c ****     {
 598:FreeRTOS-Kernel/queue.c ****         pxNewQueue->ucQueueType = ucQueueType;
 599:FreeRTOS-Kernel/queue.c ****     }
 600:FreeRTOS-Kernel/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
ARM GAS  /tmp/ccnrBCYQ.s 			page 12


 601:FreeRTOS-Kernel/queue.c **** 
 602:FreeRTOS-Kernel/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 603:FreeRTOS-Kernel/queue.c ****     {
 604:FreeRTOS-Kernel/queue.c ****         pxNewQueue->pxQueueSetContainer = NULL;
 605:FreeRTOS-Kernel/queue.c ****     }
 606:FreeRTOS-Kernel/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 607:FreeRTOS-Kernel/queue.c **** 
 608:FreeRTOS-Kernel/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 609:FreeRTOS-Kernel/queue.c **** }
 610:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 611:FreeRTOS-Kernel/queue.c **** 
 612:FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
 613:FreeRTOS-Kernel/queue.c **** 
 614:FreeRTOS-Kernel/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 615:FreeRTOS-Kernel/queue.c ****     {
 616:FreeRTOS-Kernel/queue.c ****         if( pxNewQueue != NULL )
 617:FreeRTOS-Kernel/queue.c ****         {
 618:FreeRTOS-Kernel/queue.c ****             /* The queue create function will set all the queue structure members
 619:FreeRTOS-Kernel/queue.c ****             * correctly for a generic queue, but this function is creating a
 620:FreeRTOS-Kernel/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 621:FreeRTOS-Kernel/queue.c ****             * in particular the information required for priority inheritance. */
 622:FreeRTOS-Kernel/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 623:FreeRTOS-Kernel/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 624:FreeRTOS-Kernel/queue.c **** 
 625:FreeRTOS-Kernel/queue.c ****             /* In case this is a recursive mutex. */
 626:FreeRTOS-Kernel/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 627:FreeRTOS-Kernel/queue.c **** 
 628:FreeRTOS-Kernel/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 629:FreeRTOS-Kernel/queue.c **** 
 630:FreeRTOS-Kernel/queue.c ****             /* Start with the semaphore in the expected state. */
 631:FreeRTOS-Kernel/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 632:FreeRTOS-Kernel/queue.c ****         }
 633:FreeRTOS-Kernel/queue.c ****         else
 634:FreeRTOS-Kernel/queue.c ****         {
 635:FreeRTOS-Kernel/queue.c ****             traceCREATE_MUTEX_FAILED();
 636:FreeRTOS-Kernel/queue.c ****         }
 637:FreeRTOS-Kernel/queue.c ****     }
 638:FreeRTOS-Kernel/queue.c **** 
 639:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
 640:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 641:FreeRTOS-Kernel/queue.c **** 
 642:FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 643:FreeRTOS-Kernel/queue.c **** 
 644:FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 645:FreeRTOS-Kernel/queue.c ****     {
 646:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 647:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 648:FreeRTOS-Kernel/queue.c **** 
 649:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCreateMutex( ucQueueType );
 650:FreeRTOS-Kernel/queue.c **** 
 651:FreeRTOS-Kernel/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 652:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 653:FreeRTOS-Kernel/queue.c **** 
 654:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCreateMutex( xNewQueue );
 655:FreeRTOS-Kernel/queue.c **** 
 656:FreeRTOS-Kernel/queue.c ****         return xNewQueue;
 657:FreeRTOS-Kernel/queue.c ****     }
ARM GAS  /tmp/ccnrBCYQ.s 			page 13


 658:FreeRTOS-Kernel/queue.c **** 
 659:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
 660:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 661:FreeRTOS-Kernel/queue.c **** 
 662:FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 663:FreeRTOS-Kernel/queue.c **** 
 664:FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 665:FreeRTOS-Kernel/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 666:FreeRTOS-Kernel/queue.c ****     {
 667:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 668:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 669:FreeRTOS-Kernel/queue.c **** 
 670:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 671:FreeRTOS-Kernel/queue.c **** 
 672:FreeRTOS-Kernel/queue.c ****         /* Prevent compiler warnings about unused parameters if
 673:FreeRTOS-Kernel/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 674:FreeRTOS-Kernel/queue.c ****         ( void ) ucQueueType;
 675:FreeRTOS-Kernel/queue.c **** 
 676:FreeRTOS-Kernel/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 677:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 678:FreeRTOS-Kernel/queue.c **** 
 679:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCreateMutexStatic( xNewQueue );
 680:FreeRTOS-Kernel/queue.c **** 
 681:FreeRTOS-Kernel/queue.c ****         return xNewQueue;
 682:FreeRTOS-Kernel/queue.c ****     }
 683:FreeRTOS-Kernel/queue.c **** 
 684:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
 685:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 686:FreeRTOS-Kernel/queue.c **** 
 687:FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 688:FreeRTOS-Kernel/queue.c **** 
 689:FreeRTOS-Kernel/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 690:FreeRTOS-Kernel/queue.c ****     {
 691:FreeRTOS-Kernel/queue.c ****         TaskHandle_t pxReturn;
 692:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 693:FreeRTOS-Kernel/queue.c **** 
 694:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueGetMutexHolder( xSemaphore );
 695:FreeRTOS-Kernel/queue.c **** 
 696:FreeRTOS-Kernel/queue.c ****         configASSERT( xSemaphore );
 697:FreeRTOS-Kernel/queue.c **** 
 698:FreeRTOS-Kernel/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 699:FreeRTOS-Kernel/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 700:FreeRTOS-Kernel/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 701:FreeRTOS-Kernel/queue.c ****          * identity of the mutex holder, as the holder may change between the
 702:FreeRTOS-Kernel/queue.c ****          * following critical section exiting and the function returning. */
 703:FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
 704:FreeRTOS-Kernel/queue.c ****         {
 705:FreeRTOS-Kernel/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 706:FreeRTOS-Kernel/queue.c ****             {
 707:FreeRTOS-Kernel/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 708:FreeRTOS-Kernel/queue.c ****             }
 709:FreeRTOS-Kernel/queue.c ****             else
 710:FreeRTOS-Kernel/queue.c ****             {
 711:FreeRTOS-Kernel/queue.c ****                 pxReturn = NULL;
 712:FreeRTOS-Kernel/queue.c ****             }
 713:FreeRTOS-Kernel/queue.c ****         }
 714:FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
ARM GAS  /tmp/ccnrBCYQ.s 			page 14


 715:FreeRTOS-Kernel/queue.c **** 
 716:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueGetMutexHolder( pxReturn );
 717:FreeRTOS-Kernel/queue.c **** 
 718:FreeRTOS-Kernel/queue.c ****         return pxReturn;
 719:FreeRTOS-Kernel/queue.c ****     }
 720:FreeRTOS-Kernel/queue.c **** 
 721:FreeRTOS-Kernel/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 722:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 723:FreeRTOS-Kernel/queue.c **** 
 724:FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 725:FreeRTOS-Kernel/queue.c **** 
 726:FreeRTOS-Kernel/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 727:FreeRTOS-Kernel/queue.c ****     {
 728:FreeRTOS-Kernel/queue.c ****         TaskHandle_t pxReturn;
 729:FreeRTOS-Kernel/queue.c **** 
 730:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueGetMutexHolderFromISR( xSemaphore );
 731:FreeRTOS-Kernel/queue.c **** 
 732:FreeRTOS-Kernel/queue.c ****         configASSERT( xSemaphore );
 733:FreeRTOS-Kernel/queue.c **** 
 734:FreeRTOS-Kernel/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 735:FreeRTOS-Kernel/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 736:FreeRTOS-Kernel/queue.c ****          * not required here. */
 737:FreeRTOS-Kernel/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 738:FreeRTOS-Kernel/queue.c ****         {
 739:FreeRTOS-Kernel/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 740:FreeRTOS-Kernel/queue.c ****         }
 741:FreeRTOS-Kernel/queue.c ****         else
 742:FreeRTOS-Kernel/queue.c ****         {
 743:FreeRTOS-Kernel/queue.c ****             pxReturn = NULL;
 744:FreeRTOS-Kernel/queue.c ****         }
 745:FreeRTOS-Kernel/queue.c **** 
 746:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueGetMutexHolderFromISR( pxReturn );
 747:FreeRTOS-Kernel/queue.c **** 
 748:FreeRTOS-Kernel/queue.c ****         return pxReturn;
 749:FreeRTOS-Kernel/queue.c ****     }
 750:FreeRTOS-Kernel/queue.c **** 
 751:FreeRTOS-Kernel/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 752:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 753:FreeRTOS-Kernel/queue.c **** 
 754:FreeRTOS-Kernel/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 755:FreeRTOS-Kernel/queue.c **** 
 756:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 757:FreeRTOS-Kernel/queue.c ****     {
 758:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 759:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 760:FreeRTOS-Kernel/queue.c **** 
 761:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueGiveMutexRecursive( xMutex );
 762:FreeRTOS-Kernel/queue.c **** 
 763:FreeRTOS-Kernel/queue.c ****         configASSERT( pxMutex );
 764:FreeRTOS-Kernel/queue.c **** 
 765:FreeRTOS-Kernel/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 766:FreeRTOS-Kernel/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 767:FreeRTOS-Kernel/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 768:FreeRTOS-Kernel/queue.c ****          * this is the only condition we are interested in it does not matter if
 769:FreeRTOS-Kernel/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 770:FreeRTOS-Kernel/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 771:FreeRTOS-Kernel/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
ARM GAS  /tmp/ccnrBCYQ.s 			page 15


 772:FreeRTOS-Kernel/queue.c ****         {
 773:FreeRTOS-Kernel/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 774:FreeRTOS-Kernel/queue.c **** 
 775:FreeRTOS-Kernel/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 776:FreeRTOS-Kernel/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 777:FreeRTOS-Kernel/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 778:FreeRTOS-Kernel/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 779:FreeRTOS-Kernel/queue.c ****              * uxRecursiveCallCount member. */
 780:FreeRTOS-Kernel/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 781:FreeRTOS-Kernel/queue.c **** 
 782:FreeRTOS-Kernel/queue.c ****             /* Has the recursive call count unwound to 0? */
 783:FreeRTOS-Kernel/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 784:FreeRTOS-Kernel/queue.c ****             {
 785:FreeRTOS-Kernel/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 786:FreeRTOS-Kernel/queue.c ****                  * task that might be waiting to access the mutex. */
 787:FreeRTOS-Kernel/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 788:FreeRTOS-Kernel/queue.c ****             }
 789:FreeRTOS-Kernel/queue.c ****             else
 790:FreeRTOS-Kernel/queue.c ****             {
 791:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 792:FreeRTOS-Kernel/queue.c ****             }
 793:FreeRTOS-Kernel/queue.c **** 
 794:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 795:FreeRTOS-Kernel/queue.c ****         }
 796:FreeRTOS-Kernel/queue.c ****         else
 797:FreeRTOS-Kernel/queue.c ****         {
 798:FreeRTOS-Kernel/queue.c ****             /* The mutex cannot be given because the calling task is not the
 799:FreeRTOS-Kernel/queue.c ****              * holder. */
 800:FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
 801:FreeRTOS-Kernel/queue.c **** 
 802:FreeRTOS-Kernel/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 803:FreeRTOS-Kernel/queue.c ****         }
 804:FreeRTOS-Kernel/queue.c **** 
 805:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueGiveMutexRecursive( xReturn );
 806:FreeRTOS-Kernel/queue.c **** 
 807:FreeRTOS-Kernel/queue.c ****         return xReturn;
 808:FreeRTOS-Kernel/queue.c ****     }
 809:FreeRTOS-Kernel/queue.c **** 
 810:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 811:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 812:FreeRTOS-Kernel/queue.c **** 
 813:FreeRTOS-Kernel/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 814:FreeRTOS-Kernel/queue.c **** 
 815:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 816:FreeRTOS-Kernel/queue.c ****                                          TickType_t xTicksToWait )
 817:FreeRTOS-Kernel/queue.c ****     {
 818:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 819:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 820:FreeRTOS-Kernel/queue.c **** 
 821:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );
 822:FreeRTOS-Kernel/queue.c **** 
 823:FreeRTOS-Kernel/queue.c ****         configASSERT( pxMutex );
 824:FreeRTOS-Kernel/queue.c **** 
 825:FreeRTOS-Kernel/queue.c ****         /* Comments regarding mutual exclusion as per those within
 826:FreeRTOS-Kernel/queue.c ****          * xQueueGiveMutexRecursive(). */
 827:FreeRTOS-Kernel/queue.c **** 
 828:FreeRTOS-Kernel/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
ARM GAS  /tmp/ccnrBCYQ.s 			page 16


 829:FreeRTOS-Kernel/queue.c **** 
 830:FreeRTOS-Kernel/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 831:FreeRTOS-Kernel/queue.c ****         {
 832:FreeRTOS-Kernel/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 833:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 834:FreeRTOS-Kernel/queue.c ****         }
 835:FreeRTOS-Kernel/queue.c ****         else
 836:FreeRTOS-Kernel/queue.c ****         {
 837:FreeRTOS-Kernel/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 838:FreeRTOS-Kernel/queue.c **** 
 839:FreeRTOS-Kernel/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 840:FreeRTOS-Kernel/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 841:FreeRTOS-Kernel/queue.c ****              * before reaching here. */
 842:FreeRTOS-Kernel/queue.c ****             if( xReturn != pdFAIL )
 843:FreeRTOS-Kernel/queue.c ****             {
 844:FreeRTOS-Kernel/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 845:FreeRTOS-Kernel/queue.c ****             }
 846:FreeRTOS-Kernel/queue.c ****             else
 847:FreeRTOS-Kernel/queue.c ****             {
 848:FreeRTOS-Kernel/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 849:FreeRTOS-Kernel/queue.c ****             }
 850:FreeRTOS-Kernel/queue.c ****         }
 851:FreeRTOS-Kernel/queue.c **** 
 852:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueTakeMutexRecursive( xReturn );
 853:FreeRTOS-Kernel/queue.c **** 
 854:FreeRTOS-Kernel/queue.c ****         return xReturn;
 855:FreeRTOS-Kernel/queue.c ****     }
 856:FreeRTOS-Kernel/queue.c **** 
 857:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 858:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 859:FreeRTOS-Kernel/queue.c **** 
 860:FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 861:FreeRTOS-Kernel/queue.c **** 
 862:FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 863:FreeRTOS-Kernel/queue.c ****                                                        const UBaseType_t uxInitialCount,
 864:FreeRTOS-Kernel/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 865:FreeRTOS-Kernel/queue.c ****     {
 866:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 867:FreeRTOS-Kernel/queue.c **** 
 868:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue )
 869:FreeRTOS-Kernel/queue.c **** 
 870:FreeRTOS-Kernel/queue.c ****         if( ( uxMaxCount != 0U ) &&
 871:FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 872:FreeRTOS-Kernel/queue.c ****         {
 873:FreeRTOS-Kernel/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 874:FreeRTOS-Kernel/queue.c **** 
 875:FreeRTOS-Kernel/queue.c ****             if( xHandle != NULL )
 876:FreeRTOS-Kernel/queue.c ****             {
 877:FreeRTOS-Kernel/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 878:FreeRTOS-Kernel/queue.c **** 
 879:FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 880:FreeRTOS-Kernel/queue.c ****             }
 881:FreeRTOS-Kernel/queue.c ****             else
 882:FreeRTOS-Kernel/queue.c ****             {
 883:FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 884:FreeRTOS-Kernel/queue.c ****             }
 885:FreeRTOS-Kernel/queue.c ****         }
ARM GAS  /tmp/ccnrBCYQ.s 			page 17


 886:FreeRTOS-Kernel/queue.c ****         else
 887:FreeRTOS-Kernel/queue.c ****         {
 888:FreeRTOS-Kernel/queue.c ****             configASSERT( xHandle );
 889:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 890:FreeRTOS-Kernel/queue.c ****         }
 891:FreeRTOS-Kernel/queue.c **** 
 892:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCreateCountingSemaphoreStatic( xHandle );
 893:FreeRTOS-Kernel/queue.c **** 
 894:FreeRTOS-Kernel/queue.c ****         return xHandle;
 895:FreeRTOS-Kernel/queue.c ****     }
 896:FreeRTOS-Kernel/queue.c **** 
 897:FreeRTOS-Kernel/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 898:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 899:FreeRTOS-Kernel/queue.c **** 
 900:FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 901:FreeRTOS-Kernel/queue.c **** 
 902:FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 903:FreeRTOS-Kernel/queue.c ****                                                  const UBaseType_t uxInitialCount )
 904:FreeRTOS-Kernel/queue.c ****     {
 905:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 906:FreeRTOS-Kernel/queue.c **** 
 907:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );
 908:FreeRTOS-Kernel/queue.c **** 
 909:FreeRTOS-Kernel/queue.c ****         if( ( uxMaxCount != 0U ) &&
 910:FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 911:FreeRTOS-Kernel/queue.c ****         {
 912:FreeRTOS-Kernel/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 913:FreeRTOS-Kernel/queue.c **** 
 914:FreeRTOS-Kernel/queue.c ****             if( xHandle != NULL )
 915:FreeRTOS-Kernel/queue.c ****             {
 916:FreeRTOS-Kernel/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 917:FreeRTOS-Kernel/queue.c **** 
 918:FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 919:FreeRTOS-Kernel/queue.c ****             }
 920:FreeRTOS-Kernel/queue.c ****             else
 921:FreeRTOS-Kernel/queue.c ****             {
 922:FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 923:FreeRTOS-Kernel/queue.c ****             }
 924:FreeRTOS-Kernel/queue.c ****         }
 925:FreeRTOS-Kernel/queue.c ****         else
 926:FreeRTOS-Kernel/queue.c ****         {
 927:FreeRTOS-Kernel/queue.c ****             configASSERT( xHandle );
 928:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 929:FreeRTOS-Kernel/queue.c ****         }
 930:FreeRTOS-Kernel/queue.c **** 
 931:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCreateCountingSemaphore( xHandle );
 932:FreeRTOS-Kernel/queue.c **** 
 933:FreeRTOS-Kernel/queue.c ****         return xHandle;
 934:FreeRTOS-Kernel/queue.c ****     }
 935:FreeRTOS-Kernel/queue.c **** 
 936:FreeRTOS-Kernel/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 937:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 938:FreeRTOS-Kernel/queue.c **** 
 939:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 940:FreeRTOS-Kernel/queue.c ****                               const void * const pvItemToQueue,
 941:FreeRTOS-Kernel/queue.c ****                               TickType_t xTicksToWait,
 942:FreeRTOS-Kernel/queue.c ****                               const BaseType_t xCopyPosition )
ARM GAS  /tmp/ccnrBCYQ.s 			page 18


 943:FreeRTOS-Kernel/queue.c **** {
 944:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 945:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 946:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 947:FreeRTOS-Kernel/queue.c **** 
 948:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 949:FreeRTOS-Kernel/queue.c **** 
 950:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 952:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 953:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 954:FreeRTOS-Kernel/queue.c ****     {
 955:FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 956:FreeRTOS-Kernel/queue.c ****     }
 957:FreeRTOS-Kernel/queue.c ****     #endif
 958:FreeRTOS-Kernel/queue.c **** 
 959:FreeRTOS-Kernel/queue.c ****     for( ; ; )
 960:FreeRTOS-Kernel/queue.c ****     {
 961:FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
 962:FreeRTOS-Kernel/queue.c ****         {
 963:FreeRTOS-Kernel/queue.c ****             /* Is there room on the queue now?  The running task must be the
 964:FreeRTOS-Kernel/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 965:FreeRTOS-Kernel/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 966:FreeRTOS-Kernel/queue.c ****              * queue is full. */
 967:FreeRTOS-Kernel/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 968:FreeRTOS-Kernel/queue.c ****             {
 969:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_SEND( pxQueue );
 970:FreeRTOS-Kernel/queue.c **** 
 971:FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 972:FreeRTOS-Kernel/queue.c ****                 {
 973:FreeRTOS-Kernel/queue.c ****                     const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 974:FreeRTOS-Kernel/queue.c **** 
 975:FreeRTOS-Kernel/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 976:FreeRTOS-Kernel/queue.c **** 
 977:FreeRTOS-Kernel/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 978:FreeRTOS-Kernel/queue.c ****                     {
 979:FreeRTOS-Kernel/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
 980:FreeRTOS-Kernel/queue.c ****                         {
 981:FreeRTOS-Kernel/queue.c ****                             /* Do not notify the queue set as an existing item
 982:FreeRTOS-Kernel/queue.c ****                              * was overwritten in the queue so the number of items
 983:FreeRTOS-Kernel/queue.c ****                              * in the queue has not changed. */
 984:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 985:FreeRTOS-Kernel/queue.c ****                         }
 986:FreeRTOS-Kernel/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 987:FreeRTOS-Kernel/queue.c ****                         {
 988:FreeRTOS-Kernel/queue.c ****                             /* The queue is a member of a queue set, and posting
 989:FreeRTOS-Kernel/queue.c ****                              * to the queue set caused a higher priority task to
 990:FreeRTOS-Kernel/queue.c ****                              * unblock. A context switch is required. */
 991:FreeRTOS-Kernel/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 992:FreeRTOS-Kernel/queue.c ****                         }
 993:FreeRTOS-Kernel/queue.c ****                         else
 994:FreeRTOS-Kernel/queue.c ****                         {
 995:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 996:FreeRTOS-Kernel/queue.c ****                         }
 997:FreeRTOS-Kernel/queue.c ****                     }
 998:FreeRTOS-Kernel/queue.c ****                     else
 999:FreeRTOS-Kernel/queue.c ****                     {
ARM GAS  /tmp/ccnrBCYQ.s 			page 19


1000:FreeRTOS-Kernel/queue.c ****                         /* If there was a task waiting for data to arrive on the
1001:FreeRTOS-Kernel/queue.c ****                          * queue then unblock it now. */
1002:FreeRTOS-Kernel/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1003:FreeRTOS-Kernel/queue.c ****                         {
1004:FreeRTOS-Kernel/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1005:FreeRTOS-Kernel/queue.c ****                             {
1006:FreeRTOS-Kernel/queue.c ****                                 /* The unblocked task has a priority higher than
1007:FreeRTOS-Kernel/queue.c ****                                  * our own so yield immediately.  Yes it is ok to
1008:FreeRTOS-Kernel/queue.c ****                                  * do this from within the critical section - the
1009:FreeRTOS-Kernel/queue.c ****                                  * kernel takes care of that. */
1010:FreeRTOS-Kernel/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
1011:FreeRTOS-Kernel/queue.c ****                             }
1012:FreeRTOS-Kernel/queue.c ****                             else
1013:FreeRTOS-Kernel/queue.c ****                             {
1014:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1015:FreeRTOS-Kernel/queue.c ****                             }
1016:FreeRTOS-Kernel/queue.c ****                         }
1017:FreeRTOS-Kernel/queue.c ****                         else if( xYieldRequired != pdFALSE )
1018:FreeRTOS-Kernel/queue.c ****                         {
1019:FreeRTOS-Kernel/queue.c ****                             /* This path is a special case that will only get
1020:FreeRTOS-Kernel/queue.c ****                              * executed if the task was holding multiple mutexes
1021:FreeRTOS-Kernel/queue.c ****                              * and the mutexes were given back in an order that is
1022:FreeRTOS-Kernel/queue.c ****                              * different to that in which they were taken. */
1023:FreeRTOS-Kernel/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
1024:FreeRTOS-Kernel/queue.c ****                         }
1025:FreeRTOS-Kernel/queue.c ****                         else
1026:FreeRTOS-Kernel/queue.c ****                         {
1027:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1028:FreeRTOS-Kernel/queue.c ****                         }
1029:FreeRTOS-Kernel/queue.c ****                     }
1030:FreeRTOS-Kernel/queue.c ****                 }
1031:FreeRTOS-Kernel/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1032:FreeRTOS-Kernel/queue.c ****                 {
1033:FreeRTOS-Kernel/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1034:FreeRTOS-Kernel/queue.c **** 
1035:FreeRTOS-Kernel/queue.c ****                     /* If there was a task waiting for data to arrive on the
1036:FreeRTOS-Kernel/queue.c ****                      * queue then unblock it now. */
1037:FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1038:FreeRTOS-Kernel/queue.c ****                     {
1039:FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1040:FreeRTOS-Kernel/queue.c ****                         {
1041:FreeRTOS-Kernel/queue.c ****                             /* The unblocked task has a priority higher than
1042:FreeRTOS-Kernel/queue.c ****                              * our own so yield immediately.  Yes it is ok to do
1043:FreeRTOS-Kernel/queue.c ****                              * this from within the critical section - the kernel
1044:FreeRTOS-Kernel/queue.c ****                              * takes care of that. */
1045:FreeRTOS-Kernel/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
1046:FreeRTOS-Kernel/queue.c ****                         }
1047:FreeRTOS-Kernel/queue.c ****                         else
1048:FreeRTOS-Kernel/queue.c ****                         {
1049:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1050:FreeRTOS-Kernel/queue.c ****                         }
1051:FreeRTOS-Kernel/queue.c ****                     }
1052:FreeRTOS-Kernel/queue.c ****                     else if( xYieldRequired != pdFALSE )
1053:FreeRTOS-Kernel/queue.c ****                     {
1054:FreeRTOS-Kernel/queue.c ****                         /* This path is a special case that will only get
1055:FreeRTOS-Kernel/queue.c ****                          * executed if the task was holding multiple mutexes and
1056:FreeRTOS-Kernel/queue.c ****                          * the mutexes were given back in an order that is
ARM GAS  /tmp/ccnrBCYQ.s 			page 20


1057:FreeRTOS-Kernel/queue.c ****                          * different to that in which they were taken. */
1058:FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1059:FreeRTOS-Kernel/queue.c ****                     }
1060:FreeRTOS-Kernel/queue.c ****                     else
1061:FreeRTOS-Kernel/queue.c ****                     {
1062:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1063:FreeRTOS-Kernel/queue.c ****                     }
1064:FreeRTOS-Kernel/queue.c ****                 }
1065:FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1066:FreeRTOS-Kernel/queue.c **** 
1067:FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1068:FreeRTOS-Kernel/queue.c **** 
1069:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueueGenericSend( pdPASS );
1070:FreeRTOS-Kernel/queue.c **** 
1071:FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1072:FreeRTOS-Kernel/queue.c ****             }
1073:FreeRTOS-Kernel/queue.c ****             else
1074:FreeRTOS-Kernel/queue.c ****             {
1075:FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1076:FreeRTOS-Kernel/queue.c ****                 {
1077:FreeRTOS-Kernel/queue.c ****                     /* The queue was full and no block time is specified (or
1078:FreeRTOS-Kernel/queue.c ****                      * the block time has expired) so leave now. */
1079:FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1080:FreeRTOS-Kernel/queue.c **** 
1081:FreeRTOS-Kernel/queue.c ****                     /* Return to the original privilege level before exiting
1082:FreeRTOS-Kernel/queue.c ****                      * the function. */
1083:FreeRTOS-Kernel/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
1084:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueueGenericSend( errQUEUE_FULL );
1085:FreeRTOS-Kernel/queue.c **** 
1086:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_FULL;
1087:FreeRTOS-Kernel/queue.c ****                 }
1088:FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1089:FreeRTOS-Kernel/queue.c ****                 {
1090:FreeRTOS-Kernel/queue.c ****                     /* The queue was full and a block time was specified so
1091:FreeRTOS-Kernel/queue.c ****                      * configure the timeout structure. */
1092:FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1093:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1094:FreeRTOS-Kernel/queue.c ****                 }
1095:FreeRTOS-Kernel/queue.c ****                 else
1096:FreeRTOS-Kernel/queue.c ****                 {
1097:FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1098:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1099:FreeRTOS-Kernel/queue.c ****                 }
1100:FreeRTOS-Kernel/queue.c ****             }
1101:FreeRTOS-Kernel/queue.c ****         }
1102:FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1103:FreeRTOS-Kernel/queue.c **** 
1104:FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1105:FreeRTOS-Kernel/queue.c ****          * now the critical section has been exited. */
1106:FreeRTOS-Kernel/queue.c **** 
1107:FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1108:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1109:FreeRTOS-Kernel/queue.c **** 
1110:FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1111:FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1112:FreeRTOS-Kernel/queue.c ****         {
1113:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
ARM GAS  /tmp/ccnrBCYQ.s 			page 21


1114:FreeRTOS-Kernel/queue.c ****             {
1115:FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
1116:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1117:FreeRTOS-Kernel/queue.c **** 
1118:FreeRTOS-Kernel/queue.c ****                 /* Unlocking the queue means queue events can effect the
1119:FreeRTOS-Kernel/queue.c ****                  * event list. It is possible that interrupts occurring now
1120:FreeRTOS-Kernel/queue.c ****                  * remove this task from the event list again - but as the
1121:FreeRTOS-Kernel/queue.c ****                  * scheduler is suspended the task will go onto the pending
1122:FreeRTOS-Kernel/queue.c ****                  * ready list instead of the actual ready list. */
1123:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1124:FreeRTOS-Kernel/queue.c **** 
1125:FreeRTOS-Kernel/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
1126:FreeRTOS-Kernel/queue.c ****                  * ready list into the ready list - so it is feasible that this
1127:FreeRTOS-Kernel/queue.c ****                  * task is already in the ready list before it yields - in which
1128:FreeRTOS-Kernel/queue.c ****                  * case the yield will not cause a context switch unless there
1129:FreeRTOS-Kernel/queue.c ****                  * is also a higher priority task in the pending ready list. */
1130:FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1131:FreeRTOS-Kernel/queue.c ****                 {
1132:FreeRTOS-Kernel/queue.c ****                     taskYIELD_WITHIN_API();
1133:FreeRTOS-Kernel/queue.c ****                 }
1134:FreeRTOS-Kernel/queue.c ****             }
1135:FreeRTOS-Kernel/queue.c ****             else
1136:FreeRTOS-Kernel/queue.c ****             {
1137:FreeRTOS-Kernel/queue.c ****                 /* Try again. */
1138:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1139:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
1140:FreeRTOS-Kernel/queue.c ****             }
1141:FreeRTOS-Kernel/queue.c ****         }
1142:FreeRTOS-Kernel/queue.c ****         else
1143:FreeRTOS-Kernel/queue.c ****         {
1144:FreeRTOS-Kernel/queue.c ****             /* The timeout has expired. */
1145:FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1146:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1147:FreeRTOS-Kernel/queue.c **** 
1148:FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1149:FreeRTOS-Kernel/queue.c ****             traceRETURN_xQueueGenericSend( errQUEUE_FULL );
1150:FreeRTOS-Kernel/queue.c **** 
1151:FreeRTOS-Kernel/queue.c ****             return errQUEUE_FULL;
1152:FreeRTOS-Kernel/queue.c ****         }
1153:FreeRTOS-Kernel/queue.c ****     }
1154:FreeRTOS-Kernel/queue.c **** }
1155:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1156:FreeRTOS-Kernel/queue.c **** 
1157:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1158:FreeRTOS-Kernel/queue.c ****                                      const void * const pvItemToQueue,
1159:FreeRTOS-Kernel/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1160:FreeRTOS-Kernel/queue.c ****                                      const BaseType_t xCopyPosition )
1161:FreeRTOS-Kernel/queue.c **** {
1162:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
1163:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1164:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1165:FreeRTOS-Kernel/queue.c **** 
1166:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPos
1167:FreeRTOS-Kernel/queue.c **** 
1168:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
1170:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
ARM GAS  /tmp/ccnrBCYQ.s 			page 22


1171:FreeRTOS-Kernel/queue.c **** 
1172:FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1173:FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1174:FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1175:FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1176:FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1177:FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1178:FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1179:FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
1180:FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1181:FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1182:FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1183:FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1184:FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1185:FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1186:FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1187:FreeRTOS-Kernel/queue.c **** 
1188:FreeRTOS-Kernel/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1189:FreeRTOS-Kernel/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1190:FreeRTOS-Kernel/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1191:FreeRTOS-Kernel/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1192:FreeRTOS-Kernel/queue.c ****      * post). */
1193:FreeRTOS-Kernel/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
1194:FreeRTOS-Kernel/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
1195:FreeRTOS-Kernel/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
1196:FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
1197:FreeRTOS-Kernel/queue.c ****     {
1198:FreeRTOS-Kernel/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1199:FreeRTOS-Kernel/queue.c ****         {
1200:FreeRTOS-Kernel/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1201:FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1202:FreeRTOS-Kernel/queue.c **** 
1203:FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1204:FreeRTOS-Kernel/queue.c **** 
1205:FreeRTOS-Kernel/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1206:FreeRTOS-Kernel/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1207:FreeRTOS-Kernel/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1208:FreeRTOS-Kernel/queue.c ****              *  called here even though the disinherit function does not check if
1209:FreeRTOS-Kernel/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1210:FreeRTOS-Kernel/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1211:FreeRTOS-Kernel/queue.c **** 
1212:FreeRTOS-Kernel/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1213:FreeRTOS-Kernel/queue.c ****              * be done when the queue is unlocked later. */
1214:FreeRTOS-Kernel/queue.c ****             if( cTxLock == queueUNLOCKED )
1215:FreeRTOS-Kernel/queue.c ****             {
1216:FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1217:FreeRTOS-Kernel/queue.c ****                 {
1218:FreeRTOS-Kernel/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1219:FreeRTOS-Kernel/queue.c ****                     {
1220:FreeRTOS-Kernel/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
1221:FreeRTOS-Kernel/queue.c ****                         {
1222:FreeRTOS-Kernel/queue.c ****                             /* Do not notify the queue set as an existing item
1223:FreeRTOS-Kernel/queue.c ****                              * was overwritten in the queue so the number of items
1224:FreeRTOS-Kernel/queue.c ****                              * in the queue has not changed. */
1225:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1226:FreeRTOS-Kernel/queue.c ****                         }
1227:FreeRTOS-Kernel/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
ARM GAS  /tmp/ccnrBCYQ.s 			page 23


1228:FreeRTOS-Kernel/queue.c ****                         {
1229:FreeRTOS-Kernel/queue.c ****                             /* The queue is a member of a queue set, and posting
1230:FreeRTOS-Kernel/queue.c ****                              * to the queue set caused a higher priority task to
1231:FreeRTOS-Kernel/queue.c ****                              * unblock.  A context switch is required. */
1232:FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1233:FreeRTOS-Kernel/queue.c ****                             {
1234:FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1235:FreeRTOS-Kernel/queue.c ****                             }
1236:FreeRTOS-Kernel/queue.c ****                             else
1237:FreeRTOS-Kernel/queue.c ****                             {
1238:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1239:FreeRTOS-Kernel/queue.c ****                             }
1240:FreeRTOS-Kernel/queue.c ****                         }
1241:FreeRTOS-Kernel/queue.c ****                         else
1242:FreeRTOS-Kernel/queue.c ****                         {
1243:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1244:FreeRTOS-Kernel/queue.c ****                         }
1245:FreeRTOS-Kernel/queue.c ****                     }
1246:FreeRTOS-Kernel/queue.c ****                     else
1247:FreeRTOS-Kernel/queue.c ****                     {
1248:FreeRTOS-Kernel/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1249:FreeRTOS-Kernel/queue.c ****                         {
1250:FreeRTOS-Kernel/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1251:FreeRTOS-Kernel/queue.c ****                             {
1252:FreeRTOS-Kernel/queue.c ****                                 /* The task waiting has a higher priority so
1253:FreeRTOS-Kernel/queue.c ****                                  *  record that a context switch is required. */
1254:FreeRTOS-Kernel/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1255:FreeRTOS-Kernel/queue.c ****                                 {
1256:FreeRTOS-Kernel/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1257:FreeRTOS-Kernel/queue.c ****                                 }
1258:FreeRTOS-Kernel/queue.c ****                                 else
1259:FreeRTOS-Kernel/queue.c ****                                 {
1260:FreeRTOS-Kernel/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1261:FreeRTOS-Kernel/queue.c ****                                 }
1262:FreeRTOS-Kernel/queue.c ****                             }
1263:FreeRTOS-Kernel/queue.c ****                             else
1264:FreeRTOS-Kernel/queue.c ****                             {
1265:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1266:FreeRTOS-Kernel/queue.c ****                             }
1267:FreeRTOS-Kernel/queue.c ****                         }
1268:FreeRTOS-Kernel/queue.c ****                         else
1269:FreeRTOS-Kernel/queue.c ****                         {
1270:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1271:FreeRTOS-Kernel/queue.c ****                         }
1272:FreeRTOS-Kernel/queue.c ****                     }
1273:FreeRTOS-Kernel/queue.c ****                 }
1274:FreeRTOS-Kernel/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1275:FreeRTOS-Kernel/queue.c ****                 {
1276:FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1277:FreeRTOS-Kernel/queue.c ****                     {
1278:FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1279:FreeRTOS-Kernel/queue.c ****                         {
1280:FreeRTOS-Kernel/queue.c ****                             /* The task waiting has a higher priority so record that a
1281:FreeRTOS-Kernel/queue.c ****                              * context switch is required. */
1282:FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1283:FreeRTOS-Kernel/queue.c ****                             {
1284:FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  /tmp/ccnrBCYQ.s 			page 24


1285:FreeRTOS-Kernel/queue.c ****                             }
1286:FreeRTOS-Kernel/queue.c ****                             else
1287:FreeRTOS-Kernel/queue.c ****                             {
1288:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1289:FreeRTOS-Kernel/queue.c ****                             }
1290:FreeRTOS-Kernel/queue.c ****                         }
1291:FreeRTOS-Kernel/queue.c ****                         else
1292:FreeRTOS-Kernel/queue.c ****                         {
1293:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1294:FreeRTOS-Kernel/queue.c ****                         }
1295:FreeRTOS-Kernel/queue.c ****                     }
1296:FreeRTOS-Kernel/queue.c ****                     else
1297:FreeRTOS-Kernel/queue.c ****                     {
1298:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1299:FreeRTOS-Kernel/queue.c ****                     }
1300:FreeRTOS-Kernel/queue.c **** 
1301:FreeRTOS-Kernel/queue.c ****                     /* Not used in this path. */
1302:FreeRTOS-Kernel/queue.c ****                     ( void ) uxPreviousMessagesWaiting;
1303:FreeRTOS-Kernel/queue.c ****                 }
1304:FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1305:FreeRTOS-Kernel/queue.c ****             }
1306:FreeRTOS-Kernel/queue.c ****             else
1307:FreeRTOS-Kernel/queue.c ****             {
1308:FreeRTOS-Kernel/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1309:FreeRTOS-Kernel/queue.c ****                  * knows that data was posted while it was locked. */
1310:FreeRTOS-Kernel/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1311:FreeRTOS-Kernel/queue.c ****             }
1312:FreeRTOS-Kernel/queue.c **** 
1313:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
1314:FreeRTOS-Kernel/queue.c ****         }
1315:FreeRTOS-Kernel/queue.c ****         else
1316:FreeRTOS-Kernel/queue.c ****         {
1317:FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1318:FreeRTOS-Kernel/queue.c ****             xReturn = errQUEUE_FULL;
1319:FreeRTOS-Kernel/queue.c ****         }
1320:FreeRTOS-Kernel/queue.c ****     }
1321:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
1322:FreeRTOS-Kernel/queue.c **** 
1323:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueueGenericSendFromISR( xReturn );
1324:FreeRTOS-Kernel/queue.c **** 
1325:FreeRTOS-Kernel/queue.c ****     return xReturn;
1326:FreeRTOS-Kernel/queue.c **** }
1327:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS-Kernel/queue.c **** 
1329:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1330:FreeRTOS-Kernel/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1331:FreeRTOS-Kernel/queue.c **** {
1332:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
1333:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1334:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1335:FreeRTOS-Kernel/queue.c **** 
1336:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueGiveFromISR( xQueue, pxHigherPriorityTaskWoken );
1337:FreeRTOS-Kernel/queue.c **** 
1338:FreeRTOS-Kernel/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1339:FreeRTOS-Kernel/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1340:FreeRTOS-Kernel/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1341:FreeRTOS-Kernel/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
ARM GAS  /tmp/ccnrBCYQ.s 			page 25


1342:FreeRTOS-Kernel/queue.c ****      * post). */
1343:FreeRTOS-Kernel/queue.c **** 
1344:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
1345:FreeRTOS-Kernel/queue.c **** 
1346:FreeRTOS-Kernel/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1347:FreeRTOS-Kernel/queue.c ****      * if the item size is not 0. */
1348:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1349:FreeRTOS-Kernel/queue.c **** 
1350:FreeRTOS-Kernel/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1351:FreeRTOS-Kernel/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1352:FreeRTOS-Kernel/queue.c ****      * interrupts, only tasks. */
1353:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1354:FreeRTOS-Kernel/queue.c **** 
1355:FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1356:FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1357:FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1358:FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1359:FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1360:FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1361:FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1362:FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
1363:FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1364:FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1365:FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1366:FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1367:FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1368:FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1369:FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1370:FreeRTOS-Kernel/queue.c **** 
1371:FreeRTOS-Kernel/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
1372:FreeRTOS-Kernel/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
1373:FreeRTOS-Kernel/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
1374:FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
1375:FreeRTOS-Kernel/queue.c ****     {
1376:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1377:FreeRTOS-Kernel/queue.c **** 
1378:FreeRTOS-Kernel/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1379:FreeRTOS-Kernel/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1380:FreeRTOS-Kernel/queue.c ****          * space'. */
1381:FreeRTOS-Kernel/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1382:FreeRTOS-Kernel/queue.c ****         {
1383:FreeRTOS-Kernel/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1384:FreeRTOS-Kernel/queue.c **** 
1385:FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1386:FreeRTOS-Kernel/queue.c **** 
1387:FreeRTOS-Kernel/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1388:FreeRTOS-Kernel/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1389:FreeRTOS-Kernel/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1390:FreeRTOS-Kernel/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1391:FreeRTOS-Kernel/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1392:FreeRTOS-Kernel/queue.c ****              * messages (semaphores) available. */
1393:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
1394:FreeRTOS-Kernel/queue.c **** 
1395:FreeRTOS-Kernel/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1396:FreeRTOS-Kernel/queue.c ****              * be done when the queue is unlocked later. */
1397:FreeRTOS-Kernel/queue.c ****             if( cTxLock == queueUNLOCKED )
1398:FreeRTOS-Kernel/queue.c ****             {
ARM GAS  /tmp/ccnrBCYQ.s 			page 26


1399:FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1400:FreeRTOS-Kernel/queue.c ****                 {
1401:FreeRTOS-Kernel/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1402:FreeRTOS-Kernel/queue.c ****                     {
1403:FreeRTOS-Kernel/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1404:FreeRTOS-Kernel/queue.c ****                         {
1405:FreeRTOS-Kernel/queue.c ****                             /* The semaphore is a member of a queue set, and
1406:FreeRTOS-Kernel/queue.c ****                              * posting to the queue set caused a higher priority
1407:FreeRTOS-Kernel/queue.c ****                              * task to unblock.  A context switch is required. */
1408:FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1409:FreeRTOS-Kernel/queue.c ****                             {
1410:FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1411:FreeRTOS-Kernel/queue.c ****                             }
1412:FreeRTOS-Kernel/queue.c ****                             else
1413:FreeRTOS-Kernel/queue.c ****                             {
1414:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1415:FreeRTOS-Kernel/queue.c ****                             }
1416:FreeRTOS-Kernel/queue.c ****                         }
1417:FreeRTOS-Kernel/queue.c ****                         else
1418:FreeRTOS-Kernel/queue.c ****                         {
1419:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1420:FreeRTOS-Kernel/queue.c ****                         }
1421:FreeRTOS-Kernel/queue.c ****                     }
1422:FreeRTOS-Kernel/queue.c ****                     else
1423:FreeRTOS-Kernel/queue.c ****                     {
1424:FreeRTOS-Kernel/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1425:FreeRTOS-Kernel/queue.c ****                         {
1426:FreeRTOS-Kernel/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1427:FreeRTOS-Kernel/queue.c ****                             {
1428:FreeRTOS-Kernel/queue.c ****                                 /* The task waiting has a higher priority so
1429:FreeRTOS-Kernel/queue.c ****                                  *  record that a context switch is required. */
1430:FreeRTOS-Kernel/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1431:FreeRTOS-Kernel/queue.c ****                                 {
1432:FreeRTOS-Kernel/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1433:FreeRTOS-Kernel/queue.c ****                                 }
1434:FreeRTOS-Kernel/queue.c ****                                 else
1435:FreeRTOS-Kernel/queue.c ****                                 {
1436:FreeRTOS-Kernel/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1437:FreeRTOS-Kernel/queue.c ****                                 }
1438:FreeRTOS-Kernel/queue.c ****                             }
1439:FreeRTOS-Kernel/queue.c ****                             else
1440:FreeRTOS-Kernel/queue.c ****                             {
1441:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1442:FreeRTOS-Kernel/queue.c ****                             }
1443:FreeRTOS-Kernel/queue.c ****                         }
1444:FreeRTOS-Kernel/queue.c ****                         else
1445:FreeRTOS-Kernel/queue.c ****                         {
1446:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1447:FreeRTOS-Kernel/queue.c ****                         }
1448:FreeRTOS-Kernel/queue.c ****                     }
1449:FreeRTOS-Kernel/queue.c ****                 }
1450:FreeRTOS-Kernel/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1451:FreeRTOS-Kernel/queue.c ****                 {
1452:FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1453:FreeRTOS-Kernel/queue.c ****                     {
1454:FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1455:FreeRTOS-Kernel/queue.c ****                         {
ARM GAS  /tmp/ccnrBCYQ.s 			page 27


1456:FreeRTOS-Kernel/queue.c ****                             /* The task waiting has a higher priority so record that a
1457:FreeRTOS-Kernel/queue.c ****                              * context switch is required. */
1458:FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1459:FreeRTOS-Kernel/queue.c ****                             {
1460:FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1461:FreeRTOS-Kernel/queue.c ****                             }
1462:FreeRTOS-Kernel/queue.c ****                             else
1463:FreeRTOS-Kernel/queue.c ****                             {
1464:FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1465:FreeRTOS-Kernel/queue.c ****                             }
1466:FreeRTOS-Kernel/queue.c ****                         }
1467:FreeRTOS-Kernel/queue.c ****                         else
1468:FreeRTOS-Kernel/queue.c ****                         {
1469:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1470:FreeRTOS-Kernel/queue.c ****                         }
1471:FreeRTOS-Kernel/queue.c ****                     }
1472:FreeRTOS-Kernel/queue.c ****                     else
1473:FreeRTOS-Kernel/queue.c ****                     {
1474:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1475:FreeRTOS-Kernel/queue.c ****                     }
1476:FreeRTOS-Kernel/queue.c ****                 }
1477:FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1478:FreeRTOS-Kernel/queue.c ****             }
1479:FreeRTOS-Kernel/queue.c ****             else
1480:FreeRTOS-Kernel/queue.c ****             {
1481:FreeRTOS-Kernel/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1482:FreeRTOS-Kernel/queue.c ****                  * knows that data was posted while it was locked. */
1483:FreeRTOS-Kernel/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1484:FreeRTOS-Kernel/queue.c ****             }
1485:FreeRTOS-Kernel/queue.c **** 
1486:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
1487:FreeRTOS-Kernel/queue.c ****         }
1488:FreeRTOS-Kernel/queue.c ****         else
1489:FreeRTOS-Kernel/queue.c ****         {
1490:FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1491:FreeRTOS-Kernel/queue.c ****             xReturn = errQUEUE_FULL;
1492:FreeRTOS-Kernel/queue.c ****         }
1493:FreeRTOS-Kernel/queue.c ****     }
1494:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
1495:FreeRTOS-Kernel/queue.c **** 
1496:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueueGiveFromISR( xReturn );
1497:FreeRTOS-Kernel/queue.c **** 
1498:FreeRTOS-Kernel/queue.c ****     return xReturn;
1499:FreeRTOS-Kernel/queue.c **** }
1500:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1501:FreeRTOS-Kernel/queue.c **** 
1502:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1503:FreeRTOS-Kernel/queue.c ****                           void * const pvBuffer,
1504:FreeRTOS-Kernel/queue.c ****                           TickType_t xTicksToWait )
1505:FreeRTOS-Kernel/queue.c **** {
1506:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1507:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
1508:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1509:FreeRTOS-Kernel/queue.c **** 
1510:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );
1511:FreeRTOS-Kernel/queue.c **** 
1512:FreeRTOS-Kernel/queue.c ****     /* Check the pointer is not NULL. */
ARM GAS  /tmp/ccnrBCYQ.s 			page 28


1513:FreeRTOS-Kernel/queue.c ****     configASSERT( ( pxQueue ) );
1514:FreeRTOS-Kernel/queue.c **** 
1515:FreeRTOS-Kernel/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1516:FreeRTOS-Kernel/queue.c ****      * is zero (so no data is copied into the buffer). */
1517:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1518:FreeRTOS-Kernel/queue.c **** 
1519:FreeRTOS-Kernel/queue.c ****     /* Cannot block if the scheduler is suspended. */
1520:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1521:FreeRTOS-Kernel/queue.c ****     {
1522:FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1523:FreeRTOS-Kernel/queue.c ****     }
1524:FreeRTOS-Kernel/queue.c ****     #endif
1525:FreeRTOS-Kernel/queue.c **** 
1526:FreeRTOS-Kernel/queue.c ****     for( ; ; )
1527:FreeRTOS-Kernel/queue.c ****     {
1528:FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
1529:FreeRTOS-Kernel/queue.c ****         {
1530:FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1531:FreeRTOS-Kernel/queue.c **** 
1532:FreeRTOS-Kernel/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1533:FreeRTOS-Kernel/queue.c ****              * must be the highest priority task wanting to access the queue. */
1534:FreeRTOS-Kernel/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1535:FreeRTOS-Kernel/queue.c ****             {
1536:FreeRTOS-Kernel/queue.c ****                 /* Data available, remove one item. */
1537:FreeRTOS-Kernel/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1538:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1539:FreeRTOS-Kernel/queue.c ****                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 
1540:FreeRTOS-Kernel/queue.c **** 
1541:FreeRTOS-Kernel/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1542:FreeRTOS-Kernel/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1543:FreeRTOS-Kernel/queue.c ****                  * task. */
1544:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1545:FreeRTOS-Kernel/queue.c ****                 {
1546:FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1547:FreeRTOS-Kernel/queue.c ****                     {
1548:FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1549:FreeRTOS-Kernel/queue.c ****                     }
1550:FreeRTOS-Kernel/queue.c ****                     else
1551:FreeRTOS-Kernel/queue.c ****                     {
1552:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1553:FreeRTOS-Kernel/queue.c ****                     }
1554:FreeRTOS-Kernel/queue.c ****                 }
1555:FreeRTOS-Kernel/queue.c ****                 else
1556:FreeRTOS-Kernel/queue.c ****                 {
1557:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1558:FreeRTOS-Kernel/queue.c ****                 }
1559:FreeRTOS-Kernel/queue.c **** 
1560:FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1561:FreeRTOS-Kernel/queue.c **** 
1562:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueueReceive( pdPASS );
1563:FreeRTOS-Kernel/queue.c **** 
1564:FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1565:FreeRTOS-Kernel/queue.c ****             }
1566:FreeRTOS-Kernel/queue.c ****             else
1567:FreeRTOS-Kernel/queue.c ****             {
1568:FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1569:FreeRTOS-Kernel/queue.c ****                 {
ARM GAS  /tmp/ccnrBCYQ.s 			page 29


1570:FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and no block time is specified (or
1571:FreeRTOS-Kernel/queue.c ****                      * the block time has expired) so leave now. */
1572:FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1573:FreeRTOS-Kernel/queue.c **** 
1574:FreeRTOS-Kernel/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1575:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueueReceive( errQUEUE_EMPTY );
1576:FreeRTOS-Kernel/queue.c **** 
1577:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_EMPTY;
1578:FreeRTOS-Kernel/queue.c ****                 }
1579:FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1580:FreeRTOS-Kernel/queue.c ****                 {
1581:FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and a block time was specified so
1582:FreeRTOS-Kernel/queue.c ****                      * configure the timeout structure. */
1583:FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1584:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1585:FreeRTOS-Kernel/queue.c ****                 }
1586:FreeRTOS-Kernel/queue.c ****                 else
1587:FreeRTOS-Kernel/queue.c ****                 {
1588:FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1589:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1590:FreeRTOS-Kernel/queue.c ****                 }
1591:FreeRTOS-Kernel/queue.c ****             }
1592:FreeRTOS-Kernel/queue.c ****         }
1593:FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1594:FreeRTOS-Kernel/queue.c **** 
1595:FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1596:FreeRTOS-Kernel/queue.c ****          * now the critical section has been exited. */
1597:FreeRTOS-Kernel/queue.c **** 
1598:FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1599:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1600:FreeRTOS-Kernel/queue.c **** 
1601:FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1602:FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1603:FreeRTOS-Kernel/queue.c ****         {
1604:FreeRTOS-Kernel/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1605:FreeRTOS-Kernel/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1606:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1607:FreeRTOS-Kernel/queue.c ****             {
1608:FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1609:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1610:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1611:FreeRTOS-Kernel/queue.c **** 
1612:FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1613:FreeRTOS-Kernel/queue.c ****                 {
1614:FreeRTOS-Kernel/queue.c ****                     taskYIELD_WITHIN_API();
1615:FreeRTOS-Kernel/queue.c ****                 }
1616:FreeRTOS-Kernel/queue.c ****                 else
1617:FreeRTOS-Kernel/queue.c ****                 {
1618:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1619:FreeRTOS-Kernel/queue.c ****                 }
1620:FreeRTOS-Kernel/queue.c ****             }
1621:FreeRTOS-Kernel/queue.c ****             else
1622:FreeRTOS-Kernel/queue.c ****             {
1623:FreeRTOS-Kernel/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1624:FreeRTOS-Kernel/queue.c ****                  * data. */
1625:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1626:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
ARM GAS  /tmp/ccnrBCYQ.s 			page 30


1627:FreeRTOS-Kernel/queue.c ****             }
1628:FreeRTOS-Kernel/queue.c ****         }
1629:FreeRTOS-Kernel/queue.c ****         else
1630:FreeRTOS-Kernel/queue.c ****         {
1631:FreeRTOS-Kernel/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1632:FreeRTOS-Kernel/queue.c ****              * back and attempt to read the data. */
1633:FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1634:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1635:FreeRTOS-Kernel/queue.c **** 
1636:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1637:FreeRTOS-Kernel/queue.c ****             {
1638:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1639:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueueReceive( errQUEUE_EMPTY );
1640:FreeRTOS-Kernel/queue.c **** 
1641:FreeRTOS-Kernel/queue.c ****                 return errQUEUE_EMPTY;
1642:FreeRTOS-Kernel/queue.c ****             }
1643:FreeRTOS-Kernel/queue.c ****             else
1644:FreeRTOS-Kernel/queue.c ****             {
1645:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1646:FreeRTOS-Kernel/queue.c ****             }
1647:FreeRTOS-Kernel/queue.c ****         }
1648:FreeRTOS-Kernel/queue.c ****     }
1649:FreeRTOS-Kernel/queue.c **** }
1650:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1651:FreeRTOS-Kernel/queue.c **** 
1652:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1653:FreeRTOS-Kernel/queue.c ****                                 TickType_t xTicksToWait )
1654:FreeRTOS-Kernel/queue.c **** {
1655:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1656:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
1657:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1658:FreeRTOS-Kernel/queue.c **** 
1659:FreeRTOS-Kernel/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1660:FreeRTOS-Kernel/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1661:FreeRTOS-Kernel/queue.c ****     #endif
1662:FreeRTOS-Kernel/queue.c **** 
1663:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );
1664:FreeRTOS-Kernel/queue.c **** 
1665:FreeRTOS-Kernel/queue.c ****     /* Check the queue pointer is not NULL. */
1666:FreeRTOS-Kernel/queue.c ****     configASSERT( ( pxQueue ) );
1667:FreeRTOS-Kernel/queue.c **** 
1668:FreeRTOS-Kernel/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1669:FreeRTOS-Kernel/queue.c ****      * 0. */
1670:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1671:FreeRTOS-Kernel/queue.c **** 
1672:FreeRTOS-Kernel/queue.c ****     /* Cannot block if the scheduler is suspended. */
1673:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1674:FreeRTOS-Kernel/queue.c ****     {
1675:FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1676:FreeRTOS-Kernel/queue.c ****     }
1677:FreeRTOS-Kernel/queue.c ****     #endif
1678:FreeRTOS-Kernel/queue.c **** 
1679:FreeRTOS-Kernel/queue.c ****     for( ; ; )
1680:FreeRTOS-Kernel/queue.c ****     {
1681:FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
1682:FreeRTOS-Kernel/queue.c ****         {
1683:FreeRTOS-Kernel/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
ARM GAS  /tmp/ccnrBCYQ.s 			page 31


1684:FreeRTOS-Kernel/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1685:FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1686:FreeRTOS-Kernel/queue.c **** 
1687:FreeRTOS-Kernel/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1688:FreeRTOS-Kernel/queue.c ****              * must be the highest priority task wanting to access the queue. */
1689:FreeRTOS-Kernel/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1690:FreeRTOS-Kernel/queue.c ****             {
1691:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1692:FreeRTOS-Kernel/queue.c **** 
1693:FreeRTOS-Kernel/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1694:FreeRTOS-Kernel/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1695:FreeRTOS-Kernel/queue.c ****                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1
1696:FreeRTOS-Kernel/queue.c **** 
1697:FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1698:FreeRTOS-Kernel/queue.c ****                 {
1699:FreeRTOS-Kernel/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1700:FreeRTOS-Kernel/queue.c ****                     {
1701:FreeRTOS-Kernel/queue.c ****                         /* Record the information required to implement
1702:FreeRTOS-Kernel/queue.c ****                          * priority inheritance should it become necessary. */
1703:FreeRTOS-Kernel/queue.c ****                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1704:FreeRTOS-Kernel/queue.c ****                     }
1705:FreeRTOS-Kernel/queue.c ****                     else
1706:FreeRTOS-Kernel/queue.c ****                     {
1707:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1708:FreeRTOS-Kernel/queue.c ****                     }
1709:FreeRTOS-Kernel/queue.c ****                 }
1710:FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_MUTEXES */
1711:FreeRTOS-Kernel/queue.c **** 
1712:FreeRTOS-Kernel/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1713:FreeRTOS-Kernel/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1714:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1715:FreeRTOS-Kernel/queue.c ****                 {
1716:FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1717:FreeRTOS-Kernel/queue.c ****                     {
1718:FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1719:FreeRTOS-Kernel/queue.c ****                     }
1720:FreeRTOS-Kernel/queue.c ****                     else
1721:FreeRTOS-Kernel/queue.c ****                     {
1722:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1723:FreeRTOS-Kernel/queue.c ****                     }
1724:FreeRTOS-Kernel/queue.c ****                 }
1725:FreeRTOS-Kernel/queue.c ****                 else
1726:FreeRTOS-Kernel/queue.c ****                 {
1727:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1728:FreeRTOS-Kernel/queue.c ****                 }
1729:FreeRTOS-Kernel/queue.c **** 
1730:FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1731:FreeRTOS-Kernel/queue.c **** 
1732:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueueSemaphoreTake( pdPASS );
1733:FreeRTOS-Kernel/queue.c **** 
1734:FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1735:FreeRTOS-Kernel/queue.c ****             }
1736:FreeRTOS-Kernel/queue.c ****             else
1737:FreeRTOS-Kernel/queue.c ****             {
1738:FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1739:FreeRTOS-Kernel/queue.c ****                 {
1740:FreeRTOS-Kernel/queue.c ****                     /* The semaphore count was 0 and no block time is specified
ARM GAS  /tmp/ccnrBCYQ.s 			page 32


1741:FreeRTOS-Kernel/queue.c ****                      * (or the block time has expired) so exit now. */
1742:FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1743:FreeRTOS-Kernel/queue.c **** 
1744:FreeRTOS-Kernel/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1745:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
1746:FreeRTOS-Kernel/queue.c **** 
1747:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_EMPTY;
1748:FreeRTOS-Kernel/queue.c ****                 }
1749:FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1750:FreeRTOS-Kernel/queue.c ****                 {
1751:FreeRTOS-Kernel/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1752:FreeRTOS-Kernel/queue.c ****                      * so configure the timeout structure ready to block. */
1753:FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1754:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1755:FreeRTOS-Kernel/queue.c ****                 }
1756:FreeRTOS-Kernel/queue.c ****                 else
1757:FreeRTOS-Kernel/queue.c ****                 {
1758:FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1759:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1760:FreeRTOS-Kernel/queue.c ****                 }
1761:FreeRTOS-Kernel/queue.c ****             }
1762:FreeRTOS-Kernel/queue.c ****         }
1763:FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1764:FreeRTOS-Kernel/queue.c **** 
1765:FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1766:FreeRTOS-Kernel/queue.c ****          * now the critical section has been exited. */
1767:FreeRTOS-Kernel/queue.c **** 
1768:FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1769:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1770:FreeRTOS-Kernel/queue.c **** 
1771:FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1772:FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1773:FreeRTOS-Kernel/queue.c ****         {
1774:FreeRTOS-Kernel/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1775:FreeRTOS-Kernel/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1776:FreeRTOS-Kernel/queue.c ****              * become available.  As semaphores are implemented with queues the
1777:FreeRTOS-Kernel/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1778:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1779:FreeRTOS-Kernel/queue.c ****             {
1780:FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1781:FreeRTOS-Kernel/queue.c **** 
1782:FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1783:FreeRTOS-Kernel/queue.c ****                 {
1784:FreeRTOS-Kernel/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1785:FreeRTOS-Kernel/queue.c ****                     {
1786:FreeRTOS-Kernel/queue.c ****                         taskENTER_CRITICAL();
1787:FreeRTOS-Kernel/queue.c ****                         {
1788:FreeRTOS-Kernel/queue.c ****                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMut
1789:FreeRTOS-Kernel/queue.c ****                         }
1790:FreeRTOS-Kernel/queue.c ****                         taskEXIT_CRITICAL();
1791:FreeRTOS-Kernel/queue.c ****                     }
1792:FreeRTOS-Kernel/queue.c ****                     else
1793:FreeRTOS-Kernel/queue.c ****                     {
1794:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1795:FreeRTOS-Kernel/queue.c ****                     }
1796:FreeRTOS-Kernel/queue.c ****                 }
1797:FreeRTOS-Kernel/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
ARM GAS  /tmp/ccnrBCYQ.s 			page 33


1798:FreeRTOS-Kernel/queue.c **** 
1799:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1800:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1801:FreeRTOS-Kernel/queue.c **** 
1802:FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1803:FreeRTOS-Kernel/queue.c ****                 {
1804:FreeRTOS-Kernel/queue.c ****                     taskYIELD_WITHIN_API();
1805:FreeRTOS-Kernel/queue.c ****                 }
1806:FreeRTOS-Kernel/queue.c ****                 else
1807:FreeRTOS-Kernel/queue.c ****                 {
1808:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1809:FreeRTOS-Kernel/queue.c ****                 }
1810:FreeRTOS-Kernel/queue.c ****             }
1811:FreeRTOS-Kernel/queue.c ****             else
1812:FreeRTOS-Kernel/queue.c ****             {
1813:FreeRTOS-Kernel/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1814:FreeRTOS-Kernel/queue.c ****                  * attempt to take the semaphore again. */
1815:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1816:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
1817:FreeRTOS-Kernel/queue.c ****             }
1818:FreeRTOS-Kernel/queue.c ****         }
1819:FreeRTOS-Kernel/queue.c ****         else
1820:FreeRTOS-Kernel/queue.c ****         {
1821:FreeRTOS-Kernel/queue.c ****             /* Timed out. */
1822:FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1823:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1824:FreeRTOS-Kernel/queue.c **** 
1825:FreeRTOS-Kernel/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1826:FreeRTOS-Kernel/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1827:FreeRTOS-Kernel/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1828:FreeRTOS-Kernel/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1829:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1830:FreeRTOS-Kernel/queue.c ****             {
1831:FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1832:FreeRTOS-Kernel/queue.c ****                 {
1833:FreeRTOS-Kernel/queue.c ****                     /* xInheritanceOccurred could only have be set if
1834:FreeRTOS-Kernel/queue.c ****                      * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1835:FreeRTOS-Kernel/queue.c ****                      * test the mutex type again to check it is actually a mutex. */
1836:FreeRTOS-Kernel/queue.c ****                     if( xInheritanceOccurred != pdFALSE )
1837:FreeRTOS-Kernel/queue.c ****                     {
1838:FreeRTOS-Kernel/queue.c ****                         taskENTER_CRITICAL();
1839:FreeRTOS-Kernel/queue.c ****                         {
1840:FreeRTOS-Kernel/queue.c ****                             UBaseType_t uxHighestWaitingPriority;
1841:FreeRTOS-Kernel/queue.c **** 
1842:FreeRTOS-Kernel/queue.c ****                             /* This task blocking on the mutex caused another
1843:FreeRTOS-Kernel/queue.c ****                              * task to inherit this task's priority.  Now this task
1844:FreeRTOS-Kernel/queue.c ****                              * has timed out the priority should be disinherited
1845:FreeRTOS-Kernel/queue.c ****                              * again, but only as low as the next highest priority
1846:FreeRTOS-Kernel/queue.c ****                              * task that is waiting for the same mutex. */
1847:FreeRTOS-Kernel/queue.c ****                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueu
1848:FreeRTOS-Kernel/queue.c **** 
1849:FreeRTOS-Kernel/queue.c ****                             /* vTaskPriorityDisinheritAfterTimeout uses the uxHighestWaitingPriorit
1850:FreeRTOS-Kernel/queue.c ****                              * parameter to index pxReadyTasksLists when adding the task holding
1851:FreeRTOS-Kernel/queue.c ****                              * mutex to the ready list for its new priority. Coverity thinks that
1852:FreeRTOS-Kernel/queue.c ****                              * it can result in out-of-bounds access which is not true because
1853:FreeRTOS-Kernel/queue.c ****                              * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAft
1854:FreeRTOS-Kernel/queue.c ****                              * is capped at ( configMAX_PRIORITIES - 1 ). */
ARM GAS  /tmp/ccnrBCYQ.s 			page 34


1855:FreeRTOS-Kernel/queue.c ****                             /* coverity[overrun] */
1856:FreeRTOS-Kernel/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
1857:FreeRTOS-Kernel/queue.c ****                         }
1858:FreeRTOS-Kernel/queue.c ****                         taskEXIT_CRITICAL();
1859:FreeRTOS-Kernel/queue.c ****                     }
1860:FreeRTOS-Kernel/queue.c ****                 }
1861:FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_MUTEXES */
1862:FreeRTOS-Kernel/queue.c **** 
1863:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1864:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
1865:FreeRTOS-Kernel/queue.c **** 
1866:FreeRTOS-Kernel/queue.c ****                 return errQUEUE_EMPTY;
1867:FreeRTOS-Kernel/queue.c ****             }
1868:FreeRTOS-Kernel/queue.c ****             else
1869:FreeRTOS-Kernel/queue.c ****             {
1870:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1871:FreeRTOS-Kernel/queue.c ****             }
1872:FreeRTOS-Kernel/queue.c ****         }
1873:FreeRTOS-Kernel/queue.c ****     }
1874:FreeRTOS-Kernel/queue.c **** }
1875:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1876:FreeRTOS-Kernel/queue.c **** 
1877:FreeRTOS-Kernel/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1878:FreeRTOS-Kernel/queue.c ****                        void * const pvBuffer,
1879:FreeRTOS-Kernel/queue.c ****                        TickType_t xTicksToWait )
1880:FreeRTOS-Kernel/queue.c **** {
1881:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1882:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
1883:FreeRTOS-Kernel/queue.c ****     int8_t * pcOriginalReadPosition;
1884:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1885:FreeRTOS-Kernel/queue.c **** 
1886:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );
1887:FreeRTOS-Kernel/queue.c **** 
1888:FreeRTOS-Kernel/queue.c ****     /* Check the pointer is not NULL. */
1889:FreeRTOS-Kernel/queue.c ****     configASSERT( ( pxQueue ) );
1890:FreeRTOS-Kernel/queue.c **** 
1891:FreeRTOS-Kernel/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1892:FreeRTOS-Kernel/queue.c ****      * is zero (so no data is copied into the buffer. */
1893:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1894:FreeRTOS-Kernel/queue.c **** 
1895:FreeRTOS-Kernel/queue.c ****     /* Cannot block if the scheduler is suspended. */
1896:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1897:FreeRTOS-Kernel/queue.c ****     {
1898:FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1899:FreeRTOS-Kernel/queue.c ****     }
1900:FreeRTOS-Kernel/queue.c ****     #endif
1901:FreeRTOS-Kernel/queue.c **** 
1902:FreeRTOS-Kernel/queue.c ****     for( ; ; )
1903:FreeRTOS-Kernel/queue.c ****     {
1904:FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
1905:FreeRTOS-Kernel/queue.c ****         {
1906:FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1907:FreeRTOS-Kernel/queue.c **** 
1908:FreeRTOS-Kernel/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1909:FreeRTOS-Kernel/queue.c ****              * must be the highest priority task wanting to access the queue. */
1910:FreeRTOS-Kernel/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1911:FreeRTOS-Kernel/queue.c ****             {
ARM GAS  /tmp/ccnrBCYQ.s 			page 35


1912:FreeRTOS-Kernel/queue.c ****                 /* Remember the read position so it can be reset after the data
1913:FreeRTOS-Kernel/queue.c ****                  * is read from the queue as this function is only peeking the
1914:FreeRTOS-Kernel/queue.c ****                  * data, not removing it. */
1915:FreeRTOS-Kernel/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1916:FreeRTOS-Kernel/queue.c **** 
1917:FreeRTOS-Kernel/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1918:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1919:FreeRTOS-Kernel/queue.c **** 
1920:FreeRTOS-Kernel/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1921:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1922:FreeRTOS-Kernel/queue.c **** 
1923:FreeRTOS-Kernel/queue.c ****                 /* The data is being left in the queue, so see if there are
1924:FreeRTOS-Kernel/queue.c ****                  * any other tasks waiting for the data. */
1925:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1926:FreeRTOS-Kernel/queue.c ****                 {
1927:FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1928:FreeRTOS-Kernel/queue.c ****                     {
1929:FreeRTOS-Kernel/queue.c ****                         /* The task waiting has a higher priority than this task. */
1930:FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1931:FreeRTOS-Kernel/queue.c ****                     }
1932:FreeRTOS-Kernel/queue.c ****                     else
1933:FreeRTOS-Kernel/queue.c ****                     {
1934:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1935:FreeRTOS-Kernel/queue.c ****                     }
1936:FreeRTOS-Kernel/queue.c ****                 }
1937:FreeRTOS-Kernel/queue.c ****                 else
1938:FreeRTOS-Kernel/queue.c ****                 {
1939:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1940:FreeRTOS-Kernel/queue.c ****                 }
1941:FreeRTOS-Kernel/queue.c **** 
1942:FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1943:FreeRTOS-Kernel/queue.c **** 
1944:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueuePeek( pdPASS );
1945:FreeRTOS-Kernel/queue.c **** 
1946:FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1947:FreeRTOS-Kernel/queue.c ****             }
1948:FreeRTOS-Kernel/queue.c ****             else
1949:FreeRTOS-Kernel/queue.c ****             {
1950:FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1951:FreeRTOS-Kernel/queue.c ****                 {
1952:FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and no block time is specified (or
1953:FreeRTOS-Kernel/queue.c ****                      * the block time has expired) so leave now. */
1954:FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1955:FreeRTOS-Kernel/queue.c **** 
1956:FreeRTOS-Kernel/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1957:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueuePeek( errQUEUE_EMPTY );
1958:FreeRTOS-Kernel/queue.c **** 
1959:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_EMPTY;
1960:FreeRTOS-Kernel/queue.c ****                 }
1961:FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1962:FreeRTOS-Kernel/queue.c ****                 {
1963:FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and a block time was specified so
1964:FreeRTOS-Kernel/queue.c ****                      * configure the timeout structure ready to enter the blocked
1965:FreeRTOS-Kernel/queue.c ****                      * state. */
1966:FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1967:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1968:FreeRTOS-Kernel/queue.c ****                 }
ARM GAS  /tmp/ccnrBCYQ.s 			page 36


1969:FreeRTOS-Kernel/queue.c ****                 else
1970:FreeRTOS-Kernel/queue.c ****                 {
1971:FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1972:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1973:FreeRTOS-Kernel/queue.c ****                 }
1974:FreeRTOS-Kernel/queue.c ****             }
1975:FreeRTOS-Kernel/queue.c ****         }
1976:FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1977:FreeRTOS-Kernel/queue.c **** 
1978:FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1979:FreeRTOS-Kernel/queue.c ****          * now that the critical section has been exited. */
1980:FreeRTOS-Kernel/queue.c **** 
1981:FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1982:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1983:FreeRTOS-Kernel/queue.c **** 
1984:FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1985:FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1986:FreeRTOS-Kernel/queue.c ****         {
1987:FreeRTOS-Kernel/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1988:FreeRTOS-Kernel/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1989:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1990:FreeRTOS-Kernel/queue.c ****             {
1991:FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1992:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1993:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1994:FreeRTOS-Kernel/queue.c **** 
1995:FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1996:FreeRTOS-Kernel/queue.c ****                 {
1997:FreeRTOS-Kernel/queue.c ****                     taskYIELD_WITHIN_API();
1998:FreeRTOS-Kernel/queue.c ****                 }
1999:FreeRTOS-Kernel/queue.c ****                 else
2000:FreeRTOS-Kernel/queue.c ****                 {
2001:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2002:FreeRTOS-Kernel/queue.c ****                 }
2003:FreeRTOS-Kernel/queue.c ****             }
2004:FreeRTOS-Kernel/queue.c ****             else
2005:FreeRTOS-Kernel/queue.c ****             {
2006:FreeRTOS-Kernel/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
2007:FreeRTOS-Kernel/queue.c ****                  * state, instead return to try and obtain the data. */
2008:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
2009:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
2010:FreeRTOS-Kernel/queue.c ****             }
2011:FreeRTOS-Kernel/queue.c ****         }
2012:FreeRTOS-Kernel/queue.c ****         else
2013:FreeRTOS-Kernel/queue.c ****         {
2014:FreeRTOS-Kernel/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
2015:FreeRTOS-Kernel/queue.c ****              * exit, otherwise go back and try to read the data again. */
2016:FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
2017:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
2018:FreeRTOS-Kernel/queue.c **** 
2019:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
2020:FreeRTOS-Kernel/queue.c ****             {
2021:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
2022:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueuePeek( errQUEUE_EMPTY );
2023:FreeRTOS-Kernel/queue.c **** 
2024:FreeRTOS-Kernel/queue.c ****                 return errQUEUE_EMPTY;
2025:FreeRTOS-Kernel/queue.c ****             }
ARM GAS  /tmp/ccnrBCYQ.s 			page 37


2026:FreeRTOS-Kernel/queue.c ****             else
2027:FreeRTOS-Kernel/queue.c ****             {
2028:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2029:FreeRTOS-Kernel/queue.c ****             }
2030:FreeRTOS-Kernel/queue.c ****         }
2031:FreeRTOS-Kernel/queue.c ****     }
2032:FreeRTOS-Kernel/queue.c **** }
2033:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2034:FreeRTOS-Kernel/queue.c **** 
2035:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
2036:FreeRTOS-Kernel/queue.c ****                                  void * const pvBuffer,
2037:FreeRTOS-Kernel/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
2038:FreeRTOS-Kernel/queue.c **** {
2039:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2040:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
2041:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2042:FreeRTOS-Kernel/queue.c **** 
2043:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );
2044:FreeRTOS-Kernel/queue.c **** 
2045:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2046:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2047:FreeRTOS-Kernel/queue.c **** 
2048:FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2049:FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2050:FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
2051:FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2052:FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2053:FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2054:FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2055:FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
2056:FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2057:FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
2058:FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
2059:FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2060:FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2061:FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2062:FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2063:FreeRTOS-Kernel/queue.c **** 
2064:FreeRTOS-Kernel/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
2065:FreeRTOS-Kernel/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
2066:FreeRTOS-Kernel/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
2067:FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2068:FreeRTOS-Kernel/queue.c ****     {
2069:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2070:FreeRTOS-Kernel/queue.c **** 
2071:FreeRTOS-Kernel/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2072:FreeRTOS-Kernel/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2073:FreeRTOS-Kernel/queue.c ****         {
2074:FreeRTOS-Kernel/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
2075:FreeRTOS-Kernel/queue.c **** 
2076:FreeRTOS-Kernel/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
2077:FreeRTOS-Kernel/queue.c **** 
2078:FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
2079:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
2080:FreeRTOS-Kernel/queue.c **** 
2081:FreeRTOS-Kernel/queue.c ****             /* If the queue is locked the event list will not be modified.
2082:FreeRTOS-Kernel/queue.c ****              * Instead update the lock count so the task that unlocks the queue
ARM GAS  /tmp/ccnrBCYQ.s 			page 38


2083:FreeRTOS-Kernel/queue.c ****              * will know that an ISR has removed data while the queue was
2084:FreeRTOS-Kernel/queue.c ****              * locked. */
2085:FreeRTOS-Kernel/queue.c ****             if( cRxLock == queueUNLOCKED )
2086:FreeRTOS-Kernel/queue.c ****             {
2087:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2088:FreeRTOS-Kernel/queue.c ****                 {
2089:FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2090:FreeRTOS-Kernel/queue.c ****                     {
2091:FreeRTOS-Kernel/queue.c ****                         /* The task waiting has a higher priority than us so
2092:FreeRTOS-Kernel/queue.c ****                          * force a context switch. */
2093:FreeRTOS-Kernel/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
2094:FreeRTOS-Kernel/queue.c ****                         {
2095:FreeRTOS-Kernel/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
2096:FreeRTOS-Kernel/queue.c ****                         }
2097:FreeRTOS-Kernel/queue.c ****                         else
2098:FreeRTOS-Kernel/queue.c ****                         {
2099:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2100:FreeRTOS-Kernel/queue.c ****                         }
2101:FreeRTOS-Kernel/queue.c ****                     }
2102:FreeRTOS-Kernel/queue.c ****                     else
2103:FreeRTOS-Kernel/queue.c ****                     {
2104:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2105:FreeRTOS-Kernel/queue.c ****                     }
2106:FreeRTOS-Kernel/queue.c ****                 }
2107:FreeRTOS-Kernel/queue.c ****                 else
2108:FreeRTOS-Kernel/queue.c ****                 {
2109:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2110:FreeRTOS-Kernel/queue.c ****                 }
2111:FreeRTOS-Kernel/queue.c ****             }
2112:FreeRTOS-Kernel/queue.c ****             else
2113:FreeRTOS-Kernel/queue.c ****             {
2114:FreeRTOS-Kernel/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
2115:FreeRTOS-Kernel/queue.c ****                  * knows that data was removed while it was locked. */
2116:FreeRTOS-Kernel/queue.c ****                 prvIncrementQueueRxLock( pxQueue, cRxLock );
2117:FreeRTOS-Kernel/queue.c ****             }
2118:FreeRTOS-Kernel/queue.c **** 
2119:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
2120:FreeRTOS-Kernel/queue.c ****         }
2121:FreeRTOS-Kernel/queue.c ****         else
2122:FreeRTOS-Kernel/queue.c ****         {
2123:FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
2124:FreeRTOS-Kernel/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
2125:FreeRTOS-Kernel/queue.c ****         }
2126:FreeRTOS-Kernel/queue.c ****     }
2127:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2128:FreeRTOS-Kernel/queue.c **** 
2129:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueueReceiveFromISR( xReturn );
2130:FreeRTOS-Kernel/queue.c **** 
2131:FreeRTOS-Kernel/queue.c ****     return xReturn;
2132:FreeRTOS-Kernel/queue.c **** }
2133:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2134:FreeRTOS-Kernel/queue.c **** 
2135:FreeRTOS-Kernel/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
2136:FreeRTOS-Kernel/queue.c ****                               void * const pvBuffer )
2137:FreeRTOS-Kernel/queue.c **** {
2138:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2139:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccnrBCYQ.s 			page 39


2140:FreeRTOS-Kernel/queue.c ****     int8_t * pcOriginalReadPosition;
2141:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2142:FreeRTOS-Kernel/queue.c **** 
2143:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueuePeekFromISR( xQueue, pvBuffer );
2144:FreeRTOS-Kernel/queue.c **** 
2145:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2147:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
2148:FreeRTOS-Kernel/queue.c **** 
2149:FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2150:FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2151:FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
2152:FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2153:FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2154:FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2155:FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2156:FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
2157:FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2158:FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
2159:FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
2160:FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2161:FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2162:FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2163:FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2164:FreeRTOS-Kernel/queue.c **** 
2165:FreeRTOS-Kernel/queue.c ****     /* MISRA Ref 4.7.1 [Return value shall be checked] */
2166:FreeRTOS-Kernel/queue.c ****     /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
2167:FreeRTOS-Kernel/queue.c ****     /* coverity[misra_c_2012_directive_4_7_violation] */
2168:FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
2169:FreeRTOS-Kernel/queue.c ****     {
2170:FreeRTOS-Kernel/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2171:FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2172:FreeRTOS-Kernel/queue.c ****         {
2173:FreeRTOS-Kernel/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
2174:FreeRTOS-Kernel/queue.c **** 
2175:FreeRTOS-Kernel/queue.c ****             /* Remember the read position so it can be reset as nothing is
2176:FreeRTOS-Kernel/queue.c ****              * actually being removed from the queue. */
2177:FreeRTOS-Kernel/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
2178:FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
2179:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2180:FreeRTOS-Kernel/queue.c **** 
2181:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
2182:FreeRTOS-Kernel/queue.c ****         }
2183:FreeRTOS-Kernel/queue.c ****         else
2184:FreeRTOS-Kernel/queue.c ****         {
2185:FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
2186:FreeRTOS-Kernel/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2187:FreeRTOS-Kernel/queue.c ****         }
2188:FreeRTOS-Kernel/queue.c ****     }
2189:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
2190:FreeRTOS-Kernel/queue.c **** 
2191:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueuePeekFromISR( xReturn );
2192:FreeRTOS-Kernel/queue.c **** 
2193:FreeRTOS-Kernel/queue.c ****     return xReturn;
2194:FreeRTOS-Kernel/queue.c **** }
2195:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2196:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 40


2197:FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2198:FreeRTOS-Kernel/queue.c **** {
2199:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
2200:FreeRTOS-Kernel/queue.c **** 
2201:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueMessagesWaiting( xQueue );
2202:FreeRTOS-Kernel/queue.c **** 
2203:FreeRTOS-Kernel/queue.c ****     configASSERT( xQueue );
2204:FreeRTOS-Kernel/queue.c **** 
2205:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2206:FreeRTOS-Kernel/queue.c ****     {
2207:FreeRTOS-Kernel/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2208:FreeRTOS-Kernel/queue.c ****     }
2209:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2210:FreeRTOS-Kernel/queue.c **** 
2211:FreeRTOS-Kernel/queue.c ****     traceRETURN_uxQueueMessagesWaiting( uxReturn );
2212:FreeRTOS-Kernel/queue.c **** 
2213:FreeRTOS-Kernel/queue.c ****     return uxReturn;
2214:FreeRTOS-Kernel/queue.c **** }
2215:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2216:FreeRTOS-Kernel/queue.c **** 
2217:FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2218:FreeRTOS-Kernel/queue.c **** {
2219:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
2220:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2221:FreeRTOS-Kernel/queue.c **** 
2222:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueSpacesAvailable( xQueue );
2223:FreeRTOS-Kernel/queue.c **** 
2224:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2225:FreeRTOS-Kernel/queue.c **** 
2226:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2227:FreeRTOS-Kernel/queue.c ****     {
2228:FreeRTOS-Kernel/queue.c ****         uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
2229:FreeRTOS-Kernel/queue.c ****     }
2230:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2231:FreeRTOS-Kernel/queue.c **** 
2232:FreeRTOS-Kernel/queue.c ****     traceRETURN_uxQueueSpacesAvailable( uxReturn );
2233:FreeRTOS-Kernel/queue.c **** 
2234:FreeRTOS-Kernel/queue.c ****     return uxReturn;
2235:FreeRTOS-Kernel/queue.c **** }
2236:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2237:FreeRTOS-Kernel/queue.c **** 
2238:FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2239:FreeRTOS-Kernel/queue.c **** {
2240:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
2241:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2242:FreeRTOS-Kernel/queue.c **** 
2243:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueMessagesWaitingFromISR( xQueue );
2244:FreeRTOS-Kernel/queue.c **** 
2245:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2246:FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2247:FreeRTOS-Kernel/queue.c **** 
2248:FreeRTOS-Kernel/queue.c ****     traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );
2249:FreeRTOS-Kernel/queue.c **** 
2250:FreeRTOS-Kernel/queue.c ****     return uxReturn;
2251:FreeRTOS-Kernel/queue.c **** }
2252:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2253:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 41


2254:FreeRTOS-Kernel/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2255:FreeRTOS-Kernel/queue.c **** {
2256:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2257:FreeRTOS-Kernel/queue.c **** 
2258:FreeRTOS-Kernel/queue.c ****     traceENTER_vQueueDelete( xQueue );
2259:FreeRTOS-Kernel/queue.c **** 
2260:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2261:FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
2262:FreeRTOS-Kernel/queue.c **** 
2263:FreeRTOS-Kernel/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2264:FreeRTOS-Kernel/queue.c ****     {
2265:FreeRTOS-Kernel/queue.c ****         vQueueUnregisterQueue( pxQueue );
2266:FreeRTOS-Kernel/queue.c ****     }
2267:FreeRTOS-Kernel/queue.c ****     #endif
2268:FreeRTOS-Kernel/queue.c **** 
2269:FreeRTOS-Kernel/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2270:FreeRTOS-Kernel/queue.c ****     {
2271:FreeRTOS-Kernel/queue.c ****         /* The queue can only have been allocated dynamically - free it
2272:FreeRTOS-Kernel/queue.c ****          * again. */
2273:FreeRTOS-Kernel/queue.c ****         vPortFree( pxQueue );
2274:FreeRTOS-Kernel/queue.c ****     }
2275:FreeRTOS-Kernel/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2276:FreeRTOS-Kernel/queue.c ****     {
2277:FreeRTOS-Kernel/queue.c ****         /* The queue could have been allocated statically or dynamically, so
2278:FreeRTOS-Kernel/queue.c ****          * check before attempting to free the memory. */
2279:FreeRTOS-Kernel/queue.c ****         if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2280:FreeRTOS-Kernel/queue.c ****         {
2281:FreeRTOS-Kernel/queue.c ****             vPortFree( pxQueue );
2282:FreeRTOS-Kernel/queue.c ****         }
2283:FreeRTOS-Kernel/queue.c ****         else
2284:FreeRTOS-Kernel/queue.c ****         {
2285:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2286:FreeRTOS-Kernel/queue.c ****         }
2287:FreeRTOS-Kernel/queue.c ****     }
2288:FreeRTOS-Kernel/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2289:FreeRTOS-Kernel/queue.c ****     {
2290:FreeRTOS-Kernel/queue.c ****         /* The queue must have been statically allocated, so is not going to be
2291:FreeRTOS-Kernel/queue.c ****          * deleted.  Avoid compiler warnings about the unused parameter. */
2292:FreeRTOS-Kernel/queue.c ****         ( void ) pxQueue;
2293:FreeRTOS-Kernel/queue.c ****     }
2294:FreeRTOS-Kernel/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2295:FreeRTOS-Kernel/queue.c **** 
2296:FreeRTOS-Kernel/queue.c ****     traceRETURN_vQueueDelete();
2297:FreeRTOS-Kernel/queue.c **** }
2298:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2299:FreeRTOS-Kernel/queue.c **** 
2300:FreeRTOS-Kernel/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2301:FreeRTOS-Kernel/queue.c **** 
2302:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2303:FreeRTOS-Kernel/queue.c ****     {
2304:FreeRTOS-Kernel/queue.c ****         traceENTER_uxQueueGetQueueNumber( xQueue );
2305:FreeRTOS-Kernel/queue.c **** 
2306:FreeRTOS-Kernel/queue.c ****         traceRETURN_uxQueueGetQueueNumber( ( ( Queue_t * ) xQueue )->uxQueueNumber );
2307:FreeRTOS-Kernel/queue.c **** 
2308:FreeRTOS-Kernel/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2309:FreeRTOS-Kernel/queue.c ****     }
2310:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 42


2311:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2312:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2313:FreeRTOS-Kernel/queue.c **** 
2314:FreeRTOS-Kernel/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2315:FreeRTOS-Kernel/queue.c **** 
2316:FreeRTOS-Kernel/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2317:FreeRTOS-Kernel/queue.c ****                                UBaseType_t uxQueueNumber )
2318:FreeRTOS-Kernel/queue.c ****     {
2319:FreeRTOS-Kernel/queue.c ****         traceENTER_vQueueSetQueueNumber( xQueue, uxQueueNumber );
2320:FreeRTOS-Kernel/queue.c **** 
2321:FreeRTOS-Kernel/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2322:FreeRTOS-Kernel/queue.c **** 
2323:FreeRTOS-Kernel/queue.c ****         traceRETURN_vQueueSetQueueNumber();
2324:FreeRTOS-Kernel/queue.c ****     }
2325:FreeRTOS-Kernel/queue.c **** 
2326:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2327:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2328:FreeRTOS-Kernel/queue.c **** 
2329:FreeRTOS-Kernel/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2330:FreeRTOS-Kernel/queue.c **** 
2331:FreeRTOS-Kernel/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2332:FreeRTOS-Kernel/queue.c ****     {
2333:FreeRTOS-Kernel/queue.c ****         traceENTER_ucQueueGetQueueType( xQueue );
2334:FreeRTOS-Kernel/queue.c **** 
2335:FreeRTOS-Kernel/queue.c ****         traceRETURN_ucQueueGetQueueType( ( ( Queue_t * ) xQueue )->ucQueueType );
2336:FreeRTOS-Kernel/queue.c **** 
2337:FreeRTOS-Kernel/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2338:FreeRTOS-Kernel/queue.c ****     }
2339:FreeRTOS-Kernel/queue.c **** 
2340:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2341:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2342:FreeRTOS-Kernel/queue.c **** 
2343:FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueGetQueueItemSize( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
2344:FreeRTOS-Kernel/queue.c **** {
2345:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueGetQueueItemSize( xQueue );
2346:FreeRTOS-Kernel/queue.c **** 
2347:FreeRTOS-Kernel/queue.c ****     traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );
2348:FreeRTOS-Kernel/queue.c **** 
2349:FreeRTOS-Kernel/queue.c ****     return ( ( Queue_t * ) xQueue )->uxItemSize;
2350:FreeRTOS-Kernel/queue.c **** }
2351:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2352:FreeRTOS-Kernel/queue.c **** 
2353:FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueGetQueueLength( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
2354:FreeRTOS-Kernel/queue.c **** {
2355:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueGetQueueLength( xQueue );
2356:FreeRTOS-Kernel/queue.c **** 
2357:FreeRTOS-Kernel/queue.c ****     traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );
2358:FreeRTOS-Kernel/queue.c **** 
2359:FreeRTOS-Kernel/queue.c ****     return ( ( Queue_t * ) xQueue )->uxLength;
2360:FreeRTOS-Kernel/queue.c **** }
2361:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2362:FreeRTOS-Kernel/queue.c **** 
2363:FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
2364:FreeRTOS-Kernel/queue.c **** 
2365:FreeRTOS-Kernel/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2366:FreeRTOS-Kernel/queue.c ****     {
  29              		.loc 1 2366 5 view -0
ARM GAS  /tmp/ccnrBCYQ.s 			page 43


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 2366 5 is_stmt 0 view .LVU1
  35 0000 0346     		mov	r3, r0
2367:FreeRTOS-Kernel/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
  36              		.loc 1 2367 9 is_stmt 1 view .LVU2
2368:FreeRTOS-Kernel/queue.c **** 
2369:FreeRTOS-Kernel/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2370:FreeRTOS-Kernel/queue.c ****          * priority, but the waiting task times out, then the holder should
2371:FreeRTOS-Kernel/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2372:FreeRTOS-Kernel/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2373:FreeRTOS-Kernel/queue.c ****          * return the priority of the highest priority task that is waiting for the
2374:FreeRTOS-Kernel/queue.c ****          * mutex. */
2375:FreeRTOS-Kernel/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  37              		.loc 1 2375 9 view .LVU3
  38              		.loc 1 2375 13 is_stmt 0 view .LVU4
  39 0002 406A     		ldr	r0, [r0, #36]
  40              	.LVL1:
  41              		.loc 1 2375 11 view .LVU5
  42 0004 18B1     		cbz	r0, .L1
2376:FreeRTOS-Kernel/queue.c ****         {
2377:FreeRTOS-Kernel/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIE
  43              		.loc 1 2377 13 is_stmt 1 view .LVU6
  44              		.loc 1 2377 120 is_stmt 0 view .LVU7
  45 0006 1B6B     		ldr	r3, [r3, #48]
  46              	.LVL2:
  47              		.loc 1 2377 120 view .LVU8
  48 0008 1868     		ldr	r0, [r3]
  49              		.loc 1 2377 45 view .LVU9
  50 000a C0F10700 		rsb	r0, r0, #7
  51              	.LVL3:
2378:FreeRTOS-Kernel/queue.c ****         }
2379:FreeRTOS-Kernel/queue.c ****         else
2380:FreeRTOS-Kernel/queue.c ****         {
2381:FreeRTOS-Kernel/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2382:FreeRTOS-Kernel/queue.c ****         }
2383:FreeRTOS-Kernel/queue.c **** 
2384:FreeRTOS-Kernel/queue.c ****         return uxHighestPriorityOfWaitingTasks;
  52              		.loc 1 2384 9 is_stmt 1 view .LVU10
  53              	.L1:
2385:FreeRTOS-Kernel/queue.c ****     }
  54              		.loc 1 2385 5 is_stmt 0 view .LVU11
  55 000e 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE28:
  59              		.section	.text.prvIsQueueFull,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	prvIsQueueFull:
  66              	.LVL4:
  67              	.LFB34:
2386:FreeRTOS-Kernel/queue.c **** 
2387:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/ccnrBCYQ.s 			page 44


2388:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2389:FreeRTOS-Kernel/queue.c **** 
2390:FreeRTOS-Kernel/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2391:FreeRTOS-Kernel/queue.c ****                                       const void * pvItemToQueue,
2392:FreeRTOS-Kernel/queue.c ****                                       const BaseType_t xPosition )
2393:FreeRTOS-Kernel/queue.c **** {
2394:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdFALSE;
2395:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
2396:FreeRTOS-Kernel/queue.c **** 
2397:FreeRTOS-Kernel/queue.c ****     /* This function is called from a critical section. */
2398:FreeRTOS-Kernel/queue.c **** 
2399:FreeRTOS-Kernel/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2400:FreeRTOS-Kernel/queue.c **** 
2401:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2402:FreeRTOS-Kernel/queue.c ****     {
2403:FreeRTOS-Kernel/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2404:FreeRTOS-Kernel/queue.c ****         {
2405:FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2406:FreeRTOS-Kernel/queue.c ****             {
2407:FreeRTOS-Kernel/queue.c ****                 /* The mutex is no longer being held. */
2408:FreeRTOS-Kernel/queue.c ****                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2409:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
2410:FreeRTOS-Kernel/queue.c ****             }
2411:FreeRTOS-Kernel/queue.c ****             else
2412:FreeRTOS-Kernel/queue.c ****             {
2413:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2414:FreeRTOS-Kernel/queue.c ****             }
2415:FreeRTOS-Kernel/queue.c ****         }
2416:FreeRTOS-Kernel/queue.c ****         #endif /* configUSE_MUTEXES */
2417:FreeRTOS-Kernel/queue.c ****     }
2418:FreeRTOS-Kernel/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2419:FreeRTOS-Kernel/queue.c ****     {
2420:FreeRTOS-Kernel/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2421:FreeRTOS-Kernel/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
2422:FreeRTOS-Kernel/queue.c **** 
2423:FreeRTOS-Kernel/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
2424:FreeRTOS-Kernel/queue.c ****         {
2425:FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2426:FreeRTOS-Kernel/queue.c ****         }
2427:FreeRTOS-Kernel/queue.c ****         else
2428:FreeRTOS-Kernel/queue.c ****         {
2429:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2430:FreeRTOS-Kernel/queue.c ****         }
2431:FreeRTOS-Kernel/queue.c ****     }
2432:FreeRTOS-Kernel/queue.c ****     else
2433:FreeRTOS-Kernel/queue.c ****     {
2434:FreeRTOS-Kernel/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2435:FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2436:FreeRTOS-Kernel/queue.c **** 
2437:FreeRTOS-Kernel/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
2438:FreeRTOS-Kernel/queue.c ****         {
2439:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2440:FreeRTOS-Kernel/queue.c ****         }
2441:FreeRTOS-Kernel/queue.c ****         else
2442:FreeRTOS-Kernel/queue.c ****         {
2443:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2444:FreeRTOS-Kernel/queue.c ****         }
ARM GAS  /tmp/ccnrBCYQ.s 			page 45


2445:FreeRTOS-Kernel/queue.c **** 
2446:FreeRTOS-Kernel/queue.c ****         if( xPosition == queueOVERWRITE )
2447:FreeRTOS-Kernel/queue.c ****         {
2448:FreeRTOS-Kernel/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2449:FreeRTOS-Kernel/queue.c ****             {
2450:FreeRTOS-Kernel/queue.c ****                 /* An item is not being added but overwritten, so subtract
2451:FreeRTOS-Kernel/queue.c ****                  * one from the recorded number of items in the queue so when
2452:FreeRTOS-Kernel/queue.c ****                  * one is added again below the number of recorded items remains
2453:FreeRTOS-Kernel/queue.c ****                  * correct. */
2454:FreeRTOS-Kernel/queue.c ****                 --uxMessagesWaiting;
2455:FreeRTOS-Kernel/queue.c ****             }
2456:FreeRTOS-Kernel/queue.c ****             else
2457:FreeRTOS-Kernel/queue.c ****             {
2458:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2459:FreeRTOS-Kernel/queue.c ****             }
2460:FreeRTOS-Kernel/queue.c ****         }
2461:FreeRTOS-Kernel/queue.c ****         else
2462:FreeRTOS-Kernel/queue.c ****         {
2463:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2464:FreeRTOS-Kernel/queue.c ****         }
2465:FreeRTOS-Kernel/queue.c ****     }
2466:FreeRTOS-Kernel/queue.c **** 
2467:FreeRTOS-Kernel/queue.c ****     pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
2468:FreeRTOS-Kernel/queue.c **** 
2469:FreeRTOS-Kernel/queue.c ****     return xReturn;
2470:FreeRTOS-Kernel/queue.c **** }
2471:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2472:FreeRTOS-Kernel/queue.c **** 
2473:FreeRTOS-Kernel/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2474:FreeRTOS-Kernel/queue.c ****                                   void * const pvBuffer )
2475:FreeRTOS-Kernel/queue.c **** {
2476:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2477:FreeRTOS-Kernel/queue.c ****     {
2478:FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2479:FreeRTOS-Kernel/queue.c **** 
2480:FreeRTOS-Kernel/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2481:FreeRTOS-Kernel/queue.c ****         {
2482:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2483:FreeRTOS-Kernel/queue.c ****         }
2484:FreeRTOS-Kernel/queue.c ****         else
2485:FreeRTOS-Kernel/queue.c ****         {
2486:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2487:FreeRTOS-Kernel/queue.c ****         }
2488:FreeRTOS-Kernel/queue.c **** 
2489:FreeRTOS-Kernel/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2490:FreeRTOS-Kernel/queue.c ****     }
2491:FreeRTOS-Kernel/queue.c **** }
2492:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2493:FreeRTOS-Kernel/queue.c **** 
2494:FreeRTOS-Kernel/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2495:FreeRTOS-Kernel/queue.c **** {
2496:FreeRTOS-Kernel/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2497:FreeRTOS-Kernel/queue.c **** 
2498:FreeRTOS-Kernel/queue.c ****     /* The lock counts contains the number of extra data items placed or
2499:FreeRTOS-Kernel/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2500:FreeRTOS-Kernel/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2501:FreeRTOS-Kernel/queue.c ****      * updated. */
ARM GAS  /tmp/ccnrBCYQ.s 			page 46


2502:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2503:FreeRTOS-Kernel/queue.c ****     {
2504:FreeRTOS-Kernel/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2505:FreeRTOS-Kernel/queue.c **** 
2506:FreeRTOS-Kernel/queue.c ****         /* See if data was added to the queue while it was locked. */
2507:FreeRTOS-Kernel/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2508:FreeRTOS-Kernel/queue.c ****         {
2509:FreeRTOS-Kernel/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2510:FreeRTOS-Kernel/queue.c ****              * blocked waiting for data to become available? */
2511:FreeRTOS-Kernel/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2512:FreeRTOS-Kernel/queue.c ****             {
2513:FreeRTOS-Kernel/queue.c ****                 if( pxQueue->pxQueueSetContainer != NULL )
2514:FreeRTOS-Kernel/queue.c ****                 {
2515:FreeRTOS-Kernel/queue.c ****                     if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2516:FreeRTOS-Kernel/queue.c ****                     {
2517:FreeRTOS-Kernel/queue.c ****                         /* The queue is a member of a queue set, and posting to
2518:FreeRTOS-Kernel/queue.c ****                          * the queue set caused a higher priority task to unblock.
2519:FreeRTOS-Kernel/queue.c ****                          * A context switch is required. */
2520:FreeRTOS-Kernel/queue.c ****                         vTaskMissedYield();
2521:FreeRTOS-Kernel/queue.c ****                     }
2522:FreeRTOS-Kernel/queue.c ****                     else
2523:FreeRTOS-Kernel/queue.c ****                     {
2524:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2525:FreeRTOS-Kernel/queue.c ****                     }
2526:FreeRTOS-Kernel/queue.c ****                 }
2527:FreeRTOS-Kernel/queue.c ****                 else
2528:FreeRTOS-Kernel/queue.c ****                 {
2529:FreeRTOS-Kernel/queue.c ****                     /* Tasks that are removed from the event list will get
2530:FreeRTOS-Kernel/queue.c ****                      * added to the pending ready list as the scheduler is still
2531:FreeRTOS-Kernel/queue.c ****                      * suspended. */
2532:FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2533:FreeRTOS-Kernel/queue.c ****                     {
2534:FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2535:FreeRTOS-Kernel/queue.c ****                         {
2536:FreeRTOS-Kernel/queue.c ****                             /* The task waiting has a higher priority so record that a
2537:FreeRTOS-Kernel/queue.c ****                              * context switch is required. */
2538:FreeRTOS-Kernel/queue.c ****                             vTaskMissedYield();
2539:FreeRTOS-Kernel/queue.c ****                         }
2540:FreeRTOS-Kernel/queue.c ****                         else
2541:FreeRTOS-Kernel/queue.c ****                         {
2542:FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2543:FreeRTOS-Kernel/queue.c ****                         }
2544:FreeRTOS-Kernel/queue.c ****                     }
2545:FreeRTOS-Kernel/queue.c ****                     else
2546:FreeRTOS-Kernel/queue.c ****                     {
2547:FreeRTOS-Kernel/queue.c ****                         break;
2548:FreeRTOS-Kernel/queue.c ****                     }
2549:FreeRTOS-Kernel/queue.c ****                 }
2550:FreeRTOS-Kernel/queue.c ****             }
2551:FreeRTOS-Kernel/queue.c ****             #else /* configUSE_QUEUE_SETS */
2552:FreeRTOS-Kernel/queue.c ****             {
2553:FreeRTOS-Kernel/queue.c ****                 /* Tasks that are removed from the event list will get added to
2554:FreeRTOS-Kernel/queue.c ****                  * the pending ready list as the scheduler is still suspended. */
2555:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2556:FreeRTOS-Kernel/queue.c ****                 {
2557:FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
2558:FreeRTOS-Kernel/queue.c ****                     {
ARM GAS  /tmp/ccnrBCYQ.s 			page 47


2559:FreeRTOS-Kernel/queue.c ****                         /* The task waiting has a higher priority so record that
2560:FreeRTOS-Kernel/queue.c ****                          * a context switch is required. */
2561:FreeRTOS-Kernel/queue.c ****                         vTaskMissedYield();
2562:FreeRTOS-Kernel/queue.c ****                     }
2563:FreeRTOS-Kernel/queue.c ****                     else
2564:FreeRTOS-Kernel/queue.c ****                     {
2565:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2566:FreeRTOS-Kernel/queue.c ****                     }
2567:FreeRTOS-Kernel/queue.c ****                 }
2568:FreeRTOS-Kernel/queue.c ****                 else
2569:FreeRTOS-Kernel/queue.c ****                 {
2570:FreeRTOS-Kernel/queue.c ****                     break;
2571:FreeRTOS-Kernel/queue.c ****                 }
2572:FreeRTOS-Kernel/queue.c ****             }
2573:FreeRTOS-Kernel/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2574:FreeRTOS-Kernel/queue.c **** 
2575:FreeRTOS-Kernel/queue.c ****             --cTxLock;
2576:FreeRTOS-Kernel/queue.c ****         }
2577:FreeRTOS-Kernel/queue.c **** 
2578:FreeRTOS-Kernel/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2579:FreeRTOS-Kernel/queue.c ****     }
2580:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2581:FreeRTOS-Kernel/queue.c **** 
2582:FreeRTOS-Kernel/queue.c ****     /* Do the same for the Rx lock. */
2583:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2584:FreeRTOS-Kernel/queue.c ****     {
2585:FreeRTOS-Kernel/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2586:FreeRTOS-Kernel/queue.c **** 
2587:FreeRTOS-Kernel/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2588:FreeRTOS-Kernel/queue.c ****         {
2589:FreeRTOS-Kernel/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2590:FreeRTOS-Kernel/queue.c ****             {
2591:FreeRTOS-Kernel/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2592:FreeRTOS-Kernel/queue.c ****                 {
2593:FreeRTOS-Kernel/queue.c ****                     vTaskMissedYield();
2594:FreeRTOS-Kernel/queue.c ****                 }
2595:FreeRTOS-Kernel/queue.c ****                 else
2596:FreeRTOS-Kernel/queue.c ****                 {
2597:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2598:FreeRTOS-Kernel/queue.c ****                 }
2599:FreeRTOS-Kernel/queue.c **** 
2600:FreeRTOS-Kernel/queue.c ****                 --cRxLock;
2601:FreeRTOS-Kernel/queue.c ****             }
2602:FreeRTOS-Kernel/queue.c ****             else
2603:FreeRTOS-Kernel/queue.c ****             {
2604:FreeRTOS-Kernel/queue.c ****                 break;
2605:FreeRTOS-Kernel/queue.c ****             }
2606:FreeRTOS-Kernel/queue.c ****         }
2607:FreeRTOS-Kernel/queue.c **** 
2608:FreeRTOS-Kernel/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2609:FreeRTOS-Kernel/queue.c ****     }
2610:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2611:FreeRTOS-Kernel/queue.c **** }
2612:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2613:FreeRTOS-Kernel/queue.c **** 
2614:FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2615:FreeRTOS-Kernel/queue.c **** {
ARM GAS  /tmp/ccnrBCYQ.s 			page 48


2616:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2617:FreeRTOS-Kernel/queue.c **** 
2618:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2619:FreeRTOS-Kernel/queue.c ****     {
2620:FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2621:FreeRTOS-Kernel/queue.c ****         {
2622:FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
2623:FreeRTOS-Kernel/queue.c ****         }
2624:FreeRTOS-Kernel/queue.c ****         else
2625:FreeRTOS-Kernel/queue.c ****         {
2626:FreeRTOS-Kernel/queue.c ****             xReturn = pdFALSE;
2627:FreeRTOS-Kernel/queue.c ****         }
2628:FreeRTOS-Kernel/queue.c ****     }
2629:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2630:FreeRTOS-Kernel/queue.c **** 
2631:FreeRTOS-Kernel/queue.c ****     return xReturn;
2632:FreeRTOS-Kernel/queue.c **** }
2633:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2634:FreeRTOS-Kernel/queue.c **** 
2635:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2636:FreeRTOS-Kernel/queue.c **** {
2637:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2638:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2639:FreeRTOS-Kernel/queue.c **** 
2640:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueIsQueueEmptyFromISR( xQueue );
2641:FreeRTOS-Kernel/queue.c **** 
2642:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2643:FreeRTOS-Kernel/queue.c **** 
2644:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2645:FreeRTOS-Kernel/queue.c ****     {
2646:FreeRTOS-Kernel/queue.c ****         xReturn = pdTRUE;
2647:FreeRTOS-Kernel/queue.c ****     }
2648:FreeRTOS-Kernel/queue.c ****     else
2649:FreeRTOS-Kernel/queue.c ****     {
2650:FreeRTOS-Kernel/queue.c ****         xReturn = pdFALSE;
2651:FreeRTOS-Kernel/queue.c ****     }
2652:FreeRTOS-Kernel/queue.c **** 
2653:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );
2654:FreeRTOS-Kernel/queue.c **** 
2655:FreeRTOS-Kernel/queue.c ****     return xReturn;
2656:FreeRTOS-Kernel/queue.c **** }
2657:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2658:FreeRTOS-Kernel/queue.c **** 
2659:FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2660:FreeRTOS-Kernel/queue.c **** {
  68              		.loc 1 2660 1 is_stmt 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		.loc 1 2660 1 is_stmt 0 view .LVU13
  73 0000 10B5     		push	{r4, lr}
  74              	.LCFI0:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 4, -8
  77              		.cfi_offset 14, -4
  78 0002 0446     		mov	r4, r0
2661:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
ARM GAS  /tmp/ccnrBCYQ.s 			page 49


  79              		.loc 1 2661 5 is_stmt 1 view .LVU14
2662:FreeRTOS-Kernel/queue.c **** 
2663:FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
  80              		.loc 1 2663 5 view .LVU15
  81 0004 FFF7FEFF 		bl	vPortEnterCritical
  82              	.LVL5:
2664:FreeRTOS-Kernel/queue.c ****     {
2665:FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  83              		.loc 1 2665 9 view .LVU16
  84              		.loc 1 2665 20 is_stmt 0 view .LVU17
  85 0008 A26B     		ldr	r2, [r4, #56]
  86              		.loc 1 2665 50 view .LVU18
  87 000a E36B     		ldr	r3, [r4, #60]
  88              		.loc 1 2665 11 view .LVU19
  89 000c 9A42     		cmp	r2, r3
  90 000e 04D0     		beq	.L7
2666:FreeRTOS-Kernel/queue.c ****         {
2667:FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
2668:FreeRTOS-Kernel/queue.c ****         }
2669:FreeRTOS-Kernel/queue.c ****         else
2670:FreeRTOS-Kernel/queue.c ****         {
2671:FreeRTOS-Kernel/queue.c ****             xReturn = pdFALSE;
  91              		.loc 1 2671 21 view .LVU20
  92 0010 0024     		movs	r4, #0
  93              	.LVL6:
  94              	.L4:
2672:FreeRTOS-Kernel/queue.c ****         }
2673:FreeRTOS-Kernel/queue.c ****     }
2674:FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
  95              		.loc 1 2674 5 is_stmt 1 view .LVU21
  96 0012 FFF7FEFF 		bl	vPortExitCritical
  97              	.LVL7:
2675:FreeRTOS-Kernel/queue.c **** 
2676:FreeRTOS-Kernel/queue.c ****     return xReturn;
  98              		.loc 1 2676 5 view .LVU22
2677:FreeRTOS-Kernel/queue.c **** }
  99              		.loc 1 2677 1 is_stmt 0 view .LVU23
 100 0016 2046     		mov	r0, r4
 101 0018 10BD     		pop	{r4, pc}
 102              	.LVL8:
 103              	.L7:
2667:FreeRTOS-Kernel/queue.c ****         }
 104              		.loc 1 2667 21 view .LVU24
 105 001a 0124     		movs	r4, #1
 106              	.LVL9:
2667:FreeRTOS-Kernel/queue.c ****         }
 107              		.loc 1 2667 21 view .LVU25
 108 001c F9E7     		b	.L4
 109              		.cfi_endproc
 110              	.LFE34:
 112              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	prvIsQueueEmpty:
 119              	.LVL10:
ARM GAS  /tmp/ccnrBCYQ.s 			page 50


 120              	.LFB32:
2615:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 121              		.loc 1 2615 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
2615:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 125              		.loc 1 2615 1 is_stmt 0 view .LVU27
 126 0000 10B5     		push	{r4, lr}
 127              	.LCFI1:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 14, -4
 131 0002 0446     		mov	r4, r0
2616:FreeRTOS-Kernel/queue.c **** 
 132              		.loc 1 2616 5 is_stmt 1 view .LVU28
2618:FreeRTOS-Kernel/queue.c ****     {
 133              		.loc 1 2618 5 view .LVU29
 134 0004 FFF7FEFF 		bl	vPortEnterCritical
 135              	.LVL11:
2620:FreeRTOS-Kernel/queue.c ****         {
 136              		.loc 1 2620 9 view .LVU30
2620:FreeRTOS-Kernel/queue.c ****         {
 137              		.loc 1 2620 20 is_stmt 0 view .LVU31
 138 0008 A36B     		ldr	r3, [r4, #56]
2620:FreeRTOS-Kernel/queue.c ****         {
 139              		.loc 1 2620 11 view .LVU32
 140 000a 23B9     		cbnz	r3, .L10
2622:FreeRTOS-Kernel/queue.c ****         }
 141              		.loc 1 2622 21 view .LVU33
 142 000c 0124     		movs	r4, #1
 143              	.LVL12:
 144              	.L9:
2629:FreeRTOS-Kernel/queue.c **** 
 145              		.loc 1 2629 5 is_stmt 1 view .LVU34
 146 000e FFF7FEFF 		bl	vPortExitCritical
 147              	.LVL13:
2631:FreeRTOS-Kernel/queue.c **** }
 148              		.loc 1 2631 5 view .LVU35
2632:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 149              		.loc 1 2632 1 is_stmt 0 view .LVU36
 150 0012 2046     		mov	r0, r4
 151 0014 10BD     		pop	{r4, pc}
 152              	.LVL14:
 153              	.L10:
2626:FreeRTOS-Kernel/queue.c ****         }
 154              		.loc 1 2626 21 view .LVU37
 155 0016 0024     		movs	r4, #0
 156              	.LVL15:
2626:FreeRTOS-Kernel/queue.c ****         }
 157              		.loc 1 2626 21 view .LVU38
 158 0018 F9E7     		b	.L9
 159              		.cfi_endproc
 160              	.LFE32:
 162              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 163              		.align	1
 164              		.syntax unified
ARM GAS  /tmp/ccnrBCYQ.s 			page 51


 165              		.thumb
 166              		.thumb_func
 168              	prvCopyDataToQueue:
 169              	.LVL16:
 170              	.LFB29:
2393:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdFALSE;
 171              		.loc 1 2393 1 is_stmt 1 view -0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
2393:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdFALSE;
 175              		.loc 1 2393 1 is_stmt 0 view .LVU40
 176 0000 70B5     		push	{r4, r5, r6, lr}
 177              	.LCFI2:
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 4, -16
 180              		.cfi_offset 5, -12
 181              		.cfi_offset 6, -8
 182              		.cfi_offset 14, -4
 183 0002 0446     		mov	r4, r0
 184 0004 1546     		mov	r5, r2
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 185              		.loc 1 2394 5 is_stmt 1 view .LVU41
 186              	.LVL17:
2395:FreeRTOS-Kernel/queue.c **** 
 187              		.loc 1 2395 5 view .LVU42
2399:FreeRTOS-Kernel/queue.c **** 
 188              		.loc 1 2399 5 view .LVU43
2399:FreeRTOS-Kernel/queue.c **** 
 189              		.loc 1 2399 23 is_stmt 0 view .LVU44
 190 0006 866B     		ldr	r6, [r0, #56]
 191              	.LVL18:
2401:FreeRTOS-Kernel/queue.c ****     {
 192              		.loc 1 2401 5 is_stmt 1 view .LVU45
2401:FreeRTOS-Kernel/queue.c ****     {
 193              		.loc 1 2401 16 is_stmt 0 view .LVU46
 194 0008 026C     		ldr	r2, [r0, #64]
 195              	.LVL19:
2401:FreeRTOS-Kernel/queue.c ****     {
 196              		.loc 1 2401 7 view .LVU47
 197 000a 5AB9     		cbnz	r2, .L13
2405:FreeRTOS-Kernel/queue.c ****             {
 198              		.loc 1 2405 13 is_stmt 1 view .LVU48
2405:FreeRTOS-Kernel/queue.c ****             {
 199              		.loc 1 2405 24 is_stmt 0 view .LVU49
 200 000c 0368     		ldr	r3, [r0]
2405:FreeRTOS-Kernel/queue.c ****             {
 201              		.loc 1 2405 15 view .LVU50
 202 000e 1BB1     		cbz	r3, .L22
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 203              		.loc 1 2394 16 view .LVU51
 204 0010 0020     		movs	r0, #0
 205              	.LVL20:
 206              	.L14:
2463:FreeRTOS-Kernel/queue.c ****         }
 207              		.loc 1 2463 37 is_stmt 1 view .LVU52
2467:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 52


 208              		.loc 1 2467 5 view .LVU53
2467:FreeRTOS-Kernel/queue.c **** 
 209              		.loc 1 2467 34 is_stmt 0 view .LVU54
 210 0012 0136     		adds	r6, r6, #1
 211              	.LVL21:
2467:FreeRTOS-Kernel/queue.c **** 
 212              		.loc 1 2467 32 view .LVU55
 213 0014 A663     		str	r6, [r4, #56]
2469:FreeRTOS-Kernel/queue.c **** }
 214              		.loc 1 2469 5 is_stmt 1 view .LVU56
2470:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 215              		.loc 1 2470 1 is_stmt 0 view .LVU57
 216 0016 70BD     		pop	{r4, r5, r6, pc}
 217              	.LVL22:
 218              	.L22:
2408:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 219              		.loc 1 2408 17 is_stmt 1 view .LVU58
2408:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 220              		.loc 1 2408 27 is_stmt 0 view .LVU59
 221 0018 8068     		ldr	r0, [r0, #8]
 222              	.LVL23:
2408:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 223              		.loc 1 2408 27 view .LVU60
 224 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 225              	.LVL24:
2409:FreeRTOS-Kernel/queue.c ****             }
 226              		.loc 1 2409 17 is_stmt 1 view .LVU61
2409:FreeRTOS-Kernel/queue.c ****             }
 227              		.loc 1 2409 52 is_stmt 0 view .LVU62
 228 001e 0023     		movs	r3, #0
 229 0020 A360     		str	r3, [r4, #8]
 230 0022 F6E7     		b	.L14
 231              	.LVL25:
 232              	.L13:
2418:FreeRTOS-Kernel/queue.c ****     {
 233              		.loc 1 2418 10 is_stmt 1 view .LVU63
2418:FreeRTOS-Kernel/queue.c ****     {
 234              		.loc 1 2418 12 is_stmt 0 view .LVU64
 235 0024 6DB9     		cbnz	r5, .L15
2420:FreeRTOS-Kernel/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
 236              		.loc 1 2420 9 is_stmt 1 view .LVU65
2420:FreeRTOS-Kernel/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
 237              		.loc 1 2420 18 is_stmt 0 view .LVU66
 238 0026 4068     		ldr	r0, [r0, #4]
 239              	.LVL26:
2420:FreeRTOS-Kernel/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;
 240              		.loc 1 2420 18 view .LVU67
 241 0028 FFF7FEFF 		bl	memcpy
 242              	.LVL27:
2421:FreeRTOS-Kernel/queue.c **** 
 243              		.loc 1 2421 9 is_stmt 1 view .LVU68
2421:FreeRTOS-Kernel/queue.c **** 
 244              		.loc 1 2421 16 is_stmt 0 view .LVU69
 245 002c 6368     		ldr	r3, [r4, #4]
2421:FreeRTOS-Kernel/queue.c **** 
 246              		.loc 1 2421 38 view .LVU70
 247 002e 226C     		ldr	r2, [r4, #64]
ARM GAS  /tmp/ccnrBCYQ.s 			page 53


2421:FreeRTOS-Kernel/queue.c **** 
 248              		.loc 1 2421 28 view .LVU71
 249 0030 1344     		add	r3, r3, r2
 250 0032 6360     		str	r3, [r4, #4]
2423:FreeRTOS-Kernel/queue.c ****         {
 251              		.loc 1 2423 9 is_stmt 1 view .LVU72
2423:FreeRTOS-Kernel/queue.c ****         {
 252              		.loc 1 2423 52 is_stmt 0 view .LVU73
 253 0034 A268     		ldr	r2, [r4, #8]
2423:FreeRTOS-Kernel/queue.c ****         {
 254              		.loc 1 2423 11 view .LVU74
 255 0036 9342     		cmp	r3, r2
 256 0038 19D3     		bcc	.L18
2425:FreeRTOS-Kernel/queue.c ****         }
 257              		.loc 1 2425 13 is_stmt 1 view .LVU75
2425:FreeRTOS-Kernel/queue.c ****         }
 258              		.loc 1 2425 41 is_stmt 0 view .LVU76
 259 003a 2368     		ldr	r3, [r4]
2425:FreeRTOS-Kernel/queue.c ****         }
 260              		.loc 1 2425 32 view .LVU77
 261 003c 6360     		str	r3, [r4, #4]
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 262              		.loc 1 2394 16 view .LVU78
 263 003e 2846     		mov	r0, r5
 264 0040 E7E7     		b	.L14
 265              	.LVL28:
 266              	.L15:
2434:FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 267              		.loc 1 2434 9 is_stmt 1 view .LVU79
2434:FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 268              		.loc 1 2434 18 is_stmt 0 view .LVU80
 269 0042 C068     		ldr	r0, [r0, #12]
 270              	.LVL29:
2434:FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 271              		.loc 1 2434 18 view .LVU81
 272 0044 FFF7FEFF 		bl	memcpy
 273              	.LVL30:
2435:FreeRTOS-Kernel/queue.c **** 
 274              		.loc 1 2435 9 is_stmt 1 view .LVU82
2435:FreeRTOS-Kernel/queue.c **** 
 275              		.loc 1 2435 26 is_stmt 0 view .LVU83
 276 0048 E368     		ldr	r3, [r4, #12]
2435:FreeRTOS-Kernel/queue.c **** 
 277              		.loc 1 2435 48 view .LVU84
 278 004a 226C     		ldr	r2, [r4, #64]
2435:FreeRTOS-Kernel/queue.c **** 
 279              		.loc 1 2435 38 view .LVU85
 280 004c 5142     		rsbs	r1, r2, #0
 281 004e 9B1A     		subs	r3, r3, r2
 282 0050 E360     		str	r3, [r4, #12]
2437:FreeRTOS-Kernel/queue.c ****         {
 283              		.loc 1 2437 9 is_stmt 1 view .LVU86
2437:FreeRTOS-Kernel/queue.c ****         {
 284              		.loc 1 2437 51 is_stmt 0 view .LVU87
 285 0052 2268     		ldr	r2, [r4]
2437:FreeRTOS-Kernel/queue.c ****         {
 286              		.loc 1 2437 11 view .LVU88
ARM GAS  /tmp/ccnrBCYQ.s 			page 54


 287 0054 9342     		cmp	r3, r2
 288 0056 02D2     		bcs	.L16
2439:FreeRTOS-Kernel/queue.c ****         }
 289              		.loc 1 2439 13 is_stmt 1 view .LVU89
2439:FreeRTOS-Kernel/queue.c ****         }
 290              		.loc 1 2439 63 is_stmt 0 view .LVU90
 291 0058 A368     		ldr	r3, [r4, #8]
2439:FreeRTOS-Kernel/queue.c ****         }
 292              		.loc 1 2439 71 view .LVU91
 293 005a 0B44     		add	r3, r3, r1
2439:FreeRTOS-Kernel/queue.c ****         }
 294              		.loc 1 2439 42 view .LVU92
 295 005c E360     		str	r3, [r4, #12]
 296              	.L16:
2443:FreeRTOS-Kernel/queue.c ****         }
 297              		.loc 1 2443 37 is_stmt 1 view .LVU93
2446:FreeRTOS-Kernel/queue.c ****         {
 298              		.loc 1 2446 9 view .LVU94
2446:FreeRTOS-Kernel/queue.c ****         {
 299              		.loc 1 2446 11 is_stmt 0 view .LVU95
 300 005e 022D     		cmp	r5, #2
 301 0060 01D0     		beq	.L23
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 302              		.loc 1 2394 16 view .LVU96
 303 0062 0020     		movs	r0, #0
 304 0064 D5E7     		b	.L14
 305              	.L23:
2448:FreeRTOS-Kernel/queue.c ****             {
 306              		.loc 1 2448 13 is_stmt 1 view .LVU97
2448:FreeRTOS-Kernel/queue.c ****             {
 307              		.loc 1 2448 15 is_stmt 0 view .LVU98
 308 0066 26B1     		cbz	r6, .L20
2454:FreeRTOS-Kernel/queue.c ****             }
 309              		.loc 1 2454 17 is_stmt 1 view .LVU99
 310 0068 013E     		subs	r6, r6, #1
 311              	.LVL31:
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 312              		.loc 1 2394 16 is_stmt 0 view .LVU100
 313 006a 0020     		movs	r0, #0
 314 006c D1E7     		b	.L14
 315              	.L18:
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 316              		.loc 1 2394 16 view .LVU101
 317 006e 2846     		mov	r0, r5
 318 0070 CFE7     		b	.L14
 319              	.L20:
2394:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 320              		.loc 1 2394 16 view .LVU102
 321 0072 0020     		movs	r0, #0
 322 0074 CDE7     		b	.L14
 323              		.cfi_endproc
 324              	.LFE29:
 326              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 327              		.align	1
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
ARM GAS  /tmp/ccnrBCYQ.s 			page 55


 332              	prvCopyDataFromQueue:
 333              	.LVL32:
 334              	.LFB30:
2475:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 335              		.loc 1 2475 1 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
2475:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 339              		.loc 1 2475 1 is_stmt 0 view .LVU104
 340 0000 0346     		mov	r3, r0
2476:FreeRTOS-Kernel/queue.c ****     {
 341              		.loc 1 2476 5 is_stmt 1 view .LVU105
2476:FreeRTOS-Kernel/queue.c ****     {
 342              		.loc 1 2476 16 is_stmt 0 view .LVU106
 343 0002 026C     		ldr	r2, [r0, #64]
2476:FreeRTOS-Kernel/queue.c ****     {
 344              		.loc 1 2476 7 view .LVU107
 345 0004 6AB1     		cbz	r2, .L28
2475:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 346              		.loc 1 2475 1 view .LVU108
 347 0006 10B5     		push	{r4, lr}
 348              	.LCFI3:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 4, -8
 351              		.cfi_offset 14, -4
 352 0008 0846     		mov	r0, r1
 353              	.LVL33:
2478:FreeRTOS-Kernel/queue.c **** 
 354              		.loc 1 2478 9 is_stmt 1 view .LVU109
2478:FreeRTOS-Kernel/queue.c **** 
 355              		.loc 1 2478 26 is_stmt 0 view .LVU110
 356 000a D968     		ldr	r1, [r3, #12]
 357              	.LVL34:
2478:FreeRTOS-Kernel/queue.c **** 
 358              		.loc 1 2478 38 view .LVU111
 359 000c 1144     		add	r1, r1, r2
 360 000e D960     		str	r1, [r3, #12]
2480:FreeRTOS-Kernel/queue.c ****         {
 361              		.loc 1 2480 9 is_stmt 1 view .LVU112
2480:FreeRTOS-Kernel/queue.c ****         {
 362              		.loc 1 2480 11 is_stmt 0 view .LVU113
 363 0010 9C68     		ldr	r4, [r3, #8]
 364 0012 A142     		cmp	r1, r4
 365 0014 01D3     		bcc	.L26
2482:FreeRTOS-Kernel/queue.c ****         }
 366              		.loc 1 2482 13 is_stmt 1 view .LVU114
2482:FreeRTOS-Kernel/queue.c ****         }
 367              		.loc 1 2482 51 is_stmt 0 view .LVU115
 368 0016 1968     		ldr	r1, [r3]
2482:FreeRTOS-Kernel/queue.c ****         }
 369              		.loc 1 2482 42 view .LVU116
 370 0018 D960     		str	r1, [r3, #12]
 371              	.L26:
2486:FreeRTOS-Kernel/queue.c ****         }
 372              		.loc 1 2486 37 is_stmt 1 view .LVU117
2489:FreeRTOS-Kernel/queue.c ****     }
ARM GAS  /tmp/ccnrBCYQ.s 			page 56


 373              		.loc 1 2489 9 view .LVU118
2489:FreeRTOS-Kernel/queue.c ****     }
 374              		.loc 1 2489 18 is_stmt 0 view .LVU119
 375 001a D968     		ldr	r1, [r3, #12]
 376 001c FFF7FEFF 		bl	memcpy
 377              	.LVL35:
2491:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 378              		.loc 1 2491 1 view .LVU120
 379 0020 10BD     		pop	{r4, pc}
 380              	.LVL36:
 381              	.L28:
 382              	.LCFI4:
 383              		.cfi_def_cfa_offset 0
 384              		.cfi_restore 4
 385              		.cfi_restore 14
2491:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 386              		.loc 1 2491 1 view .LVU121
 387 0022 7047     		bx	lr
 388              		.cfi_endproc
 389              	.LFE30:
 391              		.section	.text.prvUnlockQueue,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	prvUnlockQueue:
 398              	.LVL37:
 399              	.LFB31:
2495:FreeRTOS-Kernel/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 400              		.loc 1 2495 1 is_stmt 1 view -0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
2495:FreeRTOS-Kernel/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 404              		.loc 1 2495 1 is_stmt 0 view .LVU123
 405 0000 38B5     		push	{r3, r4, r5, lr}
 406              	.LCFI5:
 407              		.cfi_def_cfa_offset 16
 408              		.cfi_offset 3, -16
 409              		.cfi_offset 4, -12
 410              		.cfi_offset 5, -8
 411              		.cfi_offset 14, -4
 412 0002 0546     		mov	r5, r0
2502:FreeRTOS-Kernel/queue.c ****     {
 413              		.loc 1 2502 5 is_stmt 1 view .LVU124
 414 0004 FFF7FEFF 		bl	vPortEnterCritical
 415              	.LVL38:
 416              	.LBB123:
2504:FreeRTOS-Kernel/queue.c **** 
 417              		.loc 1 2504 9 view .LVU125
2504:FreeRTOS-Kernel/queue.c **** 
 418              		.loc 1 2504 16 is_stmt 0 view .LVU126
 419 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 420 000c 64B2     		sxtb	r4, r4
 421              	.LVL39:
2507:FreeRTOS-Kernel/queue.c ****         {
 422              		.loc 1 2507 9 is_stmt 1 view .LVU127
ARM GAS  /tmp/ccnrBCYQ.s 			page 57


2507:FreeRTOS-Kernel/queue.c ****         {
 423              		.loc 1 2507 14 is_stmt 0 view .LVU128
 424 000e 01E0     		b	.L32
 425              	.L34:
2565:FreeRTOS-Kernel/queue.c ****                     }
 426              		.loc 1 2565 49 is_stmt 1 view .LVU129
2575:FreeRTOS-Kernel/queue.c ****         }
 427              		.loc 1 2575 13 view .LVU130
 428 0010 013C     		subs	r4, r4, #1
 429              	.LVL40:
2575:FreeRTOS-Kernel/queue.c ****         }
 430              		.loc 1 2575 13 is_stmt 0 view .LVU131
 431 0012 64B2     		sxtb	r4, r4
 432              	.LVL41:
 433              	.L32:
2507:FreeRTOS-Kernel/queue.c ****         {
 434              		.loc 1 2507 24 is_stmt 1 view .LVU132
 435 0014 002C     		cmp	r4, #0
 436 0016 0ADD     		ble	.L33
2555:FreeRTOS-Kernel/queue.c ****                 {
 437              		.loc 1 2555 17 view .LVU133
2555:FreeRTOS-Kernel/queue.c ****                 {
 438              		.loc 1 2555 21 is_stmt 0 view .LVU134
 439 0018 6B6A     		ldr	r3, [r5, #36]
2555:FreeRTOS-Kernel/queue.c ****                 {
 440              		.loc 1 2555 19 view .LVU135
 441 001a 43B1     		cbz	r3, .L33
2557:FreeRTOS-Kernel/queue.c ****                     {
 442              		.loc 1 2557 21 is_stmt 1 view .LVU136
2557:FreeRTOS-Kernel/queue.c ****                     {
 443              		.loc 1 2557 25 is_stmt 0 view .LVU137
 444 001c 05F12400 		add	r0, r5, #36
 445 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 446              	.LVL42:
2557:FreeRTOS-Kernel/queue.c ****                     {
 447              		.loc 1 2557 23 view .LVU138
 448 0024 0028     		cmp	r0, #0
 449 0026 F3D0     		beq	.L34
2561:FreeRTOS-Kernel/queue.c ****                     }
 450              		.loc 1 2561 25 is_stmt 1 view .LVU139
 451 0028 FFF7FEFF 		bl	vTaskMissedYield
 452              	.LVL43:
 453 002c F0E7     		b	.L34
 454              	.L33:
2578:FreeRTOS-Kernel/queue.c ****     }
 455              		.loc 1 2578 9 view .LVU140
2578:FreeRTOS-Kernel/queue.c ****     }
 456              		.loc 1 2578 26 is_stmt 0 view .LVU141
 457 002e FF23     		movs	r3, #255
 458 0030 85F84530 		strb	r3, [r5, #69]
 459              	.LBE123:
2580:FreeRTOS-Kernel/queue.c **** 
 460              		.loc 1 2580 5 is_stmt 1 view .LVU142
 461 0034 FFF7FEFF 		bl	vPortExitCritical
 462              	.LVL44:
2583:FreeRTOS-Kernel/queue.c ****     {
 463              		.loc 1 2583 5 view .LVU143
ARM GAS  /tmp/ccnrBCYQ.s 			page 58


 464 0038 FFF7FEFF 		bl	vPortEnterCritical
 465              	.LVL45:
 466              	.LBB124:
2585:FreeRTOS-Kernel/queue.c **** 
 467              		.loc 1 2585 9 view .LVU144
2585:FreeRTOS-Kernel/queue.c **** 
 468              		.loc 1 2585 16 is_stmt 0 view .LVU145
 469 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 470              	.LVL46:
2585:FreeRTOS-Kernel/queue.c **** 
 471              		.loc 1 2585 16 view .LVU146
 472 0040 64B2     		sxtb	r4, r4
 473              	.LVL47:
2587:FreeRTOS-Kernel/queue.c ****         {
 474              		.loc 1 2587 9 is_stmt 1 view .LVU147
2587:FreeRTOS-Kernel/queue.c ****         {
 475              		.loc 1 2587 14 is_stmt 0 view .LVU148
 476 0042 01E0     		b	.L36
 477              	.L38:
2597:FreeRTOS-Kernel/queue.c ****                 }
 478              		.loc 1 2597 45 is_stmt 1 view .LVU149
2600:FreeRTOS-Kernel/queue.c ****             }
 479              		.loc 1 2600 17 view .LVU150
 480 0044 013C     		subs	r4, r4, #1
 481              	.LVL48:
2600:FreeRTOS-Kernel/queue.c ****             }
 482              		.loc 1 2600 17 is_stmt 0 view .LVU151
 483 0046 64B2     		sxtb	r4, r4
 484              	.LVL49:
 485              	.L36:
2587:FreeRTOS-Kernel/queue.c ****         {
 486              		.loc 1 2587 24 is_stmt 1 view .LVU152
 487 0048 002C     		cmp	r4, #0
 488 004a 0ADD     		ble	.L37
2589:FreeRTOS-Kernel/queue.c ****             {
 489              		.loc 1 2589 13 view .LVU153
2589:FreeRTOS-Kernel/queue.c ****             {
 490              		.loc 1 2589 17 is_stmt 0 view .LVU154
 491 004c 2B69     		ldr	r3, [r5, #16]
2589:FreeRTOS-Kernel/queue.c ****             {
 492              		.loc 1 2589 15 view .LVU155
 493 004e 43B1     		cbz	r3, .L37
2591:FreeRTOS-Kernel/queue.c ****                 {
 494              		.loc 1 2591 17 is_stmt 1 view .LVU156
2591:FreeRTOS-Kernel/queue.c ****                 {
 495              		.loc 1 2591 21 is_stmt 0 view .LVU157
 496 0050 05F11000 		add	r0, r5, #16
 497 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 498              	.LVL50:
2591:FreeRTOS-Kernel/queue.c ****                 {
 499              		.loc 1 2591 19 view .LVU158
 500 0058 0028     		cmp	r0, #0
 501 005a F3D0     		beq	.L38
2593:FreeRTOS-Kernel/queue.c ****                 }
 502              		.loc 1 2593 21 is_stmt 1 view .LVU159
 503 005c FFF7FEFF 		bl	vTaskMissedYield
 504              	.LVL51:
ARM GAS  /tmp/ccnrBCYQ.s 			page 59


 505 0060 F0E7     		b	.L38
 506              	.L37:
2608:FreeRTOS-Kernel/queue.c ****     }
 507              		.loc 1 2608 9 view .LVU160
2608:FreeRTOS-Kernel/queue.c ****     }
 508              		.loc 1 2608 26 is_stmt 0 view .LVU161
 509 0062 FF23     		movs	r3, #255
 510 0064 85F84430 		strb	r3, [r5, #68]
 511              	.LBE124:
2610:FreeRTOS-Kernel/queue.c **** }
 512              		.loc 1 2610 5 is_stmt 1 view .LVU162
 513 0068 FFF7FEFF 		bl	vPortExitCritical
 514              	.LVL52:
2611:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 515              		.loc 1 2611 1 is_stmt 0 view .LVU163
 516 006c 38BD     		pop	{r3, r4, r5, pc}
2611:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 517              		.loc 1 2611 1 view .LVU164
 518              		.cfi_endproc
 519              	.LFE31:
 521              		.section	.text.xQueueGenericReset,"ax",%progbits
 522              		.align	1
 523              		.global	xQueueGenericReset
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 528              	xQueueGenericReset:
 529              	.LVL53:
 530              	.LFB5:
 305:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdPASS;
 531              		.loc 1 305 1 is_stmt 1 view -0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 305:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdPASS;
 535              		.loc 1 305 1 is_stmt 0 view .LVU166
 536 0000 38B5     		push	{r3, r4, r5, lr}
 537              	.LCFI6:
 538              		.cfi_def_cfa_offset 16
 539              		.cfi_offset 3, -16
 540              		.cfi_offset 4, -12
 541              		.cfi_offset 5, -8
 542              		.cfi_offset 14, -4
 306:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 543              		.loc 1 306 5 is_stmt 1 view .LVU167
 544              	.LVL54:
 307:FreeRTOS-Kernel/queue.c **** 
 545              		.loc 1 307 5 view .LVU168
 309:FreeRTOS-Kernel/queue.c **** 
 546              		.loc 1 309 55 view .LVU169
 311:FreeRTOS-Kernel/queue.c **** 
 547              		.loc 1 311 5 view .LVU170
 548 0002 90B1     		cbz	r0, .L52
 549 0004 0D46     		mov	r5, r1
 550 0006 0446     		mov	r4, r0
 311:FreeRTOS-Kernel/queue.c **** 
 551              		.loc 1 311 28 discriminator 1 view .LVU171
ARM GAS  /tmp/ccnrBCYQ.s 			page 60


 313:FreeRTOS-Kernel/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 552              		.loc 1 313 5 discriminator 1 view .LVU172
 314:FreeRTOS-Kernel/queue.c ****         /* Check for multiplication overflow. */
 553              		.loc 1 314 18 is_stmt 0 discriminator 1 view .LVU173
 554 0008 C36B     		ldr	r3, [r0, #60]
 313:FreeRTOS-Kernel/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 555              		.loc 1 313 29 discriminator 1 view .LVU174
 556 000a 2BB1     		cbz	r3, .L44
 316:FreeRTOS-Kernel/queue.c ****     {
 557              		.loc 1 316 54 view .LVU175
 558 000c 026C     		ldr	r2, [r0, #64]
 316:FreeRTOS-Kernel/queue.c ****     {
 559              		.loc 1 316 44 view .LVU176
 560 000e 0021     		movs	r1, #0
 561              	.LVL55:
 316:FreeRTOS-Kernel/queue.c ****     {
 562              		.loc 1 316 44 view .LVU177
 563 0010 A2FB0323 		umull	r2, r3, r2, r3
 564 0014 93B9     		cbnz	r3, .L53
 565              	.L45:
 314:FreeRTOS-Kernel/queue.c ****         /* Check for multiplication overflow. */
 566              		.loc 1 314 37 view .LVU178
 567 0016 99B1     		cbz	r1, .L54
 568              	.L44:
 569              	.LVL56:
 364:FreeRTOS-Kernel/queue.c **** 
 570              		.loc 1 364 5 is_stmt 1 view .LVU179
 571              	.LBB125:
 572              	.LBI125:
 573              		.file 2 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V11.1.0
   3:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
   4:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  /tmp/ccnrBCYQ.s 			page 61


  28:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  32:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-OFF* */
  34:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  35:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern "C" {
  36:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  37:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* *INDENT-ON* */
  38:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  40:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  41:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  44:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *
  45:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  46:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  47:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  */
  48:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  49:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  50:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR          char
  51:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT         float
  52:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE        double
  53:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG          long
  54:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT         short
  55:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE    uint32_t
  56:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE     long
  57:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  58:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE   StackType_t;
  59:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef long             BaseType_t;
  60:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long    UBaseType_t;
  61:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  62:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint16_t     TickType_t;
  64:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint32_t     TickType_t;
  67:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  69:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  71:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC    1
  72:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
  73:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     typedef uint64_t TickType_t;
  74:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portMAX_DELAY              ( TickType_t ) 0xffffffffffffffffULL
  75:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #else /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  76:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  77:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS ) */
  78:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  81:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH      ( -1 )
  82:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  83:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT    8
  84:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDONT_DISCARD      __attribute__( ( used ) )
ARM GAS  /tmp/ccnrBCYQ.s 			page 62


  85:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  86:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  87:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  88:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD()                                     \
  89:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  90:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  91:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  92:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  93:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  94:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  95:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  96:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  97:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
  98:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
  99:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
 100:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
 101:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) \
 102:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     do                                           \
 103:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {                                            \
 104:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         if( xSwitchRequired != pdFALSE )         \
 105:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 106:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT_TO_SCHEDULER();        \
 107:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             portYIELD();                         \
 108:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 109:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         else                                     \
 110:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         {                                        \
 111:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****             traceISR_EXIT();                     \
 112:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         }                                        \
 113:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     } while( 0 )
 114:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )    portEND_SWITCHING_ISR( x )
 115:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 118:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 119:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 120:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 121:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 122:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 123:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 124:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()                      vPortEnterCritical()
 125:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()                       vPortExitCritical()
 126:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 128:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 130:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 131:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 132:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParameters )
 133:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParameters )
 134:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 135:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 137:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 138:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 139:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xExpec
 140:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 141:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccnrBCYQ.s 			page 63


 142:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 144:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 145:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 146:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 147:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 149:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 151:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBi
 152:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 153:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         uint8_t ucReturn;
 154:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 156:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         return ucReturn;
 158:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 159:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 161:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configMAX_PRIORITIES > 32 )
 162:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITI
 163:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 164:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 166:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities ) |= 
 167:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities ) &= 
 168:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 31UL 
 172:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 174:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 175:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 176:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 178:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 179:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 180:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 181:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 182:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 183:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 184:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE              __inline
 186:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 187:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 188:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 189:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 190:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 192:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulCurrentInterrupt;
 194:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     BaseType_t xReturn;
 195:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 196:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 197:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 198:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 64


 199:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 200:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 201:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdFALSE;
 202:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 203:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     else
 204:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     {
 205:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         xReturn = pdTRUE;
 206:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return xReturn;
 209:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 210:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 212:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 574              		.loc 2 213 30 view .LVU180
 575              	.LBB126:
 214:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulNewBASEPRI;
 576              		.loc 2 215 5 view .LVU181
 216:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 577              		.loc 2 217 5 view .LVU182
 578              		.syntax unified
 579              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 580 0018 4FF05003 		   mov r3, #80                                              
 581 001c 83F31188 	   msr basepri, r3                                         
 582 0020 BFF36F8F 	   isb                                                     
 583 0024 BFF34F8F 	   dsb                                                     
 584              	
 585              	@ 0 "" 2
 586              	.LVL57:
 587              		.thumb
 588              		.syntax unified
 589              	.L49:
 590              		.loc 2 217 5 is_stmt 0 view .LVU183
 591              	.LBE126:
 592              	.LBE125:
 364:FreeRTOS-Kernel/queue.c **** 
 593              		.loc 1 364 5 is_stmt 1 discriminator 3 view .LVU184
 364:FreeRTOS-Kernel/queue.c **** 
 594              		.loc 1 364 5 discriminator 3 view .LVU185
 595 0028 FEE7     		b	.L49
 596              	.LVL58:
 597              	.L52:
 311:FreeRTOS-Kernel/queue.c **** 
 598              		.loc 1 311 5 view .LVU186
 599              	.LBB127:
 600              	.LBI127:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 601              		.loc 2 213 30 view .LVU187
 602              	.LBB128:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 603              		.loc 2 215 5 view .LVU188
 604              		.loc 2 217 5 view .LVU189
 605              		.syntax unified
 606              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccnrBCYQ.s 			page 65


 607 002a 4FF05003 		   mov r3, #80                                              
 608 002e 83F31188 	   msr basepri, r3                                         
 609 0032 BFF36F8F 	   isb                                                     
 610 0036 BFF34F8F 	   dsb                                                     
 611              	
 612              	@ 0 "" 2
 613              	.LVL59:
 614              		.thumb
 615              		.syntax unified
 616              	.L43:
 617              		.loc 2 217 5 is_stmt 0 view .LVU190
 618              	.LBE128:
 619              	.LBE127:
 311:FreeRTOS-Kernel/queue.c **** 
 620              		.loc 1 311 5 is_stmt 1 discriminator 1 view .LVU191
 311:FreeRTOS-Kernel/queue.c **** 
 621              		.loc 1 311 5 discriminator 1 view .LVU192
 622 003a FEE7     		b	.L43
 623              	.LVL60:
 624              	.L53:
 316:FreeRTOS-Kernel/queue.c ****     {
 625              		.loc 1 316 44 is_stmt 0 view .LVU193
 626 003c 0121     		movs	r1, #1
 627 003e EAE7     		b	.L45
 628              	.L54:
 318:FreeRTOS-Kernel/queue.c ****         {
 629              		.loc 1 318 9 is_stmt 1 view .LVU194
 630 0040 FFF7FEFF 		bl	vPortEnterCritical
 631              	.LVL61:
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 632              		.loc 1 320 13 view .LVU195
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 633              		.loc 1 320 47 is_stmt 0 view .LVU196
 634 0044 2368     		ldr	r3, [r4]
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 635              		.loc 1 320 67 view .LVU197
 636 0046 E26B     		ldr	r2, [r4, #60]
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 637              		.loc 1 320 87 view .LVU198
 638 0048 216C     		ldr	r1, [r4, #64]
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 639              		.loc 1 320 56 view .LVU199
 640 004a 01FB0230 		mla	r0, r1, r2, r3
 320:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 641              		.loc 1 320 38 view .LVU200
 642 004e A060     		str	r0, [r4, #8]
 321:FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 643              		.loc 1 321 13 is_stmt 1 view .LVU201
 321:FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 644              		.loc 1 321 40 is_stmt 0 view .LVU202
 645 0050 0020     		movs	r0, #0
 646 0052 A063     		str	r0, [r4, #56]
 322:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 647              		.loc 1 322 13 is_stmt 1 view .LVU203
 322:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 648              		.loc 1 322 32 is_stmt 0 view .LVU204
 649 0054 6360     		str	r3, [r4, #4]
ARM GAS  /tmp/ccnrBCYQ.s 			page 66


 323:FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 650              		.loc 1 323 13 is_stmt 1 view .LVU205
 323:FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 651              		.loc 1 323 84 is_stmt 0 view .LVU206
 652 0056 013A     		subs	r2, r2, #1
 323:FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 653              		.loc 1 323 60 view .LVU207
 654 0058 02FB0133 		mla	r3, r2, r1, r3
 323:FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 655              		.loc 1 323 42 view .LVU208
 656 005c E360     		str	r3, [r4, #12]
 324:FreeRTOS-Kernel/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 657              		.loc 1 324 13 is_stmt 1 view .LVU209
 324:FreeRTOS-Kernel/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 658              		.loc 1 324 30 is_stmt 0 view .LVU210
 659 005e FF23     		movs	r3, #255
 660 0060 84F84430 		strb	r3, [r4, #68]
 325:FreeRTOS-Kernel/queue.c **** 
 661              		.loc 1 325 13 is_stmt 1 view .LVU211
 325:FreeRTOS-Kernel/queue.c **** 
 662              		.loc 1 325 30 is_stmt 0 view .LVU212
 663 0064 84F84530 		strb	r3, [r4, #69]
 327:FreeRTOS-Kernel/queue.c ****             {
 664              		.loc 1 327 13 is_stmt 1 view .LVU213
 327:FreeRTOS-Kernel/queue.c ****             {
 665              		.loc 1 327 15 is_stmt 0 view .LVU214
 666 0068 B5B9     		cbnz	r5, .L47
 334:FreeRTOS-Kernel/queue.c ****                 {
 667              		.loc 1 334 17 is_stmt 1 view .LVU215
 334:FreeRTOS-Kernel/queue.c ****                 {
 668              		.loc 1 334 21 is_stmt 0 view .LVU216
 669 006a 2369     		ldr	r3, [r4, #16]
 334:FreeRTOS-Kernel/queue.c ****                 {
 670              		.loc 1 334 19 view .LVU217
 671 006c 1BB9     		cbnz	r3, .L55
 672              	.L48:
 357:FreeRTOS-Kernel/queue.c ****     }
 673              		.loc 1 357 9 is_stmt 1 view .LVU218
 674 006e FFF7FEFF 		bl	vPortExitCritical
 675              	.LVL62:
 364:FreeRTOS-Kernel/queue.c **** 
 676              		.loc 1 364 5 view .LVU219
 364:FreeRTOS-Kernel/queue.c **** 
 677              		.loc 1 364 38 view .LVU220
 368:FreeRTOS-Kernel/queue.c **** 
 678              		.loc 1 368 46 view .LVU221
 370:FreeRTOS-Kernel/queue.c **** }
 679              		.loc 1 370 5 view .LVU222
 371:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 680              		.loc 1 371 1 is_stmt 0 view .LVU223
 681 0072 0120     		movs	r0, #1
 682 0074 38BD     		pop	{r3, r4, r5, pc}
 683              	.LVL63:
 684              	.L55:
 336:FreeRTOS-Kernel/queue.c ****                     {
 685              		.loc 1 336 21 is_stmt 1 view .LVU224
 336:FreeRTOS-Kernel/queue.c ****                     {
ARM GAS  /tmp/ccnrBCYQ.s 			page 67


 686              		.loc 1 336 25 is_stmt 0 view .LVU225
 687 0076 04F11000 		add	r0, r4, #16
 688 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 689              	.LVL64:
 336:FreeRTOS-Kernel/queue.c ****                     {
 690              		.loc 1 336 23 view .LVU226
 691 007e 0028     		cmp	r0, #0
 692 0080 F5D0     		beq	.L48
 338:FreeRTOS-Kernel/queue.c ****                     }
 693              		.loc 1 338 25 is_stmt 1 view .LVU227
 694 0082 4FF0E023 		mov	r3, #-536813568
 695 0086 4FF08052 		mov	r2, #268435456
 696 008a C3F8042D 		str	r2, [r3, #3332]
 338:FreeRTOS-Kernel/queue.c ****                     }
 697              		.loc 1 338 25 view .LVU228
 698              		.syntax unified
 699              	@ 338 "FreeRTOS-Kernel/queue.c" 1
 700 008e BFF34F8F 		dsb
 701              	@ 0 "" 2
 338:FreeRTOS-Kernel/queue.c ****                     }
 702              		.loc 1 338 25 view .LVU229
 703              	@ 338 "FreeRTOS-Kernel/queue.c" 1
 704 0092 BFF36F8F 		isb
 705              	@ 0 "" 2
 338:FreeRTOS-Kernel/queue.c ****                     }
 706              		.loc 1 338 57 view .LVU230
 707              		.thumb
 708              		.syntax unified
 709 0096 EAE7     		b	.L48
 710              	.L47:
 353:FreeRTOS-Kernel/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 711              		.loc 1 353 17 view .LVU231
 712 0098 04F11000 		add	r0, r4, #16
 713 009c FFF7FEFF 		bl	vListInitialise
 714              	.LVL65:
 354:FreeRTOS-Kernel/queue.c ****             }
 715              		.loc 1 354 17 view .LVU232
 716 00a0 04F12400 		add	r0, r4, #36
 717 00a4 FFF7FEFF 		bl	vListInitialise
 718              	.LVL66:
 719 00a8 E1E7     		b	.L48
 720              		.cfi_endproc
 721              	.LFE5:
 723              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 724              		.align	1
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 729              	prvInitialiseNewQueue:
 730              	.LVL67:
 731              	.LFB8:
 571:FreeRTOS-Kernel/queue.c ****     /* Remove compiler warnings about unused parameters should
 732              		.loc 1 571 1 view -0
 733              		.cfi_startproc
 734              		@ args = 4, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 571:FreeRTOS-Kernel/queue.c ****     /* Remove compiler warnings about unused parameters should
ARM GAS  /tmp/ccnrBCYQ.s 			page 68


 736              		.loc 1 571 1 is_stmt 0 view .LVU234
 737 0000 10B5     		push	{r4, lr}
 738              	.LCFI7:
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 4, -8
 741              		.cfi_offset 14, -4
 742 0002 0346     		mov	r3, r0
 743              	.LVL68:
 571:FreeRTOS-Kernel/queue.c ****     /* Remove compiler warnings about unused parameters should
 744              		.loc 1 571 1 view .LVU235
 745 0004 0298     		ldr	r0, [sp, #8]
 746              	.LVL69:
 574:FreeRTOS-Kernel/queue.c **** 
 747              		.loc 1 574 5 is_stmt 1 view .LVU236
 576:FreeRTOS-Kernel/queue.c ****     {
 748              		.loc 1 576 5 view .LVU237
 576:FreeRTOS-Kernel/queue.c ****     {
 749              		.loc 1 576 7 is_stmt 0 view .LVU238
 750 0006 0C46     		mov	r4, r1
 751 0008 31B9     		cbnz	r1, .L57
 582:FreeRTOS-Kernel/queue.c ****     }
 752              		.loc 1 582 9 is_stmt 1 view .LVU239
 582:FreeRTOS-Kernel/queue.c ****     }
 753              		.loc 1 582 28 is_stmt 0 view .LVU240
 754 000a 0060     		str	r0, [r0]
 755              	.L58:
 592:FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 756              		.loc 1 592 5 is_stmt 1 view .LVU241
 592:FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 757              		.loc 1 592 26 is_stmt 0 view .LVU242
 758 000c C363     		str	r3, [r0, #60]
 593:FreeRTOS-Kernel/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 759              		.loc 1 593 5 is_stmt 1 view .LVU243
 593:FreeRTOS-Kernel/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 760              		.loc 1 593 28 is_stmt 0 view .LVU244
 761 000e 0464     		str	r4, [r0, #64]
 594:FreeRTOS-Kernel/queue.c **** 
 762              		.loc 1 594 5 is_stmt 1 view .LVU245
 594:FreeRTOS-Kernel/queue.c **** 
 763              		.loc 1 594 14 is_stmt 0 view .LVU246
 764 0010 0121     		movs	r1, #1
 765              	.LVL70:
 594:FreeRTOS-Kernel/queue.c **** 
 766              		.loc 1 594 14 view .LVU247
 767 0012 FFF7FEFF 		bl	xQueueGenericReset
 768              	.LVL71:
 608:FreeRTOS-Kernel/queue.c **** }
 769              		.loc 1 608 36 is_stmt 1 view .LVU248
 609:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 770              		.loc 1 609 1 is_stmt 0 view .LVU249
 771 0016 10BD     		pop	{r4, pc}
 772              	.LVL72:
 773              	.L57:
 587:FreeRTOS-Kernel/queue.c ****     }
 774              		.loc 1 587 9 is_stmt 1 view .LVU250
 587:FreeRTOS-Kernel/queue.c ****     }
 775              		.loc 1 587 28 is_stmt 0 view .LVU251
ARM GAS  /tmp/ccnrBCYQ.s 			page 69


 776 0018 0260     		str	r2, [r0]
 777 001a F7E7     		b	.L58
 778              		.cfi_endproc
 779              	.LFE8:
 781              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 782              		.align	1
 783              		.global	xQueueGenericCreateStatic
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 788              	xQueueGenericCreateStatic:
 789              	.LVL73:
 790              	.LFB6:
 381:FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 791              		.loc 1 381 5 is_stmt 1 view -0
 792              		.cfi_startproc
 793              		@ args = 4, pretend = 0, frame = 8
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 382:FreeRTOS-Kernel/queue.c **** 
 795              		.loc 1 382 9 view .LVU253
 384:FreeRTOS-Kernel/queue.c **** 
 796              		.loc 1 384 119 view .LVU254
 388:FreeRTOS-Kernel/queue.c **** 
 797              		.loc 1 388 9 view .LVU255
 798 0000 73B1     		cbz	r3, .L72
 381:FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 799              		.loc 1 381 5 is_stmt 0 discriminator 2 view .LVU256
 800 0002 10B5     		push	{r4, lr}
 801              	.LCFI8:
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 4, -8
 804              		.cfi_offset 14, -4
 805 0004 84B0     		sub	sp, sp, #16
 806              	.LCFI9:
 807              		.cfi_def_cfa_offset 24
 808 0006 1C46     		mov	r4, r3
 388:FreeRTOS-Kernel/queue.c **** 
 809              		.loc 1 388 38 is_stmt 1 discriminator 2 view .LVU257
 390:FreeRTOS-Kernel/queue.c ****             ( pxStaticQueue != NULL ) &&
 810              		.loc 1 390 9 discriminator 2 view .LVU258
 390:FreeRTOS-Kernel/queue.c ****             ( pxStaticQueue != NULL ) &&
 811              		.loc 1 390 11 is_stmt 0 discriminator 2 view .LVU259
 812 0008 08B1     		cbz	r0, .L63
 391:FreeRTOS-Kernel/queue.c **** 
 813              		.loc 1 391 39 view .LVU260
 814 000a 92B1     		cbz	r2, .L64
 395:FreeRTOS-Kernel/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 815              		.loc 1 395 15 view .LVU261
 816 000c 99B9     		cbnz	r1, .L65
 817              	.L63:
 432:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 818              		.loc 1 432 13 is_stmt 1 view .LVU262
 432:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 819              		.loc 1 432 13 view .LVU263
 820              	.LBB129:
 821              	.LBI129:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /tmp/ccnrBCYQ.s 			page 70


 822              		.loc 2 213 30 view .LVU264
 823              	.LBB130:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 824              		.loc 2 215 5 view .LVU265
 825              		.loc 2 217 5 view .LVU266
 826              		.syntax unified
 827              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 828 000e 4FF05003 		   mov r3, #80                                              
 829 0012 83F31188 	   msr basepri, r3                                         
 830 0016 BFF36F8F 	   isb                                                     
 831 001a BFF34F8F 	   dsb                                                     
 832              	
 833              	@ 0 "" 2
 834              	.LVL74:
 835              		.thumb
 836              		.syntax unified
 837              	.L68:
 838              		.loc 2 217 5 is_stmt 0 view .LVU267
 839              	.LBE130:
 840              	.LBE129:
 432:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 841              		.loc 1 432 13 is_stmt 1 discriminator 3 view .LVU268
 432:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 842              		.loc 1 432 13 discriminator 3 view .LVU269
 843 001e FEE7     		b	.L68
 844              	.LVL75:
 845              	.L72:
 846              	.LCFI10:
 847              		.cfi_def_cfa_offset 0
 848              		.cfi_restore 4
 849              		.cfi_restore 14
 388:FreeRTOS-Kernel/queue.c **** 
 850              		.loc 1 388 9 view .LVU270
 851              	.LBB131:
 852              	.LBI131:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 853              		.loc 2 213 30 view .LVU271
 854              	.LBB132:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 855              		.loc 2 215 5 view .LVU272
 856              		.loc 2 217 5 view .LVU273
 857              		.syntax unified
 858              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 859 0020 4FF05003 		   mov r3, #80                                              
 860 0024 83F31188 	   msr basepri, r3                                         
 861 0028 BFF36F8F 	   isb                                                     
 862 002c BFF34F8F 	   dsb                                                     
 863              	
 864              	@ 0 "" 2
 865              	.LVL76:
 866              		.thumb
 867              		.syntax unified
 868              	.L62:
 869              		.loc 2 217 5 is_stmt 0 view .LVU274
 870              	.LBE132:
 871              	.LBE131:
 388:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 71


 872              		.loc 1 388 9 is_stmt 1 discriminator 1 view .LVU275
 388:FreeRTOS-Kernel/queue.c **** 
 873              		.loc 1 388 9 discriminator 1 view .LVU276
 874 0030 FEE7     		b	.L62
 875              	.LVL77:
 876              	.L64:
 877              	.LCFI11:
 878              		.cfi_def_cfa_offset 24
 879              		.cfi_offset 4, -8
 880              		.cfi_offset 14, -4
 396:FreeRTOS-Kernel/queue.c ****         {
 881              		.loc 1 396 15 is_stmt 0 view .LVU277
 882 0032 0029     		cmp	r1, #0
 883 0034 EBD1     		bne	.L63
 884              	.L65:
 885              	.LBB133:
 403:FreeRTOS-Kernel/queue.c **** 
 886              		.loc 1 403 17 is_stmt 1 view .LVU278
 403:FreeRTOS-Kernel/queue.c **** 
 887              		.loc 1 403 33 is_stmt 0 view .LVU279
 888 0036 4823     		movs	r3, #72
 889              	.LVL78:
 403:FreeRTOS-Kernel/queue.c **** 
 890              		.loc 1 403 33 view .LVU280
 891 0038 0393     		str	r3, [sp, #12]
 406:FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 892              		.loc 1 406 17 is_stmt 1 view .LVU281
 893 003a 039B     		ldr	r3, [sp, #12]
 894 003c 482B     		cmp	r3, #72
 895 003e 08D0     		beq	.L66
 406:FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 896              		.loc 1 406 17 view .LVU282
 897              	.LBB134:
 898              	.LBI134:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 899              		.loc 2 213 30 view .LVU283
 900              	.LBB135:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 901              		.loc 2 215 5 view .LVU284
 902              		.loc 2 217 5 view .LVU285
 903              		.syntax unified
 904              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 905 0040 4FF05003 		   mov r3, #80                                              
 906 0044 83F31188 	   msr basepri, r3                                         
 907 0048 BFF36F8F 	   isb                                                     
 908 004c BFF34F8F 	   dsb                                                     
 909              	
 910              	@ 0 "" 2
 911              	.LVL79:
 912              		.thumb
 913              		.syntax unified
 914              	.L67:
 915              		.loc 2 217 5 is_stmt 0 view .LVU286
 916              	.LBE135:
 917              	.LBE134:
 406:FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 918              		.loc 1 406 17 is_stmt 1 discriminator 2 view .LVU287
ARM GAS  /tmp/ccnrBCYQ.s 			page 72


 406:FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 919              		.loc 1 406 17 discriminator 2 view .LVU288
 920 0050 FEE7     		b	.L67
 921              	.L66:
 406:FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Prevent unused variable warning when
 922              		.loc 1 406 59 discriminator 2 view .LVU289
 407:FreeRTOS-Kernel/queue.c ****             }
 923              		.loc 1 407 17 discriminator 2 view .LVU290
 924 0052 039B     		ldr	r3, [sp, #12]
 925              	.LBE133:
 417:FreeRTOS-Kernel/queue.c **** 
 926              		.loc 1 417 13 discriminator 2 view .LVU291
 927              	.LVL80:
 428:FreeRTOS-Kernel/queue.c ****         }
 928              		.loc 1 428 13 discriminator 2 view .LVU292
 929 0054 0094     		str	r4, [sp]
 930 0056 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 931 005a FFF7FEFF 		bl	prvInitialiseNewQueue
 932              	.LVL81:
 432:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 933              		.loc 1 432 39 discriminator 2 view .LVU293
 433:FreeRTOS-Kernel/queue.c ****         }
 934              		.loc 1 433 37 discriminator 2 view .LVU294
 436:FreeRTOS-Kernel/queue.c **** 
 935              		.loc 1 436 60 discriminator 2 view .LVU295
 438:FreeRTOS-Kernel/queue.c ****     }
 936              		.loc 1 438 9 discriminator 2 view .LVU296
 439:FreeRTOS-Kernel/queue.c **** 
 937              		.loc 1 439 5 is_stmt 0 discriminator 2 view .LVU297
 938 005e 2046     		mov	r0, r4
 939 0060 04B0     		add	sp, sp, #16
 940              	.LCFI12:
 941              		.cfi_def_cfa_offset 8
 942              		@ sp needed
 943 0062 10BD     		pop	{r4, pc}
 439:FreeRTOS-Kernel/queue.c **** 
 944              		.loc 1 439 5 discriminator 2 view .LVU298
 945              		.cfi_endproc
 946              	.LFE6:
 948              		.section	.text.xQueueGenericGetStaticBuffers,"ax",%progbits
 949              		.align	1
 950              		.global	xQueueGenericGetStaticBuffers
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 955              	xQueueGenericGetStaticBuffers:
 956              	.LVL82:
 957              	.LFB7:
 449:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 958              		.loc 1 449 5 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 450:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
 963              		.loc 1 450 9 view .LVU300
 451:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 73


 964              		.loc 1 451 9 view .LVU301
 453:FreeRTOS-Kernel/queue.c **** 
 965              		.loc 1 453 93 view .LVU302
 455:FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 966              		.loc 1 455 9 view .LVU303
 967 0000 0346     		mov	r3, r0
 968 0002 30B1     		cbz	r0, .L79
 455:FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 969              		.loc 1 455 32 discriminator 2 view .LVU304
 456:FreeRTOS-Kernel/queue.c **** 
 970              		.loc 1 456 9 discriminator 2 view .LVU305
 971 0004 72B1     		cbz	r2, .L80
 456:FreeRTOS-Kernel/queue.c **** 
 972              		.loc 1 456 39 discriminator 2 view .LVU306
 482:FreeRTOS-Kernel/queue.c ****             {
 973              		.loc 1 482 13 discriminator 2 view .LVU307
 482:FreeRTOS-Kernel/queue.c ****             {
 974              		.loc 1 482 15 is_stmt 0 discriminator 2 view .LVU308
 975 0006 09B1     		cbz	r1, .L78
 484:FreeRTOS-Kernel/queue.c ****             }
 976              		.loc 1 484 17 is_stmt 1 view .LVU309
 484:FreeRTOS-Kernel/queue.c ****             }
 977              		.loc 1 484 58 is_stmt 0 view .LVU310
 978 0008 0068     		ldr	r0, [r0]
 979              	.LVL83:
 484:FreeRTOS-Kernel/queue.c ****             }
 980              		.loc 1 484 35 view .LVU311
 981 000a 0860     		str	r0, [r1]
 982              	.L78:
 487:FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
 983              		.loc 1 487 13 is_stmt 1 view .LVU312
 487:FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
 984              		.loc 1 487 29 is_stmt 0 view .LVU313
 985 000c 1360     		str	r3, [r2]
 488:FreeRTOS-Kernel/queue.c ****         }
 986              		.loc 1 488 13 is_stmt 1 view .LVU314
 987              	.LVL84:
 492:FreeRTOS-Kernel/queue.c **** 
 988              		.loc 1 492 61 view .LVU315
 494:FreeRTOS-Kernel/queue.c ****     }
 989              		.loc 1 494 9 view .LVU316
 495:FreeRTOS-Kernel/queue.c **** 
 990              		.loc 1 495 5 is_stmt 0 view .LVU317
 991 000e 0120     		movs	r0, #1
 992 0010 7047     		bx	lr
 993              	.LVL85:
 994              	.L79:
 455:FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 995              		.loc 1 455 9 is_stmt 1 view .LVU318
 996              	.LBB136:
 997              	.LBI136:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 998              		.loc 2 213 30 view .LVU319
 999              	.LBB137:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1000              		.loc 2 215 5 view .LVU320
 1001              		.loc 2 217 5 view .LVU321
ARM GAS  /tmp/ccnrBCYQ.s 			page 74


 1002              		.syntax unified
 1003              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1004 0012 4FF05003 		   mov r3, #80                                              
 1005 0016 83F31188 	   msr basepri, r3                                         
 1006 001a BFF36F8F 	   isb                                                     
 1007 001e BFF34F8F 	   dsb                                                     
 1008              	
 1009              	@ 0 "" 2
 1010              	.LVL86:
 1011              		.thumb
 1012              		.syntax unified
 1013              	.L75:
 1014              		.loc 2 217 5 is_stmt 0 view .LVU322
 1015              	.LBE137:
 1016              	.LBE136:
 455:FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 1017              		.loc 1 455 9 is_stmt 1 discriminator 1 view .LVU323
 455:FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 1018              		.loc 1 455 9 discriminator 1 view .LVU324
 1019 0022 FEE7     		b	.L75
 1020              	.L80:
 456:FreeRTOS-Kernel/queue.c **** 
 1021              		.loc 1 456 9 view .LVU325
 1022              	.LBB138:
 1023              	.LBI138:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1024              		.loc 2 213 30 view .LVU326
 1025              	.LBB139:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1026              		.loc 2 215 5 view .LVU327
 1027              		.loc 2 217 5 view .LVU328
 1028              		.syntax unified
 1029              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1030 0024 4FF05003 		   mov r3, #80                                              
 1031 0028 83F31188 	   msr basepri, r3                                         
 1032 002c BFF36F8F 	   isb                                                     
 1033 0030 BFF34F8F 	   dsb                                                     
 1034              	
 1035              	@ 0 "" 2
 1036              	.LVL87:
 1037              		.thumb
 1038              		.syntax unified
 1039              	.L77:
 1040              		.loc 2 217 5 is_stmt 0 view .LVU329
 1041              	.LBE139:
 1042              	.LBE138:
 456:FreeRTOS-Kernel/queue.c **** 
 1043              		.loc 1 456 9 is_stmt 1 discriminator 2 view .LVU330
 456:FreeRTOS-Kernel/queue.c **** 
 1044              		.loc 1 456 9 discriminator 2 view .LVU331
 1045 0034 FEE7     		b	.L77
 1046              		.cfi_endproc
 1047              	.LFE7:
 1049              		.section	.text.xQueueCreateCountingSemaphoreStatic,"ax",%progbits
 1050              		.align	1
 1051              		.global	xQueueCreateCountingSemaphoreStatic
 1052              		.syntax unified
ARM GAS  /tmp/ccnrBCYQ.s 			page 75


 1053              		.thumb
 1054              		.thumb_func
 1056              	xQueueCreateCountingSemaphoreStatic:
 1057              	.LVL88:
 1058              	.LFB13:
 865:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 1059              		.loc 1 865 5 view -0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 865:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 1063              		.loc 1 865 5 is_stmt 0 view .LVU333
 1064 0000 10B5     		push	{r4, lr}
 1065              	.LCFI13:
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 4, -8
 1068              		.cfi_offset 14, -4
 1069 0002 82B0     		sub	sp, sp, #8
 1070              	.LCFI14:
 1071              		.cfi_def_cfa_offset 16
 866:FreeRTOS-Kernel/queue.c **** 
 1072              		.loc 1 866 9 is_stmt 1 view .LVU334
 1073              	.LVL89:
 868:FreeRTOS-Kernel/queue.c **** 
 1074              		.loc 1 868 100 view .LVU335
 870:FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1075              		.loc 1 870 9 view .LVU336
 870:FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1076              		.loc 1 870 11 is_stmt 0 view .LVU337
 1077 0004 10B1     		cbz	r0, .L82
 1078 0006 0C46     		mov	r4, r1
 870:FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 1079              		.loc 1 870 34 discriminator 1 view .LVU338
 1080 0008 8842     		cmp	r0, r1
 1081 000a 08D2     		bcs	.L86
 1082              	.L82:
 888:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1083              		.loc 1 888 13 is_stmt 1 view .LVU339
 888:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1084              		.loc 1 888 13 view .LVU340
 1085              	.LBB140:
 1086              	.LBI140:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1087              		.loc 2 213 30 view .LVU341
 1088              	.LBB141:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1089              		.loc 2 215 5 view .LVU342
 1090              		.loc 2 217 5 view .LVU343
 1091              		.syntax unified
 1092              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1093 000c 4FF05003 		   mov r3, #80                                              
 1094 0010 83F31188 	   msr basepri, r3                                         
 1095 0014 BFF36F8F 	   isb                                                     
 1096 0018 BFF34F8F 	   dsb                                                     
 1097              	
 1098              	@ 0 "" 2
 1099              	.LVL90:
ARM GAS  /tmp/ccnrBCYQ.s 			page 76


 1100              		.thumb
 1101              		.syntax unified
 1102              	.L84:
 1103              		.loc 2 217 5 is_stmt 0 view .LVU344
 1104              	.LBE141:
 1105              	.LBE140:
 888:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1106              		.loc 1 888 13 is_stmt 1 discriminator 1 view .LVU345
 888:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 1107              		.loc 1 888 13 discriminator 1 view .LVU346
 1108 001c FEE7     		b	.L84
 1109              	.L86:
 873:FreeRTOS-Kernel/queue.c **** 
 1110              		.loc 1 873 13 view .LVU347
 873:FreeRTOS-Kernel/queue.c **** 
 1111              		.loc 1 873 23 is_stmt 0 view .LVU348
 1112 001e 0223     		movs	r3, #2
 1113 0020 0093     		str	r3, [sp]
 1114 0022 1346     		mov	r3, r2
 1115 0024 0022     		movs	r2, #0
 1116              	.LVL91:
 873:FreeRTOS-Kernel/queue.c **** 
 1117              		.loc 1 873 23 view .LVU349
 1118 0026 1146     		mov	r1, r2
 1119              	.LVL92:
 873:FreeRTOS-Kernel/queue.c **** 
 1120              		.loc 1 873 23 view .LVU350
 1121 0028 FFF7FEFF 		bl	xQueueGenericCreateStatic
 1122              	.LVL93:
 875:FreeRTOS-Kernel/queue.c ****             {
 1123              		.loc 1 875 13 is_stmt 1 view .LVU351
 875:FreeRTOS-Kernel/queue.c ****             {
 1124              		.loc 1 875 15 is_stmt 0 view .LVU352
 1125 002c 00B1     		cbz	r0, .L81
 877:FreeRTOS-Kernel/queue.c **** 
 1126              		.loc 1 877 17 is_stmt 1 view .LVU353
 877:FreeRTOS-Kernel/queue.c **** 
 1127              		.loc 1 877 62 is_stmt 0 view .LVU354
 1128 002e 8463     		str	r4, [r0, #56]
 879:FreeRTOS-Kernel/queue.c ****             }
 1129              		.loc 1 879 49 is_stmt 1 view .LVU355
 1130              	.L81:
 895:FreeRTOS-Kernel/queue.c **** 
 1131              		.loc 1 895 5 is_stmt 0 view .LVU356
 1132 0030 02B0     		add	sp, sp, #8
 1133              	.LCFI15:
 1134              		.cfi_def_cfa_offset 8
 1135              		@ sp needed
 1136 0032 10BD     		pop	{r4, pc}
 895:FreeRTOS-Kernel/queue.c **** 
 1137              		.loc 1 895 5 view .LVU357
 1138              		.cfi_endproc
 1139              	.LFE13:
 1141              		.section	.text.xQueueGenericSend,"ax",%progbits
 1142              		.align	1
 1143              		.global	xQueueGenericSend
 1144              		.syntax unified
ARM GAS  /tmp/ccnrBCYQ.s 			page 77


 1145              		.thumb
 1146              		.thumb_func
 1148              	xQueueGenericSend:
 1149              	.LVL94:
 1150              	.LFB14:
 943:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1151              		.loc 1 943 1 is_stmt 1 view -0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 16
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 943:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1155              		.loc 1 943 1 is_stmt 0 view .LVU359
 1156 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1157              	.LCFI16:
 1158              		.cfi_def_cfa_offset 20
 1159              		.cfi_offset 4, -20
 1160              		.cfi_offset 5, -16
 1161              		.cfi_offset 6, -12
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 1164 0002 85B0     		sub	sp, sp, #20
 1165              	.LCFI17:
 1166              		.cfi_def_cfa_offset 40
 1167 0004 0192     		str	r2, [sp, #4]
 944:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 1168              		.loc 1 944 5 is_stmt 1 view .LVU360
 1169              	.LVL95:
 945:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 1170              		.loc 1 945 5 view .LVU361
 946:FreeRTOS-Kernel/queue.c **** 
 1171              		.loc 1 946 5 view .LVU362
 948:FreeRTOS-Kernel/queue.c **** 
 1172              		.loc 1 948 87 view .LVU363
 950:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1173              		.loc 1 950 5 view .LVU364
 1174 0006 88B1     		cbz	r0, .L111
 1175 0008 0F46     		mov	r7, r1
 1176 000a 1D46     		mov	r5, r3
 1177 000c 0446     		mov	r4, r0
 950:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1178              		.loc 1 950 28 discriminator 2 view .LVU365
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1179              		.loc 1 951 5 discriminator 2 view .LVU366
 1180 000e B1B1     		cbz	r1, .L112
 1181              	.LVL96:
 1182              	.L90:
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1183              		.loc 1 951 100 discriminator 8 view .LVU367
 952:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1184              		.loc 1 952 5 discriminator 8 view .LVU368
 1185 0010 022D     		cmp	r5, #2
 1186 0012 20D1     		bne	.L92
 952:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1187              		.loc 1 952 5 is_stmt 0 discriminator 2 view .LVU369
 1188 0014 E36B     		ldr	r3, [r4, #60]
 1189 0016 012B     		cmp	r3, #1
 1190 0018 1DD0     		beq	.L92
ARM GAS  /tmp/ccnrBCYQ.s 			page 78


 952:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1191              		.loc 1 952 5 is_stmt 1 view .LVU370
 1192              	.LBB142:
 1193              	.LBI142:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1194              		.loc 2 213 30 view .LVU371
 1195              	.LBB143:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1196              		.loc 2 215 5 view .LVU372
 1197              		.loc 2 217 5 view .LVU373
 1198              		.syntax unified
 1199              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1200 001a 4FF05003 		   mov r3, #80                                              
 1201 001e 83F31188 	   msr basepri, r3                                         
 1202 0022 BFF36F8F 	   isb                                                     
 1203 0026 BFF34F8F 	   dsb                                                     
 1204              	
 1205              	@ 0 "" 2
 1206              	.LVL97:
 1207              		.thumb
 1208              		.syntax unified
 1209              	.L93:
 1210              		.loc 2 217 5 is_stmt 0 view .LVU374
 1211              	.LBE143:
 1212              	.LBE142:
 952:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1213              		.loc 1 952 5 is_stmt 1 discriminator 3 view .LVU375
 952:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1214              		.loc 1 952 5 discriminator 3 view .LVU376
 1215 002a FEE7     		b	.L93
 1216              	.LVL98:
 1217              	.L111:
 950:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1218              		.loc 1 950 5 view .LVU377
 1219              	.LBB144:
 1220              	.LBI144:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1221              		.loc 2 213 30 view .LVU378
 1222              	.LBB145:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1223              		.loc 2 215 5 view .LVU379
 1224              		.loc 2 217 5 view .LVU380
 1225              		.syntax unified
 1226              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1227 002c 4FF05003 		   mov r3, #80                                              
 1228 0030 83F31188 	   msr basepri, r3                                         
 1229 0034 BFF36F8F 	   isb                                                     
 1230 0038 BFF34F8F 	   dsb                                                     
 1231              	
 1232              	@ 0 "" 2
 1233              	.LVL99:
 1234              		.thumb
 1235              		.syntax unified
 1236              	.L89:
 1237              		.loc 2 217 5 is_stmt 0 view .LVU381
 1238              	.LBE145:
 1239              	.LBE144:
ARM GAS  /tmp/ccnrBCYQ.s 			page 79


 950:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1240              		.loc 1 950 5 is_stmt 1 discriminator 1 view .LVU382
 950:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1241              		.loc 1 950 5 discriminator 1 view .LVU383
 1242 003c FEE7     		b	.L89
 1243              	.LVL100:
 1244              	.L112:
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1245              		.loc 1 951 5 is_stmt 0 discriminator 2 view .LVU384
 1246 003e 036C     		ldr	r3, [r0, #64]
 1247              	.LVL101:
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1248              		.loc 1 951 5 discriminator 2 view .LVU385
 1249 0040 002B     		cmp	r3, #0
 1250 0042 E5D0     		beq	.L90
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1251              		.loc 1 951 5 is_stmt 1 view .LVU386
 1252              	.LBB146:
 1253              	.LBI146:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1254              		.loc 2 213 30 view .LVU387
 1255              	.LBB147:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1256              		.loc 2 215 5 view .LVU388
 1257              		.loc 2 217 5 view .LVU389
 1258              		.syntax unified
 1259              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1260 0044 4FF05003 		   mov r3, #80                                              
 1261 0048 83F31188 	   msr basepri, r3                                         
 1262 004c BFF36F8F 	   isb                                                     
 1263 0050 BFF34F8F 	   dsb                                                     
 1264              	
 1265              	@ 0 "" 2
 1266              	.LVL102:
 1267              		.thumb
 1268              		.syntax unified
 1269              	.L91:
 1270              		.loc 2 217 5 is_stmt 0 view .LVU390
 1271              	.LBE147:
 1272              	.LBE146:
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1273              		.loc 1 951 5 is_stmt 1 discriminator 2 view .LVU391
 951:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1274              		.loc 1 951 5 discriminator 2 view .LVU392
 1275 0054 FEE7     		b	.L91
 1276              	.L92:
 952:FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1277              		.loc 1 952 91 discriminator 8 view .LVU393
 955:FreeRTOS-Kernel/queue.c ****     }
 1278              		.loc 1 955 9 discriminator 8 view .LVU394
 1279 0056 FFF7FEFF 		bl	xTaskGetSchedulerState
 1280              	.LVL103:
 955:FreeRTOS-Kernel/queue.c ****     }
 1281              		.loc 1 955 9 is_stmt 0 discriminator 8 view .LVU395
 1282 005a 0646     		mov	r6, r0
 1283 005c 58B9     		cbnz	r0, .L109
 955:FreeRTOS-Kernel/queue.c ****     }
ARM GAS  /tmp/ccnrBCYQ.s 			page 80


 1284              		.loc 1 955 9 discriminator 2 view .LVU396
 1285 005e 019B     		ldr	r3, [sp, #4]
 1286 0060 002B     		cmp	r3, #0
 1287 0062 48D0     		beq	.L96
 955:FreeRTOS-Kernel/queue.c ****     }
 1288              		.loc 1 955 9 is_stmt 1 view .LVU397
 1289              	.LBB148:
 1290              	.LBI148:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1291              		.loc 2 213 30 view .LVU398
 1292              	.LBB149:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1293              		.loc 2 215 5 view .LVU399
 1294              		.loc 2 217 5 view .LVU400
 1295              		.syntax unified
 1296              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1297 0064 4FF05003 		   mov r3, #80                                              
 1298 0068 83F31188 	   msr basepri, r3                                         
 1299 006c BFF36F8F 	   isb                                                     
 1300 0070 BFF34F8F 	   dsb                                                     
 1301              	
 1302              	@ 0 "" 2
 1303              	.LVL104:
 1304              		.thumb
 1305              		.syntax unified
 1306              	.L95:
 1307              		.loc 2 217 5 is_stmt 0 view .LVU401
 1308              	.LBE149:
 1309              	.LBE148:
 955:FreeRTOS-Kernel/queue.c ****     }
 1310              		.loc 1 955 9 is_stmt 1 discriminator 4 view .LVU402
 955:FreeRTOS-Kernel/queue.c ****     }
 1311              		.loc 1 955 9 discriminator 4 view .LVU403
 1312 0074 FEE7     		b	.L95
 1313              	.L109:
 1314 0076 0026     		movs	r6, #0
 1315 0078 3DE0     		b	.L96
 1316              	.LVL105:
 1317              	.L97:
 969:FreeRTOS-Kernel/queue.c **** 
 1318              		.loc 1 969 43 view .LVU404
1033:FreeRTOS-Kernel/queue.c **** 
 1319              		.loc 1 1033 21 view .LVU405
1033:FreeRTOS-Kernel/queue.c **** 
 1320              		.loc 1 1033 38 is_stmt 0 view .LVU406
 1321 007a 2A46     		mov	r2, r5
 1322 007c 3946     		mov	r1, r7
 1323 007e 2046     		mov	r0, r4
 1324 0080 FFF7FEFF 		bl	prvCopyDataToQueue
 1325              	.LVL106:
1037:FreeRTOS-Kernel/queue.c ****                     {
 1326              		.loc 1 1037 21 is_stmt 1 view .LVU407
1037:FreeRTOS-Kernel/queue.c ****                     {
 1327              		.loc 1 1037 25 is_stmt 0 view .LVU408
 1328 0084 636A     		ldr	r3, [r4, #36]
1037:FreeRTOS-Kernel/queue.c ****                     {
 1329              		.loc 1 1037 23 view .LVU409
ARM GAS  /tmp/ccnrBCYQ.s 			page 81


 1330 0086 7BB9     		cbnz	r3, .L113
1052:FreeRTOS-Kernel/queue.c ****                     {
 1331              		.loc 1 1052 26 is_stmt 1 view .LVU410
1052:FreeRTOS-Kernel/queue.c ****                     {
 1332              		.loc 1 1052 28 is_stmt 0 view .LVU411
 1333 0088 48B1     		cbz	r0, .L100
1058:FreeRTOS-Kernel/queue.c ****                     }
 1334              		.loc 1 1058 25 is_stmt 1 view .LVU412
 1335 008a 4FF0E023 		mov	r3, #-536813568
 1336 008e 4FF08052 		mov	r2, #268435456
 1337 0092 C3F8042D 		str	r2, [r3, #3332]
1058:FreeRTOS-Kernel/queue.c ****                     }
 1338              		.loc 1 1058 25 view .LVU413
 1339              		.syntax unified
 1340              	@ 1058 "FreeRTOS-Kernel/queue.c" 1
 1341 0096 BFF34F8F 		dsb
 1342              	@ 0 "" 2
1058:FreeRTOS-Kernel/queue.c ****                     }
 1343              		.loc 1 1058 25 view .LVU414
 1344              	@ 1058 "FreeRTOS-Kernel/queue.c" 1
 1345 009a BFF36F8F 		isb
 1346              	@ 0 "" 2
1058:FreeRTOS-Kernel/queue.c ****                     }
 1347              		.loc 1 1058 57 view .LVU415
 1348              	.LVL107:
 1349              		.thumb
 1350              		.syntax unified
 1351              	.L100:
1062:FreeRTOS-Kernel/queue.c ****                     }
 1352              		.loc 1 1062 49 view .LVU416
1067:FreeRTOS-Kernel/queue.c **** 
 1353              		.loc 1 1067 17 view .LVU417
 1354 009e FFF7FEFF 		bl	vPortExitCritical
 1355              	.LVL108:
1069:FreeRTOS-Kernel/queue.c **** 
 1356              		.loc 1 1069 56 view .LVU418
1071:FreeRTOS-Kernel/queue.c ****             }
 1357              		.loc 1 1071 17 view .LVU419
1071:FreeRTOS-Kernel/queue.c ****             }
 1358              		.loc 1 1071 24 is_stmt 0 view .LVU420
 1359 00a2 0120     		movs	r0, #1
 1360              	.LVL109:
 1361              	.L87:
1154:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 1362              		.loc 1 1154 1 view .LVU421
 1363 00a4 05B0     		add	sp, sp, #20
 1364              	.LCFI18:
 1365              		.cfi_remember_state
 1366              		.cfi_def_cfa_offset 20
 1367              		@ sp needed
 1368 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 1369              	.LVL110:
 1370              	.L113:
 1371              	.LCFI19:
 1372              		.cfi_restore_state
1039:FreeRTOS-Kernel/queue.c ****                         {
 1373              		.loc 1 1039 25 is_stmt 1 view .LVU422
ARM GAS  /tmp/ccnrBCYQ.s 			page 82


1039:FreeRTOS-Kernel/queue.c ****                         {
 1374              		.loc 1 1039 29 is_stmt 0 view .LVU423
 1375 00a8 04F12400 		add	r0, r4, #36
 1376              	.LVL111:
1039:FreeRTOS-Kernel/queue.c ****                         {
 1377              		.loc 1 1039 29 view .LVU424
 1378 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1379              	.LVL112:
1039:FreeRTOS-Kernel/queue.c ****                         {
 1380              		.loc 1 1039 27 view .LVU425
 1381 00b0 0028     		cmp	r0, #0
 1382 00b2 F4D0     		beq	.L100
1045:FreeRTOS-Kernel/queue.c ****                         }
 1383              		.loc 1 1045 29 is_stmt 1 view .LVU426
 1384 00b4 4FF0E023 		mov	r3, #-536813568
 1385 00b8 4FF08052 		mov	r2, #268435456
 1386 00bc C3F8042D 		str	r2, [r3, #3332]
1045:FreeRTOS-Kernel/queue.c ****                         }
 1387              		.loc 1 1045 29 view .LVU427
 1388              		.syntax unified
 1389              	@ 1045 "FreeRTOS-Kernel/queue.c" 1
 1390 00c0 BFF34F8F 		dsb
 1391              	@ 0 "" 2
1045:FreeRTOS-Kernel/queue.c ****                         }
 1392              		.loc 1 1045 29 view .LVU428
 1393              	@ 1045 "FreeRTOS-Kernel/queue.c" 1
 1394 00c4 BFF36F8F 		isb
 1395              	@ 0 "" 2
1045:FreeRTOS-Kernel/queue.c ****                         }
 1396              		.loc 1 1045 61 view .LVU429
 1397              		.thumb
 1398              		.syntax unified
 1399 00c8 E9E7     		b	.L100
 1400              	.LVL113:
 1401              	.L114:
1079:FreeRTOS-Kernel/queue.c **** 
 1402              		.loc 1 1079 21 view .LVU430
 1403 00ca FFF7FEFF 		bl	vPortExitCritical
 1404              	.LVL114:
1083:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 1405              		.loc 1 1083 54 view .LVU431
1084:FreeRTOS-Kernel/queue.c **** 
 1406              		.loc 1 1084 67 view .LVU432
1086:FreeRTOS-Kernel/queue.c ****                 }
 1407              		.loc 1 1086 21 view .LVU433
1086:FreeRTOS-Kernel/queue.c ****                 }
 1408              		.loc 1 1086 28 is_stmt 0 view .LVU434
 1409 00ce 0020     		movs	r0, #0
 1410 00d0 E8E7     		b	.L87
 1411              	.L115:
1092:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 1412              		.loc 1 1092 21 is_stmt 1 view .LVU435
 1413 00d2 02A8     		add	r0, sp, #8
 1414 00d4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1415              	.LVL115:
1093:FreeRTOS-Kernel/queue.c ****                 }
 1416              		.loc 1 1093 21 view .LVU436
ARM GAS  /tmp/ccnrBCYQ.s 			page 83


1093:FreeRTOS-Kernel/queue.c ****                 }
 1417              		.loc 1 1093 35 is_stmt 0 view .LVU437
 1418 00d8 0126     		movs	r6, #1
 1419 00da 19E0     		b	.L103
 1420              	.LVL116:
 1421              	.L116:
1108:FreeRTOS-Kernel/queue.c **** 
 1422              		.loc 1 1108 9 is_stmt 1 discriminator 1 view .LVU438
 1423 00dc 0023     		movs	r3, #0
 1424 00de 84F84430 		strb	r3, [r4, #68]
 1425 00e2 21E0     		b	.L104
 1426              	.L117:
1108:FreeRTOS-Kernel/queue.c **** 
 1427              		.loc 1 1108 9 discriminator 4 view .LVU439
 1428 00e4 0023     		movs	r3, #0
 1429 00e6 84F84530 		strb	r3, [r4, #69]
 1430 00ea 23E0     		b	.L105
 1431              	.L107:
1138:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 1432              		.loc 1 1138 17 view .LVU440
 1433 00ec 2046     		mov	r0, r4
 1434 00ee FFF7FEFF 		bl	prvUnlockQueue
 1435              	.LVL117:
1139:FreeRTOS-Kernel/queue.c ****             }
 1436              		.loc 1 1139 17 view .LVU441
1139:FreeRTOS-Kernel/queue.c ****             }
 1437              		.loc 1 1139 26 is_stmt 0 view .LVU442
 1438 00f2 FFF7FEFF 		bl	xTaskResumeAll
 1439              	.LVL118:
 1440              	.L96:
 955:FreeRTOS-Kernel/queue.c ****     }
 1441              		.loc 1 955 110 is_stmt 1 discriminator 8 view .LVU443
 959:FreeRTOS-Kernel/queue.c ****     {
 1442              		.loc 1 959 5 discriminator 8 view .LVU444
 961:FreeRTOS-Kernel/queue.c ****         {
 1443              		.loc 1 961 9 discriminator 8 view .LVU445
 1444 00f6 FFF7FEFF 		bl	vPortEnterCritical
 1445              	.LVL119:
 967:FreeRTOS-Kernel/queue.c ****             {
 1446              		.loc 1 967 13 discriminator 8 view .LVU446
 967:FreeRTOS-Kernel/queue.c ****             {
 1447              		.loc 1 967 26 is_stmt 0 discriminator 8 view .LVU447
 1448 00fa A26B     		ldr	r2, [r4, #56]
 967:FreeRTOS-Kernel/queue.c ****             {
 1449              		.loc 1 967 55 discriminator 8 view .LVU448
 1450 00fc E36B     		ldr	r3, [r4, #60]
 967:FreeRTOS-Kernel/queue.c ****             {
 1451              		.loc 1 967 15 discriminator 8 view .LVU449
 1452 00fe 9A42     		cmp	r2, r3
 1453 0100 BBD3     		bcc	.L97
 967:FreeRTOS-Kernel/queue.c ****             {
 1454              		.loc 1 967 68 discriminator 1 view .LVU450
 1455 0102 022D     		cmp	r5, #2
 1456 0104 B9D0     		beq	.L97
1075:FreeRTOS-Kernel/queue.c ****                 {
 1457              		.loc 1 1075 17 is_stmt 1 view .LVU451
1075:FreeRTOS-Kernel/queue.c ****                 {
ARM GAS  /tmp/ccnrBCYQ.s 			page 84


 1458              		.loc 1 1075 34 is_stmt 0 view .LVU452
 1459 0106 019B     		ldr	r3, [sp, #4]
1075:FreeRTOS-Kernel/queue.c ****                 {
 1460              		.loc 1 1075 19 view .LVU453
 1461 0108 002B     		cmp	r3, #0
 1462 010a DED0     		beq	.L114
1088:FreeRTOS-Kernel/queue.c ****                 {
 1463              		.loc 1 1088 22 is_stmt 1 view .LVU454
1088:FreeRTOS-Kernel/queue.c ****                 {
 1464              		.loc 1 1088 24 is_stmt 0 view .LVU455
 1465 010c 002E     		cmp	r6, #0
 1466 010e E0D0     		beq	.L115
 1467              	.LVL120:
 1468              	.L103:
1098:FreeRTOS-Kernel/queue.c ****                 }
 1469              		.loc 1 1098 45 is_stmt 1 view .LVU456
1102:FreeRTOS-Kernel/queue.c **** 
 1470              		.loc 1 1102 9 view .LVU457
 1471 0110 FFF7FEFF 		bl	vPortExitCritical
 1472              	.LVL121:
1107:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 1473              		.loc 1 1107 9 view .LVU458
 1474 0114 FFF7FEFF 		bl	vTaskSuspendAll
 1475              	.LVL122:
1108:FreeRTOS-Kernel/queue.c **** 
 1476              		.loc 1 1108 9 view .LVU459
 1477 0118 FFF7FEFF 		bl	vPortEnterCritical
 1478              	.LVL123:
1108:FreeRTOS-Kernel/queue.c **** 
 1479              		.loc 1 1108 9 view .LVU460
 1480 011c 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 1481 0120 52B2     		sxtb	r2, r2
 1482 0122 B2F1FF3F 		cmp	r2, #-1
 1483 0126 D9D0     		beq	.L116
 1484              	.L104:
1108:FreeRTOS-Kernel/queue.c **** 
 1485              		.loc 1 1108 9 discriminator 3 view .LVU461
 1486 0128 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1487 012c 52B2     		sxtb	r2, r2
 1488 012e B2F1FF3F 		cmp	r2, #-1
 1489 0132 D7D0     		beq	.L117
 1490              	.L105:
1108:FreeRTOS-Kernel/queue.c **** 
 1491              		.loc 1 1108 9 discriminator 6 view .LVU462
 1492 0134 FFF7FEFF 		bl	vPortExitCritical
 1493              	.LVL124:
1111:FreeRTOS-Kernel/queue.c ****         {
 1494              		.loc 1 1111 9 discriminator 6 view .LVU463
1111:FreeRTOS-Kernel/queue.c ****         {
 1495              		.loc 1 1111 13 is_stmt 0 discriminator 6 view .LVU464
 1496 0138 01A9     		add	r1, sp, #4
 1497 013a 02A8     		add	r0, sp, #8
 1498 013c FFF7FEFF 		bl	xTaskCheckForTimeOut
 1499              	.LVL125:
1111:FreeRTOS-Kernel/queue.c ****         {
 1500              		.loc 1 1111 11 discriminator 6 view .LVU465
 1501 0140 D8B9     		cbnz	r0, .L106
ARM GAS  /tmp/ccnrBCYQ.s 			page 85


1113:FreeRTOS-Kernel/queue.c ****             {
 1502              		.loc 1 1113 13 is_stmt 1 view .LVU466
1113:FreeRTOS-Kernel/queue.c ****             {
 1503              		.loc 1 1113 17 is_stmt 0 view .LVU467
 1504 0142 2046     		mov	r0, r4
 1505 0144 FFF7FEFF 		bl	prvIsQueueFull
 1506              	.LVL126:
1113:FreeRTOS-Kernel/queue.c ****             {
 1507              		.loc 1 1113 15 view .LVU468
 1508 0148 0028     		cmp	r0, #0
 1509 014a CFD0     		beq	.L107
1115:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1510              		.loc 1 1115 55 is_stmt 1 view .LVU469
1116:FreeRTOS-Kernel/queue.c **** 
 1511              		.loc 1 1116 17 view .LVU470
 1512 014c 0199     		ldr	r1, [sp, #4]
 1513 014e 04F11000 		add	r0, r4, #16
 1514 0152 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1515              	.LVL127:
1123:FreeRTOS-Kernel/queue.c **** 
 1516              		.loc 1 1123 17 view .LVU471
 1517 0156 2046     		mov	r0, r4
 1518 0158 FFF7FEFF 		bl	prvUnlockQueue
 1519              	.LVL128:
1130:FreeRTOS-Kernel/queue.c ****                 {
 1520              		.loc 1 1130 17 view .LVU472
1130:FreeRTOS-Kernel/queue.c ****                 {
 1521              		.loc 1 1130 21 is_stmt 0 view .LVU473
 1522 015c FFF7FEFF 		bl	xTaskResumeAll
 1523              	.LVL129:
1130:FreeRTOS-Kernel/queue.c ****                 {
 1524              		.loc 1 1130 19 view .LVU474
 1525 0160 0028     		cmp	r0, #0
 1526 0162 C8D1     		bne	.L96
1132:FreeRTOS-Kernel/queue.c ****                 }
 1527              		.loc 1 1132 21 is_stmt 1 view .LVU475
 1528 0164 4FF0E023 		mov	r3, #-536813568
 1529 0168 4FF08052 		mov	r2, #268435456
 1530 016c C3F8042D 		str	r2, [r3, #3332]
1132:FreeRTOS-Kernel/queue.c ****                 }
 1531              		.loc 1 1132 21 view .LVU476
 1532              		.syntax unified
 1533              	@ 1132 "FreeRTOS-Kernel/queue.c" 1
 1534 0170 BFF34F8F 		dsb
 1535              	@ 0 "" 2
1132:FreeRTOS-Kernel/queue.c ****                 }
 1536              		.loc 1 1132 21 view .LVU477
 1537              	@ 1132 "FreeRTOS-Kernel/queue.c" 1
 1538 0174 BFF36F8F 		isb
 1539              	@ 0 "" 2
 1540              		.thumb
 1541              		.syntax unified
 1542 0178 BDE7     		b	.L96
 1543              	.L106:
1145:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 1544              		.loc 1 1145 13 view .LVU478
 1545 017a 2046     		mov	r0, r4
ARM GAS  /tmp/ccnrBCYQ.s 			page 86


 1546 017c FFF7FEFF 		bl	prvUnlockQueue
 1547              	.LVL130:
1146:FreeRTOS-Kernel/queue.c **** 
 1548              		.loc 1 1146 13 view .LVU479
1146:FreeRTOS-Kernel/queue.c **** 
 1549              		.loc 1 1146 22 is_stmt 0 view .LVU480
 1550 0180 FFF7FEFF 		bl	xTaskResumeAll
 1551              	.LVL131:
1148:FreeRTOS-Kernel/queue.c ****             traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 1552              		.loc 1 1148 46 is_stmt 1 view .LVU481
1149:FreeRTOS-Kernel/queue.c **** 
 1553              		.loc 1 1149 59 view .LVU482
1151:FreeRTOS-Kernel/queue.c ****         }
 1554              		.loc 1 1151 13 view .LVU483
1151:FreeRTOS-Kernel/queue.c ****         }
 1555              		.loc 1 1151 20 is_stmt 0 view .LVU484
 1556 0184 0020     		movs	r0, #0
 1557 0186 8DE7     		b	.L87
 1558              		.cfi_endproc
 1559              	.LFE14:
 1561              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1562              		.align	1
 1563              		.syntax unified
 1564              		.thumb
 1565              		.thumb_func
 1567              	prvInitialiseMutex:
 1568              	.LVL132:
 1569              	.LFB9:
 615:FreeRTOS-Kernel/queue.c ****         if( pxNewQueue != NULL )
 1570              		.loc 1 615 5 is_stmt 1 view -0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 0
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 616:FreeRTOS-Kernel/queue.c ****         {
 1574              		.loc 1 616 9 view .LVU486
 616:FreeRTOS-Kernel/queue.c ****         {
 1575              		.loc 1 616 11 is_stmt 0 view .LVU487
 1576 0000 48B1     		cbz	r0, .L121
 615:FreeRTOS-Kernel/queue.c ****         if( pxNewQueue != NULL )
 1577              		.loc 1 615 5 view .LVU488
 1578 0002 08B5     		push	{r3, lr}
 1579              	.LCFI20:
 1580              		.cfi_def_cfa_offset 8
 1581              		.cfi_offset 3, -8
 1582              		.cfi_offset 14, -4
 622:FreeRTOS-Kernel/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1583              		.loc 1 622 13 is_stmt 1 view .LVU489
 622:FreeRTOS-Kernel/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1584              		.loc 1 622 51 is_stmt 0 view .LVU490
 1585 0004 0021     		movs	r1, #0
 1586 0006 8160     		str	r1, [r0, #8]
 623:FreeRTOS-Kernel/queue.c **** 
 1587              		.loc 1 623 13 is_stmt 1 view .LVU491
 623:FreeRTOS-Kernel/queue.c **** 
 1588              		.loc 1 623 37 is_stmt 0 view .LVU492
 1589 0008 0160     		str	r1, [r0]
 626:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 87


 1590              		.loc 1 626 13 is_stmt 1 view .LVU493
 626:FreeRTOS-Kernel/queue.c **** 
 1591              		.loc 1 626 59 is_stmt 0 view .LVU494
 1592 000a C160     		str	r1, [r0, #12]
 628:FreeRTOS-Kernel/queue.c **** 
 1593              		.loc 1 628 44 is_stmt 1 view .LVU495
 631:FreeRTOS-Kernel/queue.c ****         }
 1594              		.loc 1 631 13 view .LVU496
 631:FreeRTOS-Kernel/queue.c ****         }
 1595              		.loc 1 631 22 is_stmt 0 view .LVU497
 1596 000c 0B46     		mov	r3, r1
 1597 000e 0A46     		mov	r2, r1
 1598 0010 FFF7FEFF 		bl	xQueueGenericSend
 1599              	.LVL133:
 635:FreeRTOS-Kernel/queue.c ****         }
 1600              		.loc 1 635 39 is_stmt 1 view .LVU498
 637:FreeRTOS-Kernel/queue.c **** 
 1601              		.loc 1 637 5 is_stmt 0 view .LVU499
 1602 0014 08BD     		pop	{r3, pc}
 1603              	.LVL134:
 1604              	.L121:
 1605              	.LCFI21:
 1606              		.cfi_def_cfa_offset 0
 1607              		.cfi_restore 3
 1608              		.cfi_restore 14
 637:FreeRTOS-Kernel/queue.c **** 
 1609              		.loc 1 637 5 view .LVU500
 1610 0016 7047     		bx	lr
 1611              		.cfi_endproc
 1612              	.LFE9:
 1614              		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 1615              		.align	1
 1616              		.global	xQueueCreateMutexStatic
 1617              		.syntax unified
 1618              		.thumb
 1619              		.thumb_func
 1621              	xQueueCreateMutexStatic:
 1622              	.LVL135:
 1623              	.LFB10:
 666:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 1624              		.loc 1 666 5 is_stmt 1 view -0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 666:FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 1628              		.loc 1 666 5 is_stmt 0 view .LVU502
 1629 0000 10B5     		push	{r4, lr}
 1630              	.LCFI22:
 1631              		.cfi_def_cfa_offset 8
 1632              		.cfi_offset 4, -8
 1633              		.cfi_offset 14, -4
 1634 0002 82B0     		sub	sp, sp, #8
 1635              	.LCFI23:
 1636              		.cfi_def_cfa_offset 16
 1637 0004 0B46     		mov	r3, r1
 667:FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1638              		.loc 1 667 9 is_stmt 1 view .LVU503
ARM GAS  /tmp/ccnrBCYQ.s 			page 88


 668:FreeRTOS-Kernel/queue.c **** 
 1639              		.loc 1 668 9 view .LVU504
 1640              	.LVL136:
 670:FreeRTOS-Kernel/queue.c **** 
 1641              		.loc 1 670 73 view .LVU505
 674:FreeRTOS-Kernel/queue.c **** 
 1642              		.loc 1 674 9 view .LVU506
 676:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1643              		.loc 1 676 9 view .LVU507
 676:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1644              		.loc 1 676 21 is_stmt 0 view .LVU508
 1645 0006 0090     		str	r0, [sp]
 1646 0008 0022     		movs	r2, #0
 1647 000a 1146     		mov	r1, r2
 1648              	.LVL137:
 676:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1649              		.loc 1 676 21 view .LVU509
 1650 000c 0120     		movs	r0, #1
 1651              	.LVL138:
 676:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1652              		.loc 1 676 21 view .LVU510
 1653 000e FFF7FEFF 		bl	xQueueGenericCreateStatic
 1654              	.LVL139:
 676:FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1655              		.loc 1 676 21 view .LVU511
 1656 0012 0446     		mov	r4, r0
 1657              	.LVL140:
 677:FreeRTOS-Kernel/queue.c **** 
 1658              		.loc 1 677 9 is_stmt 1 view .LVU512
 1659 0014 FFF7FEFF 		bl	prvInitialiseMutex
 1660              	.LVL141:
 679:FreeRTOS-Kernel/queue.c **** 
 1661              		.loc 1 679 57 view .LVU513
 681:FreeRTOS-Kernel/queue.c ****     }
 1662              		.loc 1 681 9 view .LVU514
 682:FreeRTOS-Kernel/queue.c **** 
 1663              		.loc 1 682 5 is_stmt 0 view .LVU515
 1664 0018 2046     		mov	r0, r4
 1665 001a 02B0     		add	sp, sp, #8
 1666              	.LCFI24:
 1667              		.cfi_def_cfa_offset 8
 1668              		@ sp needed
 1669 001c 10BD     		pop	{r4, pc}
 682:FreeRTOS-Kernel/queue.c **** 
 1670              		.loc 1 682 5 view .LVU516
 1671              		.cfi_endproc
 1672              	.LFE10:
 1674              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1675              		.align	1
 1676              		.global	xQueueGiveMutexRecursive
 1677              		.syntax unified
 1678              		.thumb
 1679              		.thumb_func
 1681              	xQueueGiveMutexRecursive:
 1682              	.LVL142:
 1683              	.LFB11:
 757:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
ARM GAS  /tmp/ccnrBCYQ.s 			page 89


 1684              		.loc 1 757 5 is_stmt 1 view -0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 0
 1687              		@ frame_needed = 0, uses_anonymous_args = 0
 757:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 1688              		.loc 1 757 5 is_stmt 0 view .LVU518
 1689 0000 38B5     		push	{r3, r4, r5, lr}
 1690              	.LCFI25:
 1691              		.cfi_def_cfa_offset 16
 1692              		.cfi_offset 3, -16
 1693              		.cfi_offset 4, -12
 1694              		.cfi_offset 5, -8
 1695              		.cfi_offset 14, -4
 758:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1696              		.loc 1 758 9 is_stmt 1 view .LVU519
 759:FreeRTOS-Kernel/queue.c **** 
 1697              		.loc 1 759 9 view .LVU520
 1698              	.LVL143:
 761:FreeRTOS-Kernel/queue.c **** 
 1699              		.loc 1 761 54 view .LVU521
 763:FreeRTOS-Kernel/queue.c **** 
 1700              		.loc 1 763 9 view .LVU522
 1701 0002 38B1     		cbz	r0, .L133
 1702 0004 0446     		mov	r4, r0
 763:FreeRTOS-Kernel/queue.c **** 
 1703              		.loc 1 763 32 discriminator 2 view .LVU523
 771:FreeRTOS-Kernel/queue.c ****         {
 1704              		.loc 1 771 9 discriminator 2 view .LVU524
 771:FreeRTOS-Kernel/queue.c ****         {
 1705              		.loc 1 771 34 is_stmt 0 discriminator 2 view .LVU525
 1706 0006 8568     		ldr	r5, [r0, #8]
 771:FreeRTOS-Kernel/queue.c ****         {
 1707              		.loc 1 771 51 discriminator 2 view .LVU526
 1708 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1709              	.LVL144:
 771:FreeRTOS-Kernel/queue.c ****         {
 1710              		.loc 1 771 11 discriminator 2 view .LVU527
 1711 000c 8542     		cmp	r5, r0
 1712 000e 0AD0     		beq	.L134
 800:FreeRTOS-Kernel/queue.c **** 
 1713              		.loc 1 800 21 view .LVU528
 1714 0010 0020     		movs	r0, #0
 1715              	.L126:
 808:FreeRTOS-Kernel/queue.c **** 
 1716              		.loc 1 808 5 view .LVU529
 1717 0012 38BD     		pop	{r3, r4, r5, pc}
 1718              	.LVL145:
 1719              	.L133:
 763:FreeRTOS-Kernel/queue.c **** 
 1720              		.loc 1 763 9 is_stmt 1 view .LVU530
 1721              	.LBB150:
 1722              	.LBI150:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1723              		.loc 2 213 30 view .LVU531
 1724              	.LBB151:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1725              		.loc 2 215 5 view .LVU532
ARM GAS  /tmp/ccnrBCYQ.s 			page 90


 1726              		.loc 2 217 5 view .LVU533
 1727              		.syntax unified
 1728              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1729 0014 4FF05003 		   mov r3, #80                                              
 1730 0018 83F31188 	   msr basepri, r3                                         
 1731 001c BFF36F8F 	   isb                                                     
 1732 0020 BFF34F8F 	   dsb                                                     
 1733              	
 1734              	@ 0 "" 2
 1735              	.LVL146:
 1736              		.thumb
 1737              		.syntax unified
 1738              	.L128:
 1739              		.loc 2 217 5 is_stmt 0 view .LVU534
 1740              	.LBE151:
 1741              	.LBE150:
 763:FreeRTOS-Kernel/queue.c **** 
 1742              		.loc 1 763 9 is_stmt 1 discriminator 1 view .LVU535
 763:FreeRTOS-Kernel/queue.c **** 
 1743              		.loc 1 763 9 discriminator 1 view .LVU536
 1744 0024 FEE7     		b	.L128
 1745              	.LVL147:
 1746              	.L134:
 773:FreeRTOS-Kernel/queue.c **** 
 1747              		.loc 1 773 49 view .LVU537
 780:FreeRTOS-Kernel/queue.c **** 
 1748              		.loc 1 780 13 view .LVU538
 780:FreeRTOS-Kernel/queue.c **** 
 1749              		.loc 1 780 36 is_stmt 0 view .LVU539
 1750 0026 E368     		ldr	r3, [r4, #12]
 780:FreeRTOS-Kernel/queue.c **** 
 1751              		.loc 1 780 59 view .LVU540
 1752 0028 013B     		subs	r3, r3, #1
 1753 002a E360     		str	r3, [r4, #12]
 783:FreeRTOS-Kernel/queue.c ****             {
 1754              		.loc 1 783 13 is_stmt 1 view .LVU541
 783:FreeRTOS-Kernel/queue.c ****             {
 1755              		.loc 1 783 15 is_stmt 0 view .LVU542
 1756 002c 0BB1     		cbz	r3, .L135
 794:FreeRTOS-Kernel/queue.c ****         }
 1757              		.loc 1 794 21 view .LVU543
 1758 002e 0120     		movs	r0, #1
 1759              	.LVL148:
 802:FreeRTOS-Kernel/queue.c ****         }
 1760              		.loc 1 802 56 is_stmt 1 view .LVU544
 805:FreeRTOS-Kernel/queue.c **** 
 1761              		.loc 1 805 56 view .LVU545
 807:FreeRTOS-Kernel/queue.c ****     }
 1762              		.loc 1 807 9 view .LVU546
 807:FreeRTOS-Kernel/queue.c ****     }
 1763              		.loc 1 807 16 is_stmt 0 view .LVU547
 1764 0030 EFE7     		b	.L126
 1765              	.LVL149:
 1766              	.L135:
 787:FreeRTOS-Kernel/queue.c ****             }
 1767              		.loc 1 787 17 is_stmt 1 view .LVU548
 787:FreeRTOS-Kernel/queue.c ****             }
ARM GAS  /tmp/ccnrBCYQ.s 			page 91


 1768              		.loc 1 787 26 is_stmt 0 view .LVU549
 1769 0032 1A46     		mov	r2, r3
 1770 0034 1946     		mov	r1, r3
 1771 0036 2046     		mov	r0, r4
 1772 0038 FFF7FEFF 		bl	xQueueGenericSend
 1773              	.LVL150:
 794:FreeRTOS-Kernel/queue.c ****         }
 1774              		.loc 1 794 21 view .LVU550
 1775 003c 0120     		movs	r0, #1
 1776 003e E8E7     		b	.L126
 1777              		.cfi_endproc
 1778              	.LFE11:
 1780              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1781              		.align	1
 1782              		.global	xQueueGenericSendFromISR
 1783              		.syntax unified
 1784              		.thumb
 1785              		.thumb_func
 1787              	xQueueGenericSendFromISR:
 1788              	.LVL151:
 1789              	.LFB15:
1161:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 1790              		.loc 1 1161 1 is_stmt 1 view -0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
1161:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 1794              		.loc 1 1161 1 is_stmt 0 view .LVU552
 1795 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1796              	.LCFI26:
 1797              		.cfi_def_cfa_offset 32
 1798              		.cfi_offset 3, -32
 1799              		.cfi_offset 4, -28
 1800              		.cfi_offset 5, -24
 1801              		.cfi_offset 6, -20
 1802              		.cfi_offset 7, -16
 1803              		.cfi_offset 8, -12
 1804              		.cfi_offset 9, -8
 1805              		.cfi_offset 14, -4
1162:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 1806              		.loc 1 1162 5 is_stmt 1 view .LVU553
1163:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 1807              		.loc 1 1163 5 view .LVU554
1164:FreeRTOS-Kernel/queue.c **** 
 1808              		.loc 1 1164 5 view .LVU555
 1809              	.LVL152:
1166:FreeRTOS-Kernel/queue.c **** 
 1810              		.loc 1 1166 107 view .LVU556
1168:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1811              		.loc 1 1168 5 view .LVU557
 1812 0004 90B1     		cbz	r0, .L154
 1813 0006 0F46     		mov	r7, r1
 1814 0008 1646     		mov	r6, r2
 1815 000a 1C46     		mov	r4, r3
 1816 000c 0546     		mov	r5, r0
1168:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1817              		.loc 1 1168 28 discriminator 2 view .LVU558
ARM GAS  /tmp/ccnrBCYQ.s 			page 92


1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1818              		.loc 1 1169 5 discriminator 2 view .LVU559
 1819 000e B1B1     		cbz	r1, .L155
 1820              	.LVL153:
 1821              	.L139:
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1822              		.loc 1 1169 100 discriminator 8 view .LVU560
1170:FreeRTOS-Kernel/queue.c **** 
 1823              		.loc 1 1170 5 discriminator 8 view .LVU561
 1824 0010 022C     		cmp	r4, #2
 1825 0012 20D1     		bne	.L141
1170:FreeRTOS-Kernel/queue.c **** 
 1826              		.loc 1 1170 5 is_stmt 0 discriminator 2 view .LVU562
 1827 0014 EB6B     		ldr	r3, [r5, #60]
 1828 0016 012B     		cmp	r3, #1
 1829 0018 1DD0     		beq	.L141
1170:FreeRTOS-Kernel/queue.c **** 
 1830              		.loc 1 1170 5 is_stmt 1 view .LVU563
 1831              	.LBB152:
 1832              	.LBI152:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1833              		.loc 2 213 30 view .LVU564
 1834              	.LBB153:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1835              		.loc 2 215 5 view .LVU565
 1836              		.loc 2 217 5 view .LVU566
 1837              		.syntax unified
 1838              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1839 001a 4FF05003 		   mov r3, #80                                              
 1840 001e 83F31188 	   msr basepri, r3                                         
 1841 0022 BFF36F8F 	   isb                                                     
 1842 0026 BFF34F8F 	   dsb                                                     
 1843              	
 1844              	@ 0 "" 2
 1845              	.LVL154:
 1846              		.thumb
 1847              		.syntax unified
 1848              	.L142:
 1849              		.loc 2 217 5 is_stmt 0 view .LVU567
 1850              	.LBE153:
 1851              	.LBE152:
1170:FreeRTOS-Kernel/queue.c **** 
 1852              		.loc 1 1170 5 is_stmt 1 discriminator 3 view .LVU568
1170:FreeRTOS-Kernel/queue.c **** 
 1853              		.loc 1 1170 5 discriminator 3 view .LVU569
 1854 002a FEE7     		b	.L142
 1855              	.LVL155:
 1856              	.L154:
1168:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1857              		.loc 1 1168 5 view .LVU570
 1858              	.LBB154:
 1859              	.LBI154:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1860              		.loc 2 213 30 view .LVU571
 1861              	.LBB155:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1862              		.loc 2 215 5 view .LVU572
ARM GAS  /tmp/ccnrBCYQ.s 			page 93


 1863              		.loc 2 217 5 view .LVU573
 1864              		.syntax unified
 1865              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1866 002c 4FF05003 		   mov r3, #80                                              
 1867 0030 83F31188 	   msr basepri, r3                                         
 1868 0034 BFF36F8F 	   isb                                                     
 1869 0038 BFF34F8F 	   dsb                                                     
 1870              	
 1871              	@ 0 "" 2
 1872              	.LVL156:
 1873              		.thumb
 1874              		.syntax unified
 1875              	.L138:
 1876              		.loc 2 217 5 is_stmt 0 view .LVU574
 1877              	.LBE155:
 1878              	.LBE154:
1168:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1879              		.loc 1 1168 5 is_stmt 1 discriminator 1 view .LVU575
1168:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1880              		.loc 1 1168 5 discriminator 1 view .LVU576
 1881 003c FEE7     		b	.L138
 1882              	.LVL157:
 1883              	.L155:
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1884              		.loc 1 1169 5 is_stmt 0 discriminator 2 view .LVU577
 1885 003e 036C     		ldr	r3, [r0, #64]
 1886              	.LVL158:
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1887              		.loc 1 1169 5 discriminator 2 view .LVU578
 1888 0040 002B     		cmp	r3, #0
 1889 0042 E5D0     		beq	.L139
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1890              		.loc 1 1169 5 is_stmt 1 view .LVU579
 1891              	.LBB156:
 1892              	.LBI156:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 1893              		.loc 2 213 30 view .LVU580
 1894              	.LBB157:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 1895              		.loc 2 215 5 view .LVU581
 1896              		.loc 2 217 5 view .LVU582
 1897              		.syntax unified
 1898              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1899 0044 4FF05003 		   mov r3, #80                                              
 1900 0048 83F31188 	   msr basepri, r3                                         
 1901 004c BFF36F8F 	   isb                                                     
 1902 0050 BFF34F8F 	   dsb                                                     
 1903              	
 1904              	@ 0 "" 2
 1905              	.LVL159:
 1906              		.thumb
 1907              		.syntax unified
 1908              	.L140:
 1909              		.loc 2 217 5 is_stmt 0 view .LVU583
 1910              	.LBE157:
 1911              	.LBE156:
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
ARM GAS  /tmp/ccnrBCYQ.s 			page 94


 1912              		.loc 1 1169 5 is_stmt 1 discriminator 2 view .LVU584
1169:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1913              		.loc 1 1169 5 discriminator 2 view .LVU585
 1914 0054 FEE7     		b	.L140
 1915              	.L141:
1170:FreeRTOS-Kernel/queue.c **** 
 1916              		.loc 1 1170 91 discriminator 8 view .LVU586
1186:FreeRTOS-Kernel/queue.c **** 
 1917              		.loc 1 1186 5 discriminator 8 view .LVU587
 1918 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1919              	.LVL160:
1196:FreeRTOS-Kernel/queue.c ****     {
 1920              		.loc 1 1196 5 discriminator 8 view .LVU588
 1921              	.LBB158:
 1922              	.LBI158:
 218:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 219:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %0, %1                                              \n" \
 220:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %0                                         \n" \
 221:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 222:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 223:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 224:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 225:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 226:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1923              		.loc 2 229 34 discriminator 8 view .LVU589
 1924              	.LBB159:
 230:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1925              		.loc 2 231 5 discriminator 8 view .LVU590
 232:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1926              		.loc 2 233 5 discriminator 8 view .LVU591
 1927              		.syntax unified
 1928              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1929 005a EFF31188 		   mrs r8, basepri                                         
 1930 005e 4FF05003 	   mov r3, #80                                              
 1931 0062 83F31188 	   msr basepri, r3                                         
 1932 0066 BFF36F8F 	   isb                                                     
 1933 006a BFF34F8F 	   dsb                                                     
 1934              	
 1935              	@ 0 "" 2
 1936              	.LVL161:
 234:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 235:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mrs %0, basepri                                         \n" \
 236:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   mov %1, %2                                              \n" \
 237:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   msr basepri, %1                                         \n" \
 238:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   isb                                                     \n" \
 239:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         "   dsb                                                     \n" \
 240:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****         : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRI
 241:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     );
 242:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 243:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 244:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****      * warnings. */
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     return ulOriginalBASEPRI;
ARM GAS  /tmp/ccnrBCYQ.s 			page 95


 1937              		.loc 2 245 5 discriminator 8 view .LVU592
 1938              		.loc 2 245 5 is_stmt 0 discriminator 8 view .LVU593
 1939              		.thumb
 1940              		.syntax unified
 1941              	.LBE159:
 1942              	.LBE158:
1198:FreeRTOS-Kernel/queue.c ****         {
 1943              		.loc 1 1198 9 is_stmt 1 discriminator 8 view .LVU594
1198:FreeRTOS-Kernel/queue.c ****         {
 1944              		.loc 1 1198 22 is_stmt 0 discriminator 8 view .LVU595
 1945 006e AA6B     		ldr	r2, [r5, #56]
1198:FreeRTOS-Kernel/queue.c ****         {
 1946              		.loc 1 1198 51 discriminator 8 view .LVU596
 1947 0070 EB6B     		ldr	r3, [r5, #60]
1198:FreeRTOS-Kernel/queue.c ****         {
 1948              		.loc 1 1198 11 discriminator 8 view .LVU597
 1949 0072 9A42     		cmp	r2, r3
 1950 0074 06D3     		bcc	.L143
1198:FreeRTOS-Kernel/queue.c ****         {
 1951              		.loc 1 1198 64 discriminator 1 view .LVU598
 1952 0076 022C     		cmp	r4, #2
 1953 0078 04D0     		beq	.L143
1318:FreeRTOS-Kernel/queue.c ****         }
 1954              		.loc 1 1318 21 view .LVU599
 1955 007a 0020     		movs	r0, #0
 1956              	.L144:
 1957              	.LVL162:
1321:FreeRTOS-Kernel/queue.c **** 
 1958              		.loc 1 1321 5 is_stmt 1 view .LVU600
 1959              	.LBB160:
 1960              	.LBI160:
 246:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 247:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1961              		.loc 2 249 30 view .LVU601
 1962              	.LBB161:
 250:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     __asm volatile
 1963              		.loc 2 251 5 view .LVU602
 1964              		.syntax unified
 1965              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 1966 007c 88F31188 		   msr basepri, r8 
 1967              	@ 0 "" 2
 1968              		.thumb
 1969              		.syntax unified
 1970              	.LBE161:
 1971              	.LBE160:
1323:FreeRTOS-Kernel/queue.c **** 
 1972              		.loc 1 1323 52 view .LVU603
1325:FreeRTOS-Kernel/queue.c **** }
 1973              		.loc 1 1325 5 view .LVU604
1326:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 1974              		.loc 1 1326 1 is_stmt 0 view .LVU605
 1975 0080 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1976              	.LVL163:
 1977              	.L143:
ARM GAS  /tmp/ccnrBCYQ.s 			page 96


 1978              	.LBB162:
1200:FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1979              		.loc 1 1200 13 is_stmt 1 view .LVU606
1200:FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1980              		.loc 1 1200 26 is_stmt 0 view .LVU607
 1981 0084 95F84590 		ldrb	r9, [r5, #69]	@ zero_extendqisi2
 1982 0088 4FFA89F9 		sxtb	r9, r9
 1983              	.LVL164:
1201:FreeRTOS-Kernel/queue.c **** 
 1984              		.loc 1 1201 13 is_stmt 1 view .LVU608
1201:FreeRTOS-Kernel/queue.c **** 
 1985              		.loc 1 1201 31 is_stmt 0 view .LVU609
 1986 008c AB6B     		ldr	r3, [r5, #56]
1203:FreeRTOS-Kernel/queue.c **** 
 1987              		.loc 1 1203 48 is_stmt 1 view .LVU610
1210:FreeRTOS-Kernel/queue.c **** 
 1988              		.loc 1 1210 13 view .LVU611
1210:FreeRTOS-Kernel/queue.c **** 
 1989              		.loc 1 1210 22 is_stmt 0 view .LVU612
 1990 008e 2246     		mov	r2, r4
 1991 0090 3946     		mov	r1, r7
 1992 0092 2846     		mov	r0, r5
 1993 0094 FFF7FEFF 		bl	prvCopyDataToQueue
 1994              	.LVL165:
1214:FreeRTOS-Kernel/queue.c ****             {
 1995              		.loc 1 1214 13 is_stmt 1 view .LVU613
1214:FreeRTOS-Kernel/queue.c ****             {
 1996              		.loc 1 1214 15 is_stmt 0 view .LVU614
 1997 0098 B9F1FF3F 		cmp	r9, #-1
 1998 009c 0CD1     		bne	.L145
1276:FreeRTOS-Kernel/queue.c ****                     {
 1999              		.loc 1 1276 21 is_stmt 1 view .LVU615
1276:FreeRTOS-Kernel/queue.c ****                     {
 2000              		.loc 1 1276 25 is_stmt 0 view .LVU616
 2001 009e 6B6A     		ldr	r3, [r5, #36]
1276:FreeRTOS-Kernel/queue.c ****                     {
 2002              		.loc 1 1276 23 view .LVU617
 2003 00a0 0BB9     		cbnz	r3, .L156
1313:FreeRTOS-Kernel/queue.c ****         }
 2004              		.loc 1 1313 21 view .LVU618
 2005 00a2 0120     		movs	r0, #1
 2006 00a4 EAE7     		b	.L144
 2007              	.L156:
1278:FreeRTOS-Kernel/queue.c ****                         {
 2008              		.loc 1 1278 25 is_stmt 1 view .LVU619
1278:FreeRTOS-Kernel/queue.c ****                         {
 2009              		.loc 1 1278 29 is_stmt 0 view .LVU620
 2010 00a6 05F12400 		add	r0, r5, #36
 2011 00aa FFF7FEFF 		bl	xTaskRemoveFromEventList
 2012              	.LVL166:
1278:FreeRTOS-Kernel/queue.c ****                         {
 2013              		.loc 1 1278 27 view .LVU621
 2014 00ae D0B1     		cbz	r0, .L150
1282:FreeRTOS-Kernel/queue.c ****                             {
 2015              		.loc 1 1282 29 is_stmt 1 view .LVU622
1282:FreeRTOS-Kernel/queue.c ****                             {
 2016              		.loc 1 1282 31 is_stmt 0 view .LVU623
ARM GAS  /tmp/ccnrBCYQ.s 			page 97


 2017 00b0 DEB1     		cbz	r6, .L151
1284:FreeRTOS-Kernel/queue.c ****                             }
 2018              		.loc 1 1284 33 is_stmt 1 view .LVU624
1284:FreeRTOS-Kernel/queue.c ****                             }
 2019              		.loc 1 1284 60 is_stmt 0 view .LVU625
 2020 00b2 0120     		movs	r0, #1
 2021 00b4 3060     		str	r0, [r6]
 2022 00b6 E1E7     		b	.L144
 2023              	.L145:
1310:FreeRTOS-Kernel/queue.c ****             }
 2024              		.loc 1 1310 17 is_stmt 1 view .LVU626
 2025              	.LBB163:
1310:FreeRTOS-Kernel/queue.c ****             }
 2026              		.loc 1 1310 17 view .LVU627
 2027 00b8 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 2028              	.LVL167:
1310:FreeRTOS-Kernel/queue.c ****             }
 2029              		.loc 1 1310 17 view .LVU628
 2030 00bc 8145     		cmp	r9, r0
 2031 00be 16D2     		bcs	.L152
1310:FreeRTOS-Kernel/queue.c ****             }
 2032              		.loc 1 1310 17 discriminator 1 view .LVU629
 2033 00c0 B9F17F0F 		cmp	r9, #127
 2034 00c4 06D0     		beq	.L157
1310:FreeRTOS-Kernel/queue.c ****             }
 2035              		.loc 1 1310 17 discriminator 4 view .LVU630
1310:FreeRTOS-Kernel/queue.c ****             }
 2036              		.loc 1 1310 17 discriminator 4 view .LVU631
 2037 00c6 09F10103 		add	r3, r9, #1
 2038 00ca 5BB2     		sxtb	r3, r3
 2039 00cc 85F84530 		strb	r3, [r5, #69]
 2040              	.LBE163:
1313:FreeRTOS-Kernel/queue.c ****         }
 2041              		.loc 1 1313 21 is_stmt 0 discriminator 4 view .LVU632
 2042 00d0 0120     		movs	r0, #1
 2043              	.LVL168:
1313:FreeRTOS-Kernel/queue.c ****         }
 2044              		.loc 1 1313 21 discriminator 4 view .LVU633
 2045 00d2 D3E7     		b	.L144
 2046              	.LVL169:
 2047              	.L157:
 2048              	.LBB166:
1310:FreeRTOS-Kernel/queue.c ****             }
 2049              		.loc 1 1310 17 is_stmt 1 view .LVU634
 2050              	.LBB164:
 2051              	.LBI164:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2052              		.loc 2 213 30 view .LVU635
 2053              	.LBB165:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2054              		.loc 2 215 5 view .LVU636
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2055              		.loc 2 217 5 view .LVU637
 2056              		.syntax unified
 2057              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2058 00d4 4FF05003 		   mov r3, #80                                              
 2059 00d8 83F31188 	   msr basepri, r3                                         
ARM GAS  /tmp/ccnrBCYQ.s 			page 98


 2060 00dc BFF36F8F 	   isb                                                     
 2061 00e0 BFF34F8F 	   dsb                                                     
 2062              	
 2063              	@ 0 "" 2
 2064              	.LVL170:
 2065              		.thumb
 2066              		.syntax unified
 2067              	.L147:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2068              		.loc 2 217 5 is_stmt 0 view .LVU638
 2069              	.LBE165:
 2070              	.LBE164:
1310:FreeRTOS-Kernel/queue.c ****             }
 2071              		.loc 1 1310 17 is_stmt 1 discriminator 6 view .LVU639
1310:FreeRTOS-Kernel/queue.c ****             }
 2072              		.loc 1 1310 17 discriminator 6 view .LVU640
 2073 00e4 FEE7     		b	.L147
 2074              	.LVL171:
 2075              	.L150:
1310:FreeRTOS-Kernel/queue.c ****             }
 2076              		.loc 1 1310 17 is_stmt 0 discriminator 6 view .LVU641
 2077              	.LBE166:
1313:FreeRTOS-Kernel/queue.c ****         }
 2078              		.loc 1 1313 21 view .LVU642
 2079 00e6 0120     		movs	r0, #1
 2080 00e8 C8E7     		b	.L144
 2081              	.L151:
 2082 00ea 0120     		movs	r0, #1
 2083 00ec C6E7     		b	.L144
 2084              	.LVL172:
 2085              	.L152:
1313:FreeRTOS-Kernel/queue.c ****         }
 2086              		.loc 1 1313 21 view .LVU643
 2087 00ee 0120     		movs	r0, #1
 2088              	.LVL173:
1313:FreeRTOS-Kernel/queue.c ****         }
 2089              		.loc 1 1313 21 view .LVU644
 2090 00f0 C4E7     		b	.L144
 2091              	.LBE162:
 2092              		.cfi_endproc
 2093              	.LFE15:
 2095              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 2096              		.align	1
 2097              		.global	xQueueGiveFromISR
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2102              	xQueueGiveFromISR:
 2103              	.LVL174:
 2104              	.LFB16:
1331:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 2105              		.loc 1 1331 1 is_stmt 1 view -0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
1331:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 2109              		.loc 1 1331 1 is_stmt 0 view .LVU646
ARM GAS  /tmp/ccnrBCYQ.s 			page 99


 2110 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2111              	.LCFI27:
 2112              		.cfi_def_cfa_offset 24
 2113              		.cfi_offset 3, -24
 2114              		.cfi_offset 4, -20
 2115              		.cfi_offset 5, -16
 2116              		.cfi_offset 6, -12
 2117              		.cfi_offset 7, -8
 2118              		.cfi_offset 14, -4
1332:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 2119              		.loc 1 1332 5 is_stmt 1 view .LVU647
1333:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 2120              		.loc 1 1333 5 view .LVU648
1334:FreeRTOS-Kernel/queue.c **** 
 2121              		.loc 1 1334 5 view .LVU649
 2122              	.LVL175:
1336:FreeRTOS-Kernel/queue.c **** 
 2123              		.loc 1 1336 70 view .LVU650
1344:FreeRTOS-Kernel/queue.c **** 
 2124              		.loc 1 1344 5 view .LVU651
 2125 0002 60B1     		cbz	r0, .L175
 2126 0004 0D46     		mov	r5, r1
 2127 0006 0446     		mov	r4, r0
1344:FreeRTOS-Kernel/queue.c **** 
 2128              		.loc 1 1344 28 discriminator 2 view .LVU652
1348:FreeRTOS-Kernel/queue.c **** 
 2129              		.loc 1 1348 5 discriminator 2 view .LVU653
 2130 0008 036C     		ldr	r3, [r0, #64]
 2131 000a 8BB1     		cbz	r3, .L161
1348:FreeRTOS-Kernel/queue.c **** 
 2132              		.loc 1 1348 5 view .LVU654
 2133              	.LBB167:
 2134              	.LBI167:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2135              		.loc 2 213 30 view .LVU655
 2136              	.LBB168:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2137              		.loc 2 215 5 view .LVU656
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2138              		.loc 2 217 5 view .LVU657
 2139              		.syntax unified
 2140              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2141 000c 4FF05003 		   mov r3, #80                                              
 2142 0010 83F31188 	   msr basepri, r3                                         
 2143 0014 BFF36F8F 	   isb                                                     
 2144 0018 BFF34F8F 	   dsb                                                     
 2145              	
 2146              	@ 0 "" 2
 2147              	.LVL176:
 2148              		.thumb
 2149              		.syntax unified
 2150              	.L162:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2151              		.loc 2 217 5 is_stmt 0 view .LVU658
 2152              	.LBE168:
 2153              	.LBE167:
1348:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 100


 2154              		.loc 1 1348 5 is_stmt 1 discriminator 2 view .LVU659
1348:FreeRTOS-Kernel/queue.c **** 
 2155              		.loc 1 1348 5 discriminator 2 view .LVU660
 2156 001c FEE7     		b	.L162
 2157              	.L175:
1344:FreeRTOS-Kernel/queue.c **** 
 2158              		.loc 1 1344 5 view .LVU661
 2159              	.LBB169:
 2160              	.LBI169:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2161              		.loc 2 213 30 view .LVU662
 2162              	.LBB170:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2163              		.loc 2 215 5 view .LVU663
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2164              		.loc 2 217 5 view .LVU664
 2165              		.syntax unified
 2166              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2167 001e 4FF05003 		   mov r3, #80                                              
 2168 0022 83F31188 	   msr basepri, r3                                         
 2169 0026 BFF36F8F 	   isb                                                     
 2170 002a BFF34F8F 	   dsb                                                     
 2171              	
 2172              	@ 0 "" 2
 2173              	.LVL177:
 2174              		.thumb
 2175              		.syntax unified
 2176              	.L160:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2177              		.loc 2 217 5 is_stmt 0 view .LVU665
 2178              	.LBE170:
 2179              	.LBE169:
1344:FreeRTOS-Kernel/queue.c **** 
 2180              		.loc 1 1344 5 is_stmt 1 discriminator 1 view .LVU666
1344:FreeRTOS-Kernel/queue.c **** 
 2181              		.loc 1 1344 5 discriminator 1 view .LVU667
 2182 002e FEE7     		b	.L160
 2183              	.L161:
1348:FreeRTOS-Kernel/queue.c **** 
 2184              		.loc 1 1348 45 discriminator 2 view .LVU668
1353:FreeRTOS-Kernel/queue.c **** 
 2185              		.loc 1 1353 5 discriminator 2 view .LVU669
 2186 0030 0368     		ldr	r3, [r0]
 2187 0032 DBB1     		cbz	r3, .L176
 2188              	.L163:
1353:FreeRTOS-Kernel/queue.c **** 
 2189              		.loc 1 1353 123 discriminator 8 view .LVU670
1369:FreeRTOS-Kernel/queue.c **** 
 2190              		.loc 1 1369 5 discriminator 8 view .LVU671
 2191 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2192              	.LVL178:
1374:FreeRTOS-Kernel/queue.c ****     {
 2193              		.loc 1 1374 5 discriminator 8 view .LVU672
 2194              	.LBB171:
 2195              	.LBI171:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2196              		.loc 2 229 34 discriminator 8 view .LVU673
ARM GAS  /tmp/ccnrBCYQ.s 			page 101


 2197              	.LBB172:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2198              		.loc 2 231 5 discriminator 8 view .LVU674
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2199              		.loc 2 233 5 discriminator 8 view .LVU675
 2200              		.syntax unified
 2201              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2202 0038 EFF31186 		   mrs r6, basepri                                         
 2203 003c 4FF05003 	   mov r3, #80                                              
 2204 0040 83F31188 	   msr basepri, r3                                         
 2205 0044 BFF36F8F 	   isb                                                     
 2206 0048 BFF34F8F 	   dsb                                                     
 2207              	
 2208              	@ 0 "" 2
 2209              	.LVL179:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 2210              		.loc 2 245 5 discriminator 8 view .LVU676
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 2211              		.loc 2 245 5 is_stmt 0 discriminator 8 view .LVU677
 2212              		.thumb
 2213              		.syntax unified
 2214              	.LBE172:
 2215              	.LBE171:
 2216              	.LBB173:
1376:FreeRTOS-Kernel/queue.c **** 
 2217              		.loc 1 1376 9 is_stmt 1 discriminator 8 view .LVU678
1376:FreeRTOS-Kernel/queue.c **** 
 2218              		.loc 1 1376 27 is_stmt 0 discriminator 8 view .LVU679
 2219 004c A36B     		ldr	r3, [r4, #56]
 2220              	.LVL180:
1381:FreeRTOS-Kernel/queue.c ****         {
 2221              		.loc 1 1381 9 is_stmt 1 discriminator 8 view .LVU680
1381:FreeRTOS-Kernel/queue.c ****         {
 2222              		.loc 1 1381 40 is_stmt 0 discriminator 8 view .LVU681
 2223 004e E26B     		ldr	r2, [r4, #60]
1381:FreeRTOS-Kernel/queue.c ****         {
 2224              		.loc 1 1381 11 discriminator 8 view .LVU682
 2225 0050 9A42     		cmp	r2, r3
 2226 0052 35D9     		bls	.L169
 2227              	.LBB174:
1383:FreeRTOS-Kernel/queue.c **** 
 2228              		.loc 1 1383 13 is_stmt 1 view .LVU683
1383:FreeRTOS-Kernel/queue.c **** 
 2229              		.loc 1 1383 26 is_stmt 0 view .LVU684
 2230 0054 94F84570 		ldrb	r7, [r4, #69]	@ zero_extendqisi2
 2231 0058 7FB2     		sxtb	r7, r7
 2232              	.LVL181:
1385:FreeRTOS-Kernel/queue.c **** 
 2233              		.loc 1 1385 48 is_stmt 1 view .LVU685
1393:FreeRTOS-Kernel/queue.c **** 
 2234              		.loc 1 1393 13 view .LVU686
1393:FreeRTOS-Kernel/queue.c **** 
 2235              		.loc 1 1393 42 is_stmt 0 view .LVU687
 2236 005a 0133     		adds	r3, r3, #1
 2237              	.LVL182:
1393:FreeRTOS-Kernel/queue.c **** 
 2238              		.loc 1 1393 40 view .LVU688
ARM GAS  /tmp/ccnrBCYQ.s 			page 102


 2239 005c A363     		str	r3, [r4, #56]
1397:FreeRTOS-Kernel/queue.c ****             {
 2240              		.loc 1 1397 13 is_stmt 1 view .LVU689
1397:FreeRTOS-Kernel/queue.c ****             {
 2241              		.loc 1 1397 15 is_stmt 0 view .LVU690
 2242 005e B7F1FF3F 		cmp	r7, #-1
 2243 0062 18D1     		bne	.L166
1452:FreeRTOS-Kernel/queue.c ****                     {
 2244              		.loc 1 1452 21 is_stmt 1 view .LVU691
1452:FreeRTOS-Kernel/queue.c ****                     {
 2245              		.loc 1 1452 25 is_stmt 0 view .LVU692
 2246 0064 636A     		ldr	r3, [r4, #36]
 2247              	.LVL183:
1452:FreeRTOS-Kernel/queue.c ****                     {
 2248              		.loc 1 1452 23 view .LVU693
 2249 0066 6BB9     		cbnz	r3, .L177
1486:FreeRTOS-Kernel/queue.c ****         }
 2250              		.loc 1 1486 21 view .LVU694
 2251 0068 0120     		movs	r0, #1
 2252 006a 2AE0     		b	.L165
 2253              	.LVL184:
 2254              	.L176:
1486:FreeRTOS-Kernel/queue.c ****         }
 2255              		.loc 1 1486 21 view .LVU695
 2256              	.LBE174:
 2257              	.LBE173:
1353:FreeRTOS-Kernel/queue.c **** 
 2258              		.loc 1 1353 5 discriminator 2 view .LVU696
 2259 006c 8368     		ldr	r3, [r0, #8]
 2260 006e 002B     		cmp	r3, #0
 2261 0070 E0D0     		beq	.L163
1353:FreeRTOS-Kernel/queue.c **** 
 2262              		.loc 1 1353 5 is_stmt 1 view .LVU697
 2263              	.LBB181:
 2264              	.LBI181:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2265              		.loc 2 213 30 view .LVU698
 2266              	.LBB182:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2267              		.loc 2 215 5 view .LVU699
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2268              		.loc 2 217 5 view .LVU700
 2269              		.syntax unified
 2270              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2271 0072 4FF05003 		   mov r3, #80                                              
 2272 0076 83F31188 	   msr basepri, r3                                         
 2273 007a BFF36F8F 	   isb                                                     
 2274 007e BFF34F8F 	   dsb                                                     
 2275              	
 2276              	@ 0 "" 2
 2277              	.LVL185:
 2278              		.thumb
 2279              		.syntax unified
 2280              	.L164:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2281              		.loc 2 217 5 is_stmt 0 view .LVU701
 2282              	.LBE182:
ARM GAS  /tmp/ccnrBCYQ.s 			page 103


 2283              	.LBE181:
1353:FreeRTOS-Kernel/queue.c **** 
 2284              		.loc 1 1353 5 is_stmt 1 discriminator 3 view .LVU702
1353:FreeRTOS-Kernel/queue.c **** 
 2285              		.loc 1 1353 5 discriminator 3 view .LVU703
 2286 0082 FEE7     		b	.L164
 2287              	.LVL186:
 2288              	.L177:
 2289              	.LBB183:
 2290              	.LBB179:
1454:FreeRTOS-Kernel/queue.c ****                         {
 2291              		.loc 1 1454 25 view .LVU704
1454:FreeRTOS-Kernel/queue.c ****                         {
 2292              		.loc 1 1454 29 is_stmt 0 view .LVU705
 2293 0084 04F12400 		add	r0, r4, #36
 2294 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2295              	.LVL187:
1454:FreeRTOS-Kernel/queue.c ****                         {
 2296              		.loc 1 1454 27 view .LVU706
 2297 008c E0B1     		cbz	r0, .L171
1458:FreeRTOS-Kernel/queue.c ****                             {
 2298              		.loc 1 1458 29 is_stmt 1 view .LVU707
1458:FreeRTOS-Kernel/queue.c ****                             {
 2299              		.loc 1 1458 31 is_stmt 0 view .LVU708
 2300 008e EDB1     		cbz	r5, .L172
1460:FreeRTOS-Kernel/queue.c ****                             }
 2301              		.loc 1 1460 33 is_stmt 1 view .LVU709
1460:FreeRTOS-Kernel/queue.c ****                             }
 2302              		.loc 1 1460 60 is_stmt 0 view .LVU710
 2303 0090 0120     		movs	r0, #1
 2304 0092 2860     		str	r0, [r5]
 2305 0094 15E0     		b	.L165
 2306              	.LVL188:
 2307              	.L166:
1483:FreeRTOS-Kernel/queue.c ****             }
 2308              		.loc 1 1483 17 is_stmt 1 view .LVU711
 2309              	.LBB175:
1483:FreeRTOS-Kernel/queue.c ****             }
 2310              		.loc 1 1483 17 view .LVU712
 2311 0096 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 2312              	.LVL189:
1483:FreeRTOS-Kernel/queue.c ****             }
 2313              		.loc 1 1483 17 view .LVU713
 2314 009a 8742     		cmp	r7, r0
 2315 009c 18D2     		bcs	.L173
1483:FreeRTOS-Kernel/queue.c ****             }
 2316              		.loc 1 1483 17 discriminator 1 view .LVU714
 2317 009e 7F2F     		cmp	r7, #127
 2318 00a0 05D0     		beq	.L178
1483:FreeRTOS-Kernel/queue.c ****             }
 2319              		.loc 1 1483 17 discriminator 4 view .LVU715
1483:FreeRTOS-Kernel/queue.c ****             }
 2320              		.loc 1 1483 17 discriminator 4 view .LVU716
 2321 00a2 7B1C     		adds	r3, r7, #1
 2322 00a4 5BB2     		sxtb	r3, r3
 2323 00a6 84F84530 		strb	r3, [r4, #69]
 2324              	.LBE175:
ARM GAS  /tmp/ccnrBCYQ.s 			page 104


1486:FreeRTOS-Kernel/queue.c ****         }
 2325              		.loc 1 1486 21 is_stmt 0 discriminator 4 view .LVU717
 2326 00aa 0120     		movs	r0, #1
 2327              	.LVL190:
1486:FreeRTOS-Kernel/queue.c ****         }
 2328              		.loc 1 1486 21 discriminator 4 view .LVU718
 2329 00ac 09E0     		b	.L165
 2330              	.LVL191:
 2331              	.L178:
 2332              	.LBB178:
1483:FreeRTOS-Kernel/queue.c ****             }
 2333              		.loc 1 1483 17 is_stmt 1 view .LVU719
 2334              	.LBB176:
 2335              	.LBI176:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2336              		.loc 2 213 30 view .LVU720
 2337              	.LBB177:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2338              		.loc 2 215 5 view .LVU721
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2339              		.loc 2 217 5 view .LVU722
 2340              		.syntax unified
 2341              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2342 00ae 4FF05003 		   mov r3, #80                                              
 2343 00b2 83F31188 	   msr basepri, r3                                         
 2344 00b6 BFF36F8F 	   isb                                                     
 2345 00ba BFF34F8F 	   dsb                                                     
 2346              	
 2347              	@ 0 "" 2
 2348              	.LVL192:
 2349              		.thumb
 2350              		.syntax unified
 2351              	.L168:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2352              		.loc 2 217 5 is_stmt 0 view .LVU723
 2353              	.LBE177:
 2354              	.LBE176:
1483:FreeRTOS-Kernel/queue.c ****             }
 2355              		.loc 1 1483 17 is_stmt 1 discriminator 6 view .LVU724
1483:FreeRTOS-Kernel/queue.c ****             }
 2356              		.loc 1 1483 17 discriminator 6 view .LVU725
 2357 00be FEE7     		b	.L168
 2358              	.LVL193:
 2359              	.L169:
1483:FreeRTOS-Kernel/queue.c ****             }
 2360              		.loc 1 1483 17 is_stmt 0 discriminator 6 view .LVU726
 2361              	.LBE178:
 2362              	.LBE179:
1491:FreeRTOS-Kernel/queue.c ****         }
 2363              		.loc 1 1491 21 view .LVU727
 2364 00c0 0020     		movs	r0, #0
 2365              	.LVL194:
 2366              	.L165:
1491:FreeRTOS-Kernel/queue.c ****         }
 2367              		.loc 1 1491 21 view .LVU728
 2368              	.LBE183:
1494:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 105


 2369              		.loc 1 1494 5 is_stmt 1 view .LVU729
 2370              	.LBB184:
 2371              	.LBI184:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2372              		.loc 2 249 30 view .LVU730
 2373              	.LBB185:
 2374              		.loc 2 251 5 view .LVU731
 2375              		.syntax unified
 2376              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2377 00c2 86F31188 		   msr basepri, r6 
 2378              	@ 0 "" 2
 2379              		.thumb
 2380              		.syntax unified
 2381              	.LBE185:
 2382              	.LBE184:
1496:FreeRTOS-Kernel/queue.c **** 
 2383              		.loc 1 1496 45 view .LVU732
1498:FreeRTOS-Kernel/queue.c **** }
 2384              		.loc 1 1498 5 view .LVU733
1499:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2385              		.loc 1 1499 1 is_stmt 0 view .LVU734
 2386 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2387              	.LVL195:
 2388              	.L171:
 2389              	.LBB186:
 2390              	.LBB180:
1486:FreeRTOS-Kernel/queue.c ****         }
 2391              		.loc 1 1486 21 view .LVU735
 2392 00c8 0120     		movs	r0, #1
 2393 00ca FAE7     		b	.L165
 2394              	.L172:
 2395 00cc 0120     		movs	r0, #1
 2396 00ce F8E7     		b	.L165
 2397              	.LVL196:
 2398              	.L173:
1486:FreeRTOS-Kernel/queue.c ****         }
 2399              		.loc 1 1486 21 view .LVU736
 2400 00d0 0120     		movs	r0, #1
 2401              	.LVL197:
1486:FreeRTOS-Kernel/queue.c ****         }
 2402              		.loc 1 1486 21 view .LVU737
 2403 00d2 F6E7     		b	.L165
 2404              	.LBE180:
 2405              	.LBE186:
 2406              		.cfi_endproc
 2407              	.LFE16:
 2409              		.section	.text.xQueueReceive,"ax",%progbits
 2410              		.align	1
 2411              		.global	xQueueReceive
 2412              		.syntax unified
 2413              		.thumb
 2414              		.thumb_func
 2416              	xQueueReceive:
 2417              	.LVL198:
 2418              	.LFB17:
1505:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2419              		.loc 1 1505 1 is_stmt 1 view -0
ARM GAS  /tmp/ccnrBCYQ.s 			page 106


 2420              		.cfi_startproc
 2421              		@ args = 0, pretend = 0, frame = 16
 2422              		@ frame_needed = 0, uses_anonymous_args = 0
1505:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2423              		.loc 1 1505 1 is_stmt 0 view .LVU739
 2424 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2425              	.LCFI28:
 2426              		.cfi_def_cfa_offset 20
 2427              		.cfi_offset 4, -20
 2428              		.cfi_offset 5, -16
 2429              		.cfi_offset 6, -12
 2430              		.cfi_offset 7, -8
 2431              		.cfi_offset 14, -4
 2432 0002 85B0     		sub	sp, sp, #20
 2433              	.LCFI29:
 2434              		.cfi_def_cfa_offset 40
 2435 0004 0192     		str	r2, [sp, #4]
1506:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 2436              		.loc 1 1506 5 is_stmt 1 view .LVU740
 2437              	.LVL199:
1507:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 2438              		.loc 1 1507 5 view .LVU741
1508:FreeRTOS-Kernel/queue.c **** 
 2439              		.loc 1 1508 5 view .LVU742
1510:FreeRTOS-Kernel/queue.c **** 
 2440              		.loc 1 1510 63 view .LVU743
1513:FreeRTOS-Kernel/queue.c **** 
 2441              		.loc 1 1513 5 view .LVU744
 2442 0006 90B1     		cbz	r0, .L199
 2443 0008 0F46     		mov	r7, r1
 2444 000a 0446     		mov	r4, r0
1513:FreeRTOS-Kernel/queue.c **** 
 2445              		.loc 1 1513 32 discriminator 2 view .LVU745
1517:FreeRTOS-Kernel/queue.c **** 
 2446              		.loc 1 1517 5 discriminator 2 view .LVU746
 2447 000c C1B1     		cbz	r1, .L200
 2448              	.L182:
1517:FreeRTOS-Kernel/queue.c **** 
 2449              		.loc 1 1517 103 discriminator 8 view .LVU747
1522:FreeRTOS-Kernel/queue.c ****     }
 2450              		.loc 1 1522 9 discriminator 8 view .LVU748
 2451 000e FFF7FEFF 		bl	xTaskGetSchedulerState
 2452              	.LVL200:
1522:FreeRTOS-Kernel/queue.c ****     }
 2453              		.loc 1 1522 9 is_stmt 0 discriminator 8 view .LVU749
 2454 0012 0646     		mov	r6, r0
 2455 0014 00BB     		cbnz	r0, .L197
1522:FreeRTOS-Kernel/queue.c ****     }
 2456              		.loc 1 1522 9 discriminator 2 view .LVU750
 2457 0016 019B     		ldr	r3, [sp, #4]
 2458 0018 002B     		cmp	r3, #0
 2459 001a 5ED0     		beq	.L186
1522:FreeRTOS-Kernel/queue.c ****     }
 2460              		.loc 1 1522 9 is_stmt 1 view .LVU751
 2461              	.LBB187:
 2462              	.LBI187:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /tmp/ccnrBCYQ.s 			page 107


 2463              		.loc 2 213 30 view .LVU752
 2464              	.LBB188:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2465              		.loc 2 215 5 view .LVU753
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2466              		.loc 2 217 5 view .LVU754
 2467              		.syntax unified
 2468              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2469 001c 4FF05003 		   mov r3, #80                                              
 2470 0020 83F31188 	   msr basepri, r3                                         
 2471 0024 BFF36F8F 	   isb                                                     
 2472 0028 BFF34F8F 	   dsb                                                     
 2473              	
 2474              	@ 0 "" 2
 2475              	.LVL201:
 2476              		.thumb
 2477              		.syntax unified
 2478              	.L185:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2479              		.loc 2 217 5 is_stmt 0 view .LVU755
 2480              	.LBE188:
 2481              	.LBE187:
1522:FreeRTOS-Kernel/queue.c ****     }
 2482              		.loc 1 1522 9 is_stmt 1 discriminator 3 view .LVU756
1522:FreeRTOS-Kernel/queue.c ****     }
 2483              		.loc 1 1522 9 discriminator 3 view .LVU757
 2484 002c FEE7     		b	.L185
 2485              	.LVL202:
 2486              	.L199:
1513:FreeRTOS-Kernel/queue.c **** 
 2487              		.loc 1 1513 5 view .LVU758
 2488              	.LBB189:
 2489              	.LBI189:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2490              		.loc 2 213 30 view .LVU759
 2491              	.LBB190:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2492              		.loc 2 215 5 view .LVU760
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2493              		.loc 2 217 5 view .LVU761
 2494              		.syntax unified
 2495              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2496 002e 4FF05003 		   mov r3, #80                                              
 2497 0032 83F31188 	   msr basepri, r3                                         
 2498 0036 BFF36F8F 	   isb                                                     
 2499 003a BFF34F8F 	   dsb                                                     
 2500              	
 2501              	@ 0 "" 2
 2502              	.LVL203:
 2503              		.thumb
 2504              		.syntax unified
 2505              	.L181:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2506              		.loc 2 217 5 is_stmt 0 view .LVU762
 2507              	.LBE190:
 2508              	.LBE189:
1513:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 108


 2509              		.loc 1 1513 5 is_stmt 1 discriminator 1 view .LVU763
1513:FreeRTOS-Kernel/queue.c **** 
 2510              		.loc 1 1513 5 discriminator 1 view .LVU764
 2511 003e FEE7     		b	.L181
 2512              	.L200:
1517:FreeRTOS-Kernel/queue.c **** 
 2513              		.loc 1 1517 5 is_stmt 0 discriminator 2 view .LVU765
 2514 0040 036C     		ldr	r3, [r0, #64]
 2515 0042 002B     		cmp	r3, #0
 2516 0044 E3D0     		beq	.L182
1517:FreeRTOS-Kernel/queue.c **** 
 2517              		.loc 1 1517 5 is_stmt 1 view .LVU766
 2518              	.LBB191:
 2519              	.LBI191:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2520              		.loc 2 213 30 view .LVU767
 2521              	.LBB192:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2522              		.loc 2 215 5 view .LVU768
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2523              		.loc 2 217 5 view .LVU769
 2524              		.syntax unified
 2525              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2526 0046 4FF05003 		   mov r3, #80                                              
 2527 004a 83F31188 	   msr basepri, r3                                         
 2528 004e BFF36F8F 	   isb                                                     
 2529 0052 BFF34F8F 	   dsb                                                     
 2530              	
 2531              	@ 0 "" 2
 2532              	.LVL204:
 2533              		.thumb
 2534              		.syntax unified
 2535              	.L183:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2536              		.loc 2 217 5 is_stmt 0 view .LVU770
 2537              	.LBE192:
 2538              	.LBE191:
1517:FreeRTOS-Kernel/queue.c **** 
 2539              		.loc 1 1517 5 is_stmt 1 discriminator 2 view .LVU771
1517:FreeRTOS-Kernel/queue.c **** 
 2540              		.loc 1 1517 5 discriminator 2 view .LVU772
 2541 0056 FEE7     		b	.L183
 2542              	.LVL205:
 2543              	.L197:
1517:FreeRTOS-Kernel/queue.c **** 
 2544              		.loc 1 1517 5 is_stmt 0 discriminator 2 view .LVU773
 2545 0058 0026     		movs	r6, #0
 2546 005a 3EE0     		b	.L186
 2547              	.LVL206:
 2548              	.L203:
 2549              	.LBB193:
1537:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 2550              		.loc 1 1537 17 is_stmt 1 view .LVU774
 2551 005c 3946     		mov	r1, r7
 2552 005e 2046     		mov	r0, r4
 2553 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 2554              	.LVL207:
ARM GAS  /tmp/ccnrBCYQ.s 			page 109


1538:FreeRTOS-Kernel/queue.c ****                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 
 2555              		.loc 1 1538 46 view .LVU775
1539:FreeRTOS-Kernel/queue.c **** 
 2556              		.loc 1 1539 17 view .LVU776
1539:FreeRTOS-Kernel/queue.c **** 
 2557              		.loc 1 1539 46 is_stmt 0 view .LVU777
 2558 0064 013D     		subs	r5, r5, #1
 2559              	.LVL208:
1539:FreeRTOS-Kernel/queue.c **** 
 2560              		.loc 1 1539 44 view .LVU778
 2561 0066 A563     		str	r5, [r4, #56]
1544:FreeRTOS-Kernel/queue.c ****                 {
 2562              		.loc 1 1544 17 is_stmt 1 view .LVU779
1544:FreeRTOS-Kernel/queue.c ****                 {
 2563              		.loc 1 1544 21 is_stmt 0 view .LVU780
 2564 0068 2369     		ldr	r3, [r4, #16]
1544:FreeRTOS-Kernel/queue.c ****                 {
 2565              		.loc 1 1544 19 view .LVU781
 2566 006a 23B9     		cbnz	r3, .L201
 2567              	.L188:
1557:FreeRTOS-Kernel/queue.c ****                 }
 2568              		.loc 1 1557 45 is_stmt 1 view .LVU782
1560:FreeRTOS-Kernel/queue.c **** 
 2569              		.loc 1 1560 17 view .LVU783
 2570 006c FFF7FEFF 		bl	vPortExitCritical
 2571              	.LVL209:
1562:FreeRTOS-Kernel/queue.c **** 
 2572              		.loc 1 1562 52 view .LVU784
1564:FreeRTOS-Kernel/queue.c ****             }
 2573              		.loc 1 1564 17 view .LVU785
1564:FreeRTOS-Kernel/queue.c ****             }
 2574              		.loc 1 1564 24 is_stmt 0 view .LVU786
 2575 0070 0120     		movs	r0, #1
 2576              	.LVL210:
 2577              	.L179:
1564:FreeRTOS-Kernel/queue.c ****             }
 2578              		.loc 1 1564 24 view .LVU787
 2579              	.LBE193:
1649:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2580              		.loc 1 1649 1 view .LVU788
 2581 0072 05B0     		add	sp, sp, #20
 2582              	.LCFI30:
 2583              		.cfi_remember_state
 2584              		.cfi_def_cfa_offset 20
 2585              		@ sp needed
 2586 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 2587              	.LVL211:
 2588              	.L201:
 2589              	.LCFI31:
 2590              		.cfi_restore_state
 2591              	.LBB194:
1546:FreeRTOS-Kernel/queue.c ****                     {
 2592              		.loc 1 1546 21 is_stmt 1 view .LVU789
1546:FreeRTOS-Kernel/queue.c ****                     {
 2593              		.loc 1 1546 25 is_stmt 0 view .LVU790
 2594 0076 04F11000 		add	r0, r4, #16
 2595 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  /tmp/ccnrBCYQ.s 			page 110


 2596              	.LVL212:
1546:FreeRTOS-Kernel/queue.c ****                     {
 2597              		.loc 1 1546 23 view .LVU791
 2598 007e 0028     		cmp	r0, #0
 2599 0080 F4D0     		beq	.L188
1548:FreeRTOS-Kernel/queue.c ****                     }
 2600              		.loc 1 1548 25 is_stmt 1 view .LVU792
 2601 0082 4FF0E023 		mov	r3, #-536813568
 2602 0086 4FF08052 		mov	r2, #268435456
 2603 008a C3F8042D 		str	r2, [r3, #3332]
1548:FreeRTOS-Kernel/queue.c ****                     }
 2604              		.loc 1 1548 25 view .LVU793
 2605              		.syntax unified
 2606              	@ 1548 "FreeRTOS-Kernel/queue.c" 1
 2607 008e BFF34F8F 		dsb
 2608              	@ 0 "" 2
1548:FreeRTOS-Kernel/queue.c ****                     }
 2609              		.loc 1 1548 25 view .LVU794
 2610              	@ 1548 "FreeRTOS-Kernel/queue.c" 1
 2611 0092 BFF36F8F 		isb
 2612              	@ 0 "" 2
1548:FreeRTOS-Kernel/queue.c ****                     }
 2613              		.loc 1 1548 57 view .LVU795
 2614              		.thumb
 2615              		.syntax unified
 2616 0096 E9E7     		b	.L188
 2617              	.LVL213:
 2618              	.L204:
1572:FreeRTOS-Kernel/queue.c **** 
 2619              		.loc 1 1572 21 view .LVU796
 2620 0098 FFF7FEFF 		bl	vPortExitCritical
 2621              	.LVL214:
1574:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 2622              		.loc 1 1574 57 view .LVU797
1575:FreeRTOS-Kernel/queue.c **** 
 2623              		.loc 1 1575 64 view .LVU798
1577:FreeRTOS-Kernel/queue.c ****                 }
 2624              		.loc 1 1577 21 view .LVU799
1577:FreeRTOS-Kernel/queue.c ****                 }
 2625              		.loc 1 1577 28 is_stmt 0 view .LVU800
 2626 009c 0020     		movs	r0, #0
 2627 009e E8E7     		b	.L179
 2628              	.L205:
1583:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 2629              		.loc 1 1583 21 is_stmt 1 view .LVU801
 2630 00a0 02A8     		add	r0, sp, #8
 2631 00a2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2632              	.LVL215:
1584:FreeRTOS-Kernel/queue.c ****                 }
 2633              		.loc 1 1584 21 view .LVU802
1584:FreeRTOS-Kernel/queue.c ****                 }
 2634              		.loc 1 1584 35 is_stmt 0 view .LVU803
 2635 00a6 0126     		movs	r6, #1
 2636 00a8 21E0     		b	.L191
 2637              	.LVL216:
 2638              	.L206:
1584:FreeRTOS-Kernel/queue.c ****                 }
ARM GAS  /tmp/ccnrBCYQ.s 			page 111


 2639              		.loc 1 1584 35 view .LVU804
 2640              	.LBE194:
1599:FreeRTOS-Kernel/queue.c **** 
 2641              		.loc 1 1599 9 is_stmt 1 discriminator 1 view .LVU805
 2642 00aa 0023     		movs	r3, #0
 2643 00ac 84F84430 		strb	r3, [r4, #68]
 2644 00b0 29E0     		b	.L192
 2645              	.L207:
1599:FreeRTOS-Kernel/queue.c **** 
 2646              		.loc 1 1599 9 discriminator 4 view .LVU806
 2647 00b2 0023     		movs	r3, #0
 2648 00b4 84F84530 		strb	r3, [r4, #69]
 2649 00b8 2BE0     		b	.L193
 2650              	.L195:
1625:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 2651              		.loc 1 1625 17 view .LVU807
 2652 00ba 2046     		mov	r0, r4
 2653 00bc FFF7FEFF 		bl	prvUnlockQueue
 2654              	.LVL217:
1626:FreeRTOS-Kernel/queue.c ****             }
 2655              		.loc 1 1626 17 view .LVU808
1626:FreeRTOS-Kernel/queue.c ****             }
 2656              		.loc 1 1626 26 is_stmt 0 view .LVU809
 2657 00c0 FFF7FEFF 		bl	xTaskResumeAll
 2658              	.LVL218:
 2659 00c4 09E0     		b	.L186
 2660              	.L194:
1633:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 2661              		.loc 1 1633 13 is_stmt 1 view .LVU810
 2662 00c6 2046     		mov	r0, r4
 2663 00c8 FFF7FEFF 		bl	prvUnlockQueue
 2664              	.LVL219:
1634:FreeRTOS-Kernel/queue.c **** 
 2665              		.loc 1 1634 13 view .LVU811
1634:FreeRTOS-Kernel/queue.c **** 
 2666              		.loc 1 1634 22 is_stmt 0 view .LVU812
 2667 00cc FFF7FEFF 		bl	xTaskResumeAll
 2668              	.LVL220:
1636:FreeRTOS-Kernel/queue.c ****             {
 2669              		.loc 1 1636 13 is_stmt 1 view .LVU813
1636:FreeRTOS-Kernel/queue.c ****             {
 2670              		.loc 1 1636 17 is_stmt 0 view .LVU814
 2671 00d0 2046     		mov	r0, r4
 2672 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 2673              	.LVL221:
1636:FreeRTOS-Kernel/queue.c ****             {
 2674              		.loc 1 1636 15 view .LVU815
 2675 00d6 0028     		cmp	r0, #0
 2676 00d8 3FD1     		bne	.L202
 2677              	.LVL222:
 2678              	.L186:
1522:FreeRTOS-Kernel/queue.c ****     }
 2679              		.loc 1 1522 110 is_stmt 1 discriminator 8 view .LVU816
1526:FreeRTOS-Kernel/queue.c ****     {
 2680              		.loc 1 1526 5 discriminator 8 view .LVU817
1528:FreeRTOS-Kernel/queue.c ****         {
 2681              		.loc 1 1528 9 discriminator 8 view .LVU818
ARM GAS  /tmp/ccnrBCYQ.s 			page 112


 2682 00da FFF7FEFF 		bl	vPortEnterCritical
 2683              	.LVL223:
 2684              	.LBB195:
1530:FreeRTOS-Kernel/queue.c **** 
 2685              		.loc 1 1530 13 discriminator 8 view .LVU819
1530:FreeRTOS-Kernel/queue.c **** 
 2686              		.loc 1 1530 31 is_stmt 0 discriminator 8 view .LVU820
 2687 00de A56B     		ldr	r5, [r4, #56]
 2688              	.LVL224:
1534:FreeRTOS-Kernel/queue.c ****             {
 2689              		.loc 1 1534 13 is_stmt 1 discriminator 8 view .LVU821
1534:FreeRTOS-Kernel/queue.c ****             {
 2690              		.loc 1 1534 15 is_stmt 0 discriminator 8 view .LVU822
 2691 00e0 002D     		cmp	r5, #0
 2692 00e2 BBD1     		bne	.L203
1568:FreeRTOS-Kernel/queue.c ****                 {
 2693              		.loc 1 1568 17 is_stmt 1 view .LVU823
1568:FreeRTOS-Kernel/queue.c ****                 {
 2694              		.loc 1 1568 34 is_stmt 0 view .LVU824
 2695 00e4 019B     		ldr	r3, [sp, #4]
1568:FreeRTOS-Kernel/queue.c ****                 {
 2696              		.loc 1 1568 19 view .LVU825
 2697 00e6 002B     		cmp	r3, #0
 2698 00e8 D6D0     		beq	.L204
1579:FreeRTOS-Kernel/queue.c ****                 {
 2699              		.loc 1 1579 22 is_stmt 1 view .LVU826
1579:FreeRTOS-Kernel/queue.c ****                 {
 2700              		.loc 1 1579 24 is_stmt 0 view .LVU827
 2701 00ea 002E     		cmp	r6, #0
 2702 00ec D8D0     		beq	.L205
 2703              	.LVL225:
 2704              	.L191:
1589:FreeRTOS-Kernel/queue.c ****                 }
 2705              		.loc 1 1589 45 is_stmt 1 view .LVU828
 2706              	.LBE195:
1593:FreeRTOS-Kernel/queue.c **** 
 2707              		.loc 1 1593 9 view .LVU829
 2708 00ee FFF7FEFF 		bl	vPortExitCritical
 2709              	.LVL226:
1598:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 2710              		.loc 1 1598 9 view .LVU830
 2711 00f2 FFF7FEFF 		bl	vTaskSuspendAll
 2712              	.LVL227:
1599:FreeRTOS-Kernel/queue.c **** 
 2713              		.loc 1 1599 9 view .LVU831
 2714 00f6 FFF7FEFF 		bl	vPortEnterCritical
 2715              	.LVL228:
1599:FreeRTOS-Kernel/queue.c **** 
 2716              		.loc 1 1599 9 view .LVU832
 2717 00fa 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2718 00fe 5BB2     		sxtb	r3, r3
 2719 0100 B3F1FF3F 		cmp	r3, #-1
 2720 0104 D1D0     		beq	.L206
 2721              	.L192:
1599:FreeRTOS-Kernel/queue.c **** 
 2722              		.loc 1 1599 9 discriminator 3 view .LVU833
 2723 0106 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
ARM GAS  /tmp/ccnrBCYQ.s 			page 113


 2724 010a 5BB2     		sxtb	r3, r3
 2725 010c B3F1FF3F 		cmp	r3, #-1
 2726 0110 CFD0     		beq	.L207
 2727              	.L193:
1599:FreeRTOS-Kernel/queue.c **** 
 2728              		.loc 1 1599 9 discriminator 6 view .LVU834
 2729 0112 FFF7FEFF 		bl	vPortExitCritical
 2730              	.LVL229:
1602:FreeRTOS-Kernel/queue.c ****         {
 2731              		.loc 1 1602 9 discriminator 6 view .LVU835
1602:FreeRTOS-Kernel/queue.c ****         {
 2732              		.loc 1 1602 13 is_stmt 0 discriminator 6 view .LVU836
 2733 0116 01A9     		add	r1, sp, #4
 2734 0118 02A8     		add	r0, sp, #8
 2735 011a FFF7FEFF 		bl	xTaskCheckForTimeOut
 2736              	.LVL230:
1602:FreeRTOS-Kernel/queue.c ****         {
 2737              		.loc 1 1602 11 discriminator 6 view .LVU837
 2738 011e 0028     		cmp	r0, #0
 2739 0120 D1D1     		bne	.L194
1606:FreeRTOS-Kernel/queue.c ****             {
 2740              		.loc 1 1606 13 is_stmt 1 view .LVU838
1606:FreeRTOS-Kernel/queue.c ****             {
 2741              		.loc 1 1606 17 is_stmt 0 view .LVU839
 2742 0122 2046     		mov	r0, r4
 2743 0124 FFF7FEFF 		bl	prvIsQueueEmpty
 2744              	.LVL231:
1606:FreeRTOS-Kernel/queue.c ****             {
 2745              		.loc 1 1606 15 view .LVU840
 2746 0128 0028     		cmp	r0, #0
 2747 012a C6D0     		beq	.L195
1608:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2748              		.loc 1 1608 58 is_stmt 1 view .LVU841
1609:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
 2749              		.loc 1 1609 17 view .LVU842
 2750 012c 0199     		ldr	r1, [sp, #4]
 2751 012e 04F12400 		add	r0, r4, #36
 2752 0132 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2753              	.LVL232:
1610:FreeRTOS-Kernel/queue.c **** 
 2754              		.loc 1 1610 17 view .LVU843
 2755 0136 2046     		mov	r0, r4
 2756 0138 FFF7FEFF 		bl	prvUnlockQueue
 2757              	.LVL233:
1612:FreeRTOS-Kernel/queue.c ****                 {
 2758              		.loc 1 1612 17 view .LVU844
1612:FreeRTOS-Kernel/queue.c ****                 {
 2759              		.loc 1 1612 21 is_stmt 0 view .LVU845
 2760 013c FFF7FEFF 		bl	xTaskResumeAll
 2761              	.LVL234:
1612:FreeRTOS-Kernel/queue.c ****                 {
 2762              		.loc 1 1612 19 view .LVU846
 2763 0140 0028     		cmp	r0, #0
 2764 0142 CAD1     		bne	.L186
1614:FreeRTOS-Kernel/queue.c ****                 }
 2765              		.loc 1 1614 21 is_stmt 1 view .LVU847
 2766 0144 4FF0E023 		mov	r3, #-536813568
ARM GAS  /tmp/ccnrBCYQ.s 			page 114


 2767 0148 4FF08052 		mov	r2, #268435456
 2768 014c C3F8042D 		str	r2, [r3, #3332]
1614:FreeRTOS-Kernel/queue.c ****                 }
 2769              		.loc 1 1614 21 view .LVU848
 2770              		.syntax unified
 2771              	@ 1614 "FreeRTOS-Kernel/queue.c" 1
 2772 0150 BFF34F8F 		dsb
 2773              	@ 0 "" 2
1614:FreeRTOS-Kernel/queue.c ****                 }
 2774              		.loc 1 1614 21 view .LVU849
 2775              	@ 1614 "FreeRTOS-Kernel/queue.c" 1
 2776 0154 BFF36F8F 		isb
 2777              	@ 0 "" 2
1614:FreeRTOS-Kernel/queue.c ****                 }
 2778              		.loc 1 1614 43 view .LVU850
 2779              		.thumb
 2780              		.syntax unified
 2781 0158 BFE7     		b	.L186
 2782              	.L202:
1641:FreeRTOS-Kernel/queue.c ****             }
 2783              		.loc 1 1641 24 is_stmt 0 view .LVU851
 2784 015a 0020     		movs	r0, #0
 2785 015c 89E7     		b	.L179
 2786              		.cfi_endproc
 2787              	.LFE17:
 2789              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2790              		.align	1
 2791              		.global	xQueueSemaphoreTake
 2792              		.syntax unified
 2793              		.thumb
 2794              		.thumb_func
 2796              	xQueueSemaphoreTake:
 2797              	.LVL235:
 2798              	.LFB18:
1654:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2799              		.loc 1 1654 1 is_stmt 1 view -0
 2800              		.cfi_startproc
 2801              		@ args = 0, pretend = 0, frame = 16
 2802              		@ frame_needed = 0, uses_anonymous_args = 0
1654:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2803              		.loc 1 1654 1 is_stmt 0 view .LVU853
 2804 0000 70B5     		push	{r4, r5, r6, lr}
 2805              	.LCFI32:
 2806              		.cfi_def_cfa_offset 16
 2807              		.cfi_offset 4, -16
 2808              		.cfi_offset 5, -12
 2809              		.cfi_offset 6, -8
 2810              		.cfi_offset 14, -4
 2811 0002 84B0     		sub	sp, sp, #16
 2812              	.LCFI33:
 2813              		.cfi_def_cfa_offset 32
 2814 0004 0191     		str	r1, [sp, #4]
1655:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 2815              		.loc 1 1655 5 is_stmt 1 view .LVU854
 2816              	.LVL236:
1656:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 2817              		.loc 1 1656 5 view .LVU855
ARM GAS  /tmp/ccnrBCYQ.s 			page 115


1657:FreeRTOS-Kernel/queue.c **** 
 2818              		.loc 1 1657 5 view .LVU856
1660:FreeRTOS-Kernel/queue.c ****     #endif
 2819              		.loc 1 1660 9 view .LVU857
1663:FreeRTOS-Kernel/queue.c **** 
 2820              		.loc 1 1663 59 view .LVU858
1666:FreeRTOS-Kernel/queue.c **** 
 2821              		.loc 1 1666 5 view .LVU859
 2822 0006 58B1     		cbz	r0, .L232
 2823 0008 0446     		mov	r4, r0
1666:FreeRTOS-Kernel/queue.c **** 
 2824              		.loc 1 1666 32 discriminator 2 view .LVU860
1670:FreeRTOS-Kernel/queue.c **** 
 2825              		.loc 1 1670 5 discriminator 2 view .LVU861
 2826 000a 036C     		ldr	r3, [r0, #64]
 2827 000c 8BB1     		cbz	r3, .L211
1670:FreeRTOS-Kernel/queue.c **** 
 2828              		.loc 1 1670 5 view .LVU862
 2829              	.LBB196:
 2830              	.LBI196:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2831              		.loc 2 213 30 view .LVU863
 2832              	.LBB197:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2833              		.loc 2 215 5 view .LVU864
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2834              		.loc 2 217 5 view .LVU865
 2835              		.syntax unified
 2836              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2837 000e 4FF05003 		   mov r3, #80                                              
 2838 0012 83F31188 	   msr basepri, r3                                         
 2839 0016 BFF36F8F 	   isb                                                     
 2840 001a BFF34F8F 	   dsb                                                     
 2841              	
 2842              	@ 0 "" 2
 2843              	.LVL237:
 2844              		.thumb
 2845              		.syntax unified
 2846              	.L212:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2847              		.loc 2 217 5 is_stmt 0 view .LVU866
 2848              	.LBE197:
 2849              	.LBE196:
1670:FreeRTOS-Kernel/queue.c **** 
 2850              		.loc 1 1670 5 is_stmt 1 discriminator 2 view .LVU867
1670:FreeRTOS-Kernel/queue.c **** 
 2851              		.loc 1 1670 5 discriminator 2 view .LVU868
 2852 001e FEE7     		b	.L212
 2853              	.L232:
1666:FreeRTOS-Kernel/queue.c **** 
 2854              		.loc 1 1666 5 view .LVU869
 2855              	.LBB198:
 2856              	.LBI198:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2857              		.loc 2 213 30 view .LVU870
 2858              	.LBB199:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 116


 2859              		.loc 2 215 5 view .LVU871
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2860              		.loc 2 217 5 view .LVU872
 2861              		.syntax unified
 2862              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2863 0020 4FF05003 		   mov r3, #80                                              
 2864 0024 83F31188 	   msr basepri, r3                                         
 2865 0028 BFF36F8F 	   isb                                                     
 2866 002c BFF34F8F 	   dsb                                                     
 2867              	
 2868              	@ 0 "" 2
 2869              	.LVL238:
 2870              		.thumb
 2871              		.syntax unified
 2872              	.L210:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2873              		.loc 2 217 5 is_stmt 0 view .LVU873
 2874              	.LBE199:
 2875              	.LBE198:
1666:FreeRTOS-Kernel/queue.c **** 
 2876              		.loc 1 1666 5 is_stmt 1 discriminator 1 view .LVU874
1666:FreeRTOS-Kernel/queue.c **** 
 2877              		.loc 1 1666 5 discriminator 1 view .LVU875
 2878 0030 FEE7     		b	.L210
 2879              	.L211:
1670:FreeRTOS-Kernel/queue.c **** 
 2880              		.loc 1 1670 45 discriminator 2 view .LVU876
1675:FreeRTOS-Kernel/queue.c ****     }
 2881              		.loc 1 1675 9 discriminator 2 view .LVU877
 2882 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 2883              	.LVL239:
1675:FreeRTOS-Kernel/queue.c ****     }
 2884              		.loc 1 1675 9 is_stmt 0 discriminator 2 view .LVU878
 2885 0036 0546     		mov	r5, r0
 2886 0038 50B9     		cbnz	r0, .L229
 2887 003a 019B     		ldr	r3, [sp, #4]
 2888 003c 5BB1     		cbz	r3, .L230
1675:FreeRTOS-Kernel/queue.c ****     }
 2889              		.loc 1 1675 9 is_stmt 1 view .LVU879
 2890              	.LBB200:
 2891              	.LBI200:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 2892              		.loc 2 213 30 view .LVU880
 2893              	.LBB201:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 2894              		.loc 2 215 5 view .LVU881
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2895              		.loc 2 217 5 view .LVU882
 2896              		.syntax unified
 2897              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 2898 003e 4FF05003 		   mov r3, #80                                              
 2899 0042 83F31188 	   msr basepri, r3                                         
 2900 0046 BFF36F8F 	   isb                                                     
 2901 004a BFF34F8F 	   dsb                                                     
 2902              	
 2903              	@ 0 "" 2
 2904              	.LVL240:
ARM GAS  /tmp/ccnrBCYQ.s 			page 117


 2905              		.thumb
 2906              		.syntax unified
 2907              	.L214:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 2908              		.loc 2 217 5 is_stmt 0 view .LVU883
 2909              	.LBE201:
 2910              	.LBE200:
1675:FreeRTOS-Kernel/queue.c ****     }
 2911              		.loc 1 1675 9 is_stmt 1 discriminator 3 view .LVU884
1675:FreeRTOS-Kernel/queue.c ****     }
 2912              		.loc 1 1675 9 discriminator 3 view .LVU885
 2913 004e FEE7     		b	.L214
 2914              	.L229:
 2915 0050 0026     		movs	r6, #0
 2916 0052 3546     		mov	r5, r6
 2917 0054 4BE0     		b	.L215
 2918              	.L230:
 2919 0056 0646     		mov	r6, r0
 2920 0058 49E0     		b	.L215
 2921              	.LVL241:
 2922              	.L236:
 2923              	.LBB202:
1691:FreeRTOS-Kernel/queue.c **** 
 2924              		.loc 1 1691 46 view .LVU886
1695:FreeRTOS-Kernel/queue.c **** 
 2925              		.loc 1 1695 17 view .LVU887
1695:FreeRTOS-Kernel/queue.c **** 
 2926              		.loc 1 1695 46 is_stmt 0 view .LVU888
 2927 005a 013B     		subs	r3, r3, #1
 2928              	.LVL242:
1695:FreeRTOS-Kernel/queue.c **** 
 2929              		.loc 1 1695 44 view .LVU889
 2930 005c A363     		str	r3, [r4, #56]
1699:FreeRTOS-Kernel/queue.c ****                     {
 2931              		.loc 1 1699 21 is_stmt 1 view .LVU890
1699:FreeRTOS-Kernel/queue.c ****                     {
 2932              		.loc 1 1699 32 is_stmt 0 view .LVU891
 2933 005e 2368     		ldr	r3, [r4]
 2934              	.LVL243:
1699:FreeRTOS-Kernel/queue.c ****                     {
 2935              		.loc 1 1699 23 view .LVU892
 2936 0060 33B1     		cbz	r3, .L233
 2937              	.LVL244:
 2938              	.L217:
1707:FreeRTOS-Kernel/queue.c ****                     }
 2939              		.loc 1 1707 49 is_stmt 1 view .LVU893
1714:FreeRTOS-Kernel/queue.c ****                 {
 2940              		.loc 1 1714 17 view .LVU894
1714:FreeRTOS-Kernel/queue.c ****                 {
 2941              		.loc 1 1714 21 is_stmt 0 view .LVU895
 2942 0062 2369     		ldr	r3, [r4, #16]
1714:FreeRTOS-Kernel/queue.c ****                 {
 2943              		.loc 1 1714 19 view .LVU896
 2944 0064 43B9     		cbnz	r3, .L234
 2945              	.L218:
1727:FreeRTOS-Kernel/queue.c ****                 }
 2946              		.loc 1 1727 45 is_stmt 1 view .LVU897
ARM GAS  /tmp/ccnrBCYQ.s 			page 118


1730:FreeRTOS-Kernel/queue.c **** 
 2947              		.loc 1 1730 17 view .LVU898
 2948 0066 FFF7FEFF 		bl	vPortExitCritical
 2949              	.LVL245:
1732:FreeRTOS-Kernel/queue.c **** 
 2950              		.loc 1 1732 58 view .LVU899
1734:FreeRTOS-Kernel/queue.c ****             }
 2951              		.loc 1 1734 17 view .LVU900
1734:FreeRTOS-Kernel/queue.c ****             }
 2952              		.loc 1 1734 24 is_stmt 0 view .LVU901
 2953 006a 0120     		movs	r0, #1
 2954              	.L208:
1734:FreeRTOS-Kernel/queue.c ****             }
 2955              		.loc 1 1734 24 view .LVU902
 2956              	.LBE202:
1874:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2957              		.loc 1 1874 1 view .LVU903
 2958 006c 04B0     		add	sp, sp, #16
 2959              	.LCFI34:
 2960              		.cfi_remember_state
 2961              		.cfi_def_cfa_offset 16
 2962              		@ sp needed
 2963 006e 70BD     		pop	{r4, r5, r6, pc}
 2964              	.LVL246:
 2965              	.L233:
 2966              	.LCFI35:
 2967              		.cfi_restore_state
 2968              	.LBB203:
1703:FreeRTOS-Kernel/queue.c ****                     }
 2969              		.loc 1 1703 25 is_stmt 1 view .LVU904
1703:FreeRTOS-Kernel/queue.c ****                     }
 2970              		.loc 1 1703 62 is_stmt 0 view .LVU905
 2971 0070 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2972              	.LVL247:
1703:FreeRTOS-Kernel/queue.c ****                     }
 2973              		.loc 1 1703 60 view .LVU906
 2974 0074 A060     		str	r0, [r4, #8]
 2975 0076 F4E7     		b	.L217
 2976              	.L234:
1716:FreeRTOS-Kernel/queue.c ****                     {
 2977              		.loc 1 1716 21 is_stmt 1 view .LVU907
1716:FreeRTOS-Kernel/queue.c ****                     {
 2978              		.loc 1 1716 25 is_stmt 0 view .LVU908
 2979 0078 04F11000 		add	r0, r4, #16
 2980 007c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2981              	.LVL248:
1716:FreeRTOS-Kernel/queue.c ****                     {
 2982              		.loc 1 1716 23 view .LVU909
 2983 0080 0028     		cmp	r0, #0
 2984 0082 F0D0     		beq	.L218
1718:FreeRTOS-Kernel/queue.c ****                     }
 2985              		.loc 1 1718 25 is_stmt 1 view .LVU910
 2986 0084 4FF0E023 		mov	r3, #-536813568
 2987 0088 4FF08052 		mov	r2, #268435456
 2988 008c C3F8042D 		str	r2, [r3, #3332]
1718:FreeRTOS-Kernel/queue.c ****                     }
 2989              		.loc 1 1718 25 view .LVU911
ARM GAS  /tmp/ccnrBCYQ.s 			page 119


 2990              		.syntax unified
 2991              	@ 1718 "FreeRTOS-Kernel/queue.c" 1
 2992 0090 BFF34F8F 		dsb
 2993              	@ 0 "" 2
1718:FreeRTOS-Kernel/queue.c ****                     }
 2994              		.loc 1 1718 25 view .LVU912
 2995              	@ 1718 "FreeRTOS-Kernel/queue.c" 1
 2996 0094 BFF36F8F 		isb
 2997              	@ 0 "" 2
1718:FreeRTOS-Kernel/queue.c ****                     }
 2998              		.loc 1 1718 57 view .LVU913
 2999              		.thumb
 3000              		.syntax unified
 3001 0098 E5E7     		b	.L218
 3002              	.L237:
1742:FreeRTOS-Kernel/queue.c **** 
 3003              		.loc 1 1742 21 view .LVU914
 3004 009a FFF7FEFF 		bl	vPortExitCritical
 3005              	.LVL249:
1744:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 3006              		.loc 1 1744 57 view .LVU915
1745:FreeRTOS-Kernel/queue.c **** 
 3007              		.loc 1 1745 70 view .LVU916
1747:FreeRTOS-Kernel/queue.c ****                 }
 3008              		.loc 1 1747 21 view .LVU917
1747:FreeRTOS-Kernel/queue.c ****                 }
 3009              		.loc 1 1747 28 is_stmt 0 view .LVU918
 3010 009e 0020     		movs	r0, #0
 3011 00a0 E4E7     		b	.L208
 3012              	.L238:
1753:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 3013              		.loc 1 1753 21 is_stmt 1 view .LVU919
 3014 00a2 02A8     		add	r0, sp, #8
 3015 00a4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3016              	.LVL250:
1754:FreeRTOS-Kernel/queue.c ****                 }
 3017              		.loc 1 1754 21 view .LVU920
1754:FreeRTOS-Kernel/queue.c ****                 }
 3018              		.loc 1 1754 35 is_stmt 0 view .LVU921
 3019 00a8 0125     		movs	r5, #1
 3020 00aa 2AE0     		b	.L221
 3021              	.LVL251:
 3022              	.L239:
1754:FreeRTOS-Kernel/queue.c ****                 }
 3023              		.loc 1 1754 35 view .LVU922
 3024              	.LBE203:
1769:FreeRTOS-Kernel/queue.c **** 
 3025              		.loc 1 1769 9 is_stmt 1 discriminator 1 view .LVU923
 3026 00ac 0023     		movs	r3, #0
 3027 00ae 84F84430 		strb	r3, [r4, #68]
 3028 00b2 32E0     		b	.L222
 3029              	.L240:
1769:FreeRTOS-Kernel/queue.c **** 
 3030              		.loc 1 1769 9 discriminator 4 view .LVU924
 3031 00b4 0023     		movs	r3, #0
 3032 00b6 84F84530 		strb	r3, [r4, #69]
 3033 00ba 34E0     		b	.L223
ARM GAS  /tmp/ccnrBCYQ.s 			page 120


 3034              	.L241:
1786:FreeRTOS-Kernel/queue.c ****                         {
 3035              		.loc 1 1786 25 view .LVU925
 3036 00bc FFF7FEFF 		bl	vPortEnterCritical
 3037              	.LVL252:
1788:FreeRTOS-Kernel/queue.c ****                         }
 3038              		.loc 1 1788 29 view .LVU926
1788:FreeRTOS-Kernel/queue.c ****                         }
 3039              		.loc 1 1788 52 is_stmt 0 view .LVU927
 3040 00c0 A068     		ldr	r0, [r4, #8]
 3041 00c2 FFF7FEFF 		bl	xTaskPriorityInherit
 3042              	.LVL253:
 3043 00c6 0646     		mov	r6, r0
 3044              	.LVL254:
1790:FreeRTOS-Kernel/queue.c ****                     }
 3045              		.loc 1 1790 25 is_stmt 1 view .LVU928
 3046 00c8 FFF7FEFF 		bl	vPortExitCritical
 3047              	.LVL255:
1790:FreeRTOS-Kernel/queue.c ****                     }
 3048              		.loc 1 1790 25 is_stmt 0 view .LVU929
 3049 00cc 3BE0     		b	.L226
 3050              	.L225:
1815:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 3051              		.loc 1 1815 17 is_stmt 1 view .LVU930
 3052 00ce 2046     		mov	r0, r4
 3053 00d0 FFF7FEFF 		bl	prvUnlockQueue
 3054              	.LVL256:
1816:FreeRTOS-Kernel/queue.c ****             }
 3055              		.loc 1 1816 17 view .LVU931
1816:FreeRTOS-Kernel/queue.c ****             }
 3056              		.loc 1 1816 26 is_stmt 0 view .LVU932
 3057 00d4 FFF7FEFF 		bl	xTaskResumeAll
 3058              	.LVL257:
 3059 00d8 09E0     		b	.L215
 3060              	.L224:
1822:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 3061              		.loc 1 1822 13 is_stmt 1 view .LVU933
 3062 00da 2046     		mov	r0, r4
 3063 00dc FFF7FEFF 		bl	prvUnlockQueue
 3064              	.LVL258:
1823:FreeRTOS-Kernel/queue.c **** 
 3065              		.loc 1 1823 13 view .LVU934
1823:FreeRTOS-Kernel/queue.c **** 
 3066              		.loc 1 1823 22 is_stmt 0 view .LVU935
 3067 00e0 FFF7FEFF 		bl	xTaskResumeAll
 3068              	.LVL259:
1829:FreeRTOS-Kernel/queue.c ****             {
 3069              		.loc 1 1829 13 is_stmt 1 view .LVU936
1829:FreeRTOS-Kernel/queue.c ****             {
 3070              		.loc 1 1829 17 is_stmt 0 view .LVU937
 3071 00e4 2046     		mov	r0, r4
 3072 00e6 FFF7FEFF 		bl	prvIsQueueEmpty
 3073              	.LVL260:
1829:FreeRTOS-Kernel/queue.c ****             {
 3074              		.loc 1 1829 15 view .LVU938
 3075 00ea 0028     		cmp	r0, #0
 3076 00ec 42D1     		bne	.L235
ARM GAS  /tmp/ccnrBCYQ.s 			page 121


 3077              	.LVL261:
 3078              	.L215:
1675:FreeRTOS-Kernel/queue.c ****     }
 3079              		.loc 1 1675 110 is_stmt 1 discriminator 8 view .LVU939
1679:FreeRTOS-Kernel/queue.c ****     {
 3080              		.loc 1 1679 5 discriminator 8 view .LVU940
1681:FreeRTOS-Kernel/queue.c ****         {
 3081              		.loc 1 1681 9 discriminator 8 view .LVU941
 3082 00ee FFF7FEFF 		bl	vPortEnterCritical
 3083              	.LVL262:
 3084              	.LBB204:
1685:FreeRTOS-Kernel/queue.c **** 
 3085              		.loc 1 1685 13 discriminator 8 view .LVU942
1685:FreeRTOS-Kernel/queue.c **** 
 3086              		.loc 1 1685 31 is_stmt 0 discriminator 8 view .LVU943
 3087 00f2 A36B     		ldr	r3, [r4, #56]
 3088              	.LVL263:
1689:FreeRTOS-Kernel/queue.c ****             {
 3089              		.loc 1 1689 13 is_stmt 1 discriminator 8 view .LVU944
1689:FreeRTOS-Kernel/queue.c ****             {
 3090              		.loc 1 1689 15 is_stmt 0 discriminator 8 view .LVU945
 3091 00f4 002B     		cmp	r3, #0
 3092 00f6 B0D1     		bne	.L236
1738:FreeRTOS-Kernel/queue.c ****                 {
 3093              		.loc 1 1738 17 is_stmt 1 view .LVU946
1738:FreeRTOS-Kernel/queue.c ****                 {
 3094              		.loc 1 1738 34 is_stmt 0 view .LVU947
 3095 00f8 019B     		ldr	r3, [sp, #4]
 3096              	.LVL264:
1738:FreeRTOS-Kernel/queue.c ****                 {
 3097              		.loc 1 1738 19 view .LVU948
 3098 00fa 002B     		cmp	r3, #0
 3099 00fc CDD0     		beq	.L237
1749:FreeRTOS-Kernel/queue.c ****                 {
 3100              		.loc 1 1749 22 is_stmt 1 view .LVU949
1749:FreeRTOS-Kernel/queue.c ****                 {
 3101              		.loc 1 1749 24 is_stmt 0 view .LVU950
 3102 00fe 002D     		cmp	r5, #0
 3103 0100 CFD0     		beq	.L238
 3104              	.LVL265:
 3105              	.L221:
1759:FreeRTOS-Kernel/queue.c ****                 }
 3106              		.loc 1 1759 45 is_stmt 1 view .LVU951
 3107              	.LBE204:
1763:FreeRTOS-Kernel/queue.c **** 
 3108              		.loc 1 1763 9 view .LVU952
 3109 0102 FFF7FEFF 		bl	vPortExitCritical
 3110              	.LVL266:
1768:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 3111              		.loc 1 1768 9 view .LVU953
 3112 0106 FFF7FEFF 		bl	vTaskSuspendAll
 3113              	.LVL267:
1769:FreeRTOS-Kernel/queue.c **** 
 3114              		.loc 1 1769 9 view .LVU954
 3115 010a FFF7FEFF 		bl	vPortEnterCritical
 3116              	.LVL268:
1769:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 122


 3117              		.loc 1 1769 9 view .LVU955
 3118 010e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3119 0112 5BB2     		sxtb	r3, r3
 3120 0114 B3F1FF3F 		cmp	r3, #-1
 3121 0118 C8D0     		beq	.L239
 3122              	.L222:
1769:FreeRTOS-Kernel/queue.c **** 
 3123              		.loc 1 1769 9 discriminator 3 view .LVU956
 3124 011a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3125 011e 5BB2     		sxtb	r3, r3
 3126 0120 B3F1FF3F 		cmp	r3, #-1
 3127 0124 C6D0     		beq	.L240
 3128              	.L223:
1769:FreeRTOS-Kernel/queue.c **** 
 3129              		.loc 1 1769 9 discriminator 6 view .LVU957
 3130 0126 FFF7FEFF 		bl	vPortExitCritical
 3131              	.LVL269:
1772:FreeRTOS-Kernel/queue.c ****         {
 3132              		.loc 1 1772 9 discriminator 6 view .LVU958
1772:FreeRTOS-Kernel/queue.c ****         {
 3133              		.loc 1 1772 13 is_stmt 0 discriminator 6 view .LVU959
 3134 012a 01A9     		add	r1, sp, #4
 3135 012c 02A8     		add	r0, sp, #8
 3136 012e FFF7FEFF 		bl	xTaskCheckForTimeOut
 3137              	.LVL270:
1772:FreeRTOS-Kernel/queue.c ****         {
 3138              		.loc 1 1772 11 discriminator 6 view .LVU960
 3139 0132 0028     		cmp	r0, #0
 3140 0134 D1D1     		bne	.L224
1778:FreeRTOS-Kernel/queue.c ****             {
 3141              		.loc 1 1778 13 is_stmt 1 view .LVU961
1778:FreeRTOS-Kernel/queue.c ****             {
 3142              		.loc 1 1778 17 is_stmt 0 view .LVU962
 3143 0136 2046     		mov	r0, r4
 3144 0138 FFF7FEFF 		bl	prvIsQueueEmpty
 3145              	.LVL271:
1778:FreeRTOS-Kernel/queue.c ****             {
 3146              		.loc 1 1778 15 view .LVU963
 3147 013c 0028     		cmp	r0, #0
 3148 013e C6D0     		beq	.L225
1780:FreeRTOS-Kernel/queue.c **** 
 3149              		.loc 1 1780 58 is_stmt 1 view .LVU964
1784:FreeRTOS-Kernel/queue.c ****                     {
 3150              		.loc 1 1784 21 view .LVU965
1784:FreeRTOS-Kernel/queue.c ****                     {
 3151              		.loc 1 1784 32 is_stmt 0 view .LVU966
 3152 0140 2368     		ldr	r3, [r4]
1784:FreeRTOS-Kernel/queue.c ****                     {
 3153              		.loc 1 1784 23 view .LVU967
 3154 0142 002B     		cmp	r3, #0
 3155 0144 BAD0     		beq	.L241
 3156              	.L226:
1794:FreeRTOS-Kernel/queue.c ****                     }
 3157              		.loc 1 1794 49 is_stmt 1 view .LVU968
1799:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
 3158              		.loc 1 1799 17 view .LVU969
 3159 0146 0199     		ldr	r1, [sp, #4]
ARM GAS  /tmp/ccnrBCYQ.s 			page 123


 3160 0148 04F12400 		add	r0, r4, #36
 3161 014c FFF7FEFF 		bl	vTaskPlaceOnEventList
 3162              	.LVL272:
1800:FreeRTOS-Kernel/queue.c **** 
 3163              		.loc 1 1800 17 view .LVU970
 3164 0150 2046     		mov	r0, r4
 3165 0152 FFF7FEFF 		bl	prvUnlockQueue
 3166              	.LVL273:
1802:FreeRTOS-Kernel/queue.c ****                 {
 3167              		.loc 1 1802 17 view .LVU971
1802:FreeRTOS-Kernel/queue.c ****                 {
 3168              		.loc 1 1802 21 is_stmt 0 view .LVU972
 3169 0156 FFF7FEFF 		bl	xTaskResumeAll
 3170              	.LVL274:
1802:FreeRTOS-Kernel/queue.c ****                 {
 3171              		.loc 1 1802 19 view .LVU973
 3172 015a 0028     		cmp	r0, #0
 3173 015c C7D1     		bne	.L215
1804:FreeRTOS-Kernel/queue.c ****                 }
 3174              		.loc 1 1804 21 is_stmt 1 view .LVU974
 3175 015e 4FF0E023 		mov	r3, #-536813568
 3176 0162 4FF08052 		mov	r2, #268435456
 3177 0166 C3F8042D 		str	r2, [r3, #3332]
1804:FreeRTOS-Kernel/queue.c ****                 }
 3178              		.loc 1 1804 21 view .LVU975
 3179              		.syntax unified
 3180              	@ 1804 "FreeRTOS-Kernel/queue.c" 1
 3181 016a BFF34F8F 		dsb
 3182              	@ 0 "" 2
1804:FreeRTOS-Kernel/queue.c ****                 }
 3183              		.loc 1 1804 21 view .LVU976
 3184              	@ 1804 "FreeRTOS-Kernel/queue.c" 1
 3185 016e BFF36F8F 		isb
 3186              	@ 0 "" 2
1804:FreeRTOS-Kernel/queue.c ****                 }
 3187              		.loc 1 1804 43 view .LVU977
 3188              		.thumb
 3189              		.syntax unified
 3190 0172 BCE7     		b	.L215
 3191              	.L235:
1836:FreeRTOS-Kernel/queue.c ****                     {
 3192              		.loc 1 1836 21 view .LVU978
1836:FreeRTOS-Kernel/queue.c ****                     {
 3193              		.loc 1 1836 23 is_stmt 0 view .LVU979
 3194 0174 0EB9     		cbnz	r6, .L242
 3195              	.L228:
1863:FreeRTOS-Kernel/queue.c ****                 traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 3196              		.loc 1 1863 53 is_stmt 1 view .LVU980
1864:FreeRTOS-Kernel/queue.c **** 
 3197              		.loc 1 1864 66 view .LVU981
1866:FreeRTOS-Kernel/queue.c ****             }
 3198              		.loc 1 1866 17 view .LVU982
1866:FreeRTOS-Kernel/queue.c ****             }
 3199              		.loc 1 1866 24 is_stmt 0 view .LVU983
 3200 0176 0020     		movs	r0, #0
 3201 0178 78E7     		b	.L208
 3202              	.L242:
ARM GAS  /tmp/ccnrBCYQ.s 			page 124


1838:FreeRTOS-Kernel/queue.c ****                         {
 3203              		.loc 1 1838 25 is_stmt 1 view .LVU984
 3204 017a FFF7FEFF 		bl	vPortEnterCritical
 3205              	.LVL275:
 3206              	.LBB205:
1840:FreeRTOS-Kernel/queue.c **** 
 3207              		.loc 1 1840 29 view .LVU985
1847:FreeRTOS-Kernel/queue.c **** 
 3208              		.loc 1 1847 29 view .LVU986
1847:FreeRTOS-Kernel/queue.c **** 
 3209              		.loc 1 1847 56 is_stmt 0 view .LVU987
 3210 017e 2046     		mov	r0, r4
 3211 0180 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 3212              	.LVL276:
 3213 0184 0146     		mov	r1, r0
 3214              	.LVL277:
1856:FreeRTOS-Kernel/queue.c ****                         }
 3215              		.loc 1 1856 29 is_stmt 1 view .LVU988
 3216 0186 A068     		ldr	r0, [r4, #8]
 3217              	.LVL278:
1856:FreeRTOS-Kernel/queue.c ****                         }
 3218              		.loc 1 1856 29 is_stmt 0 view .LVU989
 3219 0188 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 3220              	.LVL279:
1856:FreeRTOS-Kernel/queue.c ****                         }
 3221              		.loc 1 1856 29 view .LVU990
 3222              	.LBE205:
1858:FreeRTOS-Kernel/queue.c ****                     }
 3223              		.loc 1 1858 25 is_stmt 1 view .LVU991
 3224 018c FFF7FEFF 		bl	vPortExitCritical
 3225              	.LVL280:
 3226 0190 F1E7     		b	.L228
 3227              		.cfi_endproc
 3228              	.LFE18:
 3230              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 3231              		.align	1
 3232              		.global	xQueueTakeMutexRecursive
 3233              		.syntax unified
 3234              		.thumb
 3235              		.thumb_func
 3237              	xQueueTakeMutexRecursive:
 3238              	.LVL281:
 3239              	.LFB12:
 817:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 3240              		.loc 1 817 5 view -0
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 0
 3243              		@ frame_needed = 0, uses_anonymous_args = 0
 818:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 3244              		.loc 1 818 9 view .LVU993
 819:FreeRTOS-Kernel/queue.c **** 
 3245              		.loc 1 819 9 view .LVU994
 821:FreeRTOS-Kernel/queue.c **** 
 3246              		.loc 1 821 68 view .LVU995
 823:FreeRTOS-Kernel/queue.c **** 
 3247              		.loc 1 823 9 view .LVU996
 3248 0000 80B1     		cbz	r0, .L250
ARM GAS  /tmp/ccnrBCYQ.s 			page 125


 817:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 3249              		.loc 1 817 5 is_stmt 0 discriminator 2 view .LVU997
 3250 0002 70B5     		push	{r4, r5, r6, lr}
 3251              	.LCFI36:
 3252              		.cfi_def_cfa_offset 16
 3253              		.cfi_offset 4, -16
 3254              		.cfi_offset 5, -12
 3255              		.cfi_offset 6, -8
 3256              		.cfi_offset 14, -4
 3257 0004 0C46     		mov	r4, r1
 3258 0006 0546     		mov	r5, r0
 823:FreeRTOS-Kernel/queue.c **** 
 3259              		.loc 1 823 32 is_stmt 1 discriminator 2 view .LVU998
 828:FreeRTOS-Kernel/queue.c **** 
 3260              		.loc 1 828 45 discriminator 2 view .LVU999
 830:FreeRTOS-Kernel/queue.c ****         {
 3261              		.loc 1 830 9 discriminator 2 view .LVU1000
 830:FreeRTOS-Kernel/queue.c ****         {
 3262              		.loc 1 830 34 is_stmt 0 discriminator 2 view .LVU1001
 3263 0008 8668     		ldr	r6, [r0, #8]
 830:FreeRTOS-Kernel/queue.c ****         {
 3264              		.loc 1 830 51 discriminator 2 view .LVU1002
 3265 000a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 3266              	.LVL282:
 830:FreeRTOS-Kernel/queue.c ****         {
 3267              		.loc 1 830 11 discriminator 2 view .LVU1003
 3268 000e 8642     		cmp	r6, r0
 3269 0010 11D0     		beq	.L251
 837:FreeRTOS-Kernel/queue.c **** 
 3270              		.loc 1 837 13 is_stmt 1 view .LVU1004
 837:FreeRTOS-Kernel/queue.c **** 
 3271              		.loc 1 837 23 is_stmt 0 view .LVU1005
 3272 0012 2146     		mov	r1, r4
 3273 0014 2846     		mov	r0, r5
 3274 0016 FFF7FEFF 		bl	xQueueSemaphoreTake
 3275              	.LVL283:
 842:FreeRTOS-Kernel/queue.c ****             {
 3276              		.loc 1 842 13 is_stmt 1 view .LVU1006
 842:FreeRTOS-Kernel/queue.c ****             {
 3277              		.loc 1 842 15 is_stmt 0 view .LVU1007
 3278 001a 80B1     		cbz	r0, .L243
 844:FreeRTOS-Kernel/queue.c ****             }
 3279              		.loc 1 844 17 is_stmt 1 view .LVU1008
 844:FreeRTOS-Kernel/queue.c ****             }
 3280              		.loc 1 844 40 is_stmt 0 view .LVU1009
 3281 001c EB68     		ldr	r3, [r5, #12]
 844:FreeRTOS-Kernel/queue.c ****             }
 3282              		.loc 1 844 63 view .LVU1010
 3283 001e 0133     		adds	r3, r3, #1
 3284 0020 EB60     		str	r3, [r5, #12]
 848:FreeRTOS-Kernel/queue.c ****             }
 3285              		.loc 1 848 60 is_stmt 1 view .LVU1011
 852:FreeRTOS-Kernel/queue.c **** 
 3286              		.loc 1 852 56 view .LVU1012
 854:FreeRTOS-Kernel/queue.c ****     }
 3287              		.loc 1 854 9 view .LVU1013
 854:FreeRTOS-Kernel/queue.c ****     }
ARM GAS  /tmp/ccnrBCYQ.s 			page 126


 3288              		.loc 1 854 16 is_stmt 0 view .LVU1014
 3289 0022 0CE0     		b	.L243
 3290              	.LVL284:
 3291              	.L250:
 3292              	.LCFI37:
 3293              		.cfi_def_cfa_offset 0
 3294              		.cfi_restore 4
 3295              		.cfi_restore 5
 3296              		.cfi_restore 6
 3297              		.cfi_restore 14
 823:FreeRTOS-Kernel/queue.c **** 
 3298              		.loc 1 823 9 is_stmt 1 view .LVU1015
 3299              	.LBB206:
 3300              	.LBI206:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3301              		.loc 2 213 30 view .LVU1016
 3302              	.LBB207:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3303              		.loc 2 215 5 view .LVU1017
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3304              		.loc 2 217 5 view .LVU1018
 3305              		.syntax unified
 3306              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3307 0024 4FF05003 		   mov r3, #80                                              
 3308 0028 83F31188 	   msr basepri, r3                                         
 3309 002c BFF36F8F 	   isb                                                     
 3310 0030 BFF34F8F 	   dsb                                                     
 3311              	
 3312              	@ 0 "" 2
 3313              	.LVL285:
 3314              		.thumb
 3315              		.syntax unified
 3316              	.L245:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3317              		.loc 2 217 5 is_stmt 0 view .LVU1019
 3318              	.LBE207:
 3319              	.LBE206:
 823:FreeRTOS-Kernel/queue.c **** 
 3320              		.loc 1 823 9 is_stmt 1 discriminator 1 view .LVU1020
 823:FreeRTOS-Kernel/queue.c **** 
 3321              		.loc 1 823 9 discriminator 1 view .LVU1021
 3322 0034 FEE7     		b	.L245
 3323              	.LVL286:
 3324              	.L251:
 3325              	.LCFI38:
 3326              		.cfi_def_cfa_offset 16
 3327              		.cfi_offset 4, -16
 3328              		.cfi_offset 5, -12
 3329              		.cfi_offset 6, -8
 3330              		.cfi_offset 14, -4
 832:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 3331              		.loc 1 832 13 view .LVU1022
 832:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 3332              		.loc 1 832 36 is_stmt 0 view .LVU1023
 3333 0036 EB68     		ldr	r3, [r5, #12]
 832:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 3334              		.loc 1 832 59 view .LVU1024
ARM GAS  /tmp/ccnrBCYQ.s 			page 127


 3335 0038 0133     		adds	r3, r3, #1
 3336 003a EB60     		str	r3, [r5, #12]
 833:FreeRTOS-Kernel/queue.c ****         }
 3337              		.loc 1 833 13 is_stmt 1 view .LVU1025
 3338              	.LVL287:
 833:FreeRTOS-Kernel/queue.c ****         }
 3339              		.loc 1 833 21 is_stmt 0 view .LVU1026
 3340 003c 0120     		movs	r0, #1
 3341              	.LVL288:
 3342              	.L243:
 855:FreeRTOS-Kernel/queue.c **** 
 3343              		.loc 1 855 5 view .LVU1027
 3344 003e 70BD     		pop	{r4, r5, r6, pc}
 855:FreeRTOS-Kernel/queue.c **** 
 3345              		.loc 1 855 5 view .LVU1028
 3346              		.cfi_endproc
 3347              	.LFE12:
 3349              		.section	.text.xQueuePeek,"ax",%progbits
 3350              		.align	1
 3351              		.global	xQueuePeek
 3352              		.syntax unified
 3353              		.thumb
 3354              		.thumb_func
 3356              	xQueuePeek:
 3357              	.LVL289:
 3358              	.LFB19:
1880:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 3359              		.loc 1 1880 1 is_stmt 1 view -0
 3360              		.cfi_startproc
 3361              		@ args = 0, pretend = 0, frame = 16
 3362              		@ frame_needed = 0, uses_anonymous_args = 0
1880:FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 3363              		.loc 1 1880 1 is_stmt 0 view .LVU1030
 3364 0000 70B5     		push	{r4, r5, r6, lr}
 3365              	.LCFI39:
 3366              		.cfi_def_cfa_offset 16
 3367              		.cfi_offset 4, -16
 3368              		.cfi_offset 5, -12
 3369              		.cfi_offset 6, -8
 3370              		.cfi_offset 14, -4
 3371 0002 84B0     		sub	sp, sp, #16
 3372              	.LCFI40:
 3373              		.cfi_def_cfa_offset 32
 3374 0004 0192     		str	r2, [sp, #4]
1881:FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 3375              		.loc 1 1881 5 is_stmt 1 view .LVU1031
 3376              	.LVL290:
1882:FreeRTOS-Kernel/queue.c ****     int8_t * pcOriginalReadPosition;
 3377              		.loc 1 1882 5 view .LVU1032
1883:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 3378              		.loc 1 1883 5 view .LVU1033
1884:FreeRTOS-Kernel/queue.c **** 
 3379              		.loc 1 1884 5 view .LVU1034
1886:FreeRTOS-Kernel/queue.c **** 
 3380              		.loc 1 1886 60 view .LVU1035
1889:FreeRTOS-Kernel/queue.c **** 
 3381              		.loc 1 1889 5 view .LVU1036
ARM GAS  /tmp/ccnrBCYQ.s 			page 128


 3382 0006 90B1     		cbz	r0, .L272
 3383 0008 0E46     		mov	r6, r1
 3384 000a 0446     		mov	r4, r0
1889:FreeRTOS-Kernel/queue.c **** 
 3385              		.loc 1 1889 32 discriminator 2 view .LVU1037
1893:FreeRTOS-Kernel/queue.c **** 
 3386              		.loc 1 1893 5 discriminator 2 view .LVU1038
 3387 000c C1B1     		cbz	r1, .L273
 3388              	.L255:
1893:FreeRTOS-Kernel/queue.c **** 
 3389              		.loc 1 1893 103 discriminator 8 view .LVU1039
1898:FreeRTOS-Kernel/queue.c ****     }
 3390              		.loc 1 1898 9 discriminator 8 view .LVU1040
 3391 000e FFF7FEFF 		bl	xTaskGetSchedulerState
 3392              	.LVL291:
1898:FreeRTOS-Kernel/queue.c ****     }
 3393              		.loc 1 1898 9 is_stmt 0 discriminator 8 view .LVU1041
 3394 0012 0546     		mov	r5, r0
 3395 0014 00BB     		cbnz	r0, .L270
1898:FreeRTOS-Kernel/queue.c ****     }
 3396              		.loc 1 1898 9 discriminator 2 view .LVU1042
 3397 0016 019B     		ldr	r3, [sp, #4]
 3398 0018 002B     		cmp	r3, #0
 3399 001a 5ED0     		beq	.L259
1898:FreeRTOS-Kernel/queue.c ****     }
 3400              		.loc 1 1898 9 is_stmt 1 view .LVU1043
 3401              	.LBB208:
 3402              	.LBI208:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3403              		.loc 2 213 30 view .LVU1044
 3404              	.LBB209:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3405              		.loc 2 215 5 view .LVU1045
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3406              		.loc 2 217 5 view .LVU1046
 3407              		.syntax unified
 3408              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3409 001c 4FF05003 		   mov r3, #80                                              
 3410 0020 83F31188 	   msr basepri, r3                                         
 3411 0024 BFF36F8F 	   isb                                                     
 3412 0028 BFF34F8F 	   dsb                                                     
 3413              	
 3414              	@ 0 "" 2
 3415              	.LVL292:
 3416              		.thumb
 3417              		.syntax unified
 3418              	.L258:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3419              		.loc 2 217 5 is_stmt 0 view .LVU1047
 3420              	.LBE209:
 3421              	.LBE208:
1898:FreeRTOS-Kernel/queue.c ****     }
 3422              		.loc 1 1898 9 is_stmt 1 discriminator 3 view .LVU1048
1898:FreeRTOS-Kernel/queue.c ****     }
 3423              		.loc 1 1898 9 discriminator 3 view .LVU1049
 3424 002c FEE7     		b	.L258
 3425              	.LVL293:
ARM GAS  /tmp/ccnrBCYQ.s 			page 129


 3426              	.L272:
1889:FreeRTOS-Kernel/queue.c **** 
 3427              		.loc 1 1889 5 view .LVU1050
 3428              	.LBB210:
 3429              	.LBI210:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3430              		.loc 2 213 30 view .LVU1051
 3431              	.LBB211:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3432              		.loc 2 215 5 view .LVU1052
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3433              		.loc 2 217 5 view .LVU1053
 3434              		.syntax unified
 3435              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3436 002e 4FF05003 		   mov r3, #80                                              
 3437 0032 83F31188 	   msr basepri, r3                                         
 3438 0036 BFF36F8F 	   isb                                                     
 3439 003a BFF34F8F 	   dsb                                                     
 3440              	
 3441              	@ 0 "" 2
 3442              	.LVL294:
 3443              		.thumb
 3444              		.syntax unified
 3445              	.L254:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3446              		.loc 2 217 5 is_stmt 0 view .LVU1054
 3447              	.LBE211:
 3448              	.LBE210:
1889:FreeRTOS-Kernel/queue.c **** 
 3449              		.loc 1 1889 5 is_stmt 1 discriminator 1 view .LVU1055
1889:FreeRTOS-Kernel/queue.c **** 
 3450              		.loc 1 1889 5 discriminator 1 view .LVU1056
 3451 003e FEE7     		b	.L254
 3452              	.L273:
1893:FreeRTOS-Kernel/queue.c **** 
 3453              		.loc 1 1893 5 is_stmt 0 discriminator 2 view .LVU1057
 3454 0040 036C     		ldr	r3, [r0, #64]
 3455 0042 002B     		cmp	r3, #0
 3456 0044 E3D0     		beq	.L255
1893:FreeRTOS-Kernel/queue.c **** 
 3457              		.loc 1 1893 5 is_stmt 1 view .LVU1058
 3458              	.LBB212:
 3459              	.LBI212:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3460              		.loc 2 213 30 view .LVU1059
 3461              	.LBB213:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3462              		.loc 2 215 5 view .LVU1060
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3463              		.loc 2 217 5 view .LVU1061
 3464              		.syntax unified
 3465              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3466 0046 4FF05003 		   mov r3, #80                                              
 3467 004a 83F31188 	   msr basepri, r3                                         
 3468 004e BFF36F8F 	   isb                                                     
 3469 0052 BFF34F8F 	   dsb                                                     
 3470              	
ARM GAS  /tmp/ccnrBCYQ.s 			page 130


 3471              	@ 0 "" 2
 3472              	.LVL295:
 3473              		.thumb
 3474              		.syntax unified
 3475              	.L256:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3476              		.loc 2 217 5 is_stmt 0 view .LVU1062
 3477              	.LBE213:
 3478              	.LBE212:
1893:FreeRTOS-Kernel/queue.c **** 
 3479              		.loc 1 1893 5 is_stmt 1 discriminator 2 view .LVU1063
1893:FreeRTOS-Kernel/queue.c **** 
 3480              		.loc 1 1893 5 discriminator 2 view .LVU1064
 3481 0056 FEE7     		b	.L256
 3482              	.LVL296:
 3483              	.L270:
1893:FreeRTOS-Kernel/queue.c **** 
 3484              		.loc 1 1893 5 is_stmt 0 discriminator 2 view .LVU1065
 3485 0058 0025     		movs	r5, #0
 3486 005a 3EE0     		b	.L259
 3487              	.LVL297:
 3488              	.L276:
 3489              	.LBB214:
1915:FreeRTOS-Kernel/queue.c **** 
 3490              		.loc 1 1915 17 is_stmt 1 view .LVU1066
1915:FreeRTOS-Kernel/queue.c **** 
 3491              		.loc 1 1915 40 is_stmt 0 view .LVU1067
 3492 005c E568     		ldr	r5, [r4, #12]
 3493              	.LVL298:
1917:FreeRTOS-Kernel/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 3494              		.loc 1 1917 17 is_stmt 1 view .LVU1068
 3495 005e 3146     		mov	r1, r6
 3496 0060 2046     		mov	r0, r4
 3497 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 3498              	.LVL299:
1918:FreeRTOS-Kernel/queue.c **** 
 3499              		.loc 1 1918 43 view .LVU1069
1921:FreeRTOS-Kernel/queue.c **** 
 3500              		.loc 1 1921 17 view .LVU1070
1921:FreeRTOS-Kernel/queue.c **** 
 3501              		.loc 1 1921 46 is_stmt 0 view .LVU1071
 3502 0066 E560     		str	r5, [r4, #12]
1925:FreeRTOS-Kernel/queue.c ****                 {
 3503              		.loc 1 1925 17 is_stmt 1 view .LVU1072
1925:FreeRTOS-Kernel/queue.c ****                 {
 3504              		.loc 1 1925 21 is_stmt 0 view .LVU1073
 3505 0068 636A     		ldr	r3, [r4, #36]
1925:FreeRTOS-Kernel/queue.c ****                 {
 3506              		.loc 1 1925 19 view .LVU1074
 3507 006a 23B9     		cbnz	r3, .L274
 3508              	.L261:
1939:FreeRTOS-Kernel/queue.c ****                 }
 3509              		.loc 1 1939 45 is_stmt 1 view .LVU1075
1942:FreeRTOS-Kernel/queue.c **** 
 3510              		.loc 1 1942 17 view .LVU1076
 3511 006c FFF7FEFF 		bl	vPortExitCritical
 3512              	.LVL300:
ARM GAS  /tmp/ccnrBCYQ.s 			page 131


1944:FreeRTOS-Kernel/queue.c **** 
 3513              		.loc 1 1944 49 view .LVU1077
1946:FreeRTOS-Kernel/queue.c ****             }
 3514              		.loc 1 1946 17 view .LVU1078
1946:FreeRTOS-Kernel/queue.c ****             }
 3515              		.loc 1 1946 24 is_stmt 0 view .LVU1079
 3516 0070 0120     		movs	r0, #1
 3517              	.LVL301:
 3518              	.L252:
1946:FreeRTOS-Kernel/queue.c ****             }
 3519              		.loc 1 1946 24 view .LVU1080
 3520              	.LBE214:
2032:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 3521              		.loc 1 2032 1 view .LVU1081
 3522 0072 04B0     		add	sp, sp, #16
 3523              	.LCFI41:
 3524              		.cfi_remember_state
 3525              		.cfi_def_cfa_offset 16
 3526              		@ sp needed
 3527 0074 70BD     		pop	{r4, r5, r6, pc}
 3528              	.LVL302:
 3529              	.L274:
 3530              	.LCFI42:
 3531              		.cfi_restore_state
 3532              	.LBB215:
1927:FreeRTOS-Kernel/queue.c ****                     {
 3533              		.loc 1 1927 21 is_stmt 1 view .LVU1082
1927:FreeRTOS-Kernel/queue.c ****                     {
 3534              		.loc 1 1927 25 is_stmt 0 view .LVU1083
 3535 0076 04F12400 		add	r0, r4, #36
 3536 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 3537              	.LVL303:
1927:FreeRTOS-Kernel/queue.c ****                     {
 3538              		.loc 1 1927 23 view .LVU1084
 3539 007e 0028     		cmp	r0, #0
 3540 0080 F4D0     		beq	.L261
1930:FreeRTOS-Kernel/queue.c ****                     }
 3541              		.loc 1 1930 25 is_stmt 1 view .LVU1085
 3542 0082 4FF0E023 		mov	r3, #-536813568
 3543 0086 4FF08052 		mov	r2, #268435456
 3544 008a C3F8042D 		str	r2, [r3, #3332]
1930:FreeRTOS-Kernel/queue.c ****                     }
 3545              		.loc 1 1930 25 view .LVU1086
 3546              		.syntax unified
 3547              	@ 1930 "FreeRTOS-Kernel/queue.c" 1
 3548 008e BFF34F8F 		dsb
 3549              	@ 0 "" 2
1930:FreeRTOS-Kernel/queue.c ****                     }
 3550              		.loc 1 1930 25 view .LVU1087
 3551              	@ 1930 "FreeRTOS-Kernel/queue.c" 1
 3552 0092 BFF36F8F 		isb
 3553              	@ 0 "" 2
1930:FreeRTOS-Kernel/queue.c ****                     }
 3554              		.loc 1 1930 57 view .LVU1088
 3555              		.thumb
 3556              		.syntax unified
 3557 0096 E9E7     		b	.L261
ARM GAS  /tmp/ccnrBCYQ.s 			page 132


 3558              	.LVL304:
 3559              	.L277:
1954:FreeRTOS-Kernel/queue.c **** 
 3560              		.loc 1 1954 21 view .LVU1089
 3561 0098 FFF7FEFF 		bl	vPortExitCritical
 3562              	.LVL305:
1956:FreeRTOS-Kernel/queue.c ****                     traceRETURN_xQueuePeek( errQUEUE_EMPTY );
 3563              		.loc 1 1956 54 view .LVU1090
1957:FreeRTOS-Kernel/queue.c **** 
 3564              		.loc 1 1957 61 view .LVU1091
1959:FreeRTOS-Kernel/queue.c ****                 }
 3565              		.loc 1 1959 21 view .LVU1092
1959:FreeRTOS-Kernel/queue.c ****                 }
 3566              		.loc 1 1959 28 is_stmt 0 view .LVU1093
 3567 009c 0020     		movs	r0, #0
 3568 009e E8E7     		b	.L252
 3569              	.L278:
1966:FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 3570              		.loc 1 1966 21 is_stmt 1 view .LVU1094
 3571 00a0 02A8     		add	r0, sp, #8
 3572 00a2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3573              	.LVL306:
1967:FreeRTOS-Kernel/queue.c ****                 }
 3574              		.loc 1 1967 21 view .LVU1095
1967:FreeRTOS-Kernel/queue.c ****                 }
 3575              		.loc 1 1967 35 is_stmt 0 view .LVU1096
 3576 00a6 0125     		movs	r5, #1
 3577 00a8 21E0     		b	.L264
 3578              	.LVL307:
 3579              	.L279:
1967:FreeRTOS-Kernel/queue.c ****                 }
 3580              		.loc 1 1967 35 view .LVU1097
 3581              	.LBE215:
1982:FreeRTOS-Kernel/queue.c **** 
 3582              		.loc 1 1982 9 is_stmt 1 discriminator 1 view .LVU1098
 3583 00aa 0023     		movs	r3, #0
 3584 00ac 84F84430 		strb	r3, [r4, #68]
 3585 00b0 29E0     		b	.L265
 3586              	.L280:
1982:FreeRTOS-Kernel/queue.c **** 
 3587              		.loc 1 1982 9 discriminator 4 view .LVU1099
 3588 00b2 0023     		movs	r3, #0
 3589 00b4 84F84530 		strb	r3, [r4, #69]
 3590 00b8 2BE0     		b	.L266
 3591              	.L268:
2008:FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 3592              		.loc 1 2008 17 view .LVU1100
 3593 00ba 2046     		mov	r0, r4
 3594 00bc FFF7FEFF 		bl	prvUnlockQueue
 3595              	.LVL308:
2009:FreeRTOS-Kernel/queue.c ****             }
 3596              		.loc 1 2009 17 view .LVU1101
2009:FreeRTOS-Kernel/queue.c ****             }
 3597              		.loc 1 2009 26 is_stmt 0 view .LVU1102
 3598 00c0 FFF7FEFF 		bl	xTaskResumeAll
 3599              	.LVL309:
 3600 00c4 09E0     		b	.L259
ARM GAS  /tmp/ccnrBCYQ.s 			page 133


 3601              	.L267:
2016:FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 3602              		.loc 1 2016 13 is_stmt 1 view .LVU1103
 3603 00c6 2046     		mov	r0, r4
 3604 00c8 FFF7FEFF 		bl	prvUnlockQueue
 3605              	.LVL310:
2017:FreeRTOS-Kernel/queue.c **** 
 3606              		.loc 1 2017 13 view .LVU1104
2017:FreeRTOS-Kernel/queue.c **** 
 3607              		.loc 1 2017 22 is_stmt 0 view .LVU1105
 3608 00cc FFF7FEFF 		bl	xTaskResumeAll
 3609              	.LVL311:
2019:FreeRTOS-Kernel/queue.c ****             {
 3610              		.loc 1 2019 13 is_stmt 1 view .LVU1106
2019:FreeRTOS-Kernel/queue.c ****             {
 3611              		.loc 1 2019 17 is_stmt 0 view .LVU1107
 3612 00d0 2046     		mov	r0, r4
 3613 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 3614              	.LVL312:
2019:FreeRTOS-Kernel/queue.c ****             {
 3615              		.loc 1 2019 15 view .LVU1108
 3616 00d6 0028     		cmp	r0, #0
 3617 00d8 3FD1     		bne	.L275
 3618              	.LVL313:
 3619              	.L259:
1898:FreeRTOS-Kernel/queue.c ****     }
 3620              		.loc 1 1898 110 is_stmt 1 discriminator 8 view .LVU1109
1902:FreeRTOS-Kernel/queue.c ****     {
 3621              		.loc 1 1902 5 discriminator 8 view .LVU1110
1904:FreeRTOS-Kernel/queue.c ****         {
 3622              		.loc 1 1904 9 discriminator 8 view .LVU1111
 3623 00da FFF7FEFF 		bl	vPortEnterCritical
 3624              	.LVL314:
 3625              	.LBB216:
1906:FreeRTOS-Kernel/queue.c **** 
 3626              		.loc 1 1906 13 discriminator 8 view .LVU1112
1906:FreeRTOS-Kernel/queue.c **** 
 3627              		.loc 1 1906 31 is_stmt 0 discriminator 8 view .LVU1113
 3628 00de A36B     		ldr	r3, [r4, #56]
 3629              	.LVL315:
1910:FreeRTOS-Kernel/queue.c ****             {
 3630              		.loc 1 1910 13 is_stmt 1 discriminator 8 view .LVU1114
1910:FreeRTOS-Kernel/queue.c ****             {
 3631              		.loc 1 1910 15 is_stmt 0 discriminator 8 view .LVU1115
 3632 00e0 002B     		cmp	r3, #0
 3633 00e2 BBD1     		bne	.L276
1950:FreeRTOS-Kernel/queue.c ****                 {
 3634              		.loc 1 1950 17 is_stmt 1 view .LVU1116
1950:FreeRTOS-Kernel/queue.c ****                 {
 3635              		.loc 1 1950 34 is_stmt 0 view .LVU1117
 3636 00e4 019B     		ldr	r3, [sp, #4]
 3637              	.LVL316:
1950:FreeRTOS-Kernel/queue.c ****                 {
 3638              		.loc 1 1950 19 view .LVU1118
 3639 00e6 002B     		cmp	r3, #0
 3640 00e8 D6D0     		beq	.L277
1961:FreeRTOS-Kernel/queue.c ****                 {
ARM GAS  /tmp/ccnrBCYQ.s 			page 134


 3641              		.loc 1 1961 22 is_stmt 1 view .LVU1119
1961:FreeRTOS-Kernel/queue.c ****                 {
 3642              		.loc 1 1961 24 is_stmt 0 view .LVU1120
 3643 00ea 002D     		cmp	r5, #0
 3644 00ec D8D0     		beq	.L278
 3645              	.LVL317:
 3646              	.L264:
1972:FreeRTOS-Kernel/queue.c ****                 }
 3647              		.loc 1 1972 45 is_stmt 1 view .LVU1121
 3648              	.LBE216:
1976:FreeRTOS-Kernel/queue.c **** 
 3649              		.loc 1 1976 9 view .LVU1122
 3650 00ee FFF7FEFF 		bl	vPortExitCritical
 3651              	.LVL318:
1981:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 3652              		.loc 1 1981 9 view .LVU1123
 3653 00f2 FFF7FEFF 		bl	vTaskSuspendAll
 3654              	.LVL319:
1982:FreeRTOS-Kernel/queue.c **** 
 3655              		.loc 1 1982 9 view .LVU1124
 3656 00f6 FFF7FEFF 		bl	vPortEnterCritical
 3657              	.LVL320:
1982:FreeRTOS-Kernel/queue.c **** 
 3658              		.loc 1 1982 9 view .LVU1125
 3659 00fa 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3660 00fe 5BB2     		sxtb	r3, r3
 3661 0100 B3F1FF3F 		cmp	r3, #-1
 3662 0104 D1D0     		beq	.L279
 3663              	.L265:
1982:FreeRTOS-Kernel/queue.c **** 
 3664              		.loc 1 1982 9 discriminator 3 view .LVU1126
 3665 0106 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3666 010a 5BB2     		sxtb	r3, r3
 3667 010c B3F1FF3F 		cmp	r3, #-1
 3668 0110 CFD0     		beq	.L280
 3669              	.L266:
1982:FreeRTOS-Kernel/queue.c **** 
 3670              		.loc 1 1982 9 discriminator 6 view .LVU1127
 3671 0112 FFF7FEFF 		bl	vPortExitCritical
 3672              	.LVL321:
1985:FreeRTOS-Kernel/queue.c ****         {
 3673              		.loc 1 1985 9 discriminator 6 view .LVU1128
1985:FreeRTOS-Kernel/queue.c ****         {
 3674              		.loc 1 1985 13 is_stmt 0 discriminator 6 view .LVU1129
 3675 0116 01A9     		add	r1, sp, #4
 3676 0118 02A8     		add	r0, sp, #8
 3677 011a FFF7FEFF 		bl	xTaskCheckForTimeOut
 3678              	.LVL322:
1985:FreeRTOS-Kernel/queue.c ****         {
 3679              		.loc 1 1985 11 discriminator 6 view .LVU1130
 3680 011e 0028     		cmp	r0, #0
 3681 0120 D1D1     		bne	.L267
1989:FreeRTOS-Kernel/queue.c ****             {
 3682              		.loc 1 1989 13 is_stmt 1 view .LVU1131
1989:FreeRTOS-Kernel/queue.c ****             {
 3683              		.loc 1 1989 17 is_stmt 0 view .LVU1132
 3684 0122 2046     		mov	r0, r4
ARM GAS  /tmp/ccnrBCYQ.s 			page 135


 3685 0124 FFF7FEFF 		bl	prvIsQueueEmpty
 3686              	.LVL323:
1989:FreeRTOS-Kernel/queue.c ****             {
 3687              		.loc 1 1989 15 view .LVU1133
 3688 0128 0028     		cmp	r0, #0
 3689 012a C6D0     		beq	.L268
1991:FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 3690              		.loc 1 1991 55 is_stmt 1 view .LVU1134
1992:FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
 3691              		.loc 1 1992 17 view .LVU1135
 3692 012c 0199     		ldr	r1, [sp, #4]
 3693 012e 04F12400 		add	r0, r4, #36
 3694 0132 FFF7FEFF 		bl	vTaskPlaceOnEventList
 3695              	.LVL324:
1993:FreeRTOS-Kernel/queue.c **** 
 3696              		.loc 1 1993 17 view .LVU1136
 3697 0136 2046     		mov	r0, r4
 3698 0138 FFF7FEFF 		bl	prvUnlockQueue
 3699              	.LVL325:
1995:FreeRTOS-Kernel/queue.c ****                 {
 3700              		.loc 1 1995 17 view .LVU1137
1995:FreeRTOS-Kernel/queue.c ****                 {
 3701              		.loc 1 1995 21 is_stmt 0 view .LVU1138
 3702 013c FFF7FEFF 		bl	xTaskResumeAll
 3703              	.LVL326:
1995:FreeRTOS-Kernel/queue.c ****                 {
 3704              		.loc 1 1995 19 view .LVU1139
 3705 0140 0028     		cmp	r0, #0
 3706 0142 CAD1     		bne	.L259
1997:FreeRTOS-Kernel/queue.c ****                 }
 3707              		.loc 1 1997 21 is_stmt 1 view .LVU1140
 3708 0144 4FF0E023 		mov	r3, #-536813568
 3709 0148 4FF08052 		mov	r2, #268435456
 3710 014c C3F8042D 		str	r2, [r3, #3332]
1997:FreeRTOS-Kernel/queue.c ****                 }
 3711              		.loc 1 1997 21 view .LVU1141
 3712              		.syntax unified
 3713              	@ 1997 "FreeRTOS-Kernel/queue.c" 1
 3714 0150 BFF34F8F 		dsb
 3715              	@ 0 "" 2
1997:FreeRTOS-Kernel/queue.c ****                 }
 3716              		.loc 1 1997 21 view .LVU1142
 3717              	@ 1997 "FreeRTOS-Kernel/queue.c" 1
 3718 0154 BFF36F8F 		isb
 3719              	@ 0 "" 2
1997:FreeRTOS-Kernel/queue.c ****                 }
 3720              		.loc 1 1997 43 view .LVU1143
 3721              		.thumb
 3722              		.syntax unified
 3723 0158 BFE7     		b	.L259
 3724              	.L275:
2024:FreeRTOS-Kernel/queue.c ****             }
 3725              		.loc 1 2024 24 is_stmt 0 view .LVU1144
 3726 015a 0020     		movs	r0, #0
 3727 015c 89E7     		b	.L252
 3728              		.cfi_endproc
 3729              	.LFE19:
ARM GAS  /tmp/ccnrBCYQ.s 			page 136


 3731              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 3732              		.align	1
 3733              		.global	xQueueReceiveFromISR
 3734              		.syntax unified
 3735              		.thumb
 3736              		.thumb_func
 3738              	xQueueReceiveFromISR:
 3739              	.LVL327:
 3740              	.LFB20:
2038:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 3741              		.loc 1 2038 1 is_stmt 1 view -0
 3742              		.cfi_startproc
 3743              		@ args = 0, pretend = 0, frame = 0
 3744              		@ frame_needed = 0, uses_anonymous_args = 0
2038:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 3745              		.loc 1 2038 1 is_stmt 0 view .LVU1146
 3746 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3747              	.LCFI43:
 3748              		.cfi_def_cfa_offset 32
 3749              		.cfi_offset 3, -32
 3750              		.cfi_offset 4, -28
 3751              		.cfi_offset 5, -24
 3752              		.cfi_offset 6, -20
 3753              		.cfi_offset 7, -16
 3754              		.cfi_offset 8, -12
 3755              		.cfi_offset 9, -8
 3756              		.cfi_offset 14, -4
2039:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 3757              		.loc 1 2039 5 is_stmt 1 view .LVU1147
2040:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 3758              		.loc 1 2040 5 view .LVU1148
2041:FreeRTOS-Kernel/queue.c **** 
 3759              		.loc 1 2041 5 view .LVU1149
 3760              	.LVL328:
2043:FreeRTOS-Kernel/queue.c **** 
 3761              		.loc 1 2043 83 view .LVU1150
2045:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3762              		.loc 1 2045 5 view .LVU1151
 3763 0004 B0B1     		cbz	r0, .L296
 3764 0006 0E46     		mov	r6, r1
 3765 0008 9046     		mov	r8, r2
 3766 000a 0446     		mov	r4, r0
2045:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3767              		.loc 1 2045 28 discriminator 2 view .LVU1152
2046:FreeRTOS-Kernel/queue.c **** 
 3768              		.loc 1 2046 5 discriminator 2 view .LVU1153
 3769 000c D9B1     		cbz	r1, .L297
 3770              	.L284:
2046:FreeRTOS-Kernel/queue.c **** 
 3771              		.loc 1 2046 95 discriminator 8 view .LVU1154
2062:FreeRTOS-Kernel/queue.c **** 
 3772              		.loc 1 2062 5 discriminator 8 view .LVU1155
 3773 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 3774              	.LVL329:
2067:FreeRTOS-Kernel/queue.c ****     {
 3775              		.loc 1 2067 5 discriminator 8 view .LVU1156
 3776              	.LBB217:
ARM GAS  /tmp/ccnrBCYQ.s 			page 137


 3777              	.LBI217:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3778              		.loc 2 229 34 discriminator 8 view .LVU1157
 3779              	.LBB218:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3780              		.loc 2 231 5 discriminator 8 view .LVU1158
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3781              		.loc 2 233 5 discriminator 8 view .LVU1159
 3782              		.syntax unified
 3783              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3784 0012 EFF31185 		   mrs r5, basepri                                         
 3785 0016 4FF05003 	   mov r3, #80                                              
 3786 001a 83F31188 	   msr basepri, r3                                         
 3787 001e BFF36F8F 	   isb                                                     
 3788 0022 BFF34F8F 	   dsb                                                     
 3789              	
 3790              	@ 0 "" 2
 3791              	.LVL330:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 3792              		.loc 2 245 5 discriminator 8 view .LVU1160
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 3793              		.loc 2 245 5 is_stmt 0 discriminator 8 view .LVU1161
 3794              		.thumb
 3795              		.syntax unified
 3796              	.LBE218:
 3797              	.LBE217:
 3798              	.LBB219:
2069:FreeRTOS-Kernel/queue.c **** 
 3799              		.loc 1 2069 9 is_stmt 1 discriminator 8 view .LVU1162
2069:FreeRTOS-Kernel/queue.c **** 
 3800              		.loc 1 2069 27 is_stmt 0 discriminator 8 view .LVU1163
 3801 0026 A76B     		ldr	r7, [r4, #56]
 3802              	.LVL331:
2072:FreeRTOS-Kernel/queue.c ****         {
 3803              		.loc 1 2072 9 is_stmt 1 discriminator 8 view .LVU1164
2072:FreeRTOS-Kernel/queue.c ****         {
 3804              		.loc 1 2072 11 is_stmt 0 discriminator 8 view .LVU1165
 3805 0028 CFB9     		cbnz	r7, .L298
2123:FreeRTOS-Kernel/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 3806              		.loc 1 2123 21 view .LVU1166
 3807 002a 0020     		movs	r0, #0
 3808              	.L286:
 3809              	.LVL332:
2124:FreeRTOS-Kernel/queue.c ****         }
 3810              		.loc 1 2124 58 is_stmt 1 view .LVU1167
 3811              	.LBE219:
2127:FreeRTOS-Kernel/queue.c **** 
 3812              		.loc 1 2127 5 view .LVU1168
 3813              	.LBB225:
 3814              	.LBI225:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3815              		.loc 2 249 30 view .LVU1169
 3816              	.LBB226:
 3817              		.loc 2 251 5 view .LVU1170
 3818              		.syntax unified
 3819              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3820 002c 85F31188 		   msr basepri, r5 
ARM GAS  /tmp/ccnrBCYQ.s 			page 138


 3821              	@ 0 "" 2
 3822              		.thumb
 3823              		.syntax unified
 3824              	.LBE226:
 3825              	.LBE225:
2129:FreeRTOS-Kernel/queue.c **** 
 3826              		.loc 1 2129 48 view .LVU1171
2131:FreeRTOS-Kernel/queue.c **** }
 3827              		.loc 1 2131 5 view .LVU1172
2132:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 3828              		.loc 1 2132 1 is_stmt 0 view .LVU1173
 3829 0030 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3830              	.LVL333:
 3831              	.L296:
2045:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3832              		.loc 1 2045 5 is_stmt 1 view .LVU1174
 3833              	.LBB227:
 3834              	.LBI227:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3835              		.loc 2 213 30 view .LVU1175
 3836              	.LBB228:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3837              		.loc 2 215 5 view .LVU1176
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3838              		.loc 2 217 5 view .LVU1177
 3839              		.syntax unified
 3840              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3841 0034 4FF05003 		   mov r3, #80                                              
 3842 0038 83F31188 	   msr basepri, r3                                         
 3843 003c BFF36F8F 	   isb                                                     
 3844 0040 BFF34F8F 	   dsb                                                     
 3845              	
 3846              	@ 0 "" 2
 3847              	.LVL334:
 3848              		.thumb
 3849              		.syntax unified
 3850              	.L283:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3851              		.loc 2 217 5 is_stmt 0 view .LVU1178
 3852              	.LBE228:
 3853              	.LBE227:
2045:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3854              		.loc 1 2045 5 is_stmt 1 discriminator 1 view .LVU1179
2045:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3855              		.loc 1 2045 5 discriminator 1 view .LVU1180
 3856 0044 FEE7     		b	.L283
 3857              	.L297:
2046:FreeRTOS-Kernel/queue.c **** 
 3858              		.loc 1 2046 5 is_stmt 0 discriminator 2 view .LVU1181
 3859 0046 036C     		ldr	r3, [r0, #64]
 3860 0048 002B     		cmp	r3, #0
 3861 004a E0D0     		beq	.L284
2046:FreeRTOS-Kernel/queue.c **** 
 3862              		.loc 1 2046 5 is_stmt 1 view .LVU1182
 3863              	.LBB229:
 3864              	.LBI229:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /tmp/ccnrBCYQ.s 			page 139


 3865              		.loc 2 213 30 view .LVU1183
 3866              	.LBB230:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3867              		.loc 2 215 5 view .LVU1184
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3868              		.loc 2 217 5 view .LVU1185
 3869              		.syntax unified
 3870              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3871 004c 4FF05003 		   mov r3, #80                                              
 3872 0050 83F31188 	   msr basepri, r3                                         
 3873 0054 BFF36F8F 	   isb                                                     
 3874 0058 BFF34F8F 	   dsb                                                     
 3875              	
 3876              	@ 0 "" 2
 3877              	.LVL335:
 3878              		.thumb
 3879              		.syntax unified
 3880              	.L285:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3881              		.loc 2 217 5 is_stmt 0 view .LVU1186
 3882              	.LBE230:
 3883              	.LBE229:
2046:FreeRTOS-Kernel/queue.c **** 
 3884              		.loc 1 2046 5 is_stmt 1 discriminator 2 view .LVU1187
2046:FreeRTOS-Kernel/queue.c **** 
 3885              		.loc 1 2046 5 discriminator 2 view .LVU1188
 3886 005c FEE7     		b	.L285
 3887              	.LVL336:
 3888              	.L298:
 3889              	.LBB231:
 3890              	.LBB220:
2074:FreeRTOS-Kernel/queue.c **** 
 3891              		.loc 1 2074 13 view .LVU1189
2074:FreeRTOS-Kernel/queue.c **** 
 3892              		.loc 1 2074 26 is_stmt 0 view .LVU1190
 3893 005e 94F84490 		ldrb	r9, [r4, #68]	@ zero_extendqisi2
 3894 0062 4FFA89F9 		sxtb	r9, r9
 3895              	.LVL337:
2076:FreeRTOS-Kernel/queue.c **** 
 3896              		.loc 1 2076 51 is_stmt 1 view .LVU1191
2078:FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 3897              		.loc 1 2078 13 view .LVU1192
 3898 0066 3146     		mov	r1, r6
 3899 0068 2046     		mov	r0, r4
 3900 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 3901              	.LVL338:
2079:FreeRTOS-Kernel/queue.c **** 
 3902              		.loc 1 2079 13 view .LVU1193
2079:FreeRTOS-Kernel/queue.c **** 
 3903              		.loc 1 2079 42 is_stmt 0 view .LVU1194
 3904 006e 7B1E     		subs	r3, r7, #1
2079:FreeRTOS-Kernel/queue.c **** 
 3905              		.loc 1 2079 40 view .LVU1195
 3906 0070 A363     		str	r3, [r4, #56]
2085:FreeRTOS-Kernel/queue.c ****             {
 3907              		.loc 1 2085 13 is_stmt 1 view .LVU1196
2085:FreeRTOS-Kernel/queue.c ****             {
ARM GAS  /tmp/ccnrBCYQ.s 			page 140


 3908              		.loc 1 2085 15 is_stmt 0 view .LVU1197
 3909 0072 B9F1FF3F 		cmp	r9, #-1
 3910 0076 0FD1     		bne	.L287
2087:FreeRTOS-Kernel/queue.c ****                 {
 3911              		.loc 1 2087 17 is_stmt 1 view .LVU1198
2087:FreeRTOS-Kernel/queue.c ****                 {
 3912              		.loc 1 2087 21 is_stmt 0 view .LVU1199
 3913 0078 2369     		ldr	r3, [r4, #16]
2087:FreeRTOS-Kernel/queue.c ****                 {
 3914              		.loc 1 2087 19 view .LVU1200
 3915 007a 0BB9     		cbnz	r3, .L299
2119:FreeRTOS-Kernel/queue.c ****         }
 3916              		.loc 1 2119 21 view .LVU1201
 3917 007c 0120     		movs	r0, #1
 3918 007e D5E7     		b	.L286
 3919              	.L299:
2089:FreeRTOS-Kernel/queue.c ****                     {
 3920              		.loc 1 2089 21 is_stmt 1 view .LVU1202
2089:FreeRTOS-Kernel/queue.c ****                     {
 3921              		.loc 1 2089 25 is_stmt 0 view .LVU1203
 3922 0080 04F11000 		add	r0, r4, #16
 3923 0084 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3924              	.LVL339:
2089:FreeRTOS-Kernel/queue.c ****                     {
 3925              		.loc 1 2089 23 view .LVU1204
 3926 0088 E8B1     		cbz	r0, .L292
2093:FreeRTOS-Kernel/queue.c ****                         {
 3927              		.loc 1 2093 25 is_stmt 1 view .LVU1205
2093:FreeRTOS-Kernel/queue.c ****                         {
 3928              		.loc 1 2093 27 is_stmt 0 view .LVU1206
 3929 008a B8F1000F 		cmp	r8, #0
 3930 008e 1CD0     		beq	.L293
2095:FreeRTOS-Kernel/queue.c ****                         }
 3931              		.loc 1 2095 29 is_stmt 1 view .LVU1207
2095:FreeRTOS-Kernel/queue.c ****                         }
 3932              		.loc 1 2095 56 is_stmt 0 view .LVU1208
 3933 0090 0120     		movs	r0, #1
 3934 0092 C8F80000 		str	r0, [r8]
 3935 0096 C9E7     		b	.L286
 3936              	.L287:
2116:FreeRTOS-Kernel/queue.c ****             }
 3937              		.loc 1 2116 17 is_stmt 1 view .LVU1209
 3938              	.LBB221:
2116:FreeRTOS-Kernel/queue.c ****             }
 3939              		.loc 1 2116 17 view .LVU1210
 3940 0098 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 3941              	.LVL340:
2116:FreeRTOS-Kernel/queue.c ****             }
 3942              		.loc 1 2116 17 view .LVU1211
 3943 009c 8145     		cmp	r9, r0
 3944 009e 16D2     		bcs	.L294
2116:FreeRTOS-Kernel/queue.c ****             }
 3945              		.loc 1 2116 17 discriminator 1 view .LVU1212
 3946 00a0 B9F17F0F 		cmp	r9, #127
 3947 00a4 06D0     		beq	.L300
2116:FreeRTOS-Kernel/queue.c ****             }
 3948              		.loc 1 2116 17 discriminator 4 view .LVU1213
ARM GAS  /tmp/ccnrBCYQ.s 			page 141


2116:FreeRTOS-Kernel/queue.c ****             }
 3949              		.loc 1 2116 17 discriminator 4 view .LVU1214
 3950 00a6 09F10103 		add	r3, r9, #1
 3951 00aa 5BB2     		sxtb	r3, r3
 3952 00ac 84F84430 		strb	r3, [r4, #68]
 3953              	.LBE221:
2119:FreeRTOS-Kernel/queue.c ****         }
 3954              		.loc 1 2119 21 is_stmt 0 discriminator 4 view .LVU1215
 3955 00b0 0120     		movs	r0, #1
 3956              	.LVL341:
2119:FreeRTOS-Kernel/queue.c ****         }
 3957              		.loc 1 2119 21 discriminator 4 view .LVU1216
 3958 00b2 BBE7     		b	.L286
 3959              	.LVL342:
 3960              	.L300:
 3961              	.LBB224:
2116:FreeRTOS-Kernel/queue.c ****             }
 3962              		.loc 1 2116 17 is_stmt 1 view .LVU1217
 3963              	.LBB222:
 3964              	.LBI222:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 3965              		.loc 2 213 30 view .LVU1218
 3966              	.LBB223:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 3967              		.loc 2 215 5 view .LVU1219
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3968              		.loc 2 217 5 view .LVU1220
 3969              		.syntax unified
 3970              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 3971 00b4 4FF05003 		   mov r3, #80                                              
 3972 00b8 83F31188 	   msr basepri, r3                                         
 3973 00bc BFF36F8F 	   isb                                                     
 3974 00c0 BFF34F8F 	   dsb                                                     
 3975              	
 3976              	@ 0 "" 2
 3977              	.LVL343:
 3978              		.thumb
 3979              		.syntax unified
 3980              	.L289:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 3981              		.loc 2 217 5 is_stmt 0 view .LVU1221
 3982              	.LBE223:
 3983              	.LBE222:
2116:FreeRTOS-Kernel/queue.c ****             }
 3984              		.loc 1 2116 17 is_stmt 1 discriminator 5 view .LVU1222
2116:FreeRTOS-Kernel/queue.c ****             }
 3985              		.loc 1 2116 17 discriminator 5 view .LVU1223
 3986 00c4 FEE7     		b	.L289
 3987              	.LVL344:
 3988              	.L292:
2116:FreeRTOS-Kernel/queue.c ****             }
 3989              		.loc 1 2116 17 is_stmt 0 discriminator 5 view .LVU1224
 3990              	.LBE224:
2119:FreeRTOS-Kernel/queue.c ****         }
 3991              		.loc 1 2119 21 view .LVU1225
 3992 00c6 0120     		movs	r0, #1
 3993 00c8 B0E7     		b	.L286
ARM GAS  /tmp/ccnrBCYQ.s 			page 142


 3994              	.L293:
 3995 00ca 0120     		movs	r0, #1
 3996 00cc AEE7     		b	.L286
 3997              	.LVL345:
 3998              	.L294:
2119:FreeRTOS-Kernel/queue.c ****         }
 3999              		.loc 1 2119 21 view .LVU1226
 4000 00ce 0120     		movs	r0, #1
 4001              	.LVL346:
2119:FreeRTOS-Kernel/queue.c ****         }
 4002              		.loc 1 2119 21 view .LVU1227
 4003 00d0 ACE7     		b	.L286
 4004              	.LBE220:
 4005              	.LBE231:
 4006              		.cfi_endproc
 4007              	.LFE20:
 4009              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 4010              		.align	1
 4011              		.global	xQueuePeekFromISR
 4012              		.syntax unified
 4013              		.thumb
 4014              		.thumb_func
 4016              	xQueuePeekFromISR:
 4017              	.LVL347:
 4018              	.LFB21:
2137:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 4019              		.loc 1 2137 1 is_stmt 1 view -0
 4020              		.cfi_startproc
 4021              		@ args = 0, pretend = 0, frame = 0
 4022              		@ frame_needed = 0, uses_anonymous_args = 0
2137:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 4023              		.loc 1 2137 1 is_stmt 0 view .LVU1229
 4024 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4025              	.LCFI44:
 4026              		.cfi_def_cfa_offset 24
 4027              		.cfi_offset 3, -24
 4028              		.cfi_offset 4, -20
 4029              		.cfi_offset 5, -16
 4030              		.cfi_offset 6, -12
 4031              		.cfi_offset 7, -8
 4032              		.cfi_offset 14, -4
2138:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 4033              		.loc 1 2138 5 is_stmt 1 view .LVU1230
2139:FreeRTOS-Kernel/queue.c ****     int8_t * pcOriginalReadPosition;
 4034              		.loc 1 2139 5 view .LVU1231
2140:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4035              		.loc 1 2140 5 view .LVU1232
2141:FreeRTOS-Kernel/queue.c **** 
 4036              		.loc 1 2141 5 view .LVU1233
 4037              	.LVL348:
2143:FreeRTOS-Kernel/queue.c **** 
 4038              		.loc 1 2143 53 view .LVU1234
2145:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4039              		.loc 1 2145 5 view .LVU1235
 4040 0002 68B1     		cbz	r0, .L311
 4041 0004 0D46     		mov	r5, r1
 4042 0006 0446     		mov	r4, r0
ARM GAS  /tmp/ccnrBCYQ.s 			page 143


2145:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4043              		.loc 1 2145 28 discriminator 2 view .LVU1236
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4044              		.loc 1 2146 5 discriminator 2 view .LVU1237
 4045 0008 99B1     		cbz	r1, .L312
 4046              	.L304:
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4047              		.loc 1 2146 95 discriminator 8 view .LVU1238
2147:FreeRTOS-Kernel/queue.c **** 
 4048              		.loc 1 2147 5 discriminator 8 view .LVU1239
 4049 000a 236C     		ldr	r3, [r4, #64]
 4050 000c EBB9     		cbnz	r3, .L306
2147:FreeRTOS-Kernel/queue.c **** 
 4051              		.loc 1 2147 5 view .LVU1240
 4052              	.LBB232:
 4053              	.LBI232:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4054              		.loc 2 213 30 view .LVU1241
 4055              	.LBB233:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4056              		.loc 2 215 5 view .LVU1242
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4057              		.loc 2 217 5 view .LVU1243
 4058              		.syntax unified
 4059              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4060 000e 4FF05003 		   mov r3, #80                                              
 4061 0012 83F31188 	   msr basepri, r3                                         
 4062 0016 BFF36F8F 	   isb                                                     
 4063 001a BFF34F8F 	   dsb                                                     
 4064              	
 4065              	@ 0 "" 2
 4066              	.LVL349:
 4067              		.thumb
 4068              		.syntax unified
 4069              	.L307:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4070              		.loc 2 217 5 is_stmt 0 view .LVU1244
 4071              	.LBE233:
 4072              	.LBE232:
2147:FreeRTOS-Kernel/queue.c **** 
 4073              		.loc 1 2147 5 is_stmt 1 discriminator 3 view .LVU1245
2147:FreeRTOS-Kernel/queue.c **** 
 4074              		.loc 1 2147 5 discriminator 3 view .LVU1246
 4075 001e FEE7     		b	.L307
 4076              	.L311:
2145:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4077              		.loc 1 2145 5 view .LVU1247
 4078              	.LBB234:
 4079              	.LBI234:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4080              		.loc 2 213 30 view .LVU1248
 4081              	.LBB235:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4082              		.loc 2 215 5 view .LVU1249
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4083              		.loc 2 217 5 view .LVU1250
 4084              		.syntax unified
ARM GAS  /tmp/ccnrBCYQ.s 			page 144


 4085              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4086 0020 4FF05003 		   mov r3, #80                                              
 4087 0024 83F31188 	   msr basepri, r3                                         
 4088 0028 BFF36F8F 	   isb                                                     
 4089 002c BFF34F8F 	   dsb                                                     
 4090              	
 4091              	@ 0 "" 2
 4092              	.LVL350:
 4093              		.thumb
 4094              		.syntax unified
 4095              	.L303:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4096              		.loc 2 217 5 is_stmt 0 view .LVU1251
 4097              	.LBE235:
 4098              	.LBE234:
2145:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4099              		.loc 1 2145 5 is_stmt 1 discriminator 1 view .LVU1252
2145:FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4100              		.loc 1 2145 5 discriminator 1 view .LVU1253
 4101 0030 FEE7     		b	.L303
 4102              	.L312:
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4103              		.loc 1 2146 5 is_stmt 0 discriminator 2 view .LVU1254
 4104 0032 036C     		ldr	r3, [r0, #64]
 4105 0034 002B     		cmp	r3, #0
 4106 0036 E8D0     		beq	.L304
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4107              		.loc 1 2146 5 is_stmt 1 view .LVU1255
 4108              	.LBB236:
 4109              	.LBI236:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4110              		.loc 2 213 30 view .LVU1256
 4111              	.LBB237:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4112              		.loc 2 215 5 view .LVU1257
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4113              		.loc 2 217 5 view .LVU1258
 4114              		.syntax unified
 4115              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4116 0038 4FF05003 		   mov r3, #80                                              
 4117 003c 83F31188 	   msr basepri, r3                                         
 4118 0040 BFF36F8F 	   isb                                                     
 4119 0044 BFF34F8F 	   dsb                                                     
 4120              	
 4121              	@ 0 "" 2
 4122              	.LVL351:
 4123              		.thumb
 4124              		.syntax unified
 4125              	.L305:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4126              		.loc 2 217 5 is_stmt 0 view .LVU1259
 4127              	.LBE237:
 4128              	.LBE236:
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4129              		.loc 1 2146 5 is_stmt 1 discriminator 2 view .LVU1260
2146:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 4130              		.loc 1 2146 5 discriminator 2 view .LVU1261
ARM GAS  /tmp/ccnrBCYQ.s 			page 145


 4131 0048 FEE7     		b	.L305
 4132              	.L306:
2147:FreeRTOS-Kernel/queue.c **** 
 4133              		.loc 1 2147 45 discriminator 2 view .LVU1262
2163:FreeRTOS-Kernel/queue.c **** 
 4134              		.loc 1 2163 5 discriminator 2 view .LVU1263
 4135 004a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4136              	.LVL352:
2168:FreeRTOS-Kernel/queue.c ****     {
 4137              		.loc 1 2168 5 discriminator 2 view .LVU1264
 4138              	.LBB238:
 4139              	.LBI238:
 229:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4140              		.loc 2 229 34 discriminator 2 view .LVU1265
 4141              	.LBB239:
 231:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4142              		.loc 2 231 5 discriminator 2 view .LVU1266
 233:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4143              		.loc 2 233 5 discriminator 2 view .LVU1267
 4144              		.syntax unified
 4145              	@ 233 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4146 004e EFF31186 		   mrs r6, basepri                                         
 4147 0052 4FF05003 	   mov r3, #80                                              
 4148 0056 83F31188 	   msr basepri, r3                                         
 4149 005a BFF36F8F 	   isb                                                     
 4150 005e BFF34F8F 	   dsb                                                     
 4151              	
 4152              	@ 0 "" 2
 4153              	.LVL353:
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 4154              		.loc 2 245 5 discriminator 2 view .LVU1268
 245:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** }
 4155              		.loc 2 245 5 is_stmt 0 discriminator 2 view .LVU1269
 4156              		.thumb
 4157              		.syntax unified
 4158              	.LBE239:
 4159              	.LBE238:
2171:FreeRTOS-Kernel/queue.c ****         {
 4160              		.loc 1 2171 9 is_stmt 1 discriminator 2 view .LVU1270
2171:FreeRTOS-Kernel/queue.c ****         {
 4161              		.loc 1 2171 20 is_stmt 0 discriminator 2 view .LVU1271
 4162 0062 A36B     		ldr	r3, [r4, #56]
2171:FreeRTOS-Kernel/queue.c ****         {
 4163              		.loc 1 2171 11 discriminator 2 view .LVU1272
 4164 0064 1BB9     		cbnz	r3, .L313
2185:FreeRTOS-Kernel/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 4165              		.loc 1 2185 21 view .LVU1273
 4166 0066 0020     		movs	r0, #0
 4167              	.L308:
 4168              	.LVL354:
2186:FreeRTOS-Kernel/queue.c ****         }
 4169              		.loc 1 2186 55 is_stmt 1 view .LVU1274
2189:FreeRTOS-Kernel/queue.c **** 
 4170              		.loc 1 2189 5 view .LVU1275
 4171              	.LBB240:
 4172              	.LBI240:
 249:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  /tmp/ccnrBCYQ.s 			page 146


 4173              		.loc 2 249 30 view .LVU1276
 4174              	.LBB241:
 4175              		.loc 2 251 5 view .LVU1277
 4176              		.syntax unified
 4177              	@ 251 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4178 0068 86F31188 		   msr basepri, r6 
 4179              	@ 0 "" 2
 4180              		.thumb
 4181              		.syntax unified
 4182              	.LBE241:
 4183              	.LBE240:
2191:FreeRTOS-Kernel/queue.c **** 
 4184              		.loc 1 2191 45 view .LVU1278
2193:FreeRTOS-Kernel/queue.c **** }
 4185              		.loc 1 2193 5 view .LVU1279
2194:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4186              		.loc 1 2194 1 is_stmt 0 view .LVU1280
 4187 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4188              	.LVL355:
 4189              	.L313:
2173:FreeRTOS-Kernel/queue.c **** 
 4190              		.loc 1 2173 48 is_stmt 1 view .LVU1281
2177:FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 4191              		.loc 1 2177 13 view .LVU1282
2177:FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 4192              		.loc 1 2177 36 is_stmt 0 view .LVU1283
 4193 006e E768     		ldr	r7, [r4, #12]
 4194              	.LVL356:
2178:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 4195              		.loc 1 2178 13 is_stmt 1 view .LVU1284
 4196 0070 2946     		mov	r1, r5
 4197 0072 2046     		mov	r0, r4
 4198 0074 FFF7FEFF 		bl	prvCopyDataFromQueue
 4199              	.LVL357:
2179:FreeRTOS-Kernel/queue.c **** 
 4200              		.loc 1 2179 13 view .LVU1285
2179:FreeRTOS-Kernel/queue.c **** 
 4201              		.loc 1 2179 42 is_stmt 0 view .LVU1286
 4202 0078 E760     		str	r7, [r4, #12]
2181:FreeRTOS-Kernel/queue.c ****         }
 4203              		.loc 1 2181 13 is_stmt 1 view .LVU1287
 4204              	.LVL358:
2181:FreeRTOS-Kernel/queue.c ****         }
 4205              		.loc 1 2181 21 is_stmt 0 view .LVU1288
 4206 007a 0120     		movs	r0, #1
 4207 007c F4E7     		b	.L308
 4208              		.cfi_endproc
 4209              	.LFE21:
 4211              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 4212              		.align	1
 4213              		.global	uxQueueMessagesWaiting
 4214              		.syntax unified
 4215              		.thumb
 4216              		.thumb_func
 4218              	uxQueueMessagesWaiting:
 4219              	.LVL359:
 4220              	.LFB22:
ARM GAS  /tmp/ccnrBCYQ.s 			page 147


2198:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 4221              		.loc 1 2198 1 is_stmt 1 view -0
 4222              		.cfi_startproc
 4223              		@ args = 0, pretend = 0, frame = 0
 4224              		@ frame_needed = 0, uses_anonymous_args = 0
2199:FreeRTOS-Kernel/queue.c **** 
 4225              		.loc 1 2199 5 view .LVU1290
2201:FreeRTOS-Kernel/queue.c **** 
 4226              		.loc 1 2201 48 view .LVU1291
2203:FreeRTOS-Kernel/queue.c **** 
 4227              		.loc 1 2203 5 view .LVU1292
 4228 0000 40B1     		cbz	r0, .L319
2198:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 4229              		.loc 1 2198 1 is_stmt 0 discriminator 2 view .LVU1293
 4230 0002 10B5     		push	{r4, lr}
 4231              	.LCFI45:
 4232              		.cfi_def_cfa_offset 8
 4233              		.cfi_offset 4, -8
 4234              		.cfi_offset 14, -4
 4235 0004 0446     		mov	r4, r0
2203:FreeRTOS-Kernel/queue.c **** 
 4236              		.loc 1 2203 27 is_stmt 1 discriminator 2 view .LVU1294
2205:FreeRTOS-Kernel/queue.c ****     {
 4237              		.loc 1 2205 5 discriminator 2 view .LVU1295
 4238 0006 FFF7FEFF 		bl	vPortEnterCritical
 4239              	.LVL360:
2207:FreeRTOS-Kernel/queue.c ****     }
 4240              		.loc 1 2207 9 discriminator 2 view .LVU1296
2207:FreeRTOS-Kernel/queue.c ****     }
 4241              		.loc 1 2207 18 is_stmt 0 discriminator 2 view .LVU1297
 4242 000a A46B     		ldr	r4, [r4, #56]
 4243              	.LVL361:
2209:FreeRTOS-Kernel/queue.c **** 
 4244              		.loc 1 2209 5 is_stmt 1 discriminator 2 view .LVU1298
 4245 000c FFF7FEFF 		bl	vPortExitCritical
 4246              	.LVL362:
2211:FreeRTOS-Kernel/queue.c **** 
 4247              		.loc 1 2211 51 discriminator 2 view .LVU1299
2213:FreeRTOS-Kernel/queue.c **** }
 4248              		.loc 1 2213 5 discriminator 2 view .LVU1300
2214:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4249              		.loc 1 2214 1 is_stmt 0 discriminator 2 view .LVU1301
 4250 0010 2046     		mov	r0, r4
 4251 0012 10BD     		pop	{r4, pc}
 4252              	.LVL363:
 4253              	.L319:
 4254              	.LCFI46:
 4255              		.cfi_def_cfa_offset 0
 4256              		.cfi_restore 4
 4257              		.cfi_restore 14
2203:FreeRTOS-Kernel/queue.c **** 
 4258              		.loc 1 2203 5 is_stmt 1 view .LVU1302
 4259              	.LBB242:
 4260              	.LBI242:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4261              		.loc 2 213 30 view .LVU1303
 4262              	.LBB243:
ARM GAS  /tmp/ccnrBCYQ.s 			page 148


 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4263              		.loc 2 215 5 view .LVU1304
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4264              		.loc 2 217 5 view .LVU1305
 4265              		.syntax unified
 4266              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4267 0014 4FF05003 		   mov r3, #80                                              
 4268 0018 83F31188 	   msr basepri, r3                                         
 4269 001c BFF36F8F 	   isb                                                     
 4270 0020 BFF34F8F 	   dsb                                                     
 4271              	
 4272              	@ 0 "" 2
 4273              	.LVL364:
 4274              		.thumb
 4275              		.syntax unified
 4276              	.L316:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4277              		.loc 2 217 5 is_stmt 0 view .LVU1306
 4278              	.LBE243:
 4279              	.LBE242:
2203:FreeRTOS-Kernel/queue.c **** 
 4280              		.loc 1 2203 5 is_stmt 1 discriminator 1 view .LVU1307
2203:FreeRTOS-Kernel/queue.c **** 
 4281              		.loc 1 2203 5 discriminator 1 view .LVU1308
 4282 0024 FEE7     		b	.L316
 4283              		.cfi_endproc
 4284              	.LFE22:
 4286              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 4287              		.align	1
 4288              		.global	uxQueueSpacesAvailable
 4289              		.syntax unified
 4290              		.thumb
 4291              		.thumb_func
 4293              	uxQueueSpacesAvailable:
 4294              	.LVL365:
 4295              	.LFB23:
2218:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 4296              		.loc 1 2218 1 view -0
 4297              		.cfi_startproc
 4298              		@ args = 0, pretend = 0, frame = 0
 4299              		@ frame_needed = 0, uses_anonymous_args = 0
2218:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 4300              		.loc 1 2218 1 is_stmt 0 view .LVU1310
 4301 0000 38B5     		push	{r3, r4, r5, lr}
 4302              	.LCFI47:
 4303              		.cfi_def_cfa_offset 16
 4304              		.cfi_offset 3, -16
 4305              		.cfi_offset 4, -12
 4306              		.cfi_offset 5, -8
 4307              		.cfi_offset 14, -4
2219:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4308              		.loc 1 2219 5 is_stmt 1 view .LVU1311
2220:FreeRTOS-Kernel/queue.c **** 
 4309              		.loc 1 2220 5 view .LVU1312
 4310              	.LVL366:
2222:FreeRTOS-Kernel/queue.c **** 
 4311              		.loc 1 2222 48 view .LVU1313
ARM GAS  /tmp/ccnrBCYQ.s 			page 149


2224:FreeRTOS-Kernel/queue.c **** 
 4312              		.loc 1 2224 5 view .LVU1314
 4313 0002 48B1     		cbz	r0, .L324
 4314 0004 0546     		mov	r5, r0
2224:FreeRTOS-Kernel/queue.c **** 
 4315              		.loc 1 2224 28 discriminator 2 view .LVU1315
2226:FreeRTOS-Kernel/queue.c ****     {
 4316              		.loc 1 2226 5 discriminator 2 view .LVU1316
 4317 0006 FFF7FEFF 		bl	vPortEnterCritical
 4318              	.LVL367:
2228:FreeRTOS-Kernel/queue.c ****     }
 4319              		.loc 1 2228 9 discriminator 2 view .LVU1317
2228:FreeRTOS-Kernel/queue.c ****     }
 4320              		.loc 1 2228 45 is_stmt 0 discriminator 2 view .LVU1318
 4321 000a EC6B     		ldr	r4, [r5, #60]
2228:FreeRTOS-Kernel/queue.c ****     }
 4322              		.loc 1 2228 65 discriminator 2 view .LVU1319
 4323 000c AB6B     		ldr	r3, [r5, #56]
2228:FreeRTOS-Kernel/queue.c ****     }
 4324              		.loc 1 2228 18 discriminator 2 view .LVU1320
 4325 000e E41A     		subs	r4, r4, r3
 4326              	.LVL368:
2230:FreeRTOS-Kernel/queue.c **** 
 4327              		.loc 1 2230 5 is_stmt 1 discriminator 2 view .LVU1321
 4328 0010 FFF7FEFF 		bl	vPortExitCritical
 4329              	.LVL369:
2232:FreeRTOS-Kernel/queue.c **** 
 4330              		.loc 1 2232 51 discriminator 2 view .LVU1322
2234:FreeRTOS-Kernel/queue.c **** }
 4331              		.loc 1 2234 5 discriminator 2 view .LVU1323
2235:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4332              		.loc 1 2235 1 is_stmt 0 discriminator 2 view .LVU1324
 4333 0014 2046     		mov	r0, r4
 4334 0016 38BD     		pop	{r3, r4, r5, pc}
 4335              	.LVL370:
 4336              	.L324:
2224:FreeRTOS-Kernel/queue.c **** 
 4337              		.loc 1 2224 5 is_stmt 1 view .LVU1325
 4338              	.LBB244:
 4339              	.LBI244:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4340              		.loc 2 213 30 view .LVU1326
 4341              	.LBB245:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4342              		.loc 2 215 5 view .LVU1327
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4343              		.loc 2 217 5 view .LVU1328
 4344              		.syntax unified
 4345              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4346 0018 4FF05003 		   mov r3, #80                                              
 4347 001c 83F31188 	   msr basepri, r3                                         
 4348 0020 BFF36F8F 	   isb                                                     
 4349 0024 BFF34F8F 	   dsb                                                     
 4350              	
 4351              	@ 0 "" 2
 4352              	.LVL371:
 4353              		.thumb
ARM GAS  /tmp/ccnrBCYQ.s 			page 150


 4354              		.syntax unified
 4355              	.L322:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4356              		.loc 2 217 5 is_stmt 0 view .LVU1329
 4357              	.LBE245:
 4358              	.LBE244:
2224:FreeRTOS-Kernel/queue.c **** 
 4359              		.loc 1 2224 5 is_stmt 1 discriminator 1 view .LVU1330
2224:FreeRTOS-Kernel/queue.c **** 
 4360              		.loc 1 2224 5 discriminator 1 view .LVU1331
 4361 0028 FEE7     		b	.L322
 4362              		.cfi_endproc
 4363              	.LFE23:
 4365              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 4366              		.align	1
 4367              		.global	uxQueueMessagesWaitingFromISR
 4368              		.syntax unified
 4369              		.thumb
 4370              		.thumb_func
 4372              	uxQueueMessagesWaitingFromISR:
 4373              	.LVL372:
 4374              	.LFB24:
2239:FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 4375              		.loc 1 2239 1 view -0
 4376              		.cfi_startproc
 4377              		@ args = 0, pretend = 0, frame = 0
 4378              		@ frame_needed = 0, uses_anonymous_args = 0
 4379              		@ link register save eliminated.
2240:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4380              		.loc 1 2240 5 view .LVU1333
2241:FreeRTOS-Kernel/queue.c **** 
 4381              		.loc 1 2241 5 view .LVU1334
2243:FreeRTOS-Kernel/queue.c **** 
 4382              		.loc 1 2243 55 view .LVU1335
2245:FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 4383              		.loc 1 2245 5 view .LVU1336
 4384 0000 08B1     		cbz	r0, .L328
2245:FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 4385              		.loc 1 2245 28 discriminator 2 view .LVU1337
2246:FreeRTOS-Kernel/queue.c **** 
 4386              		.loc 1 2246 5 discriminator 2 view .LVU1338
2246:FreeRTOS-Kernel/queue.c **** 
 4387              		.loc 1 2246 14 is_stmt 0 discriminator 2 view .LVU1339
 4388 0002 806B     		ldr	r0, [r0, #56]
 4389              	.LVL373:
2248:FreeRTOS-Kernel/queue.c **** 
 4390              		.loc 1 2248 58 is_stmt 1 discriminator 2 view .LVU1340
2250:FreeRTOS-Kernel/queue.c **** }
 4391              		.loc 1 2250 5 discriminator 2 view .LVU1341
2251:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4392              		.loc 1 2251 1 is_stmt 0 discriminator 2 view .LVU1342
 4393 0004 7047     		bx	lr
 4394              	.LVL374:
 4395              	.L328:
2245:FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 4396              		.loc 1 2245 5 is_stmt 1 view .LVU1343
 4397              	.LBB246:
ARM GAS  /tmp/ccnrBCYQ.s 			page 151


 4398              	.LBI246:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4399              		.loc 2 213 30 view .LVU1344
 4400              	.LBB247:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4401              		.loc 2 215 5 view .LVU1345
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4402              		.loc 2 217 5 view .LVU1346
 4403              		.syntax unified
 4404              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4405 0006 4FF05003 		   mov r3, #80                                              
 4406 000a 83F31188 	   msr basepri, r3                                         
 4407 000e BFF36F8F 	   isb                                                     
 4408 0012 BFF34F8F 	   dsb                                                     
 4409              	
 4410              	@ 0 "" 2
 4411              	.LVL375:
 4412              		.thumb
 4413              		.syntax unified
 4414              	.L327:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4415              		.loc 2 217 5 is_stmt 0 view .LVU1347
 4416              	.LBE247:
 4417              	.LBE246:
2245:FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 4418              		.loc 1 2245 5 is_stmt 1 discriminator 1 view .LVU1348
2245:FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 4419              		.loc 1 2245 5 discriminator 1 view .LVU1349
 4420 0016 FEE7     		b	.L327
 4421              		.cfi_endproc
 4422              	.LFE24:
 4424              		.section	.text.uxQueueGetQueueItemSize,"ax",%progbits
 4425              		.align	1
 4426              		.global	uxQueueGetQueueItemSize
 4427              		.syntax unified
 4428              		.thumb
 4429              		.thumb_func
 4431              	uxQueueGetQueueItemSize:
 4432              	.LVL376:
 4433              	.LFB26:
2344:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueGetQueueItemSize( xQueue );
 4434              		.loc 1 2344 1 view -0
 4435              		.cfi_startproc
 4436              		@ args = 0, pretend = 0, frame = 0
 4437              		@ frame_needed = 0, uses_anonymous_args = 0
 4438              		@ link register save eliminated.
2345:FreeRTOS-Kernel/queue.c **** 
 4439              		.loc 1 2345 49 view .LVU1351
2347:FreeRTOS-Kernel/queue.c **** 
 4440              		.loc 1 2347 80 view .LVU1352
2349:FreeRTOS-Kernel/queue.c **** }
 4441              		.loc 1 2349 5 view .LVU1353
2350:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4442              		.loc 1 2350 1 is_stmt 0 view .LVU1354
 4443 0000 006C     		ldr	r0, [r0, #64]
 4444              	.LVL377:
2350:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccnrBCYQ.s 			page 152


 4445              		.loc 1 2350 1 view .LVU1355
 4446 0002 7047     		bx	lr
 4447              		.cfi_endproc
 4448              	.LFE26:
 4450              		.section	.text.uxQueueGetQueueLength,"ax",%progbits
 4451              		.align	1
 4452              		.global	uxQueueGetQueueLength
 4453              		.syntax unified
 4454              		.thumb
 4455              		.thumb_func
 4457              	uxQueueGetQueueLength:
 4458              	.LVL378:
 4459              	.LFB27:
2354:FreeRTOS-Kernel/queue.c ****     traceENTER_uxQueueGetQueueLength( xQueue );
 4460              		.loc 1 2354 1 is_stmt 1 view -0
 4461              		.cfi_startproc
 4462              		@ args = 0, pretend = 0, frame = 0
 4463              		@ frame_needed = 0, uses_anonymous_args = 0
 4464              		@ link register save eliminated.
2355:FreeRTOS-Kernel/queue.c **** 
 4465              		.loc 1 2355 47 view .LVU1357
2357:FreeRTOS-Kernel/queue.c **** 
 4466              		.loc 1 2357 76 view .LVU1358
2359:FreeRTOS-Kernel/queue.c **** }
 4467              		.loc 1 2359 5 view .LVU1359
2360:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4468              		.loc 1 2360 1 is_stmt 0 view .LVU1360
 4469 0000 C06B     		ldr	r0, [r0, #60]
 4470              	.LVL379:
2360:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4471              		.loc 1 2360 1 view .LVU1361
 4472 0002 7047     		bx	lr
 4473              		.cfi_endproc
 4474              	.LFE27:
 4476              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4477              		.align	1
 4478              		.global	xQueueIsQueueEmptyFromISR
 4479              		.syntax unified
 4480              		.thumb
 4481              		.thumb_func
 4483              	xQueueIsQueueEmptyFromISR:
 4484              	.LVL380:
 4485              	.LFB33:
2636:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 4486              		.loc 1 2636 1 is_stmt 1 view -0
 4487              		.cfi_startproc
 4488              		@ args = 0, pretend = 0, frame = 0
 4489              		@ frame_needed = 0, uses_anonymous_args = 0
 4490              		@ link register save eliminated.
2637:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4491              		.loc 1 2637 5 view .LVU1363
2638:FreeRTOS-Kernel/queue.c **** 
 4492              		.loc 1 2638 5 view .LVU1364
2640:FreeRTOS-Kernel/queue.c **** 
 4493              		.loc 1 2640 51 view .LVU1365
2642:FreeRTOS-Kernel/queue.c **** 
 4494              		.loc 1 2642 5 view .LVU1366
ARM GAS  /tmp/ccnrBCYQ.s 			page 153


 4495 0000 18B1     		cbz	r0, .L336
2642:FreeRTOS-Kernel/queue.c **** 
 4496              		.loc 1 2642 28 discriminator 2 view .LVU1367
2644:FreeRTOS-Kernel/queue.c ****     {
 4497              		.loc 1 2644 5 discriminator 2 view .LVU1368
2644:FreeRTOS-Kernel/queue.c ****     {
 4498              		.loc 1 2644 16 is_stmt 0 discriminator 2 view .LVU1369
 4499 0002 836B     		ldr	r3, [r0, #56]
2644:FreeRTOS-Kernel/queue.c ****     {
 4500              		.loc 1 2644 7 discriminator 2 view .LVU1370
 4501 0004 53B9     		cbnz	r3, .L335
2646:FreeRTOS-Kernel/queue.c ****     }
 4502              		.loc 1 2646 17 view .LVU1371
 4503 0006 0120     		movs	r0, #1
 4504              	.LVL381:
2646:FreeRTOS-Kernel/queue.c ****     }
 4505              		.loc 1 2646 17 view .LVU1372
 4506 0008 7047     		bx	lr
 4507              	.LVL382:
 4508              	.L336:
2642:FreeRTOS-Kernel/queue.c **** 
 4509              		.loc 1 2642 5 is_stmt 1 view .LVU1373
 4510              	.LBB248:
 4511              	.LBI248:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4512              		.loc 2 213 30 view .LVU1374
 4513              	.LBB249:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4514              		.loc 2 215 5 view .LVU1375
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4515              		.loc 2 217 5 view .LVU1376
 4516              		.syntax unified
 4517              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4518 000a 4FF05003 		   mov r3, #80                                              
 4519 000e 83F31188 	   msr basepri, r3                                         
 4520 0012 BFF36F8F 	   isb                                                     
 4521 0016 BFF34F8F 	   dsb                                                     
 4522              	
 4523              	@ 0 "" 2
 4524              	.LVL383:
 4525              		.thumb
 4526              		.syntax unified
 4527              	.L333:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4528              		.loc 2 217 5 is_stmt 0 view .LVU1377
 4529              	.LBE249:
 4530              	.LBE248:
2642:FreeRTOS-Kernel/queue.c **** 
 4531              		.loc 1 2642 5 is_stmt 1 discriminator 1 view .LVU1378
2642:FreeRTOS-Kernel/queue.c **** 
 4532              		.loc 1 2642 5 discriminator 1 view .LVU1379
 4533 001a FEE7     		b	.L333
 4534              	.L335:
2650:FreeRTOS-Kernel/queue.c ****     }
 4535              		.loc 1 2650 17 is_stmt 0 view .LVU1380
 4536 001c 0020     		movs	r0, #0
 4537              	.LVL384:
ARM GAS  /tmp/ccnrBCYQ.s 			page 154


2653:FreeRTOS-Kernel/queue.c **** 
 4538              		.loc 1 2653 53 is_stmt 1 view .LVU1381
2655:FreeRTOS-Kernel/queue.c **** }
 4539              		.loc 1 2655 5 view .LVU1382
2656:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4540              		.loc 1 2656 1 is_stmt 0 view .LVU1383
 4541 001e 7047     		bx	lr
 4542              		.cfi_endproc
 4543              	.LFE33:
 4545              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 4546              		.align	1
 4547              		.global	xQueueIsQueueFullFromISR
 4548              		.syntax unified
 4549              		.thumb
 4550              		.thumb_func
 4552              	xQueueIsQueueFullFromISR:
 4553              	.LVL385:
 4554              	.LFB35:
2678:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2679:FreeRTOS-Kernel/queue.c **** 
2680:FreeRTOS-Kernel/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2681:FreeRTOS-Kernel/queue.c **** {
 4555              		.loc 1 2681 1 is_stmt 1 view -0
 4556              		.cfi_startproc
 4557              		@ args = 0, pretend = 0, frame = 0
 4558              		@ frame_needed = 0, uses_anonymous_args = 0
 4559              		@ link register save eliminated.
2682:FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 4560              		.loc 1 2682 5 view .LVU1385
2683:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4561              		.loc 1 2683 5 view .LVU1386
2684:FreeRTOS-Kernel/queue.c **** 
2685:FreeRTOS-Kernel/queue.c ****     traceENTER_xQueueIsQueueFullFromISR( xQueue );
 4562              		.loc 1 2685 50 view .LVU1387
2686:FreeRTOS-Kernel/queue.c **** 
2687:FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
 4563              		.loc 1 2687 5 view .LVU1388
 4564 0000 28B1     		cbz	r0, .L342
 4565              		.loc 1 2687 28 discriminator 2 view .LVU1389
2688:FreeRTOS-Kernel/queue.c **** 
2689:FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4566              		.loc 1 2689 5 discriminator 2 view .LVU1390
 4567              		.loc 1 2689 16 is_stmt 0 discriminator 2 view .LVU1391
 4568 0002 826B     		ldr	r2, [r0, #56]
 4569              		.loc 1 2689 46 discriminator 2 view .LVU1392
 4570 0004 C36B     		ldr	r3, [r0, #60]
 4571              		.loc 1 2689 7 discriminator 2 view .LVU1393
 4572 0006 9A42     		cmp	r2, r3
 4573 0008 0AD0     		beq	.L343
2690:FreeRTOS-Kernel/queue.c ****     {
2691:FreeRTOS-Kernel/queue.c ****         xReturn = pdTRUE;
2692:FreeRTOS-Kernel/queue.c ****     }
2693:FreeRTOS-Kernel/queue.c ****     else
2694:FreeRTOS-Kernel/queue.c ****     {
2695:FreeRTOS-Kernel/queue.c ****         xReturn = pdFALSE;
 4574              		.loc 1 2695 17 view .LVU1394
 4575 000a 0020     		movs	r0, #0
ARM GAS  /tmp/ccnrBCYQ.s 			page 155


 4576              	.LVL386:
2696:FreeRTOS-Kernel/queue.c ****     }
2697:FreeRTOS-Kernel/queue.c **** 
2698:FreeRTOS-Kernel/queue.c ****     traceRETURN_xQueueIsQueueFullFromISR( xReturn );
 4577              		.loc 1 2698 52 is_stmt 1 view .LVU1395
2699:FreeRTOS-Kernel/queue.c **** 
2700:FreeRTOS-Kernel/queue.c ****     return xReturn;
 4578              		.loc 1 2700 5 view .LVU1396
2701:FreeRTOS-Kernel/queue.c **** }
 4579              		.loc 1 2701 1 is_stmt 0 view .LVU1397
 4580 000c 7047     		bx	lr
 4581              	.LVL387:
 4582              	.L342:
2687:FreeRTOS-Kernel/queue.c **** 
 4583              		.loc 1 2687 5 is_stmt 1 view .LVU1398
 4584              	.LBB250:
 4585              	.LBI250:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4586              		.loc 2 213 30 view .LVU1399
 4587              	.LBB251:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4588              		.loc 2 215 5 view .LVU1400
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4589              		.loc 2 217 5 view .LVU1401
 4590              		.syntax unified
 4591              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4592 000e 4FF05003 		   mov r3, #80                                              
 4593 0012 83F31188 	   msr basepri, r3                                         
 4594 0016 BFF36F8F 	   isb                                                     
 4595 001a BFF34F8F 	   dsb                                                     
 4596              	
 4597              	@ 0 "" 2
 4598              	.LVL388:
 4599              		.thumb
 4600              		.syntax unified
 4601              	.L339:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4602              		.loc 2 217 5 is_stmt 0 view .LVU1402
 4603              	.LBE251:
 4604              	.LBE250:
2687:FreeRTOS-Kernel/queue.c **** 
 4605              		.loc 1 2687 5 is_stmt 1 discriminator 1 view .LVU1403
2687:FreeRTOS-Kernel/queue.c **** 
 4606              		.loc 1 2687 5 discriminator 1 view .LVU1404
 4607 001e FEE7     		b	.L339
 4608              	.L343:
2691:FreeRTOS-Kernel/queue.c ****     }
 4609              		.loc 1 2691 17 is_stmt 0 view .LVU1405
 4610 0020 0120     		movs	r0, #1
 4611              	.LVL389:
2691:FreeRTOS-Kernel/queue.c ****     }
 4612              		.loc 1 2691 17 view .LVU1406
 4613 0022 7047     		bx	lr
 4614              		.cfi_endproc
 4615              	.LFE35:
 4617              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 4618              		.align	1
ARM GAS  /tmp/ccnrBCYQ.s 			page 156


 4619              		.global	vQueueAddToRegistry
 4620              		.syntax unified
 4621              		.thumb
 4622              		.thumb_func
 4624              	vQueueAddToRegistry:
 4625              	.LVL390:
 4626              	.LFB36:
2702:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2703:FreeRTOS-Kernel/queue.c **** 
2704:FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2705:FreeRTOS-Kernel/queue.c **** 
2706:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2707:FreeRTOS-Kernel/queue.c ****                              const void * pvItemToQueue,
2708:FreeRTOS-Kernel/queue.c ****                              TickType_t xTicksToWait )
2709:FreeRTOS-Kernel/queue.c ****     {
2710:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
2711:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2712:FreeRTOS-Kernel/queue.c **** 
2713:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );
2714:FreeRTOS-Kernel/queue.c **** 
2715:FreeRTOS-Kernel/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2716:FreeRTOS-Kernel/queue.c ****          * is required to prevent an interrupt removing something from the queue
2717:FreeRTOS-Kernel/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2718:FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2719:FreeRTOS-Kernel/queue.c ****         {
2720:FreeRTOS-Kernel/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2721:FreeRTOS-Kernel/queue.c ****             {
2722:FreeRTOS-Kernel/queue.c ****                 /* The queue is full - do we want to block or just leave without
2723:FreeRTOS-Kernel/queue.c ****                  * posting? */
2724:FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2725:FreeRTOS-Kernel/queue.c ****                 {
2726:FreeRTOS-Kernel/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2727:FreeRTOS-Kernel/queue.c ****                      * return indicating that we need to block. */
2728:FreeRTOS-Kernel/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2729:FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2730:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_BLOCKED;
2731:FreeRTOS-Kernel/queue.c ****                 }
2732:FreeRTOS-Kernel/queue.c ****                 else
2733:FreeRTOS-Kernel/queue.c ****                 {
2734:FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2735:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_FULL;
2736:FreeRTOS-Kernel/queue.c ****                 }
2737:FreeRTOS-Kernel/queue.c ****             }
2738:FreeRTOS-Kernel/queue.c ****         }
2739:FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2740:FreeRTOS-Kernel/queue.c **** 
2741:FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2742:FreeRTOS-Kernel/queue.c ****         {
2743:FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2744:FreeRTOS-Kernel/queue.c ****             {
2745:FreeRTOS-Kernel/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2746:FreeRTOS-Kernel/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2747:FreeRTOS-Kernel/queue.c ****                 xReturn = pdPASS;
2748:FreeRTOS-Kernel/queue.c **** 
2749:FreeRTOS-Kernel/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2750:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2751:FreeRTOS-Kernel/queue.c ****                 {
ARM GAS  /tmp/ccnrBCYQ.s 			page 157


2752:FreeRTOS-Kernel/queue.c ****                     /* In this instance the co-routine could be placed directly
2753:FreeRTOS-Kernel/queue.c ****                      * into the ready list as we are within a critical section.
2754:FreeRTOS-Kernel/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2755:FreeRTOS-Kernel/queue.c ****                      * the event were caused from within an interrupt. */
2756:FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2757:FreeRTOS-Kernel/queue.c ****                     {
2758:FreeRTOS-Kernel/queue.c ****                         /* The co-routine waiting has a higher priority so record
2759:FreeRTOS-Kernel/queue.c ****                          * that a yield might be appropriate. */
2760:FreeRTOS-Kernel/queue.c ****                         xReturn = errQUEUE_YIELD;
2761:FreeRTOS-Kernel/queue.c ****                     }
2762:FreeRTOS-Kernel/queue.c ****                     else
2763:FreeRTOS-Kernel/queue.c ****                     {
2764:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2765:FreeRTOS-Kernel/queue.c ****                     }
2766:FreeRTOS-Kernel/queue.c ****                 }
2767:FreeRTOS-Kernel/queue.c ****                 else
2768:FreeRTOS-Kernel/queue.c ****                 {
2769:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2770:FreeRTOS-Kernel/queue.c ****                 }
2771:FreeRTOS-Kernel/queue.c ****             }
2772:FreeRTOS-Kernel/queue.c ****             else
2773:FreeRTOS-Kernel/queue.c ****             {
2774:FreeRTOS-Kernel/queue.c ****                 xReturn = errQUEUE_FULL;
2775:FreeRTOS-Kernel/queue.c ****             }
2776:FreeRTOS-Kernel/queue.c ****         }
2777:FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2778:FreeRTOS-Kernel/queue.c **** 
2779:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCRSend( xReturn );
2780:FreeRTOS-Kernel/queue.c **** 
2781:FreeRTOS-Kernel/queue.c ****         return xReturn;
2782:FreeRTOS-Kernel/queue.c ****     }
2783:FreeRTOS-Kernel/queue.c **** 
2784:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2785:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2786:FreeRTOS-Kernel/queue.c **** 
2787:FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2788:FreeRTOS-Kernel/queue.c **** 
2789:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2790:FreeRTOS-Kernel/queue.c ****                                 void * pvBuffer,
2791:FreeRTOS-Kernel/queue.c ****                                 TickType_t xTicksToWait )
2792:FreeRTOS-Kernel/queue.c ****     {
2793:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
2794:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2795:FreeRTOS-Kernel/queue.c **** 
2796:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );
2797:FreeRTOS-Kernel/queue.c **** 
2798:FreeRTOS-Kernel/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2799:FreeRTOS-Kernel/queue.c ****          * is required to prevent an interrupt adding something to the queue
2800:FreeRTOS-Kernel/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2801:FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2802:FreeRTOS-Kernel/queue.c ****         {
2803:FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2804:FreeRTOS-Kernel/queue.c ****             {
2805:FreeRTOS-Kernel/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2806:FreeRTOS-Kernel/queue.c ****                  * leave with nothing? */
2807:FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2808:FreeRTOS-Kernel/queue.c ****                 {
ARM GAS  /tmp/ccnrBCYQ.s 			page 158


2809:FreeRTOS-Kernel/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2810:FreeRTOS-Kernel/queue.c ****                      * indicating that we need to block. */
2811:FreeRTOS-Kernel/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2812:FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2813:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_BLOCKED;
2814:FreeRTOS-Kernel/queue.c ****                 }
2815:FreeRTOS-Kernel/queue.c ****                 else
2816:FreeRTOS-Kernel/queue.c ****                 {
2817:FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2818:FreeRTOS-Kernel/queue.c ****                     return errQUEUE_FULL;
2819:FreeRTOS-Kernel/queue.c ****                 }
2820:FreeRTOS-Kernel/queue.c ****             }
2821:FreeRTOS-Kernel/queue.c ****             else
2822:FreeRTOS-Kernel/queue.c ****             {
2823:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2824:FreeRTOS-Kernel/queue.c ****             }
2825:FreeRTOS-Kernel/queue.c ****         }
2826:FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2827:FreeRTOS-Kernel/queue.c **** 
2828:FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2829:FreeRTOS-Kernel/queue.c ****         {
2830:FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2831:FreeRTOS-Kernel/queue.c ****             {
2832:FreeRTOS-Kernel/queue.c ****                 /* Data is available from the queue. */
2833:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2834:FreeRTOS-Kernel/queue.c **** 
2835:FreeRTOS-Kernel/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2836:FreeRTOS-Kernel/queue.c ****                 {
2837:FreeRTOS-Kernel/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2838:FreeRTOS-Kernel/queue.c ****                 }
2839:FreeRTOS-Kernel/queue.c ****                 else
2840:FreeRTOS-Kernel/queue.c ****                 {
2841:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2842:FreeRTOS-Kernel/queue.c ****                 }
2843:FreeRTOS-Kernel/queue.c **** 
2844:FreeRTOS-Kernel/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2845:FreeRTOS-Kernel/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2846:FreeRTOS-Kernel/queue.c **** 
2847:FreeRTOS-Kernel/queue.c ****                 xReturn = pdPASS;
2848:FreeRTOS-Kernel/queue.c **** 
2849:FreeRTOS-Kernel/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2850:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2851:FreeRTOS-Kernel/queue.c ****                 {
2852:FreeRTOS-Kernel/queue.c ****                     /* In this instance the co-routine could be placed directly
2853:FreeRTOS-Kernel/queue.c ****                      * into the ready list as we are within a critical section.
2854:FreeRTOS-Kernel/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2855:FreeRTOS-Kernel/queue.c ****                      * the event were caused from within an interrupt. */
2856:FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2857:FreeRTOS-Kernel/queue.c ****                     {
2858:FreeRTOS-Kernel/queue.c ****                         xReturn = errQUEUE_YIELD;
2859:FreeRTOS-Kernel/queue.c ****                     }
2860:FreeRTOS-Kernel/queue.c ****                     else
2861:FreeRTOS-Kernel/queue.c ****                     {
2862:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2863:FreeRTOS-Kernel/queue.c ****                     }
2864:FreeRTOS-Kernel/queue.c ****                 }
2865:FreeRTOS-Kernel/queue.c ****                 else
ARM GAS  /tmp/ccnrBCYQ.s 			page 159


2866:FreeRTOS-Kernel/queue.c ****                 {
2867:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2868:FreeRTOS-Kernel/queue.c ****                 }
2869:FreeRTOS-Kernel/queue.c ****             }
2870:FreeRTOS-Kernel/queue.c ****             else
2871:FreeRTOS-Kernel/queue.c ****             {
2872:FreeRTOS-Kernel/queue.c ****                 xReturn = pdFAIL;
2873:FreeRTOS-Kernel/queue.c ****             }
2874:FreeRTOS-Kernel/queue.c ****         }
2875:FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2876:FreeRTOS-Kernel/queue.c **** 
2877:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCRReceive( xReturn );
2878:FreeRTOS-Kernel/queue.c **** 
2879:FreeRTOS-Kernel/queue.c ****         return xReturn;
2880:FreeRTOS-Kernel/queue.c ****     }
2881:FreeRTOS-Kernel/queue.c **** 
2882:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2883:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2884:FreeRTOS-Kernel/queue.c **** 
2885:FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2886:FreeRTOS-Kernel/queue.c **** 
2887:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2888:FreeRTOS-Kernel/queue.c ****                                     const void * pvItemToQueue,
2889:FreeRTOS-Kernel/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2890:FreeRTOS-Kernel/queue.c ****     {
2891:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2892:FreeRTOS-Kernel/queue.c **** 
2893:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );
2894:FreeRTOS-Kernel/queue.c **** 
2895:FreeRTOS-Kernel/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2896:FreeRTOS-Kernel/queue.c ****          * exit without doing anything. */
2897:FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2898:FreeRTOS-Kernel/queue.c ****         {
2899:FreeRTOS-Kernel/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2900:FreeRTOS-Kernel/queue.c **** 
2901:FreeRTOS-Kernel/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2902:FreeRTOS-Kernel/queue.c ****              * co-routine has not already been woken. */
2903:FreeRTOS-Kernel/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2904:FreeRTOS-Kernel/queue.c ****             {
2905:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2906:FreeRTOS-Kernel/queue.c ****                 {
2907:FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2908:FreeRTOS-Kernel/queue.c ****                     {
2909:FreeRTOS-Kernel/queue.c ****                         return pdTRUE;
2910:FreeRTOS-Kernel/queue.c ****                     }
2911:FreeRTOS-Kernel/queue.c ****                     else
2912:FreeRTOS-Kernel/queue.c ****                     {
2913:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2914:FreeRTOS-Kernel/queue.c ****                     }
2915:FreeRTOS-Kernel/queue.c ****                 }
2916:FreeRTOS-Kernel/queue.c ****                 else
2917:FreeRTOS-Kernel/queue.c ****                 {
2918:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2919:FreeRTOS-Kernel/queue.c ****                 }
2920:FreeRTOS-Kernel/queue.c ****             }
2921:FreeRTOS-Kernel/queue.c ****             else
2922:FreeRTOS-Kernel/queue.c ****             {
ARM GAS  /tmp/ccnrBCYQ.s 			page 160


2923:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2924:FreeRTOS-Kernel/queue.c ****             }
2925:FreeRTOS-Kernel/queue.c ****         }
2926:FreeRTOS-Kernel/queue.c ****         else
2927:FreeRTOS-Kernel/queue.c ****         {
2928:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2929:FreeRTOS-Kernel/queue.c ****         }
2930:FreeRTOS-Kernel/queue.c **** 
2931:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );
2932:FreeRTOS-Kernel/queue.c **** 
2933:FreeRTOS-Kernel/queue.c ****         return xCoRoutinePreviouslyWoken;
2934:FreeRTOS-Kernel/queue.c ****     }
2935:FreeRTOS-Kernel/queue.c **** 
2936:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2937:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2938:FreeRTOS-Kernel/queue.c **** 
2939:FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2940:FreeRTOS-Kernel/queue.c **** 
2941:FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2942:FreeRTOS-Kernel/queue.c ****                                        void * pvBuffer,
2943:FreeRTOS-Kernel/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2944:FreeRTOS-Kernel/queue.c ****     {
2945:FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
2946:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2947:FreeRTOS-Kernel/queue.c **** 
2948:FreeRTOS-Kernel/queue.c ****         traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );
2949:FreeRTOS-Kernel/queue.c **** 
2950:FreeRTOS-Kernel/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2951:FreeRTOS-Kernel/queue.c ****          * not then just leave without doing anything. */
2952:FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2953:FreeRTOS-Kernel/queue.c ****         {
2954:FreeRTOS-Kernel/queue.c ****             /* Copy the data from the queue. */
2955:FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2956:FreeRTOS-Kernel/queue.c **** 
2957:FreeRTOS-Kernel/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2958:FreeRTOS-Kernel/queue.c ****             {
2959:FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2960:FreeRTOS-Kernel/queue.c ****             }
2961:FreeRTOS-Kernel/queue.c ****             else
2962:FreeRTOS-Kernel/queue.c ****             {
2963:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2964:FreeRTOS-Kernel/queue.c ****             }
2965:FreeRTOS-Kernel/queue.c **** 
2966:FreeRTOS-Kernel/queue.c ****             --( pxQueue->uxMessagesWaiting );
2967:FreeRTOS-Kernel/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2968:FreeRTOS-Kernel/queue.c **** 
2969:FreeRTOS-Kernel/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2970:FreeRTOS-Kernel/queue.c ****             {
2971:FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2972:FreeRTOS-Kernel/queue.c ****                 {
2973:FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2974:FreeRTOS-Kernel/queue.c ****                     {
2975:FreeRTOS-Kernel/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2976:FreeRTOS-Kernel/queue.c ****                     }
2977:FreeRTOS-Kernel/queue.c ****                     else
2978:FreeRTOS-Kernel/queue.c ****                     {
2979:FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccnrBCYQ.s 			page 161


2980:FreeRTOS-Kernel/queue.c ****                     }
2981:FreeRTOS-Kernel/queue.c ****                 }
2982:FreeRTOS-Kernel/queue.c ****                 else
2983:FreeRTOS-Kernel/queue.c ****                 {
2984:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2985:FreeRTOS-Kernel/queue.c ****                 }
2986:FreeRTOS-Kernel/queue.c ****             }
2987:FreeRTOS-Kernel/queue.c ****             else
2988:FreeRTOS-Kernel/queue.c ****             {
2989:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2990:FreeRTOS-Kernel/queue.c ****             }
2991:FreeRTOS-Kernel/queue.c **** 
2992:FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
2993:FreeRTOS-Kernel/queue.c ****         }
2994:FreeRTOS-Kernel/queue.c ****         else
2995:FreeRTOS-Kernel/queue.c ****         {
2996:FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
2997:FreeRTOS-Kernel/queue.c ****         }
2998:FreeRTOS-Kernel/queue.c **** 
2999:FreeRTOS-Kernel/queue.c ****         traceRETURN_xQueueCRReceiveFromISR( xReturn );
3000:FreeRTOS-Kernel/queue.c **** 
3001:FreeRTOS-Kernel/queue.c ****         return xReturn;
3002:FreeRTOS-Kernel/queue.c ****     }
3003:FreeRTOS-Kernel/queue.c **** 
3004:FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
3005:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
3006:FreeRTOS-Kernel/queue.c **** 
3007:FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
3008:FreeRTOS-Kernel/queue.c **** 
3009:FreeRTOS-Kernel/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
3010:FreeRTOS-Kernel/queue.c ****                               const char * pcQueueName )
3011:FreeRTOS-Kernel/queue.c ****     {
 4627              		.loc 1 3011 5 is_stmt 1 view -0
 4628              		.cfi_startproc
 4629              		@ args = 0, pretend = 0, frame = 0
 4630              		@ frame_needed = 0, uses_anonymous_args = 0
 4631              		@ link register save eliminated.
3012:FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
 4632              		.loc 1 3012 9 view .LVU1408
3013:FreeRTOS-Kernel/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
 4633              		.loc 1 3013 9 view .LVU1409
3014:FreeRTOS-Kernel/queue.c **** 
3015:FreeRTOS-Kernel/queue.c ****         traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );
 4634              		.loc 1 3015 62 view .LVU1410
3016:FreeRTOS-Kernel/queue.c **** 
3017:FreeRTOS-Kernel/queue.c ****         configASSERT( xQueue );
 4635              		.loc 1 3017 9 view .LVU1411
 4636 0000 28B1     		cbz	r0, .L356
3011:FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
 4637              		.loc 1 3011 5 is_stmt 0 discriminator 2 view .LVU1412
 4638 0002 10B4     		push	{r4}
 4639              	.LCFI48:
 4640              		.cfi_def_cfa_offset 4
 4641              		.cfi_offset 4, -4
 4642 0004 0446     		mov	r4, r0
 4643              		.loc 1 3017 31 is_stmt 1 discriminator 2 view .LVU1413
3018:FreeRTOS-Kernel/queue.c **** 
ARM GAS  /tmp/ccnrBCYQ.s 			page 162


3019:FreeRTOS-Kernel/queue.c ****         if( pcQueueName != NULL )
 4644              		.loc 1 3019 9 discriminator 2 view .LVU1414
 4645              		.loc 1 3019 11 is_stmt 0 discriminator 2 view .LVU1415
 4646 0006 31B3     		cbz	r1, .L344
3013:FreeRTOS-Kernel/queue.c **** 
 4647              		.loc 1 3013 31 view .LVU1416
 4648 0008 0020     		movs	r0, #0
 4649              	.LVL391:
3020:FreeRTOS-Kernel/queue.c ****         {
3021:FreeRTOS-Kernel/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
3022:FreeRTOS-Kernel/queue.c ****              * a free slot. */
3023:FreeRTOS-Kernel/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4650              		.loc 1 3023 21 view .LVU1417
 4651 000a 0346     		mov	r3, r0
 4652 000c 0DE0     		b	.L347
 4653              	.LVL392:
 4654              	.L356:
 4655              	.LCFI49:
 4656              		.cfi_def_cfa_offset 0
 4657              		.cfi_restore 4
3017:FreeRTOS-Kernel/queue.c **** 
 4658              		.loc 1 3017 9 is_stmt 1 view .LVU1418
 4659              	.LBB252:
 4660              	.LBI252:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4661              		.loc 2 213 30 view .LVU1419
 4662              	.LBB253:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4663              		.loc 2 215 5 view .LVU1420
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4664              		.loc 2 217 5 view .LVU1421
 4665              		.syntax unified
 4666              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4667 000e 4FF05003 		   mov r3, #80                                              
 4668 0012 83F31188 	   msr basepri, r3                                         
 4669 0016 BFF36F8F 	   isb                                                     
 4670 001a BFF34F8F 	   dsb                                                     
 4671              	
 4672              	@ 0 "" 2
 4673              	.LVL393:
 4674              		.thumb
 4675              		.syntax unified
 4676              	.L346:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4677              		.loc 2 217 5 is_stmt 0 view .LVU1422
 4678              	.LBE253:
 4679              	.LBE252:
3017:FreeRTOS-Kernel/queue.c **** 
 4680              		.loc 1 3017 9 is_stmt 1 discriminator 1 view .LVU1423
3017:FreeRTOS-Kernel/queue.c **** 
 4681              		.loc 1 3017 9 discriminator 1 view .LVU1424
 4682 001e FEE7     		b	.L346
 4683              	.LVL394:
 4684              	.L358:
 4685              	.LCFI50:
 4686              		.cfi_def_cfa_offset 4
 4687              		.cfi_offset 4, -4
ARM GAS  /tmp/ccnrBCYQ.s 			page 163


3024:FreeRTOS-Kernel/queue.c ****             {
3025:FreeRTOS-Kernel/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
3026:FreeRTOS-Kernel/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
3027:FreeRTOS-Kernel/queue.c ****                 {
3028:FreeRTOS-Kernel/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 4688              		.loc 1 3028 21 view .LVU1425
 4689              		.loc 1 3028 36 is_stmt 0 view .LVU1426
 4690 0020 0E48     		ldr	r0, .L359
 4691              	.LVL395:
 4692              		.loc 1 3028 36 view .LVU1427
 4693 0022 00EBC300 		add	r0, r0, r3, lsl #3
 4694              	.LVL396:
3029:FreeRTOS-Kernel/queue.c ****                     break;
 4695              		.loc 1 3029 21 is_stmt 1 view .LVU1428
3030:FreeRTOS-Kernel/queue.c ****                 }
3031:FreeRTOS-Kernel/queue.c ****                 /* Otherwise, store in the next empty location */
3032:FreeRTOS-Kernel/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
3033:FreeRTOS-Kernel/queue.c ****                 {
3034:FreeRTOS-Kernel/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
3035:FreeRTOS-Kernel/queue.c ****                 }
3036:FreeRTOS-Kernel/queue.c ****                 else
3037:FreeRTOS-Kernel/queue.c ****                 {
3038:FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
3039:FreeRTOS-Kernel/queue.c ****                 }
3040:FreeRTOS-Kernel/queue.c ****             }
3041:FreeRTOS-Kernel/queue.c ****         }
3042:FreeRTOS-Kernel/queue.c **** 
3043:FreeRTOS-Kernel/queue.c ****         if( pxEntryToWrite != NULL )
 4696              		.loc 1 3043 9 view .LVU1429
 4697 0026 14E0     		b	.L350
 4698              	.L351:
3038:FreeRTOS-Kernel/queue.c ****                 }
 4699              		.loc 1 3038 45 discriminator 2 view .LVU1430
3023:FreeRTOS-Kernel/queue.c ****             {
 4700              		.loc 1 3023 93 discriminator 2 view .LVU1431
 4701 0028 0133     		adds	r3, r3, #1
 4702              	.LVL397:
 4703              	.L347:
3023:FreeRTOS-Kernel/queue.c ****             {
 4704              		.loc 1 3023 46 discriminator 1 view .LVU1432
 4705 002a 072B     		cmp	r3, #7
 4706 002c 10D8     		bhi	.L357
3026:FreeRTOS-Kernel/queue.c ****                 {
 4707              		.loc 1 3026 17 view .LVU1433
3026:FreeRTOS-Kernel/queue.c ****                 {
 4708              		.loc 1 3026 51 is_stmt 0 view .LVU1434
 4709 002e 0B4A     		ldr	r2, .L359
 4710 0030 02EBC302 		add	r2, r2, r3, lsl #3
 4711 0034 5268     		ldr	r2, [r2, #4]
3026:FreeRTOS-Kernel/queue.c ****                 {
 4712              		.loc 1 3026 19 view .LVU1435
 4713 0036 A242     		cmp	r2, r4
 4714 0038 F2D0     		beq	.L358
3032:FreeRTOS-Kernel/queue.c ****                 {
 4715              		.loc 1 3032 22 is_stmt 1 view .LVU1436
3032:FreeRTOS-Kernel/queue.c ****                 {
 4716              		.loc 1 3032 24 is_stmt 0 view .LVU1437
ARM GAS  /tmp/ccnrBCYQ.s 			page 164


 4717 003a 0028     		cmp	r0, #0
 4718 003c F4D1     		bne	.L351
3032:FreeRTOS-Kernel/queue.c ****                 {
 4719              		.loc 1 3032 78 discriminator 1 view .LVU1438
 4720 003e 074A     		ldr	r2, .L359
 4721 0040 52F83320 		ldr	r2, [r2, r3, lsl #3]
3032:FreeRTOS-Kernel/queue.c ****                 {
 4722              		.loc 1 3032 53 discriminator 1 view .LVU1439
 4723 0044 002A     		cmp	r2, #0
 4724 0046 EFD1     		bne	.L351
3034:FreeRTOS-Kernel/queue.c ****                 }
 4725              		.loc 1 3034 21 is_stmt 1 view .LVU1440
3034:FreeRTOS-Kernel/queue.c ****                 }
 4726              		.loc 1 3034 36 is_stmt 0 view .LVU1441
 4727 0048 0448     		ldr	r0, .L359
 4728              	.LVL398:
3034:FreeRTOS-Kernel/queue.c ****                 }
 4729              		.loc 1 3034 36 view .LVU1442
 4730 004a 00EBC300 		add	r0, r0, r3, lsl #3
 4731              	.LVL399:
3034:FreeRTOS-Kernel/queue.c ****                 }
 4732              		.loc 1 3034 36 view .LVU1443
 4733 004e EBE7     		b	.L351
 4734              	.L357:
 4735              		.loc 1 3043 9 is_stmt 1 view .LVU1444
 4736              		.loc 1 3043 11 is_stmt 0 view .LVU1445
 4737 0050 08B1     		cbz	r0, .L344
 4738              	.L350:
3044:FreeRTOS-Kernel/queue.c ****         {
3045:FreeRTOS-Kernel/queue.c ****             /* Store the information on this queue. */
3046:FreeRTOS-Kernel/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
 4739              		.loc 1 3046 13 is_stmt 1 view .LVU1446
 4740              		.loc 1 3046 41 is_stmt 0 view .LVU1447
 4741 0052 0160     		str	r1, [r0]
3047:FreeRTOS-Kernel/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 4742              		.loc 1 3047 13 is_stmt 1 view .LVU1448
 4743              		.loc 1 3047 37 is_stmt 0 view .LVU1449
 4744 0054 4460     		str	r4, [r0, #4]
 4745              	.LVL400:
3048:FreeRTOS-Kernel/queue.c **** 
3049:FreeRTOS-Kernel/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 4746              		.loc 1 3049 59 is_stmt 1 view .LVU1450
3050:FreeRTOS-Kernel/queue.c ****         }
3051:FreeRTOS-Kernel/queue.c **** 
3052:FreeRTOS-Kernel/queue.c ****         traceRETURN_vQueueAddToRegistry();
 4747              		.loc 1 3052 42 view .LVU1451
 4748              	.L344:
3053:FreeRTOS-Kernel/queue.c ****     }
 4749              		.loc 1 3053 5 is_stmt 0 view .LVU1452
 4750 0056 5DF8044B 		ldr	r4, [sp], #4
 4751              	.LCFI51:
 4752              		.cfi_restore 4
 4753              		.cfi_def_cfa_offset 0
 4754              	.LVL401:
 4755              		.loc 1 3053 5 view .LVU1453
 4756 005a 7047     		bx	lr
 4757              	.L360:
ARM GAS  /tmp/ccnrBCYQ.s 			page 165


 4758              		.align	2
 4759              	.L359:
 4760 005c 00000000 		.word	xQueueRegistry
 4761              		.cfi_endproc
 4762              	.LFE36:
 4764              		.section	.text.pcQueueGetName,"ax",%progbits
 4765              		.align	1
 4766              		.global	pcQueueGetName
 4767              		.syntax unified
 4768              		.thumb
 4769              		.thumb_func
 4771              	pcQueueGetName:
 4772              	.LVL402:
 4773              	.LFB37:
3054:FreeRTOS-Kernel/queue.c **** 
3055:FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
3056:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
3057:FreeRTOS-Kernel/queue.c **** 
3058:FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
3059:FreeRTOS-Kernel/queue.c **** 
3060:FreeRTOS-Kernel/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue )
3061:FreeRTOS-Kernel/queue.c ****     {
 4774              		.loc 1 3061 5 is_stmt 1 view -0
 4775              		.cfi_startproc
 4776              		@ args = 0, pretend = 0, frame = 0
 4777              		@ frame_needed = 0, uses_anonymous_args = 0
 4778              		@ link register save eliminated.
3062:FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
 4779              		.loc 1 3062 9 view .LVU1455
3063:FreeRTOS-Kernel/queue.c ****         const char * pcReturn = NULL;
 4780              		.loc 1 3063 9 view .LVU1456
3064:FreeRTOS-Kernel/queue.c **** 
3065:FreeRTOS-Kernel/queue.c ****         traceENTER_pcQueueGetName( xQueue );
 4781              		.loc 1 3065 44 view .LVU1457
3066:FreeRTOS-Kernel/queue.c **** 
3067:FreeRTOS-Kernel/queue.c ****         configASSERT( xQueue );
 4782              		.loc 1 3067 9 view .LVU1458
 4783 0000 0146     		mov	r1, r0
 4784 0002 50B1     		cbz	r0, .L368
3068:FreeRTOS-Kernel/queue.c **** 
3069:FreeRTOS-Kernel/queue.c ****         /* Note there is nothing here to protect against another task adding or
3070:FreeRTOS-Kernel/queue.c ****          * removing entries from the registry while it is being searched. */
3071:FreeRTOS-Kernel/queue.c **** 
3072:FreeRTOS-Kernel/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4785              		.loc 1 3072 17 is_stmt 0 view .LVU1459
 4786 0004 0023     		movs	r3, #0
 4787              	.L362:
 4788              	.LVL403:
 4789              		.loc 1 3072 42 is_stmt 1 discriminator 1 view .LVU1460
 4790 0006 072B     		cmp	r3, #7
 4791 0008 14D8     		bhi	.L369
3073:FreeRTOS-Kernel/queue.c ****         {
3074:FreeRTOS-Kernel/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4792              		.loc 1 3074 13 view .LVU1461
 4793              		.loc 1 3074 37 is_stmt 0 view .LVU1462
 4794 000a 0B4A     		ldr	r2, .L371
 4795 000c 02EBC302 		add	r2, r2, r3, lsl #3
ARM GAS  /tmp/ccnrBCYQ.s 			page 166


 4796 0010 5268     		ldr	r2, [r2, #4]
 4797              		.loc 1 3074 15 view .LVU1463
 4798 0012 8A42     		cmp	r2, r1
 4799 0014 0AD0     		beq	.L370
3075:FreeRTOS-Kernel/queue.c ****             {
3076:FreeRTOS-Kernel/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
3077:FreeRTOS-Kernel/queue.c ****                 break;
3078:FreeRTOS-Kernel/queue.c ****             }
3079:FreeRTOS-Kernel/queue.c ****             else
3080:FreeRTOS-Kernel/queue.c ****             {
3081:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 4800              		.loc 1 3081 41 is_stmt 1 discriminator 2 view .LVU1464
3072:FreeRTOS-Kernel/queue.c ****         {
 4801              		.loc 1 3072 89 discriminator 2 view .LVU1465
 4802 0016 0133     		adds	r3, r3, #1
 4803              	.LVL404:
3072:FreeRTOS-Kernel/queue.c ****         {
 4804              		.loc 1 3072 89 is_stmt 0 discriminator 2 view .LVU1466
 4805 0018 F5E7     		b	.L362
 4806              	.LVL405:
 4807              	.L368:
3067:FreeRTOS-Kernel/queue.c **** 
 4808              		.loc 1 3067 9 is_stmt 1 view .LVU1467
 4809              	.LBB254:
 4810              	.LBI254:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4811              		.loc 2 213 30 view .LVU1468
 4812              	.LBB255:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4813              		.loc 2 215 5 view .LVU1469
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4814              		.loc 2 217 5 view .LVU1470
 4815              		.syntax unified
 4816              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4817 001a 4FF05003 		   mov r3, #80                                              
 4818 001e 83F31188 	   msr basepri, r3                                         
 4819 0022 BFF36F8F 	   isb                                                     
 4820 0026 BFF34F8F 	   dsb                                                     
 4821              	
 4822              	@ 0 "" 2
 4823              	.LVL406:
 4824              		.thumb
 4825              		.syntax unified
 4826              	.L363:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4827              		.loc 2 217 5 is_stmt 0 view .LVU1471
 4828              	.LBE255:
 4829              	.LBE254:
3067:FreeRTOS-Kernel/queue.c **** 
 4830              		.loc 1 3067 9 is_stmt 1 discriminator 1 view .LVU1472
3067:FreeRTOS-Kernel/queue.c **** 
 4831              		.loc 1 3067 9 discriminator 1 view .LVU1473
 4832 002a FEE7     		b	.L363
 4833              	.LVL407:
 4834              	.L370:
3076:FreeRTOS-Kernel/queue.c ****                 break;
 4835              		.loc 1 3076 17 view .LVU1474
ARM GAS  /tmp/ccnrBCYQ.s 			page 167


3076:FreeRTOS-Kernel/queue.c ****                 break;
 4836              		.loc 1 3076 26 is_stmt 0 view .LVU1475
 4837 002c 024A     		ldr	r2, .L371
 4838 002e 52F83300 		ldr	r0, [r2, r3, lsl #3]
 4839              	.LVL408:
3077:FreeRTOS-Kernel/queue.c ****             }
 4840              		.loc 1 3077 17 is_stmt 1 view .LVU1476
 4841 0032 7047     		bx	lr
 4842              	.LVL409:
 4843              	.L369:
3063:FreeRTOS-Kernel/queue.c **** 
 4844              		.loc 1 3063 22 is_stmt 0 view .LVU1477
 4845 0034 0020     		movs	r0, #0
 4846              	.LVL410:
3082:FreeRTOS-Kernel/queue.c ****             }
3083:FreeRTOS-Kernel/queue.c ****         }
3084:FreeRTOS-Kernel/queue.c **** 
3085:FreeRTOS-Kernel/queue.c ****         traceRETURN_pcQueueGetName( pcReturn );
 4847              		.loc 1 3085 47 is_stmt 1 view .LVU1478
3086:FreeRTOS-Kernel/queue.c **** 
3087:FreeRTOS-Kernel/queue.c ****         return pcReturn;
 4848              		.loc 1 3087 9 view .LVU1479
3088:FreeRTOS-Kernel/queue.c ****     }
 4849              		.loc 1 3088 5 is_stmt 0 view .LVU1480
 4850 0036 7047     		bx	lr
 4851              	.L372:
 4852              		.align	2
 4853              	.L371:
 4854 0038 00000000 		.word	xQueueRegistry
 4855              		.cfi_endproc
 4856              	.LFE37:
 4858              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 4859              		.align	1
 4860              		.global	vQueueUnregisterQueue
 4861              		.syntax unified
 4862              		.thumb
 4863              		.thumb_func
 4865              	vQueueUnregisterQueue:
 4866              	.LVL411:
 4867              	.LFB38:
3089:FreeRTOS-Kernel/queue.c **** 
3090:FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
3091:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
3092:FreeRTOS-Kernel/queue.c **** 
3093:FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
3094:FreeRTOS-Kernel/queue.c **** 
3095:FreeRTOS-Kernel/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
3096:FreeRTOS-Kernel/queue.c ****     {
 4868              		.loc 1 3096 5 is_stmt 1 view -0
 4869              		.cfi_startproc
 4870              		@ args = 0, pretend = 0, frame = 0
 4871              		@ frame_needed = 0, uses_anonymous_args = 0
 4872              		@ link register save eliminated.
3097:FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
 4873              		.loc 1 3097 9 view .LVU1482
3098:FreeRTOS-Kernel/queue.c **** 
3099:FreeRTOS-Kernel/queue.c ****         traceENTER_vQueueUnregisterQueue( xQueue );
ARM GAS  /tmp/ccnrBCYQ.s 			page 168


 4874              		.loc 1 3099 51 view .LVU1483
3100:FreeRTOS-Kernel/queue.c **** 
3101:FreeRTOS-Kernel/queue.c ****         configASSERT( xQueue );
 4875              		.loc 1 3101 9 view .LVU1484
 4876 0000 0146     		mov	r1, r0
 4877 0002 50B1     		cbz	r0, .L380
3102:FreeRTOS-Kernel/queue.c **** 
3103:FreeRTOS-Kernel/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
3104:FreeRTOS-Kernel/queue.c ****          * registry. */
3105:FreeRTOS-Kernel/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4878              		.loc 1 3105 17 is_stmt 0 view .LVU1485
 4879 0004 0023     		movs	r3, #0
 4880              	.L374:
 4881              	.LVL412:
 4882              		.loc 1 3105 42 is_stmt 1 discriminator 1 view .LVU1486
 4883 0006 072B     		cmp	r3, #7
 4884 0008 18D8     		bhi	.L381
3106:FreeRTOS-Kernel/queue.c ****         {
3107:FreeRTOS-Kernel/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4885              		.loc 1 3107 13 view .LVU1487
 4886              		.loc 1 3107 37 is_stmt 0 view .LVU1488
 4887 000a 0D4A     		ldr	r2, .L383
 4888 000c 02EBC302 		add	r2, r2, r3, lsl #3
 4889 0010 5268     		ldr	r2, [r2, #4]
 4890              		.loc 1 3107 15 view .LVU1489
 4891 0012 8A42     		cmp	r2, r1
 4892 0014 0AD0     		beq	.L382
3108:FreeRTOS-Kernel/queue.c ****             {
3109:FreeRTOS-Kernel/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
3110:FreeRTOS-Kernel/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
3111:FreeRTOS-Kernel/queue.c **** 
3112:FreeRTOS-Kernel/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
3113:FreeRTOS-Kernel/queue.c ****                  * appear in the registry twice if it is added, removed, then
3114:FreeRTOS-Kernel/queue.c ****                  * added again. */
3115:FreeRTOS-Kernel/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
3116:FreeRTOS-Kernel/queue.c ****                 break;
3117:FreeRTOS-Kernel/queue.c ****             }
3118:FreeRTOS-Kernel/queue.c ****             else
3119:FreeRTOS-Kernel/queue.c ****             {
3120:FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 4893              		.loc 1 3120 41 is_stmt 1 discriminator 2 view .LVU1490
3105:FreeRTOS-Kernel/queue.c ****         {
 4894              		.loc 1 3105 89 discriminator 2 view .LVU1491
 4895 0016 0133     		adds	r3, r3, #1
 4896              	.LVL413:
3105:FreeRTOS-Kernel/queue.c ****         {
 4897              		.loc 1 3105 89 is_stmt 0 discriminator 2 view .LVU1492
 4898 0018 F5E7     		b	.L374
 4899              	.LVL414:
 4900              	.L380:
3101:FreeRTOS-Kernel/queue.c **** 
 4901              		.loc 1 3101 9 is_stmt 1 view .LVU1493
 4902              	.LBB256:
 4903              	.LBI256:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4904              		.loc 2 213 30 view .LVU1494
 4905              	.LBB257:
ARM GAS  /tmp/ccnrBCYQ.s 			page 169


 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4906              		.loc 2 215 5 view .LVU1495
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4907              		.loc 2 217 5 view .LVU1496
 4908              		.syntax unified
 4909              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4910 001a 4FF05003 		   mov r3, #80                                              
 4911 001e 83F31188 	   msr basepri, r3                                         
 4912 0022 BFF36F8F 	   isb                                                     
 4913 0026 BFF34F8F 	   dsb                                                     
 4914              	
 4915              	@ 0 "" 2
 4916              	.LVL415:
 4917              		.thumb
 4918              		.syntax unified
 4919              	.L375:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4920              		.loc 2 217 5 is_stmt 0 view .LVU1497
 4921              	.LBE257:
 4922              	.LBE256:
3101:FreeRTOS-Kernel/queue.c **** 
 4923              		.loc 1 3101 9 is_stmt 1 discriminator 1 view .LVU1498
3101:FreeRTOS-Kernel/queue.c **** 
 4924              		.loc 1 3101 9 discriminator 1 view .LVU1499
 4925 002a FEE7     		b	.L375
 4926              	.LVL416:
 4927              	.L382:
3110:FreeRTOS-Kernel/queue.c **** 
 4928              		.loc 1 3110 17 view .LVU1500
3110:FreeRTOS-Kernel/queue.c **** 
 4929              		.loc 1 3110 50 is_stmt 0 view .LVU1501
 4930 002c 044A     		ldr	r2, .L383
 4931 002e 0021     		movs	r1, #0
 4932 0030 42F83310 		str	r1, [r2, r3, lsl #3]
3115:FreeRTOS-Kernel/queue.c ****                 break;
 4933              		.loc 1 3115 17 is_stmt 1 view .LVU1502
3115:FreeRTOS-Kernel/queue.c ****                 break;
 4934              		.loc 1 3115 46 is_stmt 0 view .LVU1503
 4935 0034 02EBC302 		add	r2, r2, r3, lsl #3
 4936 0038 5160     		str	r1, [r2, #4]
3116:FreeRTOS-Kernel/queue.c ****             }
 4937              		.loc 1 3116 17 is_stmt 1 view .LVU1504
 4938 003a 7047     		bx	lr
 4939              	.L381:
3121:FreeRTOS-Kernel/queue.c ****             }
3122:FreeRTOS-Kernel/queue.c ****         }
3123:FreeRTOS-Kernel/queue.c **** 
3124:FreeRTOS-Kernel/queue.c ****         traceRETURN_vQueueUnregisterQueue();
3125:FreeRTOS-Kernel/queue.c ****     }
 4940              		.loc 1 3125 5 is_stmt 0 view .LVU1505
 4941 003c 7047     		bx	lr
 4942              	.L384:
 4943 003e 00BF     		.align	2
 4944              	.L383:
 4945 0040 00000000 		.word	xQueueRegistry
 4946              		.cfi_endproc
 4947              	.LFE38:
ARM GAS  /tmp/ccnrBCYQ.s 			page 170


 4949              		.section	.text.vQueueDelete,"ax",%progbits
 4950              		.align	1
 4951              		.global	vQueueDelete
 4952              		.syntax unified
 4953              		.thumb
 4954              		.thumb_func
 4956              	vQueueDelete:
 4957              	.LVL417:
 4958              	.LFB25:
2255:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4959              		.loc 1 2255 1 is_stmt 1 view -0
 4960              		.cfi_startproc
 4961              		@ args = 0, pretend = 0, frame = 0
 4962              		@ frame_needed = 0, uses_anonymous_args = 0
2255:FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 4963              		.loc 1 2255 1 is_stmt 0 view .LVU1507
 4964 0000 08B5     		push	{r3, lr}
 4965              	.LCFI52:
 4966              		.cfi_def_cfa_offset 8
 4967              		.cfi_offset 3, -8
 4968              		.cfi_offset 14, -4
2256:FreeRTOS-Kernel/queue.c **** 
 4969              		.loc 1 2256 5 is_stmt 1 view .LVU1508
 4970              	.LVL418:
2258:FreeRTOS-Kernel/queue.c **** 
 4971              		.loc 1 2258 38 view .LVU1509
2260:FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4972              		.loc 1 2260 5 view .LVU1510
 4973 0002 10B1     		cbz	r0, .L389
2260:FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4974              		.loc 1 2260 28 discriminator 2 view .LVU1511
2261:FreeRTOS-Kernel/queue.c **** 
 4975              		.loc 1 2261 33 discriminator 2 view .LVU1512
2265:FreeRTOS-Kernel/queue.c ****     }
 4976              		.loc 1 2265 9 discriminator 2 view .LVU1513
 4977 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 4978              	.LVL419:
2292:FreeRTOS-Kernel/queue.c ****     }
 4979              		.loc 1 2292 9 discriminator 2 view .LVU1514
2296:FreeRTOS-Kernel/queue.c **** }
 4980              		.loc 1 2296 31 discriminator 2 view .LVU1515
2297:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 4981              		.loc 1 2297 1 is_stmt 0 discriminator 2 view .LVU1516
 4982 0008 08BD     		pop	{r3, pc}
 4983              	.LVL420:
 4984              	.L389:
2260:FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4985              		.loc 1 2260 5 is_stmt 1 view .LVU1517
 4986              	.LBB258:
 4987              	.LBI258:
 213:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** {
 4988              		.loc 2 213 30 view .LVU1518
 4989              	.LBB259:
 215:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h **** 
 4990              		.loc 2 215 5 view .LVU1519
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 4991              		.loc 2 217 5 view .LVU1520
ARM GAS  /tmp/ccnrBCYQ.s 			page 171


 4992              		.syntax unified
 4993              	@ 217 "FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h" 1
 4994 000a 4FF05003 		   mov r3, #80                                              
 4995 000e 83F31188 	   msr basepri, r3                                         
 4996 0012 BFF36F8F 	   isb                                                     
 4997 0016 BFF34F8F 	   dsb                                                     
 4998              	
 4999              	@ 0 "" 2
 5000              	.LVL421:
 5001              		.thumb
 5002              		.syntax unified
 5003              	.L387:
 217:FreeRTOS-Kernel/portable/GCC/ARM_CM4F/portmacro.h ****     (
 5004              		.loc 2 217 5 is_stmt 0 view .LVU1521
 5005              	.LBE259:
 5006              	.LBE258:
2260:FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5007              		.loc 1 2260 5 is_stmt 1 discriminator 1 view .LVU1522
2260:FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
 5008              		.loc 1 2260 5 discriminator 1 view .LVU1523
 5009 001a FEE7     		b	.L387
 5010              		.cfi_endproc
 5011              	.LFE25:
 5013              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 5014              		.align	1
 5015              		.global	vQueueWaitForMessageRestricted
 5016              		.syntax unified
 5017              		.thumb
 5018              		.thumb_func
 5020              	vQueueWaitForMessageRestricted:
 5021              	.LVL422:
 5022              	.LFB39:
3126:FreeRTOS-Kernel/queue.c **** 
3127:FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
3128:FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
3129:FreeRTOS-Kernel/queue.c **** 
3130:FreeRTOS-Kernel/queue.c **** #if ( configUSE_TIMERS == 1 )
3131:FreeRTOS-Kernel/queue.c **** 
3132:FreeRTOS-Kernel/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
3133:FreeRTOS-Kernel/queue.c ****                                          TickType_t xTicksToWait,
3134:FreeRTOS-Kernel/queue.c ****                                          const BaseType_t xWaitIndefinitely )
3135:FreeRTOS-Kernel/queue.c ****     {
 5023              		.loc 1 3135 5 view -0
 5024              		.cfi_startproc
 5025              		@ args = 0, pretend = 0, frame = 0
 5026              		@ frame_needed = 0, uses_anonymous_args = 0
 5027              		.loc 1 3135 5 is_stmt 0 view .LVU1525
 5028 0000 70B5     		push	{r4, r5, r6, lr}
 5029              	.LCFI53:
 5030              		.cfi_def_cfa_offset 16
 5031              		.cfi_offset 4, -16
 5032              		.cfi_offset 5, -12
 5033              		.cfi_offset 6, -8
 5034              		.cfi_offset 14, -4
 5035 0002 0446     		mov	r4, r0
 5036 0004 0D46     		mov	r5, r1
 5037 0006 1646     		mov	r6, r2
ARM GAS  /tmp/ccnrBCYQ.s 			page 172


3136:FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
 5038              		.loc 1 3136 9 is_stmt 1 view .LVU1526
 5039              	.LVL423:
3137:FreeRTOS-Kernel/queue.c **** 
3138:FreeRTOS-Kernel/queue.c ****         traceENTER_vQueueWaitForMessageRestricted( xQueue, xTicksToWait, xWaitIndefinitely );
 5040              		.loc 1 3138 93 view .LVU1527
3139:FreeRTOS-Kernel/queue.c **** 
3140:FreeRTOS-Kernel/queue.c ****         /* This function should not be called by application code hence the
3141:FreeRTOS-Kernel/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3142:FreeRTOS-Kernel/queue.c ****          * designed for use by kernel code, and has special calling requirements.
3143:FreeRTOS-Kernel/queue.c ****          * It can result in vListInsert() being called on a list that can only
3144:FreeRTOS-Kernel/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
3145:FreeRTOS-Kernel/queue.c ****          * so it should be called with the scheduler locked and not from a critical
3146:FreeRTOS-Kernel/queue.c ****          * section. */
3147:FreeRTOS-Kernel/queue.c **** 
3148:FreeRTOS-Kernel/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
3149:FreeRTOS-Kernel/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
3150:FreeRTOS-Kernel/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
3151:FreeRTOS-Kernel/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
3152:FreeRTOS-Kernel/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
3153:FreeRTOS-Kernel/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
3154:FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 5041              		.loc 1 3154 9 view .LVU1528
 5042 0008 FFF7FEFF 		bl	vPortEnterCritical
 5043              	.LVL424:
 5044              		.loc 1 3154 9 view .LVU1529
 5045 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 5046 0010 5BB2     		sxtb	r3, r3
 5047 0012 B3F1FF3F 		cmp	r3, #-1
 5048 0016 0DD0     		beq	.L395
 5049              	.L391:
 5050              		.loc 1 3154 9 discriminator 3 view .LVU1530
 5051 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 5052 001c 5BB2     		sxtb	r3, r3
 5053 001e B3F1FF3F 		cmp	r3, #-1
 5054 0022 0BD0     		beq	.L396
 5055              	.L392:
 5056              		.loc 1 3154 9 discriminator 6 view .LVU1531
 5057 0024 FFF7FEFF 		bl	vPortExitCritical
 5058              	.LVL425:
3155:FreeRTOS-Kernel/queue.c **** 
3156:FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 5059              		.loc 1 3156 9 discriminator 6 view .LVU1532
 5060              		.loc 1 3156 20 is_stmt 0 discriminator 6 view .LVU1533
 5061 0028 A36B     		ldr	r3, [r4, #56]
 5062              		.loc 1 3156 11 discriminator 6 view .LVU1534
 5063 002a 5BB1     		cbz	r3, .L397
 5064              	.L393:
3157:FreeRTOS-Kernel/queue.c ****         {
3158:FreeRTOS-Kernel/queue.c ****             /* There is nothing in the queue, block for the specified period. */
3159:FreeRTOS-Kernel/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
3160:FreeRTOS-Kernel/queue.c ****         }
3161:FreeRTOS-Kernel/queue.c ****         else
3162:FreeRTOS-Kernel/queue.c ****         {
3163:FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 5065              		.loc 1 3163 37 is_stmt 1 view .LVU1535
3164:FreeRTOS-Kernel/queue.c ****         }
ARM GAS  /tmp/ccnrBCYQ.s 			page 173


3165:FreeRTOS-Kernel/queue.c **** 
3166:FreeRTOS-Kernel/queue.c ****         prvUnlockQueue( pxQueue );
 5066              		.loc 1 3166 9 view .LVU1536
 5067 002c 2046     		mov	r0, r4
 5068 002e FFF7FEFF 		bl	prvUnlockQueue
 5069              	.LVL426:
3167:FreeRTOS-Kernel/queue.c **** 
3168:FreeRTOS-Kernel/queue.c ****         traceRETURN_vQueueWaitForMessageRestricted();
 5070              		.loc 1 3168 53 view .LVU1537
3169:FreeRTOS-Kernel/queue.c ****     }
 5071              		.loc 1 3169 5 is_stmt 0 view .LVU1538
 5072 0032 70BD     		pop	{r4, r5, r6, pc}
 5073              	.LVL427:
 5074              	.L395:
3154:FreeRTOS-Kernel/queue.c **** 
 5075              		.loc 1 3154 9 is_stmt 1 discriminator 1 view .LVU1539
 5076 0034 0023     		movs	r3, #0
 5077 0036 84F84430 		strb	r3, [r4, #68]
 5078 003a EDE7     		b	.L391
 5079              	.L396:
3154:FreeRTOS-Kernel/queue.c **** 
 5080              		.loc 1 3154 9 discriminator 4 view .LVU1540
 5081 003c 0023     		movs	r3, #0
 5082 003e 84F84530 		strb	r3, [r4, #69]
 5083 0042 EFE7     		b	.L392
 5084              	.L397:
3159:FreeRTOS-Kernel/queue.c ****         }
 5085              		.loc 1 3159 13 view .LVU1541
 5086 0044 3246     		mov	r2, r6
 5087 0046 2946     		mov	r1, r5
 5088 0048 04F12400 		add	r0, r4, #36
 5089 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 5090              	.LVL428:
 5091 0050 ECE7     		b	.L393
 5092              		.cfi_endproc
 5093              	.LFE39:
 5095              		.global	xQueueRegistry
 5096              		.section	.bss.xQueueRegistry,"aw",%nobits
 5097              		.align	2
 5100              	xQueueRegistry:
 5101 0000 00000000 		.space	64
 5101      00000000 
 5101      00000000 
 5101      00000000 
 5101      00000000 
 5102              		.text
 5103              	.Letext0:
 5104              		.file 3 "/usr/share/arm-gnu-toolchain/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 5105              		.file 4 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 5106              		.file 5 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 5107              		.file 6 "FreeRTOS-Kernel/include/FreeRTOS.h"
 5108              		.file 7 "FreeRTOS-Kernel/include/list.h"
 5109              		.file 8 "FreeRTOS-Kernel/include/task.h"
 5110              		.file 9 "FreeRTOS-Kernel/include/queue.h"
 5111              		.file 10 "/usr/share/arm-gnu-toolchain/arm-none-eabi/include/string.h"
 5112              		.file 11 "<built-in>"
ARM GAS  /tmp/ccnrBCYQ.s 			page 174


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccnrBCYQ.s:21     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
     /tmp/ccnrBCYQ.s:26     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
     /tmp/ccnrBCYQ.s:60     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccnrBCYQ.s:65     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccnrBCYQ.s:113    .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccnrBCYQ.s:118    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccnrBCYQ.s:163    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccnrBCYQ.s:168    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccnrBCYQ.s:327    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccnrBCYQ.s:332    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccnrBCYQ.s:392    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccnrBCYQ.s:397    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccnrBCYQ.s:522    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccnrBCYQ.s:528    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccnrBCYQ.s:724    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccnrBCYQ.s:729    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccnrBCYQ.s:782    .text.xQueueGenericCreateStatic:0000000000000000 $t
     /tmp/ccnrBCYQ.s:788    .text.xQueueGenericCreateStatic:0000000000000000 xQueueGenericCreateStatic
     /tmp/ccnrBCYQ.s:949    .text.xQueueGenericGetStaticBuffers:0000000000000000 $t
     /tmp/ccnrBCYQ.s:955    .text.xQueueGenericGetStaticBuffers:0000000000000000 xQueueGenericGetStaticBuffers
     /tmp/ccnrBCYQ.s:1050   .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 $t
     /tmp/ccnrBCYQ.s:1056   .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 xQueueCreateCountingSemaphoreStatic
     /tmp/ccnrBCYQ.s:1142   .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccnrBCYQ.s:1148   .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccnrBCYQ.s:1562   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccnrBCYQ.s:1567   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccnrBCYQ.s:1615   .text.xQueueCreateMutexStatic:0000000000000000 $t
     /tmp/ccnrBCYQ.s:1621   .text.xQueueCreateMutexStatic:0000000000000000 xQueueCreateMutexStatic
     /tmp/ccnrBCYQ.s:1675   .text.xQueueGiveMutexRecursive:0000000000000000 $t
     /tmp/ccnrBCYQ.s:1681   .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
     /tmp/ccnrBCYQ.s:1781   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:1787   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccnrBCYQ.s:2096   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:2102   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccnrBCYQ.s:2410   .text.xQueueReceive:0000000000000000 $t
     /tmp/ccnrBCYQ.s:2416   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/ccnrBCYQ.s:2790   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/ccnrBCYQ.s:2796   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/ccnrBCYQ.s:3231   .text.xQueueTakeMutexRecursive:0000000000000000 $t
     /tmp/ccnrBCYQ.s:3237   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
     /tmp/ccnrBCYQ.s:3350   .text.xQueuePeek:0000000000000000 $t
     /tmp/ccnrBCYQ.s:3356   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/ccnrBCYQ.s:3732   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:3738   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccnrBCYQ.s:4010   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4016   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccnrBCYQ.s:4212   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4218   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccnrBCYQ.s:4287   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4293   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccnrBCYQ.s:4366   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4372   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccnrBCYQ.s:4425   .text.uxQueueGetQueueItemSize:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4431   .text.uxQueueGetQueueItemSize:0000000000000000 uxQueueGetQueueItemSize
     /tmp/ccnrBCYQ.s:4451   .text.uxQueueGetQueueLength:0000000000000000 $t
ARM GAS  /tmp/ccnrBCYQ.s 			page 175


     /tmp/ccnrBCYQ.s:4457   .text.uxQueueGetQueueLength:0000000000000000 uxQueueGetQueueLength
     /tmp/ccnrBCYQ.s:4477   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4483   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccnrBCYQ.s:4546   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4552   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccnrBCYQ.s:4618   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4624   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccnrBCYQ.s:4760   .text.vQueueAddToRegistry:000000000000005c $d
     /tmp/ccnrBCYQ.s:5100   .bss.xQueueRegistry:0000000000000000 xQueueRegistry
     /tmp/ccnrBCYQ.s:4765   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4771   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccnrBCYQ.s:4854   .text.pcQueueGetName:0000000000000038 $d
     /tmp/ccnrBCYQ.s:4859   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4865   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccnrBCYQ.s:4945   .text.vQueueUnregisterQueue:0000000000000040 $d
     /tmp/ccnrBCYQ.s:4950   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccnrBCYQ.s:4956   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccnrBCYQ.s:5014   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
     /tmp/ccnrBCYQ.s:5020   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted
     /tmp/ccnrBCYQ.s:5097   .bss.xQueueRegistry:0000000000000000 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
uxTaskGetNumberOfTasks
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vTaskPlaceOnEventListRestricted
